
Sensor Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a228  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800a2e8  0800a2e8  0001a2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a76c  0800a76c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a774  0800a774  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a774  0800a774  0001a774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a778  0800a778  0001a778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000200  0800a97c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800a97c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f9b  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000286f  00000000  00000000  00034206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec3  00000000  00000000  00037d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188fb  00000000  00000000  00038bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164da  00000000  00000000  000514f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f57  00000000  00000000  000679d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056e0  00000000  00000000  00100928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00106008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000200 	.word	0x20000200
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a2cc 	.word	0x0800a2cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000204 	.word	0x20000204
 8000100:	0800a2cc 	.word	0x0800a2cc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fb4b 	bl	8001ad4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa9b 	bl	8001984 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fb3d 	bl	8001ad4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fb33 	bl	8001ad4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fac3 	bl	8001a08 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fab9 	bl	8001a08 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 fa9e 	bl	8002a44 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 fa99 	bl	8002a44 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_fadd>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	4647      	mov	r7, r8
 8000680:	46ce      	mov	lr, r9
 8000682:	024a      	lsls	r2, r1, #9
 8000684:	0243      	lsls	r3, r0, #9
 8000686:	0045      	lsls	r5, r0, #1
 8000688:	0fc4      	lsrs	r4, r0, #31
 800068a:	0a50      	lsrs	r0, r2, #9
 800068c:	4680      	mov	r8, r0
 800068e:	0048      	lsls	r0, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0e00      	lsrs	r0, r0, #24
 8000694:	0992      	lsrs	r2, r2, #6
 8000696:	4694      	mov	ip, r2
 8000698:	b580      	push	{r7, lr}
 800069a:	001e      	movs	r6, r3
 800069c:	4681      	mov	r9, r0
 800069e:	0002      	movs	r2, r0
 80006a0:	0e2d      	lsrs	r5, r5, #24
 80006a2:	00df      	lsls	r7, r3, #3
 80006a4:	0fc9      	lsrs	r1, r1, #31
 80006a6:	428c      	cmp	r4, r1
 80006a8:	d024      	beq.n	80006f4 <__aeabi_fadd+0x78>
 80006aa:	1a28      	subs	r0, r5, r0
 80006ac:	2800      	cmp	r0, #0
 80006ae:	dd0e      	ble.n	80006ce <__aeabi_fadd+0x52>
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d13e      	bne.n	8000732 <__aeabi_fadd+0xb6>
 80006b4:	4662      	mov	r2, ip
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x40>
 80006ba:	e0fd      	b.n	80008b8 <__aeabi_fadd+0x23c>
 80006bc:	1e42      	subs	r2, r0, #1
 80006be:	2801      	cmp	r0, #1
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x48>
 80006c2:	e137      	b.n	8000934 <__aeabi_fadd+0x2b8>
 80006c4:	28ff      	cmp	r0, #255	; 0xff
 80006c6:	d100      	bne.n	80006ca <__aeabi_fadd+0x4e>
 80006c8:	e0a9      	b.n	800081e <__aeabi_fadd+0x1a2>
 80006ca:	0010      	movs	r0, r2
 80006cc:	e039      	b.n	8000742 <__aeabi_fadd+0xc6>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d063      	beq.n	800079a <__aeabi_fadd+0x11e>
 80006d2:	464b      	mov	r3, r9
 80006d4:	1b52      	subs	r2, r2, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x60>
 80006da:	e0e0      	b.n	800089e <__aeabi_fadd+0x222>
 80006dc:	2f00      	cmp	r7, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x66>
 80006e0:	e0ce      	b.n	8000880 <__aeabi_fadd+0x204>
 80006e2:	1e53      	subs	r3, r2, #1
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x6e>
 80006e8:	e155      	b.n	8000996 <__aeabi_fadd+0x31a>
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fadd+0x74>
 80006ee:	e094      	b.n	800081a <__aeabi_fadd+0x19e>
 80006f0:	001a      	movs	r2, r3
 80006f2:	e0d9      	b.n	80008a8 <__aeabi_fadd+0x22c>
 80006f4:	1a2a      	subs	r2, r5, r0
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_fadd+0x80>
 80006fa:	e099      	b.n	8000830 <__aeabi_fadd+0x1b4>
 80006fc:	2800      	cmp	r0, #0
 80006fe:	d062      	beq.n	80007c6 <__aeabi_fadd+0x14a>
 8000700:	2dff      	cmp	r5, #255	; 0xff
 8000702:	d100      	bne.n	8000706 <__aeabi_fadd+0x8a>
 8000704:	e08b      	b.n	800081e <__aeabi_fadd+0x1a2>
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	4661      	mov	r1, ip
 800070a:	04db      	lsls	r3, r3, #19
 800070c:	4319      	orrs	r1, r3
 800070e:	468c      	mov	ip, r1
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dc00      	bgt.n	8000716 <__aeabi_fadd+0x9a>
 8000714:	e0d2      	b.n	80008bc <__aeabi_fadd+0x240>
 8000716:	2301      	movs	r3, #1
 8000718:	19db      	adds	r3, r3, r7
 800071a:	015a      	lsls	r2, r3, #5
 800071c:	d56a      	bpl.n	80007f4 <__aeabi_fadd+0x178>
 800071e:	3501      	adds	r5, #1
 8000720:	2dff      	cmp	r5, #255	; 0xff
 8000722:	d05b      	beq.n	80007dc <__aeabi_fadd+0x160>
 8000724:	2201      	movs	r2, #1
 8000726:	49a3      	ldr	r1, [pc, #652]	; (80009b4 <__aeabi_fadd+0x338>)
 8000728:	401a      	ands	r2, r3
 800072a:	085b      	lsrs	r3, r3, #1
 800072c:	400b      	ands	r3, r1
 800072e:	4313      	orrs	r3, r2
 8000730:	e01c      	b.n	800076c <__aeabi_fadd+0xf0>
 8000732:	2dff      	cmp	r5, #255	; 0xff
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0xbc>
 8000736:	e072      	b.n	800081e <__aeabi_fadd+0x1a2>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	4662      	mov	r2, ip
 800073c:	04db      	lsls	r3, r3, #19
 800073e:	431a      	orrs	r2, r3
 8000740:	4694      	mov	ip, r2
 8000742:	281b      	cmp	r0, #27
 8000744:	dc00      	bgt.n	8000748 <__aeabi_fadd+0xcc>
 8000746:	e090      	b.n	800086a <__aeabi_fadd+0x1ee>
 8000748:	2301      	movs	r3, #1
 800074a:	1afb      	subs	r3, r7, r3
 800074c:	015a      	lsls	r2, r3, #5
 800074e:	d551      	bpl.n	80007f4 <__aeabi_fadd+0x178>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	099e      	lsrs	r6, r3, #6
 8000754:	0030      	movs	r0, r6
 8000756:	f002 f957 	bl	8002a08 <__clzsi2>
 800075a:	0033      	movs	r3, r6
 800075c:	3805      	subs	r0, #5
 800075e:	4083      	lsls	r3, r0
 8000760:	4285      	cmp	r5, r0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fadd+0xea>
 8000764:	e075      	b.n	8000852 <__aeabi_fadd+0x1d6>
 8000766:	4a94      	ldr	r2, [pc, #592]	; (80009b8 <__aeabi_fadd+0x33c>)
 8000768:	1a2d      	subs	r5, r5, r0
 800076a:	4013      	ands	r3, r2
 800076c:	075a      	lsls	r2, r3, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fadd+0xfe>
 8000770:	220f      	movs	r2, #15
 8000772:	401a      	ands	r2, r3
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fadd+0xfe>
 8000778:	3304      	adds	r3, #4
 800077a:	015a      	lsls	r2, r3, #5
 800077c:	d53c      	bpl.n	80007f8 <__aeabi_fadd+0x17c>
 800077e:	1c68      	adds	r0, r5, #1
 8000780:	2dfe      	cmp	r5, #254	; 0xfe
 8000782:	d02b      	beq.n	80007dc <__aeabi_fadd+0x160>
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	0a5e      	lsrs	r6, r3, #9
 8000788:	b2c0      	uxtb	r0, r0
 800078a:	05c0      	lsls	r0, r0, #23
 800078c:	4330      	orrs	r0, r6
 800078e:	07e4      	lsls	r4, r4, #31
 8000790:	4320      	orrs	r0, r4
 8000792:	bcc0      	pop	{r6, r7}
 8000794:	46b9      	mov	r9, r7
 8000796:	46b0      	mov	r8, r6
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	20fe      	movs	r0, #254	; 0xfe
 800079c:	1c6a      	adds	r2, r5, #1
 800079e:	4210      	tst	r0, r2
 80007a0:	d172      	bne.n	8000888 <__aeabi_fadd+0x20c>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x12c>
 80007a6:	e0ae      	b.n	8000906 <__aeabi_fadd+0x28a>
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x132>
 80007ac:	e0ec      	b.n	8000988 <__aeabi_fadd+0x30c>
 80007ae:	4663      	mov	r3, ip
 80007b0:	2000      	movs	r0, #0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0e9      	beq.n	800078a <__aeabi_fadd+0x10e>
 80007b6:	1afb      	subs	r3, r7, r3
 80007b8:	015a      	lsls	r2, r3, #5
 80007ba:	d400      	bmi.n	80007be <__aeabi_fadd+0x142>
 80007bc:	e0f3      	b.n	80009a6 <__aeabi_fadd+0x32a>
 80007be:	4663      	mov	r3, ip
 80007c0:	000c      	movs	r4, r1
 80007c2:	1bdb      	subs	r3, r3, r7
 80007c4:	e7d2      	b.n	800076c <__aeabi_fadd+0xf0>
 80007c6:	4661      	mov	r1, ip
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d05b      	beq.n	8000884 <__aeabi_fadd+0x208>
 80007cc:	1e51      	subs	r1, r2, #1
 80007ce:	2a01      	cmp	r2, #1
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x158>
 80007d2:	e0a7      	b.n	8000924 <__aeabi_fadd+0x2a8>
 80007d4:	2aff      	cmp	r2, #255	; 0xff
 80007d6:	d022      	beq.n	800081e <__aeabi_fadd+0x1a2>
 80007d8:	000a      	movs	r2, r1
 80007da:	e799      	b.n	8000710 <__aeabi_fadd+0x94>
 80007dc:	20ff      	movs	r0, #255	; 0xff
 80007de:	2600      	movs	r6, #0
 80007e0:	e7d3      	b.n	800078a <__aeabi_fadd+0x10e>
 80007e2:	21fe      	movs	r1, #254	; 0xfe
 80007e4:	1c6a      	adds	r2, r5, #1
 80007e6:	4211      	tst	r1, r2
 80007e8:	d073      	beq.n	80008d2 <__aeabi_fadd+0x256>
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d0f6      	beq.n	80007dc <__aeabi_fadd+0x160>
 80007ee:	0015      	movs	r5, r2
 80007f0:	4467      	add	r7, ip
 80007f2:	087b      	lsrs	r3, r7, #1
 80007f4:	075a      	lsls	r2, r3, #29
 80007f6:	d1bb      	bne.n	8000770 <__aeabi_fadd+0xf4>
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	2dff      	cmp	r5, #255	; 0xff
 80007fc:	d00f      	beq.n	800081e <__aeabi_fadd+0x1a2>
 80007fe:	025b      	lsls	r3, r3, #9
 8000800:	0a5e      	lsrs	r6, r3, #9
 8000802:	b2e8      	uxtb	r0, r5
 8000804:	e7c1      	b.n	800078a <__aeabi_fadd+0x10e>
 8000806:	4662      	mov	r2, ip
 8000808:	2a00      	cmp	r2, #0
 800080a:	d008      	beq.n	800081e <__aeabi_fadd+0x1a2>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	03d2      	lsls	r2, r2, #15
 8000810:	4213      	tst	r3, r2
 8000812:	d004      	beq.n	800081e <__aeabi_fadd+0x1a2>
 8000814:	4640      	mov	r0, r8
 8000816:	4210      	tst	r0, r2
 8000818:	d101      	bne.n	800081e <__aeabi_fadd+0x1a2>
 800081a:	000c      	movs	r4, r1
 800081c:	4643      	mov	r3, r8
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0dc      	beq.n	80007dc <__aeabi_fadd+0x160>
 8000822:	2680      	movs	r6, #128	; 0x80
 8000824:	03f6      	lsls	r6, r6, #15
 8000826:	431e      	orrs	r6, r3
 8000828:	0276      	lsls	r6, r6, #9
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	e7ac      	b.n	800078a <__aeabi_fadd+0x10e>
 8000830:	2a00      	cmp	r2, #0
 8000832:	d0d6      	beq.n	80007e2 <__aeabi_fadd+0x166>
 8000834:	1b42      	subs	r2, r0, r5
 8000836:	2d00      	cmp	r5, #0
 8000838:	d05c      	beq.n	80008f4 <__aeabi_fadd+0x278>
 800083a:	28ff      	cmp	r0, #255	; 0xff
 800083c:	d0ee      	beq.n	800081c <__aeabi_fadd+0x1a0>
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	04db      	lsls	r3, r3, #19
 8000842:	431f      	orrs	r7, r3
 8000844:	2a1b      	cmp	r2, #27
 8000846:	dc00      	bgt.n	800084a <__aeabi_fadd+0x1ce>
 8000848:	e082      	b.n	8000950 <__aeabi_fadd+0x2d4>
 800084a:	2301      	movs	r3, #1
 800084c:	464d      	mov	r5, r9
 800084e:	4463      	add	r3, ip
 8000850:	e763      	b.n	800071a <__aeabi_fadd+0x9e>
 8000852:	2220      	movs	r2, #32
 8000854:	1b40      	subs	r0, r0, r5
 8000856:	3001      	adds	r0, #1
 8000858:	1a12      	subs	r2, r2, r0
 800085a:	0019      	movs	r1, r3
 800085c:	4093      	lsls	r3, r2
 800085e:	40c1      	lsrs	r1, r0
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	4193      	sbcs	r3, r2
 8000864:	2500      	movs	r5, #0
 8000866:	430b      	orrs	r3, r1
 8000868:	e780      	b.n	800076c <__aeabi_fadd+0xf0>
 800086a:	2320      	movs	r3, #32
 800086c:	4661      	mov	r1, ip
 800086e:	1a1b      	subs	r3, r3, r0
 8000870:	4099      	lsls	r1, r3
 8000872:	4662      	mov	r2, ip
 8000874:	000b      	movs	r3, r1
 8000876:	40c2      	lsrs	r2, r0
 8000878:	1e59      	subs	r1, r3, #1
 800087a:	418b      	sbcs	r3, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	e764      	b.n	800074a <__aeabi_fadd+0xce>
 8000880:	000c      	movs	r4, r1
 8000882:	4643      	mov	r3, r8
 8000884:	0015      	movs	r5, r2
 8000886:	e7b8      	b.n	80007fa <__aeabi_fadd+0x17e>
 8000888:	4663      	mov	r3, ip
 800088a:	1afe      	subs	r6, r7, r3
 800088c:	0173      	lsls	r3, r6, #5
 800088e:	d445      	bmi.n	800091c <__aeabi_fadd+0x2a0>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fadd+0x21a>
 8000894:	e75e      	b.n	8000754 <__aeabi_fadd+0xd8>
 8000896:	2400      	movs	r4, #0
 8000898:	2000      	movs	r0, #0
 800089a:	2600      	movs	r6, #0
 800089c:	e775      	b.n	800078a <__aeabi_fadd+0x10e>
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d0bb      	beq.n	800081a <__aeabi_fadd+0x19e>
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	04db      	lsls	r3, r3, #19
 80008a6:	431f      	orrs	r7, r3
 80008a8:	2a1b      	cmp	r2, #27
 80008aa:	dd47      	ble.n	800093c <__aeabi_fadd+0x2c0>
 80008ac:	2301      	movs	r3, #1
 80008ae:	4662      	mov	r2, ip
 80008b0:	000c      	movs	r4, r1
 80008b2:	464d      	mov	r5, r9
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	e749      	b.n	800074c <__aeabi_fadd+0xd0>
 80008b8:	0005      	movs	r5, r0
 80008ba:	e79e      	b.n	80007fa <__aeabi_fadd+0x17e>
 80008bc:	4661      	mov	r1, ip
 80008be:	2320      	movs	r3, #32
 80008c0:	40d1      	lsrs	r1, r2
 80008c2:	1a9b      	subs	r3, r3, r2
 80008c4:	4662      	mov	r2, ip
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	430b      	orrs	r3, r1
 80008d0:	e722      	b.n	8000718 <__aeabi_fadd+0x9c>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d146      	bne.n	8000964 <__aeabi_fadd+0x2e8>
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d062      	beq.n	80009a0 <__aeabi_fadd+0x324>
 80008da:	4663      	mov	r3, ip
 80008dc:	2000      	movs	r0, #0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x268>
 80008e2:	e752      	b.n	800078a <__aeabi_fadd+0x10e>
 80008e4:	003b      	movs	r3, r7
 80008e6:	4463      	add	r3, ip
 80008e8:	015a      	lsls	r2, r3, #5
 80008ea:	d583      	bpl.n	80007f4 <__aeabi_fadd+0x178>
 80008ec:	4a32      	ldr	r2, [pc, #200]	; (80009b8 <__aeabi_fadd+0x33c>)
 80008ee:	3501      	adds	r5, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	e77f      	b.n	80007f4 <__aeabi_fadd+0x178>
 80008f4:	2f00      	cmp	r7, #0
 80008f6:	d0c4      	beq.n	8000882 <__aeabi_fadd+0x206>
 80008f8:	1e53      	subs	r3, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d012      	beq.n	8000924 <__aeabi_fadd+0x2a8>
 80008fe:	2aff      	cmp	r2, #255	; 0xff
 8000900:	d08c      	beq.n	800081c <__aeabi_fadd+0x1a0>
 8000902:	001a      	movs	r2, r3
 8000904:	e79e      	b.n	8000844 <__aeabi_fadd+0x1c8>
 8000906:	2f00      	cmp	r7, #0
 8000908:	d000      	beq.n	800090c <__aeabi_fadd+0x290>
 800090a:	e77c      	b.n	8000806 <__aeabi_fadd+0x18a>
 800090c:	4663      	mov	r3, ip
 800090e:	2b00      	cmp	r3, #0
 8000910:	d183      	bne.n	800081a <__aeabi_fadd+0x19e>
 8000912:	2680      	movs	r6, #128	; 0x80
 8000914:	2400      	movs	r4, #0
 8000916:	20ff      	movs	r0, #255	; 0xff
 8000918:	03f6      	lsls	r6, r6, #15
 800091a:	e736      	b.n	800078a <__aeabi_fadd+0x10e>
 800091c:	4663      	mov	r3, ip
 800091e:	000c      	movs	r4, r1
 8000920:	1bde      	subs	r6, r3, r7
 8000922:	e717      	b.n	8000754 <__aeabi_fadd+0xd8>
 8000924:	003b      	movs	r3, r7
 8000926:	4463      	add	r3, ip
 8000928:	2501      	movs	r5, #1
 800092a:	015a      	lsls	r2, r3, #5
 800092c:	d400      	bmi.n	8000930 <__aeabi_fadd+0x2b4>
 800092e:	e761      	b.n	80007f4 <__aeabi_fadd+0x178>
 8000930:	2502      	movs	r5, #2
 8000932:	e6f7      	b.n	8000724 <__aeabi_fadd+0xa8>
 8000934:	4663      	mov	r3, ip
 8000936:	2501      	movs	r5, #1
 8000938:	1afb      	subs	r3, r7, r3
 800093a:	e707      	b.n	800074c <__aeabi_fadd+0xd0>
 800093c:	2320      	movs	r3, #32
 800093e:	1a9b      	subs	r3, r3, r2
 8000940:	0038      	movs	r0, r7
 8000942:	409f      	lsls	r7, r3
 8000944:	003b      	movs	r3, r7
 8000946:	40d0      	lsrs	r0, r2
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	4193      	sbcs	r3, r2
 800094c:	4303      	orrs	r3, r0
 800094e:	e7ae      	b.n	80008ae <__aeabi_fadd+0x232>
 8000950:	2320      	movs	r3, #32
 8000952:	1a9b      	subs	r3, r3, r2
 8000954:	0039      	movs	r1, r7
 8000956:	409f      	lsls	r7, r3
 8000958:	003b      	movs	r3, r7
 800095a:	40d1      	lsrs	r1, r2
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	4193      	sbcs	r3, r2
 8000960:	430b      	orrs	r3, r1
 8000962:	e773      	b.n	800084c <__aeabi_fadd+0x1d0>
 8000964:	2f00      	cmp	r7, #0
 8000966:	d100      	bne.n	800096a <__aeabi_fadd+0x2ee>
 8000968:	e758      	b.n	800081c <__aeabi_fadd+0x1a0>
 800096a:	4662      	mov	r2, ip
 800096c:	2a00      	cmp	r2, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x2f6>
 8000970:	e755      	b.n	800081e <__aeabi_fadd+0x1a2>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	4213      	tst	r3, r2
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x300>
 800097a:	e750      	b.n	800081e <__aeabi_fadd+0x1a2>
 800097c:	4641      	mov	r1, r8
 800097e:	4211      	tst	r1, r2
 8000980:	d000      	beq.n	8000984 <__aeabi_fadd+0x308>
 8000982:	e74c      	b.n	800081e <__aeabi_fadd+0x1a2>
 8000984:	4643      	mov	r3, r8
 8000986:	e74a      	b.n	800081e <__aeabi_fadd+0x1a2>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d083      	beq.n	8000896 <__aeabi_fadd+0x21a>
 800098e:	000c      	movs	r4, r1
 8000990:	4646      	mov	r6, r8
 8000992:	2000      	movs	r0, #0
 8000994:	e6f9      	b.n	800078a <__aeabi_fadd+0x10e>
 8000996:	4663      	mov	r3, ip
 8000998:	000c      	movs	r4, r1
 800099a:	1bdb      	subs	r3, r3, r7
 800099c:	3501      	adds	r5, #1
 800099e:	e6d5      	b.n	800074c <__aeabi_fadd+0xd0>
 80009a0:	4646      	mov	r6, r8
 80009a2:	2000      	movs	r0, #0
 80009a4:	e6f1      	b.n	800078a <__aeabi_fadd+0x10e>
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d000      	beq.n	80009ac <__aeabi_fadd+0x330>
 80009aa:	e723      	b.n	80007f4 <__aeabi_fadd+0x178>
 80009ac:	2400      	movs	r4, #0
 80009ae:	2600      	movs	r6, #0
 80009b0:	e6eb      	b.n	800078a <__aeabi_fadd+0x10e>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	7dffffff 	.word	0x7dffffff
 80009b8:	fbffffff 	.word	0xfbffffff

080009bc <__aeabi_fmul>:
 80009bc:	0243      	lsls	r3, r0, #9
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	464f      	mov	r7, r9
 80009c4:	4646      	mov	r6, r8
 80009c6:	4699      	mov	r9, r3
 80009c8:	46d6      	mov	lr, sl
 80009ca:	0fc3      	lsrs	r3, r0, #31
 80009cc:	0045      	lsls	r5, r0, #1
 80009ce:	4698      	mov	r8, r3
 80009d0:	b5c0      	push	{r6, r7, lr}
 80009d2:	464b      	mov	r3, r9
 80009d4:	1c0f      	adds	r7, r1, #0
 80009d6:	0e2d      	lsrs	r5, r5, #24
 80009d8:	d100      	bne.n	80009dc <__aeabi_fmul+0x20>
 80009da:	e0cb      	b.n	8000b74 <__aeabi_fmul+0x1b8>
 80009dc:	2dff      	cmp	r5, #255	; 0xff
 80009de:	d100      	bne.n	80009e2 <__aeabi_fmul+0x26>
 80009e0:	e0cf      	b.n	8000b82 <__aeabi_fmul+0x1c6>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	04d2      	lsls	r2, r2, #19
 80009e8:	431a      	orrs	r2, r3
 80009ea:	2300      	movs	r3, #0
 80009ec:	4691      	mov	r9, r2
 80009ee:	2600      	movs	r6, #0
 80009f0:	469a      	mov	sl, r3
 80009f2:	3d7f      	subs	r5, #127	; 0x7f
 80009f4:	027c      	lsls	r4, r7, #9
 80009f6:	007b      	lsls	r3, r7, #1
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	0e1b      	lsrs	r3, r3, #24
 80009fc:	0fff      	lsrs	r7, r7, #31
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fmul+0x48>
 8000a02:	e0a9      	b.n	8000b58 <__aeabi_fmul+0x19c>
 8000a04:	2bff      	cmp	r3, #255	; 0xff
 8000a06:	d011      	beq.n	8000a2c <__aeabi_fmul+0x70>
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	00e4      	lsls	r4, r4, #3
 8000a0c:	04d2      	lsls	r2, r2, #19
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	4642      	mov	r2, r8
 8000a12:	3b7f      	subs	r3, #127	; 0x7f
 8000a14:	195b      	adds	r3, r3, r5
 8000a16:	407a      	eors	r2, r7
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	1c5d      	adds	r5, r3, #1
 8000a1e:	2e0a      	cmp	r6, #10
 8000a20:	dd13      	ble.n	8000a4a <__aeabi_fmul+0x8e>
 8000a22:	003a      	movs	r2, r7
 8000a24:	2e0b      	cmp	r6, #11
 8000a26:	d047      	beq.n	8000ab8 <__aeabi_fmul+0xfc>
 8000a28:	4647      	mov	r7, r8
 8000a2a:	e03f      	b.n	8000aac <__aeabi_fmul+0xf0>
 8000a2c:	002b      	movs	r3, r5
 8000a2e:	33ff      	adds	r3, #255	; 0xff
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d11e      	bne.n	8000a72 <__aeabi_fmul+0xb6>
 8000a34:	2202      	movs	r2, #2
 8000a36:	4316      	orrs	r6, r2
 8000a38:	4642      	mov	r2, r8
 8000a3a:	3501      	adds	r5, #1
 8000a3c:	407a      	eors	r2, r7
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	35ff      	adds	r5, #255	; 0xff
 8000a42:	2e0a      	cmp	r6, #10
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_fmul+0x8c>
 8000a46:	e0e4      	b.n	8000c12 <__aeabi_fmul+0x256>
 8000a48:	2002      	movs	r0, #2
 8000a4a:	2e02      	cmp	r6, #2
 8000a4c:	dc1c      	bgt.n	8000a88 <__aeabi_fmul+0xcc>
 8000a4e:	3e01      	subs	r6, #1
 8000a50:	2e01      	cmp	r6, #1
 8000a52:	d842      	bhi.n	8000ada <__aeabi_fmul+0x11e>
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d03d      	beq.n	8000ad4 <__aeabi_fmul+0x118>
 8000a58:	2801      	cmp	r0, #1
 8000a5a:	d166      	bne.n	8000b2a <__aeabi_fmul+0x16e>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	05c0      	lsls	r0, r0, #23
 8000a62:	4308      	orrs	r0, r1
 8000a64:	07d2      	lsls	r2, r2, #31
 8000a66:	4310      	orrs	r0, r2
 8000a68:	bce0      	pop	{r5, r6, r7}
 8000a6a:	46ba      	mov	sl, r7
 8000a6c:	46b1      	mov	r9, r6
 8000a6e:	46a8      	mov	r8, r5
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a72:	2203      	movs	r2, #3
 8000a74:	4316      	orrs	r6, r2
 8000a76:	4642      	mov	r2, r8
 8000a78:	3501      	adds	r5, #1
 8000a7a:	407a      	eors	r2, r7
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	35ff      	adds	r5, #255	; 0xff
 8000a80:	2e0a      	cmp	r6, #10
 8000a82:	dd00      	ble.n	8000a86 <__aeabi_fmul+0xca>
 8000a84:	e0e4      	b.n	8000c50 <__aeabi_fmul+0x294>
 8000a86:	2003      	movs	r0, #3
 8000a88:	2101      	movs	r1, #1
 8000a8a:	40b1      	lsls	r1, r6
 8000a8c:	26a6      	movs	r6, #166	; 0xa6
 8000a8e:	00f6      	lsls	r6, r6, #3
 8000a90:	4231      	tst	r1, r6
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_fmul+0xee>
 8000a94:	2690      	movs	r6, #144	; 0x90
 8000a96:	00b6      	lsls	r6, r6, #2
 8000a98:	4231      	tst	r1, r6
 8000a9a:	d116      	bne.n	8000aca <__aeabi_fmul+0x10e>
 8000a9c:	3eb9      	subs	r6, #185	; 0xb9
 8000a9e:	3eff      	subs	r6, #255	; 0xff
 8000aa0:	420e      	tst	r6, r1
 8000aa2:	d01a      	beq.n	8000ada <__aeabi_fmul+0x11e>
 8000aa4:	46a1      	mov	r9, r4
 8000aa6:	4682      	mov	sl, r0
 8000aa8:	e000      	b.n	8000aac <__aeabi_fmul+0xf0>
 8000aaa:	0017      	movs	r7, r2
 8000aac:	4653      	mov	r3, sl
 8000aae:	003a      	movs	r2, r7
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d00f      	beq.n	8000ad4 <__aeabi_fmul+0x118>
 8000ab4:	464c      	mov	r4, r9
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d1cd      	bne.n	8000a58 <__aeabi_fmul+0x9c>
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	03c9      	lsls	r1, r1, #15
 8000ac0:	4321      	orrs	r1, r4
 8000ac2:	0249      	lsls	r1, r1, #9
 8000ac4:	20ff      	movs	r0, #255	; 0xff
 8000ac6:	0a49      	lsrs	r1, r1, #9
 8000ac8:	e7ca      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	2200      	movs	r2, #0
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	03c9      	lsls	r1, r1, #15
 8000ad2:	e7c5      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000ad4:	20ff      	movs	r0, #255	; 0xff
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e7c2      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000ada:	0c20      	lsrs	r0, r4, #16
 8000adc:	4649      	mov	r1, r9
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	0c24      	lsrs	r4, r4, #16
 8000ae2:	0027      	movs	r7, r4
 8000ae4:	0c0e      	lsrs	r6, r1, #16
 8000ae6:	0409      	lsls	r1, r1, #16
 8000ae8:	0c09      	lsrs	r1, r1, #16
 8000aea:	4374      	muls	r4, r6
 8000aec:	434f      	muls	r7, r1
 8000aee:	4346      	muls	r6, r0
 8000af0:	4348      	muls	r0, r1
 8000af2:	0c39      	lsrs	r1, r7, #16
 8000af4:	1900      	adds	r0, r0, r4
 8000af6:	1809      	adds	r1, r1, r0
 8000af8:	428c      	cmp	r4, r1
 8000afa:	d903      	bls.n	8000b04 <__aeabi_fmul+0x148>
 8000afc:	2080      	movs	r0, #128	; 0x80
 8000afe:	0240      	lsls	r0, r0, #9
 8000b00:	4684      	mov	ip, r0
 8000b02:	4466      	add	r6, ip
 8000b04:	043f      	lsls	r7, r7, #16
 8000b06:	0408      	lsls	r0, r1, #16
 8000b08:	0c3f      	lsrs	r7, r7, #16
 8000b0a:	19c0      	adds	r0, r0, r7
 8000b0c:	0184      	lsls	r4, r0, #6
 8000b0e:	1e67      	subs	r7, r4, #1
 8000b10:	41bc      	sbcs	r4, r7
 8000b12:	0c09      	lsrs	r1, r1, #16
 8000b14:	0e80      	lsrs	r0, r0, #26
 8000b16:	1989      	adds	r1, r1, r6
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	0189      	lsls	r1, r1, #6
 8000b1c:	430c      	orrs	r4, r1
 8000b1e:	0109      	lsls	r1, r1, #4
 8000b20:	d571      	bpl.n	8000c06 <__aeabi_fmul+0x24a>
 8000b22:	2301      	movs	r3, #1
 8000b24:	0861      	lsrs	r1, r4, #1
 8000b26:	401c      	ands	r4, r3
 8000b28:	430c      	orrs	r4, r1
 8000b2a:	002b      	movs	r3, r5
 8000b2c:	337f      	adds	r3, #127	; 0x7f
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	dd51      	ble.n	8000bd6 <__aeabi_fmul+0x21a>
 8000b32:	0761      	lsls	r1, r4, #29
 8000b34:	d004      	beq.n	8000b40 <__aeabi_fmul+0x184>
 8000b36:	210f      	movs	r1, #15
 8000b38:	4021      	ands	r1, r4
 8000b3a:	2904      	cmp	r1, #4
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_fmul+0x184>
 8000b3e:	3404      	adds	r4, #4
 8000b40:	0121      	lsls	r1, r4, #4
 8000b42:	d503      	bpl.n	8000b4c <__aeabi_fmul+0x190>
 8000b44:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <__aeabi_fmul+0x298>)
 8000b46:	401c      	ands	r4, r3
 8000b48:	002b      	movs	r3, r5
 8000b4a:	3380      	adds	r3, #128	; 0x80
 8000b4c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4e:	dcc1      	bgt.n	8000ad4 <__aeabi_fmul+0x118>
 8000b50:	01a1      	lsls	r1, r4, #6
 8000b52:	0a49      	lsrs	r1, r1, #9
 8000b54:	b2d8      	uxtb	r0, r3
 8000b56:	e783      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d12c      	bne.n	8000bb6 <__aeabi_fmul+0x1fa>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4642      	mov	r2, r8
 8000b60:	431e      	orrs	r6, r3
 8000b62:	002b      	movs	r3, r5
 8000b64:	407a      	eors	r2, r7
 8000b66:	2001      	movs	r0, #1
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	1c5d      	adds	r5, r3, #1
 8000b6c:	2e0a      	cmp	r6, #10
 8000b6e:	dd00      	ble.n	8000b72 <__aeabi_fmul+0x1b6>
 8000b70:	e757      	b.n	8000a22 <__aeabi_fmul+0x66>
 8000b72:	e76a      	b.n	8000a4a <__aeabi_fmul+0x8e>
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d110      	bne.n	8000b9a <__aeabi_fmul+0x1de>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2604      	movs	r6, #4
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	469a      	mov	sl, r3
 8000b80:	e738      	b.n	80009f4 <__aeabi_fmul+0x38>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d104      	bne.n	8000b90 <__aeabi_fmul+0x1d4>
 8000b86:	2302      	movs	r3, #2
 8000b88:	2608      	movs	r6, #8
 8000b8a:	25ff      	movs	r5, #255	; 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e731      	b.n	80009f4 <__aeabi_fmul+0x38>
 8000b90:	2303      	movs	r3, #3
 8000b92:	260c      	movs	r6, #12
 8000b94:	25ff      	movs	r5, #255	; 0xff
 8000b96:	469a      	mov	sl, r3
 8000b98:	e72c      	b.n	80009f4 <__aeabi_fmul+0x38>
 8000b9a:	4648      	mov	r0, r9
 8000b9c:	f001 ff34 	bl	8002a08 <__clzsi2>
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	1f43      	subs	r3, r0, #5
 8000ba4:	2576      	movs	r5, #118	; 0x76
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	426d      	negs	r5, r5
 8000bac:	4691      	mov	r9, r2
 8000bae:	2600      	movs	r6, #0
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	1a2d      	subs	r5, r5, r0
 8000bb4:	e71e      	b.n	80009f4 <__aeabi_fmul+0x38>
 8000bb6:	0020      	movs	r0, r4
 8000bb8:	f001 ff26 	bl	8002a08 <__clzsi2>
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	1f43      	subs	r3, r0, #5
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	1a2b      	subs	r3, r5, r0
 8000bc4:	3b76      	subs	r3, #118	; 0x76
 8000bc6:	407a      	eors	r2, r7
 8000bc8:	2000      	movs	r0, #0
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	1c5d      	adds	r5, r3, #1
 8000bce:	2e0a      	cmp	r6, #10
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_fmul+0x218>
 8000bd2:	e726      	b.n	8000a22 <__aeabi_fmul+0x66>
 8000bd4:	e739      	b.n	8000a4a <__aeabi_fmul+0x8e>
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	2b1b      	cmp	r3, #27
 8000bdc:	dd00      	ble.n	8000be0 <__aeabi_fmul+0x224>
 8000bde:	e73d      	b.n	8000a5c <__aeabi_fmul+0xa0>
 8000be0:	359e      	adds	r5, #158	; 0x9e
 8000be2:	0021      	movs	r1, r4
 8000be4:	40ac      	lsls	r4, r5
 8000be6:	40d9      	lsrs	r1, r3
 8000be8:	1e63      	subs	r3, r4, #1
 8000bea:	419c      	sbcs	r4, r3
 8000bec:	4321      	orrs	r1, r4
 8000bee:	074b      	lsls	r3, r1, #29
 8000bf0:	d004      	beq.n	8000bfc <__aeabi_fmul+0x240>
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fmul+0x240>
 8000bfa:	3104      	adds	r1, #4
 8000bfc:	014b      	lsls	r3, r1, #5
 8000bfe:	d504      	bpl.n	8000c0a <__aeabi_fmul+0x24e>
 8000c00:	2001      	movs	r0, #1
 8000c02:	2100      	movs	r1, #0
 8000c04:	e72c      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000c06:	001d      	movs	r5, r3
 8000c08:	e78f      	b.n	8000b2a <__aeabi_fmul+0x16e>
 8000c0a:	0189      	lsls	r1, r1, #6
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	0a49      	lsrs	r1, r1, #9
 8000c10:	e726      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000c12:	2302      	movs	r3, #2
 8000c14:	2e0f      	cmp	r6, #15
 8000c16:	d10c      	bne.n	8000c32 <__aeabi_fmul+0x276>
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	03c9      	lsls	r1, r1, #15
 8000c1e:	420b      	tst	r3, r1
 8000c20:	d00d      	beq.n	8000c3e <__aeabi_fmul+0x282>
 8000c22:	420c      	tst	r4, r1
 8000c24:	d10b      	bne.n	8000c3e <__aeabi_fmul+0x282>
 8000c26:	4321      	orrs	r1, r4
 8000c28:	0249      	lsls	r1, r1, #9
 8000c2a:	003a      	movs	r2, r7
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	0a49      	lsrs	r1, r1, #9
 8000c30:	e716      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000c32:	2e0b      	cmp	r6, #11
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fmul+0x27c>
 8000c36:	e6f7      	b.n	8000a28 <__aeabi_fmul+0x6c>
 8000c38:	46a1      	mov	r9, r4
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	e736      	b.n	8000aac <__aeabi_fmul+0xf0>
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	464b      	mov	r3, r9
 8000c42:	03c9      	lsls	r1, r1, #15
 8000c44:	4319      	orrs	r1, r3
 8000c46:	0249      	lsls	r1, r1, #9
 8000c48:	4642      	mov	r2, r8
 8000c4a:	20ff      	movs	r0, #255	; 0xff
 8000c4c:	0a49      	lsrs	r1, r1, #9
 8000c4e:	e707      	b.n	8000a60 <__aeabi_fmul+0xa4>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e7df      	b.n	8000c14 <__aeabi_fmul+0x258>
 8000c54:	f7ffffff 	.word	0xf7ffffff

08000c58 <__aeabi_ui2f>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	1e04      	subs	r4, r0, #0
 8000c5c:	d00e      	beq.n	8000c7c <__aeabi_ui2f+0x24>
 8000c5e:	f001 fed3 	bl	8002a08 <__clzsi2>
 8000c62:	239e      	movs	r3, #158	; 0x9e
 8000c64:	0001      	movs	r1, r0
 8000c66:	1a1b      	subs	r3, r3, r0
 8000c68:	2b96      	cmp	r3, #150	; 0x96
 8000c6a:	dc0c      	bgt.n	8000c86 <__aeabi_ui2f+0x2e>
 8000c6c:	2808      	cmp	r0, #8
 8000c6e:	d02c      	beq.n	8000cca <__aeabi_ui2f+0x72>
 8000c70:	3908      	subs	r1, #8
 8000c72:	408c      	lsls	r4, r1
 8000c74:	0264      	lsls	r4, r4, #9
 8000c76:	0a64      	lsrs	r4, r4, #9
 8000c78:	b2d8      	uxtb	r0, r3
 8000c7a:	e001      	b.n	8000c80 <__aeabi_ui2f+0x28>
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	2400      	movs	r4, #0
 8000c80:	05c0      	lsls	r0, r0, #23
 8000c82:	4320      	orrs	r0, r4
 8000c84:	bd70      	pop	{r4, r5, r6, pc}
 8000c86:	2b99      	cmp	r3, #153	; 0x99
 8000c88:	dd0a      	ble.n	8000ca0 <__aeabi_ui2f+0x48>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	321b      	adds	r2, #27
 8000c90:	4090      	lsls	r0, r2
 8000c92:	0002      	movs	r2, r0
 8000c94:	1e50      	subs	r0, r2, #1
 8000c96:	4182      	sbcs	r2, r0
 8000c98:	2005      	movs	r0, #5
 8000c9a:	1a40      	subs	r0, r0, r1
 8000c9c:	40c4      	lsrs	r4, r0
 8000c9e:	4314      	orrs	r4, r2
 8000ca0:	2905      	cmp	r1, #5
 8000ca2:	dc16      	bgt.n	8000cd2 <__aeabi_ui2f+0x7a>
 8000ca4:	0022      	movs	r2, r4
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <__aeabi_ui2f+0x8c>)
 8000ca8:	4002      	ands	r2, r0
 8000caa:	0765      	lsls	r5, r4, #29
 8000cac:	d009      	beq.n	8000cc2 <__aeabi_ui2f+0x6a>
 8000cae:	250f      	movs	r5, #15
 8000cb0:	402c      	ands	r4, r5
 8000cb2:	2c04      	cmp	r4, #4
 8000cb4:	d005      	beq.n	8000cc2 <__aeabi_ui2f+0x6a>
 8000cb6:	3204      	adds	r2, #4
 8000cb8:	0154      	lsls	r4, r2, #5
 8000cba:	d502      	bpl.n	8000cc2 <__aeabi_ui2f+0x6a>
 8000cbc:	239f      	movs	r3, #159	; 0x9f
 8000cbe:	4002      	ands	r2, r0
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	0192      	lsls	r2, r2, #6
 8000cc4:	0a54      	lsrs	r4, r2, #9
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	e7da      	b.n	8000c80 <__aeabi_ui2f+0x28>
 8000cca:	0264      	lsls	r4, r4, #9
 8000ccc:	2096      	movs	r0, #150	; 0x96
 8000cce:	0a64      	lsrs	r4, r4, #9
 8000cd0:	e7d6      	b.n	8000c80 <__aeabi_ui2f+0x28>
 8000cd2:	1f4a      	subs	r2, r1, #5
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	0022      	movs	r2, r4
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <__aeabi_ui2f+0x8c>)
 8000cda:	4002      	ands	r2, r0
 8000cdc:	0765      	lsls	r5, r4, #29
 8000cde:	d0f0      	beq.n	8000cc2 <__aeabi_ui2f+0x6a>
 8000ce0:	e7e5      	b.n	8000cae <__aeabi_ui2f+0x56>
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	fbffffff 	.word	0xfbffffff

08000ce8 <__aeabi_dadd>:
 8000ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cea:	464f      	mov	r7, r9
 8000cec:	4646      	mov	r6, r8
 8000cee:	46d6      	mov	lr, sl
 8000cf0:	0004      	movs	r4, r0
 8000cf2:	b5c0      	push	{r6, r7, lr}
 8000cf4:	001f      	movs	r7, r3
 8000cf6:	030b      	lsls	r3, r1, #12
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	004e      	lsls	r6, r1, #1
 8000cfc:	0a5b      	lsrs	r3, r3, #9
 8000cfe:	0fcd      	lsrs	r5, r1, #31
 8000d00:	0f61      	lsrs	r1, r4, #29
 8000d02:	007a      	lsls	r2, r7, #1
 8000d04:	4319      	orrs	r1, r3
 8000d06:	00e3      	lsls	r3, r4, #3
 8000d08:	033c      	lsls	r4, r7, #12
 8000d0a:	0fff      	lsrs	r7, r7, #31
 8000d0c:	46bc      	mov	ip, r7
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	0f47      	lsrs	r7, r0, #29
 8000d12:	4327      	orrs	r7, r4
 8000d14:	0d76      	lsrs	r6, r6, #21
 8000d16:	0d52      	lsrs	r2, r2, #21
 8000d18:	00c0      	lsls	r0, r0, #3
 8000d1a:	46b9      	mov	r9, r7
 8000d1c:	4680      	mov	r8, r0
 8000d1e:	1ab7      	subs	r7, r6, r2
 8000d20:	4565      	cmp	r5, ip
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dadd+0x3e>
 8000d24:	e09b      	b.n	8000e5e <__aeabi_dadd+0x176>
 8000d26:	2f00      	cmp	r7, #0
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_dadd+0x44>
 8000d2a:	e084      	b.n	8000e36 <__aeabi_dadd+0x14e>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x4a>
 8000d30:	e0be      	b.n	8000eb0 <__aeabi_dadd+0x1c8>
 8000d32:	4ac8      	ldr	r2, [pc, #800]	; (8001054 <__aeabi_dadd+0x36c>)
 8000d34:	4296      	cmp	r6, r2
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x52>
 8000d38:	e124      	b.n	8000f84 <__aeabi_dadd+0x29c>
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	464c      	mov	r4, r9
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	4314      	orrs	r4, r2
 8000d42:	46a1      	mov	r9, r4
 8000d44:	2f38      	cmp	r7, #56	; 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dadd+0x62>
 8000d48:	e167      	b.n	800101a <__aeabi_dadd+0x332>
 8000d4a:	2f1f      	cmp	r7, #31
 8000d4c:	dd00      	ble.n	8000d50 <__aeabi_dadd+0x68>
 8000d4e:	e1d6      	b.n	80010fe <__aeabi_dadd+0x416>
 8000d50:	2220      	movs	r2, #32
 8000d52:	464c      	mov	r4, r9
 8000d54:	1bd2      	subs	r2, r2, r7
 8000d56:	4094      	lsls	r4, r2
 8000d58:	46a2      	mov	sl, r4
 8000d5a:	4644      	mov	r4, r8
 8000d5c:	40fc      	lsrs	r4, r7
 8000d5e:	0020      	movs	r0, r4
 8000d60:	4654      	mov	r4, sl
 8000d62:	4304      	orrs	r4, r0
 8000d64:	4640      	mov	r0, r8
 8000d66:	4090      	lsls	r0, r2
 8000d68:	1e42      	subs	r2, r0, #1
 8000d6a:	4190      	sbcs	r0, r2
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	40fa      	lsrs	r2, r7
 8000d70:	4304      	orrs	r4, r0
 8000d72:	1a89      	subs	r1, r1, r2
 8000d74:	1b1c      	subs	r4, r3, r4
 8000d76:	42a3      	cmp	r3, r4
 8000d78:	4192      	sbcs	r2, r2
 8000d7a:	4252      	negs	r2, r2
 8000d7c:	1a8b      	subs	r3, r1, r2
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4653      	mov	r3, sl
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_dadd+0xa0>
 8000d86:	e0d4      	b.n	8000f32 <__aeabi_dadd+0x24a>
 8000d88:	4653      	mov	r3, sl
 8000d8a:	025a      	lsls	r2, r3, #9
 8000d8c:	0a53      	lsrs	r3, r2, #9
 8000d8e:	469a      	mov	sl, r3
 8000d90:	4653      	mov	r3, sl
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0xb0>
 8000d96:	e104      	b.n	8000fa2 <__aeabi_dadd+0x2ba>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	f001 fe35 	bl	8002a08 <__clzsi2>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	3b08      	subs	r3, #8
 8000da2:	2220      	movs	r2, #32
 8000da4:	0020      	movs	r0, r4
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4651      	mov	r1, sl
 8000daa:	40d0      	lsrs	r0, r2
 8000dac:	4099      	lsls	r1, r3
 8000dae:	0002      	movs	r2, r0
 8000db0:	409c      	lsls	r4, r3
 8000db2:	430a      	orrs	r2, r1
 8000db4:	42b3      	cmp	r3, r6
 8000db6:	da00      	bge.n	8000dba <__aeabi_dadd+0xd2>
 8000db8:	e102      	b.n	8000fc0 <__aeabi_dadd+0x2d8>
 8000dba:	1b9b      	subs	r3, r3, r6
 8000dbc:	1c59      	adds	r1, r3, #1
 8000dbe:	291f      	cmp	r1, #31
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dadd+0xdc>
 8000dc2:	e0a7      	b.n	8000f14 <__aeabi_dadd+0x22c>
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	0010      	movs	r0, r2
 8000dc8:	0026      	movs	r6, r4
 8000dca:	1a5b      	subs	r3, r3, r1
 8000dcc:	409c      	lsls	r4, r3
 8000dce:	4098      	lsls	r0, r3
 8000dd0:	40ce      	lsrs	r6, r1
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	1e63      	subs	r3, r4, #1
 8000dd6:	419c      	sbcs	r4, r3
 8000dd8:	4330      	orrs	r0, r6
 8000dda:	4692      	mov	sl, r2
 8000ddc:	2600      	movs	r6, #0
 8000dde:	4304      	orrs	r4, r0
 8000de0:	0763      	lsls	r3, r4, #29
 8000de2:	d009      	beq.n	8000df8 <__aeabi_dadd+0x110>
 8000de4:	230f      	movs	r3, #15
 8000de6:	4023      	ands	r3, r4
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d005      	beq.n	8000df8 <__aeabi_dadd+0x110>
 8000dec:	1d23      	adds	r3, r4, #4
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	41a4      	sbcs	r4, r4
 8000df2:	4264      	negs	r4, r4
 8000df4:	44a2      	add	sl, r4
 8000df6:	001c      	movs	r4, r3
 8000df8:	4653      	mov	r3, sl
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	d400      	bmi.n	8000e00 <__aeabi_dadd+0x118>
 8000dfe:	e09b      	b.n	8000f38 <__aeabi_dadd+0x250>
 8000e00:	4b94      	ldr	r3, [pc, #592]	; (8001054 <__aeabi_dadd+0x36c>)
 8000e02:	3601      	adds	r6, #1
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x122>
 8000e08:	e0b8      	b.n	8000f7c <__aeabi_dadd+0x294>
 8000e0a:	4653      	mov	r3, sl
 8000e0c:	4992      	ldr	r1, [pc, #584]	; (8001058 <__aeabi_dadd+0x370>)
 8000e0e:	08e4      	lsrs	r4, r4, #3
 8000e10:	400b      	ands	r3, r1
 8000e12:	0019      	movs	r1, r3
 8000e14:	075b      	lsls	r3, r3, #29
 8000e16:	4323      	orrs	r3, r4
 8000e18:	0572      	lsls	r2, r6, #21
 8000e1a:	024c      	lsls	r4, r1, #9
 8000e1c:	0b24      	lsrs	r4, r4, #12
 8000e1e:	0d52      	lsrs	r2, r2, #21
 8000e20:	0512      	lsls	r2, r2, #20
 8000e22:	07ed      	lsls	r5, r5, #31
 8000e24:	4322      	orrs	r2, r4
 8000e26:	432a      	orrs	r2, r5
 8000e28:	0018      	movs	r0, r3
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	bce0      	pop	{r5, r6, r7}
 8000e2e:	46ba      	mov	sl, r7
 8000e30:	46b1      	mov	r9, r6
 8000e32:	46a8      	mov	r8, r5
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d048      	beq.n	8000ecc <__aeabi_dadd+0x1e4>
 8000e3a:	1b97      	subs	r7, r2, r6
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x15a>
 8000e40:	e10e      	b.n	8001060 <__aeabi_dadd+0x378>
 8000e42:	000c      	movs	r4, r1
 8000e44:	431c      	orrs	r4, r3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dadd+0x162>
 8000e48:	e1b7      	b.n	80011ba <__aeabi_dadd+0x4d2>
 8000e4a:	1e7c      	subs	r4, r7, #1
 8000e4c:	2f01      	cmp	r7, #1
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x16a>
 8000e50:	e226      	b.n	80012a0 <__aeabi_dadd+0x5b8>
 8000e52:	4d80      	ldr	r5, [pc, #512]	; (8001054 <__aeabi_dadd+0x36c>)
 8000e54:	42af      	cmp	r7, r5
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x172>
 8000e58:	e1d5      	b.n	8001206 <__aeabi_dadd+0x51e>
 8000e5a:	0027      	movs	r7, r4
 8000e5c:	e107      	b.n	800106e <__aeabi_dadd+0x386>
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	dc00      	bgt.n	8000e64 <__aeabi_dadd+0x17c>
 8000e62:	e0b2      	b.n	8000fca <__aeabi_dadd+0x2e2>
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d047      	beq.n	8000ef8 <__aeabi_dadd+0x210>
 8000e68:	4a7a      	ldr	r2, [pc, #488]	; (8001054 <__aeabi_dadd+0x36c>)
 8000e6a:	4296      	cmp	r6, r2
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0x188>
 8000e6e:	e089      	b.n	8000f84 <__aeabi_dadd+0x29c>
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	464c      	mov	r4, r9
 8000e74:	0412      	lsls	r2, r2, #16
 8000e76:	4314      	orrs	r4, r2
 8000e78:	46a1      	mov	r9, r4
 8000e7a:	2f38      	cmp	r7, #56	; 0x38
 8000e7c:	dc6b      	bgt.n	8000f56 <__aeabi_dadd+0x26e>
 8000e7e:	2f1f      	cmp	r7, #31
 8000e80:	dc00      	bgt.n	8000e84 <__aeabi_dadd+0x19c>
 8000e82:	e16e      	b.n	8001162 <__aeabi_dadd+0x47a>
 8000e84:	003a      	movs	r2, r7
 8000e86:	4648      	mov	r0, r9
 8000e88:	3a20      	subs	r2, #32
 8000e8a:	40d0      	lsrs	r0, r2
 8000e8c:	4684      	mov	ip, r0
 8000e8e:	2f20      	cmp	r7, #32
 8000e90:	d007      	beq.n	8000ea2 <__aeabi_dadd+0x1ba>
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	4648      	mov	r0, r9
 8000e96:	1bd2      	subs	r2, r2, r7
 8000e98:	4090      	lsls	r0, r2
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	4310      	orrs	r0, r2
 8000ea0:	4680      	mov	r8, r0
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	1e42      	subs	r2, r0, #1
 8000ea6:	4190      	sbcs	r0, r2
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	0004      	movs	r4, r0
 8000eac:	4314      	orrs	r4, r2
 8000eae:	e057      	b.n	8000f60 <__aeabi_dadd+0x278>
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x1d0>
 8000eb6:	e103      	b.n	80010c0 <__aeabi_dadd+0x3d8>
 8000eb8:	1e7a      	subs	r2, r7, #1
 8000eba:	2f01      	cmp	r7, #1
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x1d8>
 8000ebe:	e193      	b.n	80011e8 <__aeabi_dadd+0x500>
 8000ec0:	4c64      	ldr	r4, [pc, #400]	; (8001054 <__aeabi_dadd+0x36c>)
 8000ec2:	42a7      	cmp	r7, r4
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dadd+0x1e0>
 8000ec6:	e18a      	b.n	80011de <__aeabi_dadd+0x4f6>
 8000ec8:	0017      	movs	r7, r2
 8000eca:	e73b      	b.n	8000d44 <__aeabi_dadd+0x5c>
 8000ecc:	4c63      	ldr	r4, [pc, #396]	; (800105c <__aeabi_dadd+0x374>)
 8000ece:	1c72      	adds	r2, r6, #1
 8000ed0:	4222      	tst	r2, r4
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x1ee>
 8000ed4:	e0e0      	b.n	8001098 <__aeabi_dadd+0x3b0>
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_dadd+0x1f8>
 8000ede:	e174      	b.n	80011ca <__aeabi_dadd+0x4e2>
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x1fe>
 8000ee4:	e1d0      	b.n	8001288 <__aeabi_dadd+0x5a0>
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	d000      	beq.n	8000eee <__aeabi_dadd+0x206>
 8000eec:	e1e3      	b.n	80012b6 <__aeabi_dadd+0x5ce>
 8000eee:	074a      	lsls	r2, r1, #29
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	08c9      	lsrs	r1, r1, #3
 8000ef6:	e029      	b.n	8000f4c <__aeabi_dadd+0x264>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	4302      	orrs	r2, r0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x218>
 8000efe:	e17d      	b.n	80011fc <__aeabi_dadd+0x514>
 8000f00:	1e7a      	subs	r2, r7, #1
 8000f02:	2f01      	cmp	r7, #1
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x220>
 8000f06:	e0e0      	b.n	80010ca <__aeabi_dadd+0x3e2>
 8000f08:	4c52      	ldr	r4, [pc, #328]	; (8001054 <__aeabi_dadd+0x36c>)
 8000f0a:	42a7      	cmp	r7, r4
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_dadd+0x228>
 8000f0e:	e166      	b.n	80011de <__aeabi_dadd+0x4f6>
 8000f10:	0017      	movs	r7, r2
 8000f12:	e7b2      	b.n	8000e7a <__aeabi_dadd+0x192>
 8000f14:	0010      	movs	r0, r2
 8000f16:	3b1f      	subs	r3, #31
 8000f18:	40d8      	lsrs	r0, r3
 8000f1a:	2920      	cmp	r1, #32
 8000f1c:	d003      	beq.n	8000f26 <__aeabi_dadd+0x23e>
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	4314      	orrs	r4, r2
 8000f26:	1e63      	subs	r3, r4, #1
 8000f28:	419c      	sbcs	r4, r3
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2600      	movs	r6, #0
 8000f2e:	469a      	mov	sl, r3
 8000f30:	4304      	orrs	r4, r0
 8000f32:	0763      	lsls	r3, r4, #29
 8000f34:	d000      	beq.n	8000f38 <__aeabi_dadd+0x250>
 8000f36:	e755      	b.n	8000de4 <__aeabi_dadd+0xfc>
 8000f38:	4652      	mov	r2, sl
 8000f3a:	08e3      	lsrs	r3, r4, #3
 8000f3c:	0752      	lsls	r2, r2, #29
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	4652      	mov	r2, sl
 8000f42:	0037      	movs	r7, r6
 8000f44:	08d1      	lsrs	r1, r2, #3
 8000f46:	4a43      	ldr	r2, [pc, #268]	; (8001054 <__aeabi_dadd+0x36c>)
 8000f48:	4297      	cmp	r7, r2
 8000f4a:	d01f      	beq.n	8000f8c <__aeabi_dadd+0x2a4>
 8000f4c:	0309      	lsls	r1, r1, #12
 8000f4e:	057a      	lsls	r2, r7, #21
 8000f50:	0b0c      	lsrs	r4, r1, #12
 8000f52:	0d52      	lsrs	r2, r2, #21
 8000f54:	e764      	b.n	8000e20 <__aeabi_dadd+0x138>
 8000f56:	4642      	mov	r2, r8
 8000f58:	464c      	mov	r4, r9
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	1e62      	subs	r2, r4, #1
 8000f5e:	4194      	sbcs	r4, r2
 8000f60:	18e4      	adds	r4, r4, r3
 8000f62:	429c      	cmp	r4, r3
 8000f64:	4192      	sbcs	r2, r2
 8000f66:	4252      	negs	r2, r2
 8000f68:	4692      	mov	sl, r2
 8000f6a:	448a      	add	sl, r1
 8000f6c:	4653      	mov	r3, sl
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	d5df      	bpl.n	8000f32 <__aeabi_dadd+0x24a>
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <__aeabi_dadd+0x36c>)
 8000f74:	3601      	adds	r6, #1
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d000      	beq.n	8000f7c <__aeabi_dadd+0x294>
 8000f7a:	e0b3      	b.n	80010e4 <__aeabi_dadd+0x3fc>
 8000f7c:	0032      	movs	r2, r6
 8000f7e:	2400      	movs	r4, #0
 8000f80:	2300      	movs	r3, #0
 8000f82:	e74d      	b.n	8000e20 <__aeabi_dadd+0x138>
 8000f84:	074a      	lsls	r2, r1, #29
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	08c9      	lsrs	r1, r1, #3
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x2ac>
 8000f92:	e200      	b.n	8001396 <__aeabi_dadd+0x6ae>
 8000f94:	2480      	movs	r4, #128	; 0x80
 8000f96:	0324      	lsls	r4, r4, #12
 8000f98:	430c      	orrs	r4, r1
 8000f9a:	0324      	lsls	r4, r4, #12
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <__aeabi_dadd+0x36c>)
 8000f9e:	0b24      	lsrs	r4, r4, #12
 8000fa0:	e73e      	b.n	8000e20 <__aeabi_dadd+0x138>
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f001 fd30 	bl	8002a08 <__clzsi2>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	3318      	adds	r3, #24
 8000fac:	2b1f      	cmp	r3, #31
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_dadd+0x2ca>
 8000fb0:	e6f7      	b.n	8000da2 <__aeabi_dadd+0xba>
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	3808      	subs	r0, #8
 8000fb6:	4082      	lsls	r2, r0
 8000fb8:	2400      	movs	r4, #0
 8000fba:	42b3      	cmp	r3, r6
 8000fbc:	db00      	blt.n	8000fc0 <__aeabi_dadd+0x2d8>
 8000fbe:	e6fc      	b.n	8000dba <__aeabi_dadd+0xd2>
 8000fc0:	1af6      	subs	r6, r6, r3
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <__aeabi_dadd+0x370>)
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	4692      	mov	sl, r2
 8000fc8:	e70a      	b.n	8000de0 <__aeabi_dadd+0xf8>
 8000fca:	2f00      	cmp	r7, #0
 8000fcc:	d02b      	beq.n	8001026 <__aeabi_dadd+0x33e>
 8000fce:	1b97      	subs	r7, r2, r6
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x2ee>
 8000fd4:	e0b8      	b.n	8001148 <__aeabi_dadd+0x460>
 8000fd6:	4c1f      	ldr	r4, [pc, #124]	; (8001054 <__aeabi_dadd+0x36c>)
 8000fd8:	42a2      	cmp	r2, r4
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x2f6>
 8000fdc:	e11c      	b.n	8001218 <__aeabi_dadd+0x530>
 8000fde:	2480      	movs	r4, #128	; 0x80
 8000fe0:	0424      	lsls	r4, r4, #16
 8000fe2:	4321      	orrs	r1, r4
 8000fe4:	2f38      	cmp	r7, #56	; 0x38
 8000fe6:	dd00      	ble.n	8000fea <__aeabi_dadd+0x302>
 8000fe8:	e11e      	b.n	8001228 <__aeabi_dadd+0x540>
 8000fea:	2f1f      	cmp	r7, #31
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_dadd+0x308>
 8000fee:	e19e      	b.n	800132e <__aeabi_dadd+0x646>
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	1bf6      	subs	r6, r6, r7
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	40b3      	lsls	r3, r6
 8000ffa:	40b4      	lsls	r4, r6
 8000ffc:	40f8      	lsrs	r0, r7
 8000ffe:	1e5e      	subs	r6, r3, #1
 8001000:	41b3      	sbcs	r3, r6
 8001002:	40f9      	lsrs	r1, r7
 8001004:	4304      	orrs	r4, r0
 8001006:	431c      	orrs	r4, r3
 8001008:	4489      	add	r9, r1
 800100a:	4444      	add	r4, r8
 800100c:	4544      	cmp	r4, r8
 800100e:	419b      	sbcs	r3, r3
 8001010:	425b      	negs	r3, r3
 8001012:	444b      	add	r3, r9
 8001014:	469a      	mov	sl, r3
 8001016:	0016      	movs	r6, r2
 8001018:	e7a8      	b.n	8000f6c <__aeabi_dadd+0x284>
 800101a:	4642      	mov	r2, r8
 800101c:	464c      	mov	r4, r9
 800101e:	4314      	orrs	r4, r2
 8001020:	1e62      	subs	r2, r4, #1
 8001022:	4194      	sbcs	r4, r2
 8001024:	e6a6      	b.n	8000d74 <__aeabi_dadd+0x8c>
 8001026:	4c0d      	ldr	r4, [pc, #52]	; (800105c <__aeabi_dadd+0x374>)
 8001028:	1c72      	adds	r2, r6, #1
 800102a:	4222      	tst	r2, r4
 800102c:	d000      	beq.n	8001030 <__aeabi_dadd+0x348>
 800102e:	e0a8      	b.n	8001182 <__aeabi_dadd+0x49a>
 8001030:	000a      	movs	r2, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x352>
 8001038:	e10a      	b.n	8001250 <__aeabi_dadd+0x568>
 800103a:	2a00      	cmp	r2, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x358>
 800103e:	e15e      	b.n	80012fe <__aeabi_dadd+0x616>
 8001040:	464a      	mov	r2, r9
 8001042:	4302      	orrs	r2, r0
 8001044:	d000      	beq.n	8001048 <__aeabi_dadd+0x360>
 8001046:	e161      	b.n	800130c <__aeabi_dadd+0x624>
 8001048:	074a      	lsls	r2, r1, #29
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	4313      	orrs	r3, r2
 800104e:	08c9      	lsrs	r1, r1, #3
 8001050:	e77c      	b.n	8000f4c <__aeabi_dadd+0x264>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	000007ff 	.word	0x000007ff
 8001058:	ff7fffff 	.word	0xff7fffff
 800105c:	000007fe 	.word	0x000007fe
 8001060:	4ccf      	ldr	r4, [pc, #828]	; (80013a0 <__aeabi_dadd+0x6b8>)
 8001062:	42a2      	cmp	r2, r4
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x380>
 8001066:	e0ce      	b.n	8001206 <__aeabi_dadd+0x51e>
 8001068:	2480      	movs	r4, #128	; 0x80
 800106a:	0424      	lsls	r4, r4, #16
 800106c:	4321      	orrs	r1, r4
 800106e:	2f38      	cmp	r7, #56	; 0x38
 8001070:	dc5b      	bgt.n	800112a <__aeabi_dadd+0x442>
 8001072:	2f1f      	cmp	r7, #31
 8001074:	dd00      	ble.n	8001078 <__aeabi_dadd+0x390>
 8001076:	e0dc      	b.n	8001232 <__aeabi_dadd+0x54a>
 8001078:	2520      	movs	r5, #32
 800107a:	000c      	movs	r4, r1
 800107c:	1bed      	subs	r5, r5, r7
 800107e:	001e      	movs	r6, r3
 8001080:	40ab      	lsls	r3, r5
 8001082:	40ac      	lsls	r4, r5
 8001084:	40fe      	lsrs	r6, r7
 8001086:	1e5d      	subs	r5, r3, #1
 8001088:	41ab      	sbcs	r3, r5
 800108a:	4334      	orrs	r4, r6
 800108c:	40f9      	lsrs	r1, r7
 800108e:	431c      	orrs	r4, r3
 8001090:	464b      	mov	r3, r9
 8001092:	1a5b      	subs	r3, r3, r1
 8001094:	4699      	mov	r9, r3
 8001096:	e04c      	b.n	8001132 <__aeabi_dadd+0x44a>
 8001098:	464a      	mov	r2, r9
 800109a:	1a1c      	subs	r4, r3, r0
 800109c:	1a88      	subs	r0, r1, r2
 800109e:	42a3      	cmp	r3, r4
 80010a0:	4192      	sbcs	r2, r2
 80010a2:	4252      	negs	r2, r2
 80010a4:	4692      	mov	sl, r2
 80010a6:	0002      	movs	r2, r0
 80010a8:	4650      	mov	r0, sl
 80010aa:	1a12      	subs	r2, r2, r0
 80010ac:	4692      	mov	sl, r2
 80010ae:	0212      	lsls	r2, r2, #8
 80010b0:	d478      	bmi.n	80011a4 <__aeabi_dadd+0x4bc>
 80010b2:	4653      	mov	r3, sl
 80010b4:	4323      	orrs	r3, r4
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x3d2>
 80010b8:	e66a      	b.n	8000d90 <__aeabi_dadd+0xa8>
 80010ba:	2100      	movs	r1, #0
 80010bc:	2500      	movs	r5, #0
 80010be:	e745      	b.n	8000f4c <__aeabi_dadd+0x264>
 80010c0:	074a      	lsls	r2, r1, #29
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	08c9      	lsrs	r1, r1, #3
 80010c8:	e73d      	b.n	8000f46 <__aeabi_dadd+0x25e>
 80010ca:	181c      	adds	r4, r3, r0
 80010cc:	429c      	cmp	r4, r3
 80010ce:	419b      	sbcs	r3, r3
 80010d0:	4449      	add	r1, r9
 80010d2:	468a      	mov	sl, r1
 80010d4:	425b      	negs	r3, r3
 80010d6:	449a      	add	sl, r3
 80010d8:	4653      	mov	r3, sl
 80010da:	2601      	movs	r6, #1
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	d400      	bmi.n	80010e2 <__aeabi_dadd+0x3fa>
 80010e0:	e727      	b.n	8000f32 <__aeabi_dadd+0x24a>
 80010e2:	2602      	movs	r6, #2
 80010e4:	4652      	mov	r2, sl
 80010e6:	4baf      	ldr	r3, [pc, #700]	; (80013a4 <__aeabi_dadd+0x6bc>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	401a      	ands	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	4021      	ands	r1, r4
 80010f0:	0862      	lsrs	r2, r4, #1
 80010f2:	430a      	orrs	r2, r1
 80010f4:	07dc      	lsls	r4, r3, #31
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	469a      	mov	sl, r3
 80010fa:	4314      	orrs	r4, r2
 80010fc:	e670      	b.n	8000de0 <__aeabi_dadd+0xf8>
 80010fe:	003a      	movs	r2, r7
 8001100:	464c      	mov	r4, r9
 8001102:	3a20      	subs	r2, #32
 8001104:	40d4      	lsrs	r4, r2
 8001106:	46a4      	mov	ip, r4
 8001108:	2f20      	cmp	r7, #32
 800110a:	d007      	beq.n	800111c <__aeabi_dadd+0x434>
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	4648      	mov	r0, r9
 8001110:	1bd2      	subs	r2, r2, r7
 8001112:	4090      	lsls	r0, r2
 8001114:	0002      	movs	r2, r0
 8001116:	4640      	mov	r0, r8
 8001118:	4310      	orrs	r0, r2
 800111a:	4680      	mov	r8, r0
 800111c:	4640      	mov	r0, r8
 800111e:	1e42      	subs	r2, r0, #1
 8001120:	4190      	sbcs	r0, r2
 8001122:	4662      	mov	r2, ip
 8001124:	0004      	movs	r4, r0
 8001126:	4314      	orrs	r4, r2
 8001128:	e624      	b.n	8000d74 <__aeabi_dadd+0x8c>
 800112a:	4319      	orrs	r1, r3
 800112c:	000c      	movs	r4, r1
 800112e:	1e63      	subs	r3, r4, #1
 8001130:	419c      	sbcs	r4, r3
 8001132:	4643      	mov	r3, r8
 8001134:	1b1c      	subs	r4, r3, r4
 8001136:	45a0      	cmp	r8, r4
 8001138:	419b      	sbcs	r3, r3
 800113a:	4649      	mov	r1, r9
 800113c:	425b      	negs	r3, r3
 800113e:	1acb      	subs	r3, r1, r3
 8001140:	469a      	mov	sl, r3
 8001142:	4665      	mov	r5, ip
 8001144:	0016      	movs	r6, r2
 8001146:	e61b      	b.n	8000d80 <__aeabi_dadd+0x98>
 8001148:	000c      	movs	r4, r1
 800114a:	431c      	orrs	r4, r3
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x468>
 800114e:	e0c7      	b.n	80012e0 <__aeabi_dadd+0x5f8>
 8001150:	1e7c      	subs	r4, r7, #1
 8001152:	2f01      	cmp	r7, #1
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x470>
 8001156:	e0f9      	b.n	800134c <__aeabi_dadd+0x664>
 8001158:	4e91      	ldr	r6, [pc, #580]	; (80013a0 <__aeabi_dadd+0x6b8>)
 800115a:	42b7      	cmp	r7, r6
 800115c:	d05c      	beq.n	8001218 <__aeabi_dadd+0x530>
 800115e:	0027      	movs	r7, r4
 8001160:	e740      	b.n	8000fe4 <__aeabi_dadd+0x2fc>
 8001162:	2220      	movs	r2, #32
 8001164:	464c      	mov	r4, r9
 8001166:	4640      	mov	r0, r8
 8001168:	1bd2      	subs	r2, r2, r7
 800116a:	4094      	lsls	r4, r2
 800116c:	40f8      	lsrs	r0, r7
 800116e:	4304      	orrs	r4, r0
 8001170:	4640      	mov	r0, r8
 8001172:	4090      	lsls	r0, r2
 8001174:	1e42      	subs	r2, r0, #1
 8001176:	4190      	sbcs	r0, r2
 8001178:	464a      	mov	r2, r9
 800117a:	40fa      	lsrs	r2, r7
 800117c:	4304      	orrs	r4, r0
 800117e:	1889      	adds	r1, r1, r2
 8001180:	e6ee      	b.n	8000f60 <__aeabi_dadd+0x278>
 8001182:	4c87      	ldr	r4, [pc, #540]	; (80013a0 <__aeabi_dadd+0x6b8>)
 8001184:	42a2      	cmp	r2, r4
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x4a2>
 8001188:	e6f9      	b.n	8000f7e <__aeabi_dadd+0x296>
 800118a:	1818      	adds	r0, r3, r0
 800118c:	4298      	cmp	r0, r3
 800118e:	419b      	sbcs	r3, r3
 8001190:	4449      	add	r1, r9
 8001192:	425b      	negs	r3, r3
 8001194:	18cb      	adds	r3, r1, r3
 8001196:	07dc      	lsls	r4, r3, #31
 8001198:	0840      	lsrs	r0, r0, #1
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	469a      	mov	sl, r3
 800119e:	0016      	movs	r6, r2
 80011a0:	4304      	orrs	r4, r0
 80011a2:	e6c6      	b.n	8000f32 <__aeabi_dadd+0x24a>
 80011a4:	4642      	mov	r2, r8
 80011a6:	1ad4      	subs	r4, r2, r3
 80011a8:	45a0      	cmp	r8, r4
 80011aa:	4180      	sbcs	r0, r0
 80011ac:	464b      	mov	r3, r9
 80011ae:	4240      	negs	r0, r0
 80011b0:	1a59      	subs	r1, r3, r1
 80011b2:	1a0b      	subs	r3, r1, r0
 80011b4:	469a      	mov	sl, r3
 80011b6:	4665      	mov	r5, ip
 80011b8:	e5ea      	b.n	8000d90 <__aeabi_dadd+0xa8>
 80011ba:	464b      	mov	r3, r9
 80011bc:	464a      	mov	r2, r9
 80011be:	08c0      	lsrs	r0, r0, #3
 80011c0:	075b      	lsls	r3, r3, #29
 80011c2:	4665      	mov	r5, ip
 80011c4:	4303      	orrs	r3, r0
 80011c6:	08d1      	lsrs	r1, r2, #3
 80011c8:	e6bd      	b.n	8000f46 <__aeabi_dadd+0x25e>
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d000      	beq.n	80011d0 <__aeabi_dadd+0x4e8>
 80011ce:	e08e      	b.n	80012ee <__aeabi_dadd+0x606>
 80011d0:	464b      	mov	r3, r9
 80011d2:	4303      	orrs	r3, r0
 80011d4:	d117      	bne.n	8001206 <__aeabi_dadd+0x51e>
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	2500      	movs	r5, #0
 80011da:	0309      	lsls	r1, r1, #12
 80011dc:	e6da      	b.n	8000f94 <__aeabi_dadd+0x2ac>
 80011de:	074a      	lsls	r2, r1, #29
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	08c9      	lsrs	r1, r1, #3
 80011e6:	e6d1      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 80011e8:	1a1c      	subs	r4, r3, r0
 80011ea:	464a      	mov	r2, r9
 80011ec:	42a3      	cmp	r3, r4
 80011ee:	419b      	sbcs	r3, r3
 80011f0:	1a89      	subs	r1, r1, r2
 80011f2:	425b      	negs	r3, r3
 80011f4:	1acb      	subs	r3, r1, r3
 80011f6:	469a      	mov	sl, r3
 80011f8:	2601      	movs	r6, #1
 80011fa:	e5c1      	b.n	8000d80 <__aeabi_dadd+0x98>
 80011fc:	074a      	lsls	r2, r1, #29
 80011fe:	08db      	lsrs	r3, r3, #3
 8001200:	4313      	orrs	r3, r2
 8001202:	08c9      	lsrs	r1, r1, #3
 8001204:	e69f      	b.n	8000f46 <__aeabi_dadd+0x25e>
 8001206:	4643      	mov	r3, r8
 8001208:	08d8      	lsrs	r0, r3, #3
 800120a:	464b      	mov	r3, r9
 800120c:	464a      	mov	r2, r9
 800120e:	075b      	lsls	r3, r3, #29
 8001210:	4665      	mov	r5, ip
 8001212:	4303      	orrs	r3, r0
 8001214:	08d1      	lsrs	r1, r2, #3
 8001216:	e6b9      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 8001218:	4643      	mov	r3, r8
 800121a:	08d8      	lsrs	r0, r3, #3
 800121c:	464b      	mov	r3, r9
 800121e:	464a      	mov	r2, r9
 8001220:	075b      	lsls	r3, r3, #29
 8001222:	4303      	orrs	r3, r0
 8001224:	08d1      	lsrs	r1, r2, #3
 8001226:	e6b1      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 8001228:	4319      	orrs	r1, r3
 800122a:	000c      	movs	r4, r1
 800122c:	1e63      	subs	r3, r4, #1
 800122e:	419c      	sbcs	r4, r3
 8001230:	e6eb      	b.n	800100a <__aeabi_dadd+0x322>
 8001232:	003c      	movs	r4, r7
 8001234:	000d      	movs	r5, r1
 8001236:	3c20      	subs	r4, #32
 8001238:	40e5      	lsrs	r5, r4
 800123a:	2f20      	cmp	r7, #32
 800123c:	d003      	beq.n	8001246 <__aeabi_dadd+0x55e>
 800123e:	2440      	movs	r4, #64	; 0x40
 8001240:	1be4      	subs	r4, r4, r7
 8001242:	40a1      	lsls	r1, r4
 8001244:	430b      	orrs	r3, r1
 8001246:	001c      	movs	r4, r3
 8001248:	1e63      	subs	r3, r4, #1
 800124a:	419c      	sbcs	r4, r3
 800124c:	432c      	orrs	r4, r5
 800124e:	e770      	b.n	8001132 <__aeabi_dadd+0x44a>
 8001250:	2a00      	cmp	r2, #0
 8001252:	d0e1      	beq.n	8001218 <__aeabi_dadd+0x530>
 8001254:	464a      	mov	r2, r9
 8001256:	4302      	orrs	r2, r0
 8001258:	d0c1      	beq.n	80011de <__aeabi_dadd+0x4f6>
 800125a:	074a      	lsls	r2, r1, #29
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	4313      	orrs	r3, r2
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	08c9      	lsrs	r1, r1, #3
 8001264:	0312      	lsls	r2, r2, #12
 8001266:	4211      	tst	r1, r2
 8001268:	d008      	beq.n	800127c <__aeabi_dadd+0x594>
 800126a:	4648      	mov	r0, r9
 800126c:	08c4      	lsrs	r4, r0, #3
 800126e:	4214      	tst	r4, r2
 8001270:	d104      	bne.n	800127c <__aeabi_dadd+0x594>
 8001272:	4643      	mov	r3, r8
 8001274:	0021      	movs	r1, r4
 8001276:	08db      	lsrs	r3, r3, #3
 8001278:	0742      	lsls	r2, r0, #29
 800127a:	4313      	orrs	r3, r2
 800127c:	0f5a      	lsrs	r2, r3, #29
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	0752      	lsls	r2, r2, #29
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	4313      	orrs	r3, r2
 8001286:	e681      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 8001288:	464b      	mov	r3, r9
 800128a:	4303      	orrs	r3, r0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x5a8>
 800128e:	e714      	b.n	80010ba <__aeabi_dadd+0x3d2>
 8001290:	464b      	mov	r3, r9
 8001292:	464a      	mov	r2, r9
 8001294:	08c0      	lsrs	r0, r0, #3
 8001296:	075b      	lsls	r3, r3, #29
 8001298:	4665      	mov	r5, ip
 800129a:	4303      	orrs	r3, r0
 800129c:	08d1      	lsrs	r1, r2, #3
 800129e:	e655      	b.n	8000f4c <__aeabi_dadd+0x264>
 80012a0:	1ac4      	subs	r4, r0, r3
 80012a2:	45a0      	cmp	r8, r4
 80012a4:	4180      	sbcs	r0, r0
 80012a6:	464b      	mov	r3, r9
 80012a8:	4240      	negs	r0, r0
 80012aa:	1a59      	subs	r1, r3, r1
 80012ac:	1a0b      	subs	r3, r1, r0
 80012ae:	469a      	mov	sl, r3
 80012b0:	4665      	mov	r5, ip
 80012b2:	2601      	movs	r6, #1
 80012b4:	e564      	b.n	8000d80 <__aeabi_dadd+0x98>
 80012b6:	1a1c      	subs	r4, r3, r0
 80012b8:	464a      	mov	r2, r9
 80012ba:	42a3      	cmp	r3, r4
 80012bc:	4180      	sbcs	r0, r0
 80012be:	1a8a      	subs	r2, r1, r2
 80012c0:	4240      	negs	r0, r0
 80012c2:	1a12      	subs	r2, r2, r0
 80012c4:	4692      	mov	sl, r2
 80012c6:	0212      	lsls	r2, r2, #8
 80012c8:	d549      	bpl.n	800135e <__aeabi_dadd+0x676>
 80012ca:	4642      	mov	r2, r8
 80012cc:	1ad4      	subs	r4, r2, r3
 80012ce:	45a0      	cmp	r8, r4
 80012d0:	4180      	sbcs	r0, r0
 80012d2:	464b      	mov	r3, r9
 80012d4:	4240      	negs	r0, r0
 80012d6:	1a59      	subs	r1, r3, r1
 80012d8:	1a0b      	subs	r3, r1, r0
 80012da:	469a      	mov	sl, r3
 80012dc:	4665      	mov	r5, ip
 80012de:	e57f      	b.n	8000de0 <__aeabi_dadd+0xf8>
 80012e0:	464b      	mov	r3, r9
 80012e2:	464a      	mov	r2, r9
 80012e4:	08c0      	lsrs	r0, r0, #3
 80012e6:	075b      	lsls	r3, r3, #29
 80012e8:	4303      	orrs	r3, r0
 80012ea:	08d1      	lsrs	r1, r2, #3
 80012ec:	e62b      	b.n	8000f46 <__aeabi_dadd+0x25e>
 80012ee:	464a      	mov	r2, r9
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	4302      	orrs	r2, r0
 80012f4:	d138      	bne.n	8001368 <__aeabi_dadd+0x680>
 80012f6:	074a      	lsls	r2, r1, #29
 80012f8:	4313      	orrs	r3, r2
 80012fa:	08c9      	lsrs	r1, r1, #3
 80012fc:	e646      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 80012fe:	464b      	mov	r3, r9
 8001300:	464a      	mov	r2, r9
 8001302:	08c0      	lsrs	r0, r0, #3
 8001304:	075b      	lsls	r3, r3, #29
 8001306:	4303      	orrs	r3, r0
 8001308:	08d1      	lsrs	r1, r2, #3
 800130a:	e61f      	b.n	8000f4c <__aeabi_dadd+0x264>
 800130c:	181c      	adds	r4, r3, r0
 800130e:	429c      	cmp	r4, r3
 8001310:	419b      	sbcs	r3, r3
 8001312:	4449      	add	r1, r9
 8001314:	468a      	mov	sl, r1
 8001316:	425b      	negs	r3, r3
 8001318:	449a      	add	sl, r3
 800131a:	4653      	mov	r3, sl
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	d400      	bmi.n	8001322 <__aeabi_dadd+0x63a>
 8001320:	e607      	b.n	8000f32 <__aeabi_dadd+0x24a>
 8001322:	4652      	mov	r2, sl
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <__aeabi_dadd+0x6bc>)
 8001326:	2601      	movs	r6, #1
 8001328:	401a      	ands	r2, r3
 800132a:	4692      	mov	sl, r2
 800132c:	e601      	b.n	8000f32 <__aeabi_dadd+0x24a>
 800132e:	003c      	movs	r4, r7
 8001330:	000e      	movs	r6, r1
 8001332:	3c20      	subs	r4, #32
 8001334:	40e6      	lsrs	r6, r4
 8001336:	2f20      	cmp	r7, #32
 8001338:	d003      	beq.n	8001342 <__aeabi_dadd+0x65a>
 800133a:	2440      	movs	r4, #64	; 0x40
 800133c:	1be4      	subs	r4, r4, r7
 800133e:	40a1      	lsls	r1, r4
 8001340:	430b      	orrs	r3, r1
 8001342:	001c      	movs	r4, r3
 8001344:	1e63      	subs	r3, r4, #1
 8001346:	419c      	sbcs	r4, r3
 8001348:	4334      	orrs	r4, r6
 800134a:	e65e      	b.n	800100a <__aeabi_dadd+0x322>
 800134c:	4443      	add	r3, r8
 800134e:	4283      	cmp	r3, r0
 8001350:	4180      	sbcs	r0, r0
 8001352:	4449      	add	r1, r9
 8001354:	468a      	mov	sl, r1
 8001356:	4240      	negs	r0, r0
 8001358:	001c      	movs	r4, r3
 800135a:	4482      	add	sl, r0
 800135c:	e6bc      	b.n	80010d8 <__aeabi_dadd+0x3f0>
 800135e:	4653      	mov	r3, sl
 8001360:	4323      	orrs	r3, r4
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x67e>
 8001364:	e6a9      	b.n	80010ba <__aeabi_dadd+0x3d2>
 8001366:	e5e4      	b.n	8000f32 <__aeabi_dadd+0x24a>
 8001368:	074a      	lsls	r2, r1, #29
 800136a:	4313      	orrs	r3, r2
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	0312      	lsls	r2, r2, #12
 8001372:	4211      	tst	r1, r2
 8001374:	d009      	beq.n	800138a <__aeabi_dadd+0x6a2>
 8001376:	4648      	mov	r0, r9
 8001378:	08c4      	lsrs	r4, r0, #3
 800137a:	4214      	tst	r4, r2
 800137c:	d105      	bne.n	800138a <__aeabi_dadd+0x6a2>
 800137e:	4643      	mov	r3, r8
 8001380:	4665      	mov	r5, ip
 8001382:	0021      	movs	r1, r4
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	0742      	lsls	r2, r0, #29
 8001388:	4313      	orrs	r3, r2
 800138a:	0f5a      	lsrs	r2, r3, #29
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	0752      	lsls	r2, r2, #29
 8001392:	4313      	orrs	r3, r2
 8001394:	e5fa      	b.n	8000f8c <__aeabi_dadd+0x2a4>
 8001396:	2300      	movs	r3, #0
 8001398:	4a01      	ldr	r2, [pc, #4]	; (80013a0 <__aeabi_dadd+0x6b8>)
 800139a:	001c      	movs	r4, r3
 800139c:	e540      	b.n	8000e20 <__aeabi_dadd+0x138>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	ff7fffff 	.word	0xff7fffff

080013a8 <__aeabi_ddiv>:
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	4657      	mov	r7, sl
 80013ac:	464e      	mov	r6, r9
 80013ae:	4645      	mov	r5, r8
 80013b0:	46de      	mov	lr, fp
 80013b2:	b5e0      	push	{r5, r6, r7, lr}
 80013b4:	030c      	lsls	r4, r1, #12
 80013b6:	001f      	movs	r7, r3
 80013b8:	004b      	lsls	r3, r1, #1
 80013ba:	4681      	mov	r9, r0
 80013bc:	4692      	mov	sl, r2
 80013be:	0005      	movs	r5, r0
 80013c0:	b085      	sub	sp, #20
 80013c2:	0b24      	lsrs	r4, r4, #12
 80013c4:	0d5b      	lsrs	r3, r3, #21
 80013c6:	0fce      	lsrs	r6, r1, #31
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d100      	bne.n	80013ce <__aeabi_ddiv+0x26>
 80013cc:	e152      	b.n	8001674 <__aeabi_ddiv+0x2cc>
 80013ce:	4ad2      	ldr	r2, [pc, #840]	; (8001718 <__aeabi_ddiv+0x370>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d100      	bne.n	80013d6 <__aeabi_ddiv+0x2e>
 80013d4:	e16e      	b.n	80016b4 <__aeabi_ddiv+0x30c>
 80013d6:	0f42      	lsrs	r2, r0, #29
 80013d8:	00e4      	lsls	r4, r4, #3
 80013da:	4314      	orrs	r4, r2
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	4322      	orrs	r2, r4
 80013e2:	4690      	mov	r8, r2
 80013e4:	4acd      	ldr	r2, [pc, #820]	; (800171c <__aeabi_ddiv+0x374>)
 80013e6:	00c5      	lsls	r5, r0, #3
 80013e8:	4693      	mov	fp, r2
 80013ea:	449b      	add	fp, r3
 80013ec:	2300      	movs	r3, #0
 80013ee:	4699      	mov	r9, r3
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	033c      	lsls	r4, r7, #12
 80013f4:	007b      	lsls	r3, r7, #1
 80013f6:	4650      	mov	r0, sl
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	0d5b      	lsrs	r3, r3, #21
 80013fc:	0fff      	lsrs	r7, r7, #31
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x5c>
 8001402:	e11a      	b.n	800163a <__aeabi_ddiv+0x292>
 8001404:	4ac4      	ldr	r2, [pc, #784]	; (8001718 <__aeabi_ddiv+0x370>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x64>
 800140a:	e15e      	b.n	80016ca <__aeabi_ddiv+0x322>
 800140c:	0f42      	lsrs	r2, r0, #29
 800140e:	00e4      	lsls	r4, r4, #3
 8001410:	4322      	orrs	r2, r4
 8001412:	2480      	movs	r4, #128	; 0x80
 8001414:	0424      	lsls	r4, r4, #16
 8001416:	4314      	orrs	r4, r2
 8001418:	4ac0      	ldr	r2, [pc, #768]	; (800171c <__aeabi_ddiv+0x374>)
 800141a:	00c1      	lsls	r1, r0, #3
 800141c:	4694      	mov	ip, r2
 800141e:	465a      	mov	r2, fp
 8001420:	4463      	add	r3, ip
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	469b      	mov	fp, r3
 8001426:	2000      	movs	r0, #0
 8001428:	0033      	movs	r3, r6
 800142a:	407b      	eors	r3, r7
 800142c:	469a      	mov	sl, r3
 800142e:	464b      	mov	r3, r9
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d827      	bhi.n	8001484 <__aeabi_ddiv+0xdc>
 8001434:	4aba      	ldr	r2, [pc, #744]	; (8001720 <__aeabi_ddiv+0x378>)
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	58d3      	ldr	r3, [r2, r3]
 800143a:	469f      	mov	pc, r3
 800143c:	46b2      	mov	sl, r6
 800143e:	9b00      	ldr	r3, [sp, #0]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d016      	beq.n	8001472 <__aeabi_ddiv+0xca>
 8001444:	2b03      	cmp	r3, #3
 8001446:	d100      	bne.n	800144a <__aeabi_ddiv+0xa2>
 8001448:	e287      	b.n	800195a <__aeabi_ddiv+0x5b2>
 800144a:	2b01      	cmp	r3, #1
 800144c:	d000      	beq.n	8001450 <__aeabi_ddiv+0xa8>
 800144e:	e0d5      	b.n	80015fc <__aeabi_ddiv+0x254>
 8001450:	2300      	movs	r3, #0
 8001452:	2200      	movs	r2, #0
 8001454:	2500      	movs	r5, #0
 8001456:	051b      	lsls	r3, r3, #20
 8001458:	4313      	orrs	r3, r2
 800145a:	4652      	mov	r2, sl
 800145c:	07d2      	lsls	r2, r2, #31
 800145e:	4313      	orrs	r3, r2
 8001460:	0028      	movs	r0, r5
 8001462:	0019      	movs	r1, r3
 8001464:	b005      	add	sp, #20
 8001466:	bcf0      	pop	{r4, r5, r6, r7}
 8001468:	46bb      	mov	fp, r7
 800146a:	46b2      	mov	sl, r6
 800146c:	46a9      	mov	r9, r5
 800146e:	46a0      	mov	r8, r4
 8001470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001472:	2200      	movs	r2, #0
 8001474:	2500      	movs	r5, #0
 8001476:	4ba8      	ldr	r3, [pc, #672]	; (8001718 <__aeabi_ddiv+0x370>)
 8001478:	e7ed      	b.n	8001456 <__aeabi_ddiv+0xae>
 800147a:	46ba      	mov	sl, r7
 800147c:	46a0      	mov	r8, r4
 800147e:	000d      	movs	r5, r1
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	e7dc      	b.n	800143e <__aeabi_ddiv+0x96>
 8001484:	4544      	cmp	r4, r8
 8001486:	d200      	bcs.n	800148a <__aeabi_ddiv+0xe2>
 8001488:	e1c4      	b.n	8001814 <__aeabi_ddiv+0x46c>
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0xe6>
 800148c:	e1bf      	b.n	800180e <__aeabi_ddiv+0x466>
 800148e:	2301      	movs	r3, #1
 8001490:	425b      	negs	r3, r3
 8001492:	469c      	mov	ip, r3
 8001494:	002e      	movs	r6, r5
 8001496:	4640      	mov	r0, r8
 8001498:	2500      	movs	r5, #0
 800149a:	44e3      	add	fp, ip
 800149c:	0223      	lsls	r3, r4, #8
 800149e:	0e0c      	lsrs	r4, r1, #24
 80014a0:	431c      	orrs	r4, r3
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	4699      	mov	r9, r3
 80014a6:	0423      	lsls	r3, r4, #16
 80014a8:	020a      	lsls	r2, r1, #8
 80014aa:	0c1f      	lsrs	r7, r3, #16
 80014ac:	4649      	mov	r1, r9
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	9701      	str	r7, [sp, #4]
 80014b2:	f7fe fec9 	bl	8000248 <__aeabi_uidivmod>
 80014b6:	0002      	movs	r2, r0
 80014b8:	437a      	muls	r2, r7
 80014ba:	040b      	lsls	r3, r1, #16
 80014bc:	0c31      	lsrs	r1, r6, #16
 80014be:	4680      	mov	r8, r0
 80014c0:	4319      	orrs	r1, r3
 80014c2:	428a      	cmp	r2, r1
 80014c4:	d907      	bls.n	80014d6 <__aeabi_ddiv+0x12e>
 80014c6:	2301      	movs	r3, #1
 80014c8:	425b      	negs	r3, r3
 80014ca:	469c      	mov	ip, r3
 80014cc:	1909      	adds	r1, r1, r4
 80014ce:	44e0      	add	r8, ip
 80014d0:	428c      	cmp	r4, r1
 80014d2:	d800      	bhi.n	80014d6 <__aeabi_ddiv+0x12e>
 80014d4:	e201      	b.n	80018da <__aeabi_ddiv+0x532>
 80014d6:	1a88      	subs	r0, r1, r2
 80014d8:	4649      	mov	r1, r9
 80014da:	f7fe feb5 	bl	8000248 <__aeabi_uidivmod>
 80014de:	9a01      	ldr	r2, [sp, #4]
 80014e0:	0436      	lsls	r6, r6, #16
 80014e2:	4342      	muls	r2, r0
 80014e4:	0409      	lsls	r1, r1, #16
 80014e6:	0c36      	lsrs	r6, r6, #16
 80014e8:	0003      	movs	r3, r0
 80014ea:	430e      	orrs	r6, r1
 80014ec:	42b2      	cmp	r2, r6
 80014ee:	d904      	bls.n	80014fa <__aeabi_ddiv+0x152>
 80014f0:	1936      	adds	r6, r6, r4
 80014f2:	3b01      	subs	r3, #1
 80014f4:	42b4      	cmp	r4, r6
 80014f6:	d800      	bhi.n	80014fa <__aeabi_ddiv+0x152>
 80014f8:	e1e9      	b.n	80018ce <__aeabi_ddiv+0x526>
 80014fa:	1ab0      	subs	r0, r6, r2
 80014fc:	4642      	mov	r2, r8
 80014fe:	9e00      	ldr	r6, [sp, #0]
 8001500:	0412      	lsls	r2, r2, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	0c33      	lsrs	r3, r6, #16
 8001506:	001f      	movs	r7, r3
 8001508:	0c11      	lsrs	r1, r2, #16
 800150a:	4690      	mov	r8, r2
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	0413      	lsls	r3, r2, #16
 8001510:	0432      	lsls	r2, r6, #16
 8001512:	0c16      	lsrs	r6, r2, #16
 8001514:	0032      	movs	r2, r6
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	435a      	muls	r2, r3
 800151a:	9603      	str	r6, [sp, #12]
 800151c:	437b      	muls	r3, r7
 800151e:	434e      	muls	r6, r1
 8001520:	4379      	muls	r1, r7
 8001522:	0c17      	lsrs	r7, r2, #16
 8001524:	46bc      	mov	ip, r7
 8001526:	199b      	adds	r3, r3, r6
 8001528:	4463      	add	r3, ip
 800152a:	429e      	cmp	r6, r3
 800152c:	d903      	bls.n	8001536 <__aeabi_ddiv+0x18e>
 800152e:	2680      	movs	r6, #128	; 0x80
 8001530:	0276      	lsls	r6, r6, #9
 8001532:	46b4      	mov	ip, r6
 8001534:	4461      	add	r1, ip
 8001536:	0c1e      	lsrs	r6, r3, #16
 8001538:	1871      	adds	r1, r6, r1
 800153a:	0416      	lsls	r6, r2, #16
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	0c36      	lsrs	r6, r6, #16
 8001540:	199e      	adds	r6, r3, r6
 8001542:	4288      	cmp	r0, r1
 8001544:	d302      	bcc.n	800154c <__aeabi_ddiv+0x1a4>
 8001546:	d112      	bne.n	800156e <__aeabi_ddiv+0x1c6>
 8001548:	42b5      	cmp	r5, r6
 800154a:	d210      	bcs.n	800156e <__aeabi_ddiv+0x1c6>
 800154c:	4643      	mov	r3, r8
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	9b00      	ldr	r3, [sp, #0]
 8001552:	469c      	mov	ip, r3
 8001554:	4465      	add	r5, ip
 8001556:	001f      	movs	r7, r3
 8001558:	429d      	cmp	r5, r3
 800155a:	419b      	sbcs	r3, r3
 800155c:	425b      	negs	r3, r3
 800155e:	191b      	adds	r3, r3, r4
 8001560:	18c0      	adds	r0, r0, r3
 8001562:	4284      	cmp	r4, r0
 8001564:	d200      	bcs.n	8001568 <__aeabi_ddiv+0x1c0>
 8001566:	e19e      	b.n	80018a6 <__aeabi_ddiv+0x4fe>
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x1c4>
 800156a:	e199      	b.n	80018a0 <__aeabi_ddiv+0x4f8>
 800156c:	4690      	mov	r8, r2
 800156e:	1bae      	subs	r6, r5, r6
 8001570:	42b5      	cmp	r5, r6
 8001572:	41ad      	sbcs	r5, r5
 8001574:	1a40      	subs	r0, r0, r1
 8001576:	426d      	negs	r5, r5
 8001578:	1b40      	subs	r0, r0, r5
 800157a:	4284      	cmp	r4, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x1d8>
 800157e:	e1d2      	b.n	8001926 <__aeabi_ddiv+0x57e>
 8001580:	4649      	mov	r1, r9
 8001582:	f7fe fe61 	bl	8000248 <__aeabi_uidivmod>
 8001586:	9a01      	ldr	r2, [sp, #4]
 8001588:	040b      	lsls	r3, r1, #16
 800158a:	4342      	muls	r2, r0
 800158c:	0c31      	lsrs	r1, r6, #16
 800158e:	0005      	movs	r5, r0
 8001590:	4319      	orrs	r1, r3
 8001592:	428a      	cmp	r2, r1
 8001594:	d900      	bls.n	8001598 <__aeabi_ddiv+0x1f0>
 8001596:	e16c      	b.n	8001872 <__aeabi_ddiv+0x4ca>
 8001598:	1a88      	subs	r0, r1, r2
 800159a:	4649      	mov	r1, r9
 800159c:	f7fe fe54 	bl	8000248 <__aeabi_uidivmod>
 80015a0:	9a01      	ldr	r2, [sp, #4]
 80015a2:	0436      	lsls	r6, r6, #16
 80015a4:	4342      	muls	r2, r0
 80015a6:	0409      	lsls	r1, r1, #16
 80015a8:	0c36      	lsrs	r6, r6, #16
 80015aa:	0003      	movs	r3, r0
 80015ac:	430e      	orrs	r6, r1
 80015ae:	42b2      	cmp	r2, r6
 80015b0:	d900      	bls.n	80015b4 <__aeabi_ddiv+0x20c>
 80015b2:	e153      	b.n	800185c <__aeabi_ddiv+0x4b4>
 80015b4:	9803      	ldr	r0, [sp, #12]
 80015b6:	1ab6      	subs	r6, r6, r2
 80015b8:	0002      	movs	r2, r0
 80015ba:	042d      	lsls	r5, r5, #16
 80015bc:	431d      	orrs	r5, r3
 80015be:	9f02      	ldr	r7, [sp, #8]
 80015c0:	042b      	lsls	r3, r5, #16
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	435a      	muls	r2, r3
 80015c6:	437b      	muls	r3, r7
 80015c8:	469c      	mov	ip, r3
 80015ca:	0c29      	lsrs	r1, r5, #16
 80015cc:	4348      	muls	r0, r1
 80015ce:	0c13      	lsrs	r3, r2, #16
 80015d0:	4484      	add	ip, r0
 80015d2:	4463      	add	r3, ip
 80015d4:	4379      	muls	r1, r7
 80015d6:	4298      	cmp	r0, r3
 80015d8:	d903      	bls.n	80015e2 <__aeabi_ddiv+0x23a>
 80015da:	2080      	movs	r0, #128	; 0x80
 80015dc:	0240      	lsls	r0, r0, #9
 80015de:	4684      	mov	ip, r0
 80015e0:	4461      	add	r1, ip
 80015e2:	0c18      	lsrs	r0, r3, #16
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	1840      	adds	r0, r0, r1
 80015ec:	189b      	adds	r3, r3, r2
 80015ee:	4286      	cmp	r6, r0
 80015f0:	d200      	bcs.n	80015f4 <__aeabi_ddiv+0x24c>
 80015f2:	e100      	b.n	80017f6 <__aeabi_ddiv+0x44e>
 80015f4:	d100      	bne.n	80015f8 <__aeabi_ddiv+0x250>
 80015f6:	e0fb      	b.n	80017f0 <__aeabi_ddiv+0x448>
 80015f8:	2301      	movs	r3, #1
 80015fa:	431d      	orrs	r5, r3
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <__aeabi_ddiv+0x37c>)
 80015fe:	445b      	add	r3, fp
 8001600:	2b00      	cmp	r3, #0
 8001602:	dc00      	bgt.n	8001606 <__aeabi_ddiv+0x25e>
 8001604:	e0aa      	b.n	800175c <__aeabi_ddiv+0x3b4>
 8001606:	076a      	lsls	r2, r5, #29
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0x264>
 800160a:	e13d      	b.n	8001888 <__aeabi_ddiv+0x4e0>
 800160c:	08e9      	lsrs	r1, r5, #3
 800160e:	4642      	mov	r2, r8
 8001610:	01d2      	lsls	r2, r2, #7
 8001612:	d506      	bpl.n	8001622 <__aeabi_ddiv+0x27a>
 8001614:	4642      	mov	r2, r8
 8001616:	4b44      	ldr	r3, [pc, #272]	; (8001728 <__aeabi_ddiv+0x380>)
 8001618:	401a      	ands	r2, r3
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	4690      	mov	r8, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	445b      	add	r3, fp
 8001622:	4a42      	ldr	r2, [pc, #264]	; (800172c <__aeabi_ddiv+0x384>)
 8001624:	4293      	cmp	r3, r2
 8001626:	dd00      	ble.n	800162a <__aeabi_ddiv+0x282>
 8001628:	e723      	b.n	8001472 <__aeabi_ddiv+0xca>
 800162a:	4642      	mov	r2, r8
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	0755      	lsls	r5, r2, #29
 8001630:	0252      	lsls	r2, r2, #9
 8001632:	430d      	orrs	r5, r1
 8001634:	0b12      	lsrs	r2, r2, #12
 8001636:	0d5b      	lsrs	r3, r3, #21
 8001638:	e70d      	b.n	8001456 <__aeabi_ddiv+0xae>
 800163a:	4651      	mov	r1, sl
 800163c:	4321      	orrs	r1, r4
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x29a>
 8001640:	e07c      	b.n	800173c <__aeabi_ddiv+0x394>
 8001642:	2c00      	cmp	r4, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x2a0>
 8001646:	e0fb      	b.n	8001840 <__aeabi_ddiv+0x498>
 8001648:	0020      	movs	r0, r4
 800164a:	f001 f9dd 	bl	8002a08 <__clzsi2>
 800164e:	0002      	movs	r2, r0
 8001650:	3a0b      	subs	r2, #11
 8001652:	231d      	movs	r3, #29
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	4652      	mov	r2, sl
 8001658:	0001      	movs	r1, r0
 800165a:	40da      	lsrs	r2, r3
 800165c:	4653      	mov	r3, sl
 800165e:	3908      	subs	r1, #8
 8001660:	408b      	lsls	r3, r1
 8001662:	408c      	lsls	r4, r1
 8001664:	0019      	movs	r1, r3
 8001666:	4314      	orrs	r4, r2
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <__aeabi_ddiv+0x388>)
 800166a:	4458      	add	r0, fp
 800166c:	469b      	mov	fp, r3
 800166e:	4483      	add	fp, r0
 8001670:	2000      	movs	r0, #0
 8001672:	e6d9      	b.n	8001428 <__aeabi_ddiv+0x80>
 8001674:	0003      	movs	r3, r0
 8001676:	4323      	orrs	r3, r4
 8001678:	4698      	mov	r8, r3
 800167a:	d044      	beq.n	8001706 <__aeabi_ddiv+0x35e>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x2da>
 8001680:	e0cf      	b.n	8001822 <__aeabi_ddiv+0x47a>
 8001682:	0020      	movs	r0, r4
 8001684:	f001 f9c0 	bl	8002a08 <__clzsi2>
 8001688:	0001      	movs	r1, r0
 800168a:	0002      	movs	r2, r0
 800168c:	390b      	subs	r1, #11
 800168e:	231d      	movs	r3, #29
 8001690:	1a5b      	subs	r3, r3, r1
 8001692:	4649      	mov	r1, r9
 8001694:	0010      	movs	r0, r2
 8001696:	40d9      	lsrs	r1, r3
 8001698:	3808      	subs	r0, #8
 800169a:	4084      	lsls	r4, r0
 800169c:	000b      	movs	r3, r1
 800169e:	464d      	mov	r5, r9
 80016a0:	4323      	orrs	r3, r4
 80016a2:	4698      	mov	r8, r3
 80016a4:	4085      	lsls	r5, r0
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <__aeabi_ddiv+0x38c>)
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	e69e      	b.n	80013f2 <__aeabi_ddiv+0x4a>
 80016b4:	0002      	movs	r2, r0
 80016b6:	4322      	orrs	r2, r4
 80016b8:	4690      	mov	r8, r2
 80016ba:	d11d      	bne.n	80016f8 <__aeabi_ddiv+0x350>
 80016bc:	2208      	movs	r2, #8
 80016be:	469b      	mov	fp, r3
 80016c0:	2302      	movs	r3, #2
 80016c2:	2500      	movs	r5, #0
 80016c4:	4691      	mov	r9, r2
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	e693      	b.n	80013f2 <__aeabi_ddiv+0x4a>
 80016ca:	4651      	mov	r1, sl
 80016cc:	4321      	orrs	r1, r4
 80016ce:	d109      	bne.n	80016e4 <__aeabi_ddiv+0x33c>
 80016d0:	2302      	movs	r3, #2
 80016d2:	464a      	mov	r2, r9
 80016d4:	431a      	orrs	r2, r3
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <__aeabi_ddiv+0x390>)
 80016d8:	4691      	mov	r9, r2
 80016da:	469c      	mov	ip, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	2002      	movs	r0, #2
 80016e0:	44e3      	add	fp, ip
 80016e2:	e6a1      	b.n	8001428 <__aeabi_ddiv+0x80>
 80016e4:	2303      	movs	r3, #3
 80016e6:	464a      	mov	r2, r9
 80016e8:	431a      	orrs	r2, r3
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <__aeabi_ddiv+0x390>)
 80016ec:	4691      	mov	r9, r2
 80016ee:	469c      	mov	ip, r3
 80016f0:	4651      	mov	r1, sl
 80016f2:	2003      	movs	r0, #3
 80016f4:	44e3      	add	fp, ip
 80016f6:	e697      	b.n	8001428 <__aeabi_ddiv+0x80>
 80016f8:	220c      	movs	r2, #12
 80016fa:	469b      	mov	fp, r3
 80016fc:	2303      	movs	r3, #3
 80016fe:	46a0      	mov	r8, r4
 8001700:	4691      	mov	r9, r2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	e675      	b.n	80013f2 <__aeabi_ddiv+0x4a>
 8001706:	2304      	movs	r3, #4
 8001708:	4699      	mov	r9, r3
 800170a:	2300      	movs	r3, #0
 800170c:	469b      	mov	fp, r3
 800170e:	3301      	adds	r3, #1
 8001710:	2500      	movs	r5, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	e66d      	b.n	80013f2 <__aeabi_ddiv+0x4a>
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	000007ff 	.word	0x000007ff
 800171c:	fffffc01 	.word	0xfffffc01
 8001720:	0800a2f0 	.word	0x0800a2f0
 8001724:	000003ff 	.word	0x000003ff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	000007fe 	.word	0x000007fe
 8001730:	000003f3 	.word	0x000003f3
 8001734:	fffffc0d 	.word	0xfffffc0d
 8001738:	fffff801 	.word	0xfffff801
 800173c:	464a      	mov	r2, r9
 800173e:	2301      	movs	r3, #1
 8001740:	431a      	orrs	r2, r3
 8001742:	4691      	mov	r9, r2
 8001744:	2400      	movs	r4, #0
 8001746:	2001      	movs	r0, #1
 8001748:	e66e      	b.n	8001428 <__aeabi_ddiv+0x80>
 800174a:	2300      	movs	r3, #0
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	469a      	mov	sl, r3
 8001750:	2500      	movs	r5, #0
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <__aeabi_ddiv+0x5cc>)
 8001754:	0312      	lsls	r2, r2, #12
 8001756:	e67e      	b.n	8001456 <__aeabi_ddiv+0xae>
 8001758:	2501      	movs	r5, #1
 800175a:	426d      	negs	r5, r5
 800175c:	2201      	movs	r2, #1
 800175e:	1ad2      	subs	r2, r2, r3
 8001760:	2a38      	cmp	r2, #56	; 0x38
 8001762:	dd00      	ble.n	8001766 <__aeabi_ddiv+0x3be>
 8001764:	e674      	b.n	8001450 <__aeabi_ddiv+0xa8>
 8001766:	2a1f      	cmp	r2, #31
 8001768:	dc00      	bgt.n	800176c <__aeabi_ddiv+0x3c4>
 800176a:	e0bd      	b.n	80018e8 <__aeabi_ddiv+0x540>
 800176c:	211f      	movs	r1, #31
 800176e:	4249      	negs	r1, r1
 8001770:	1acb      	subs	r3, r1, r3
 8001772:	4641      	mov	r1, r8
 8001774:	40d9      	lsrs	r1, r3
 8001776:	000b      	movs	r3, r1
 8001778:	2a20      	cmp	r2, #32
 800177a:	d004      	beq.n	8001786 <__aeabi_ddiv+0x3de>
 800177c:	4641      	mov	r1, r8
 800177e:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <__aeabi_ddiv+0x5d0>)
 8001780:	445a      	add	r2, fp
 8001782:	4091      	lsls	r1, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	0029      	movs	r1, r5
 8001788:	1e4a      	subs	r2, r1, #1
 800178a:	4191      	sbcs	r1, r2
 800178c:	4319      	orrs	r1, r3
 800178e:	2307      	movs	r3, #7
 8001790:	001d      	movs	r5, r3
 8001792:	2200      	movs	r2, #0
 8001794:	400d      	ands	r5, r1
 8001796:	420b      	tst	r3, r1
 8001798:	d100      	bne.n	800179c <__aeabi_ddiv+0x3f4>
 800179a:	e0d0      	b.n	800193e <__aeabi_ddiv+0x596>
 800179c:	220f      	movs	r2, #15
 800179e:	2300      	movs	r3, #0
 80017a0:	400a      	ands	r2, r1
 80017a2:	2a04      	cmp	r2, #4
 80017a4:	d100      	bne.n	80017a8 <__aeabi_ddiv+0x400>
 80017a6:	e0c7      	b.n	8001938 <__aeabi_ddiv+0x590>
 80017a8:	1d0a      	adds	r2, r1, #4
 80017aa:	428a      	cmp	r2, r1
 80017ac:	4189      	sbcs	r1, r1
 80017ae:	4249      	negs	r1, r1
 80017b0:	185b      	adds	r3, r3, r1
 80017b2:	0011      	movs	r1, r2
 80017b4:	021a      	lsls	r2, r3, #8
 80017b6:	d400      	bmi.n	80017ba <__aeabi_ddiv+0x412>
 80017b8:	e0be      	b.n	8001938 <__aeabi_ddiv+0x590>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2200      	movs	r2, #0
 80017be:	2500      	movs	r5, #0
 80017c0:	e649      	b.n	8001456 <__aeabi_ddiv+0xae>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	4643      	mov	r3, r8
 80017c6:	0312      	lsls	r2, r2, #12
 80017c8:	4213      	tst	r3, r2
 80017ca:	d008      	beq.n	80017de <__aeabi_ddiv+0x436>
 80017cc:	4214      	tst	r4, r2
 80017ce:	d106      	bne.n	80017de <__aeabi_ddiv+0x436>
 80017d0:	4322      	orrs	r2, r4
 80017d2:	0312      	lsls	r2, r2, #12
 80017d4:	46ba      	mov	sl, r7
 80017d6:	000d      	movs	r5, r1
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <__aeabi_ddiv+0x5cc>)
 80017da:	0b12      	lsrs	r2, r2, #12
 80017dc:	e63b      	b.n	8001456 <__aeabi_ddiv+0xae>
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	4643      	mov	r3, r8
 80017e2:	0312      	lsls	r2, r2, #12
 80017e4:	431a      	orrs	r2, r3
 80017e6:	0312      	lsls	r2, r2, #12
 80017e8:	46b2      	mov	sl, r6
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <__aeabi_ddiv+0x5cc>)
 80017ec:	0b12      	lsrs	r2, r2, #12
 80017ee:	e632      	b.n	8001456 <__aeabi_ddiv+0xae>
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0x44e>
 80017f4:	e702      	b.n	80015fc <__aeabi_ddiv+0x254>
 80017f6:	19a6      	adds	r6, r4, r6
 80017f8:	1e6a      	subs	r2, r5, #1
 80017fa:	42a6      	cmp	r6, r4
 80017fc:	d200      	bcs.n	8001800 <__aeabi_ddiv+0x458>
 80017fe:	e089      	b.n	8001914 <__aeabi_ddiv+0x56c>
 8001800:	4286      	cmp	r6, r0
 8001802:	d200      	bcs.n	8001806 <__aeabi_ddiv+0x45e>
 8001804:	e09f      	b.n	8001946 <__aeabi_ddiv+0x59e>
 8001806:	d100      	bne.n	800180a <__aeabi_ddiv+0x462>
 8001808:	e0af      	b.n	800196a <__aeabi_ddiv+0x5c2>
 800180a:	0015      	movs	r5, r2
 800180c:	e6f4      	b.n	80015f8 <__aeabi_ddiv+0x250>
 800180e:	42a9      	cmp	r1, r5
 8001810:	d900      	bls.n	8001814 <__aeabi_ddiv+0x46c>
 8001812:	e63c      	b.n	800148e <__aeabi_ddiv+0xe6>
 8001814:	4643      	mov	r3, r8
 8001816:	07de      	lsls	r6, r3, #31
 8001818:	0858      	lsrs	r0, r3, #1
 800181a:	086b      	lsrs	r3, r5, #1
 800181c:	431e      	orrs	r6, r3
 800181e:	07ed      	lsls	r5, r5, #31
 8001820:	e63c      	b.n	800149c <__aeabi_ddiv+0xf4>
 8001822:	f001 f8f1 	bl	8002a08 <__clzsi2>
 8001826:	0001      	movs	r1, r0
 8001828:	0002      	movs	r2, r0
 800182a:	3115      	adds	r1, #21
 800182c:	3220      	adds	r2, #32
 800182e:	291c      	cmp	r1, #28
 8001830:	dc00      	bgt.n	8001834 <__aeabi_ddiv+0x48c>
 8001832:	e72c      	b.n	800168e <__aeabi_ddiv+0x2e6>
 8001834:	464b      	mov	r3, r9
 8001836:	3808      	subs	r0, #8
 8001838:	4083      	lsls	r3, r0
 800183a:	2500      	movs	r5, #0
 800183c:	4698      	mov	r8, r3
 800183e:	e732      	b.n	80016a6 <__aeabi_ddiv+0x2fe>
 8001840:	f001 f8e2 	bl	8002a08 <__clzsi2>
 8001844:	0003      	movs	r3, r0
 8001846:	001a      	movs	r2, r3
 8001848:	3215      	adds	r2, #21
 800184a:	3020      	adds	r0, #32
 800184c:	2a1c      	cmp	r2, #28
 800184e:	dc00      	bgt.n	8001852 <__aeabi_ddiv+0x4aa>
 8001850:	e6ff      	b.n	8001652 <__aeabi_ddiv+0x2aa>
 8001852:	4654      	mov	r4, sl
 8001854:	3b08      	subs	r3, #8
 8001856:	2100      	movs	r1, #0
 8001858:	409c      	lsls	r4, r3
 800185a:	e705      	b.n	8001668 <__aeabi_ddiv+0x2c0>
 800185c:	1936      	adds	r6, r6, r4
 800185e:	3b01      	subs	r3, #1
 8001860:	42b4      	cmp	r4, r6
 8001862:	d900      	bls.n	8001866 <__aeabi_ddiv+0x4be>
 8001864:	e6a6      	b.n	80015b4 <__aeabi_ddiv+0x20c>
 8001866:	42b2      	cmp	r2, r6
 8001868:	d800      	bhi.n	800186c <__aeabi_ddiv+0x4c4>
 800186a:	e6a3      	b.n	80015b4 <__aeabi_ddiv+0x20c>
 800186c:	1e83      	subs	r3, r0, #2
 800186e:	1936      	adds	r6, r6, r4
 8001870:	e6a0      	b.n	80015b4 <__aeabi_ddiv+0x20c>
 8001872:	1909      	adds	r1, r1, r4
 8001874:	3d01      	subs	r5, #1
 8001876:	428c      	cmp	r4, r1
 8001878:	d900      	bls.n	800187c <__aeabi_ddiv+0x4d4>
 800187a:	e68d      	b.n	8001598 <__aeabi_ddiv+0x1f0>
 800187c:	428a      	cmp	r2, r1
 800187e:	d800      	bhi.n	8001882 <__aeabi_ddiv+0x4da>
 8001880:	e68a      	b.n	8001598 <__aeabi_ddiv+0x1f0>
 8001882:	1e85      	subs	r5, r0, #2
 8001884:	1909      	adds	r1, r1, r4
 8001886:	e687      	b.n	8001598 <__aeabi_ddiv+0x1f0>
 8001888:	220f      	movs	r2, #15
 800188a:	402a      	ands	r2, r5
 800188c:	2a04      	cmp	r2, #4
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x4ea>
 8001890:	e6bc      	b.n	800160c <__aeabi_ddiv+0x264>
 8001892:	1d29      	adds	r1, r5, #4
 8001894:	42a9      	cmp	r1, r5
 8001896:	41ad      	sbcs	r5, r5
 8001898:	426d      	negs	r5, r5
 800189a:	08c9      	lsrs	r1, r1, #3
 800189c:	44a8      	add	r8, r5
 800189e:	e6b6      	b.n	800160e <__aeabi_ddiv+0x266>
 80018a0:	42af      	cmp	r7, r5
 80018a2:	d900      	bls.n	80018a6 <__aeabi_ddiv+0x4fe>
 80018a4:	e662      	b.n	800156c <__aeabi_ddiv+0x1c4>
 80018a6:	4281      	cmp	r1, r0
 80018a8:	d804      	bhi.n	80018b4 <__aeabi_ddiv+0x50c>
 80018aa:	d000      	beq.n	80018ae <__aeabi_ddiv+0x506>
 80018ac:	e65e      	b.n	800156c <__aeabi_ddiv+0x1c4>
 80018ae:	42ae      	cmp	r6, r5
 80018b0:	d800      	bhi.n	80018b4 <__aeabi_ddiv+0x50c>
 80018b2:	e65b      	b.n	800156c <__aeabi_ddiv+0x1c4>
 80018b4:	2302      	movs	r3, #2
 80018b6:	425b      	negs	r3, r3
 80018b8:	469c      	mov	ip, r3
 80018ba:	9b00      	ldr	r3, [sp, #0]
 80018bc:	44e0      	add	r8, ip
 80018be:	469c      	mov	ip, r3
 80018c0:	4465      	add	r5, ip
 80018c2:	429d      	cmp	r5, r3
 80018c4:	419b      	sbcs	r3, r3
 80018c6:	425b      	negs	r3, r3
 80018c8:	191b      	adds	r3, r3, r4
 80018ca:	18c0      	adds	r0, r0, r3
 80018cc:	e64f      	b.n	800156e <__aeabi_ddiv+0x1c6>
 80018ce:	42b2      	cmp	r2, r6
 80018d0:	d800      	bhi.n	80018d4 <__aeabi_ddiv+0x52c>
 80018d2:	e612      	b.n	80014fa <__aeabi_ddiv+0x152>
 80018d4:	1e83      	subs	r3, r0, #2
 80018d6:	1936      	adds	r6, r6, r4
 80018d8:	e60f      	b.n	80014fa <__aeabi_ddiv+0x152>
 80018da:	428a      	cmp	r2, r1
 80018dc:	d800      	bhi.n	80018e0 <__aeabi_ddiv+0x538>
 80018de:	e5fa      	b.n	80014d6 <__aeabi_ddiv+0x12e>
 80018e0:	1e83      	subs	r3, r0, #2
 80018e2:	4698      	mov	r8, r3
 80018e4:	1909      	adds	r1, r1, r4
 80018e6:	e5f6      	b.n	80014d6 <__aeabi_ddiv+0x12e>
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <__aeabi_ddiv+0x5d4>)
 80018ea:	0028      	movs	r0, r5
 80018ec:	445b      	add	r3, fp
 80018ee:	4641      	mov	r1, r8
 80018f0:	409d      	lsls	r5, r3
 80018f2:	4099      	lsls	r1, r3
 80018f4:	40d0      	lsrs	r0, r2
 80018f6:	1e6b      	subs	r3, r5, #1
 80018f8:	419d      	sbcs	r5, r3
 80018fa:	4643      	mov	r3, r8
 80018fc:	4301      	orrs	r1, r0
 80018fe:	4329      	orrs	r1, r5
 8001900:	40d3      	lsrs	r3, r2
 8001902:	074a      	lsls	r2, r1, #29
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0x560>
 8001906:	e755      	b.n	80017b4 <__aeabi_ddiv+0x40c>
 8001908:	220f      	movs	r2, #15
 800190a:	400a      	ands	r2, r1
 800190c:	2a04      	cmp	r2, #4
 800190e:	d000      	beq.n	8001912 <__aeabi_ddiv+0x56a>
 8001910:	e74a      	b.n	80017a8 <__aeabi_ddiv+0x400>
 8001912:	e74f      	b.n	80017b4 <__aeabi_ddiv+0x40c>
 8001914:	0015      	movs	r5, r2
 8001916:	4286      	cmp	r6, r0
 8001918:	d000      	beq.n	800191c <__aeabi_ddiv+0x574>
 800191a:	e66d      	b.n	80015f8 <__aeabi_ddiv+0x250>
 800191c:	9a00      	ldr	r2, [sp, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d000      	beq.n	8001924 <__aeabi_ddiv+0x57c>
 8001922:	e669      	b.n	80015f8 <__aeabi_ddiv+0x250>
 8001924:	e66a      	b.n	80015fc <__aeabi_ddiv+0x254>
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <__aeabi_ddiv+0x5d8>)
 8001928:	445b      	add	r3, fp
 800192a:	2b00      	cmp	r3, #0
 800192c:	dc00      	bgt.n	8001930 <__aeabi_ddiv+0x588>
 800192e:	e713      	b.n	8001758 <__aeabi_ddiv+0x3b0>
 8001930:	2501      	movs	r5, #1
 8001932:	2100      	movs	r1, #0
 8001934:	44a8      	add	r8, r5
 8001936:	e66a      	b.n	800160e <__aeabi_ddiv+0x266>
 8001938:	075d      	lsls	r5, r3, #29
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	0b1a      	lsrs	r2, r3, #12
 800193e:	08c9      	lsrs	r1, r1, #3
 8001940:	2300      	movs	r3, #0
 8001942:	430d      	orrs	r5, r1
 8001944:	e587      	b.n	8001456 <__aeabi_ddiv+0xae>
 8001946:	9900      	ldr	r1, [sp, #0]
 8001948:	3d02      	subs	r5, #2
 800194a:	004a      	lsls	r2, r1, #1
 800194c:	428a      	cmp	r2, r1
 800194e:	41bf      	sbcs	r7, r7
 8001950:	427f      	negs	r7, r7
 8001952:	193f      	adds	r7, r7, r4
 8001954:	19f6      	adds	r6, r6, r7
 8001956:	9200      	str	r2, [sp, #0]
 8001958:	e7dd      	b.n	8001916 <__aeabi_ddiv+0x56e>
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	4643      	mov	r3, r8
 800195e:	0312      	lsls	r2, r2, #12
 8001960:	431a      	orrs	r2, r3
 8001962:	0312      	lsls	r2, r2, #12
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <__aeabi_ddiv+0x5cc>)
 8001966:	0b12      	lsrs	r2, r2, #12
 8001968:	e575      	b.n	8001456 <__aeabi_ddiv+0xae>
 800196a:	9900      	ldr	r1, [sp, #0]
 800196c:	4299      	cmp	r1, r3
 800196e:	d3ea      	bcc.n	8001946 <__aeabi_ddiv+0x59e>
 8001970:	0015      	movs	r5, r2
 8001972:	e7d3      	b.n	800191c <__aeabi_ddiv+0x574>
 8001974:	000007ff 	.word	0x000007ff
 8001978:	0000043e 	.word	0x0000043e
 800197c:	0000041e 	.word	0x0000041e
 8001980:	000003ff 	.word	0x000003ff

08001984 <__eqdf2>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	464e      	mov	r6, r9
 8001988:	4645      	mov	r5, r8
 800198a:	46de      	mov	lr, fp
 800198c:	4657      	mov	r7, sl
 800198e:	4690      	mov	r8, r2
 8001990:	b5e0      	push	{r5, r6, r7, lr}
 8001992:	0017      	movs	r7, r2
 8001994:	031a      	lsls	r2, r3, #12
 8001996:	0b12      	lsrs	r2, r2, #12
 8001998:	0005      	movs	r5, r0
 800199a:	4684      	mov	ip, r0
 800199c:	4819      	ldr	r0, [pc, #100]	; (8001a04 <__eqdf2+0x80>)
 800199e:	030e      	lsls	r6, r1, #12
 80019a0:	004c      	lsls	r4, r1, #1
 80019a2:	4691      	mov	r9, r2
 80019a4:	005a      	lsls	r2, r3, #1
 80019a6:	0fdb      	lsrs	r3, r3, #31
 80019a8:	469b      	mov	fp, r3
 80019aa:	0b36      	lsrs	r6, r6, #12
 80019ac:	0d64      	lsrs	r4, r4, #21
 80019ae:	0fc9      	lsrs	r1, r1, #31
 80019b0:	0d52      	lsrs	r2, r2, #21
 80019b2:	4284      	cmp	r4, r0
 80019b4:	d019      	beq.n	80019ea <__eqdf2+0x66>
 80019b6:	4282      	cmp	r2, r0
 80019b8:	d010      	beq.n	80019dc <__eqdf2+0x58>
 80019ba:	2001      	movs	r0, #1
 80019bc:	4294      	cmp	r4, r2
 80019be:	d10e      	bne.n	80019de <__eqdf2+0x5a>
 80019c0:	454e      	cmp	r6, r9
 80019c2:	d10c      	bne.n	80019de <__eqdf2+0x5a>
 80019c4:	2001      	movs	r0, #1
 80019c6:	45c4      	cmp	ip, r8
 80019c8:	d109      	bne.n	80019de <__eqdf2+0x5a>
 80019ca:	4559      	cmp	r1, fp
 80019cc:	d017      	beq.n	80019fe <__eqdf2+0x7a>
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d105      	bne.n	80019de <__eqdf2+0x5a>
 80019d2:	0030      	movs	r0, r6
 80019d4:	4328      	orrs	r0, r5
 80019d6:	1e43      	subs	r3, r0, #1
 80019d8:	4198      	sbcs	r0, r3
 80019da:	e000      	b.n	80019de <__eqdf2+0x5a>
 80019dc:	2001      	movs	r0, #1
 80019de:	bcf0      	pop	{r4, r5, r6, r7}
 80019e0:	46bb      	mov	fp, r7
 80019e2:	46b2      	mov	sl, r6
 80019e4:	46a9      	mov	r9, r5
 80019e6:	46a0      	mov	r8, r4
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ea:	0033      	movs	r3, r6
 80019ec:	2001      	movs	r0, #1
 80019ee:	432b      	orrs	r3, r5
 80019f0:	d1f5      	bne.n	80019de <__eqdf2+0x5a>
 80019f2:	42a2      	cmp	r2, r4
 80019f4:	d1f3      	bne.n	80019de <__eqdf2+0x5a>
 80019f6:	464b      	mov	r3, r9
 80019f8:	433b      	orrs	r3, r7
 80019fa:	d1f0      	bne.n	80019de <__eqdf2+0x5a>
 80019fc:	e7e2      	b.n	80019c4 <__eqdf2+0x40>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7ed      	b.n	80019de <__eqdf2+0x5a>
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__gedf2>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4647      	mov	r7, r8
 8001a0c:	46ce      	mov	lr, r9
 8001a0e:	0004      	movs	r4, r0
 8001a10:	0018      	movs	r0, r3
 8001a12:	0016      	movs	r6, r2
 8001a14:	031b      	lsls	r3, r3, #12
 8001a16:	0b1b      	lsrs	r3, r3, #12
 8001a18:	4d2d      	ldr	r5, [pc, #180]	; (8001ad0 <__gedf2+0xc8>)
 8001a1a:	004a      	lsls	r2, r1, #1
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	0043      	lsls	r3, r0, #1
 8001a22:	030f      	lsls	r7, r1, #12
 8001a24:	46a4      	mov	ip, r4
 8001a26:	46b0      	mov	r8, r6
 8001a28:	0b3f      	lsrs	r7, r7, #12
 8001a2a:	0d52      	lsrs	r2, r2, #21
 8001a2c:	0fc9      	lsrs	r1, r1, #31
 8001a2e:	0d5b      	lsrs	r3, r3, #21
 8001a30:	0fc0      	lsrs	r0, r0, #31
 8001a32:	42aa      	cmp	r2, r5
 8001a34:	d021      	beq.n	8001a7a <__gedf2+0x72>
 8001a36:	42ab      	cmp	r3, r5
 8001a38:	d013      	beq.n	8001a62 <__gedf2+0x5a>
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d122      	bne.n	8001a84 <__gedf2+0x7c>
 8001a3e:	433c      	orrs	r4, r7
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <__gedf2+0x42>
 8001a44:	464d      	mov	r5, r9
 8001a46:	432e      	orrs	r6, r5
 8001a48:	d022      	beq.n	8001a90 <__gedf2+0x88>
 8001a4a:	2c00      	cmp	r4, #0
 8001a4c:	d010      	beq.n	8001a70 <__gedf2+0x68>
 8001a4e:	4281      	cmp	r1, r0
 8001a50:	d022      	beq.n	8001a98 <__gedf2+0x90>
 8001a52:	2002      	movs	r0, #2
 8001a54:	3901      	subs	r1, #1
 8001a56:	4008      	ands	r0, r1
 8001a58:	3801      	subs	r0, #1
 8001a5a:	bcc0      	pop	{r6, r7}
 8001a5c:	46b9      	mov	r9, r7
 8001a5e:	46b0      	mov	r8, r6
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	464d      	mov	r5, r9
 8001a64:	432e      	orrs	r6, r5
 8001a66:	d129      	bne.n	8001abc <__gedf2+0xb4>
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d1f0      	bne.n	8001a4e <__gedf2+0x46>
 8001a6c:	433c      	orrs	r4, r7
 8001a6e:	d1ee      	bne.n	8001a4e <__gedf2+0x46>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1f2      	bne.n	8001a5a <__gedf2+0x52>
 8001a74:	2001      	movs	r0, #1
 8001a76:	4240      	negs	r0, r0
 8001a78:	e7ef      	b.n	8001a5a <__gedf2+0x52>
 8001a7a:	003d      	movs	r5, r7
 8001a7c:	4325      	orrs	r5, r4
 8001a7e:	d11d      	bne.n	8001abc <__gedf2+0xb4>
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d0ee      	beq.n	8001a62 <__gedf2+0x5a>
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e2      	bne.n	8001a4e <__gedf2+0x46>
 8001a88:	464c      	mov	r4, r9
 8001a8a:	4326      	orrs	r6, r4
 8001a8c:	d1df      	bne.n	8001a4e <__gedf2+0x46>
 8001a8e:	e7e0      	b.n	8001a52 <__gedf2+0x4a>
 8001a90:	2000      	movs	r0, #0
 8001a92:	2c00      	cmp	r4, #0
 8001a94:	d0e1      	beq.n	8001a5a <__gedf2+0x52>
 8001a96:	e7dc      	b.n	8001a52 <__gedf2+0x4a>
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dc0a      	bgt.n	8001ab2 <__gedf2+0xaa>
 8001a9c:	dbe8      	blt.n	8001a70 <__gedf2+0x68>
 8001a9e:	454f      	cmp	r7, r9
 8001aa0:	d8d7      	bhi.n	8001a52 <__gedf2+0x4a>
 8001aa2:	d00e      	beq.n	8001ac2 <__gedf2+0xba>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	454f      	cmp	r7, r9
 8001aa8:	d2d7      	bcs.n	8001a5a <__gedf2+0x52>
 8001aaa:	2900      	cmp	r1, #0
 8001aac:	d0e2      	beq.n	8001a74 <__gedf2+0x6c>
 8001aae:	0008      	movs	r0, r1
 8001ab0:	e7d3      	b.n	8001a5a <__gedf2+0x52>
 8001ab2:	4243      	negs	r3, r0
 8001ab4:	4158      	adcs	r0, r3
 8001ab6:	0040      	lsls	r0, r0, #1
 8001ab8:	3801      	subs	r0, #1
 8001aba:	e7ce      	b.n	8001a5a <__gedf2+0x52>
 8001abc:	2002      	movs	r0, #2
 8001abe:	4240      	negs	r0, r0
 8001ac0:	e7cb      	b.n	8001a5a <__gedf2+0x52>
 8001ac2:	45c4      	cmp	ip, r8
 8001ac4:	d8c5      	bhi.n	8001a52 <__gedf2+0x4a>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	45c4      	cmp	ip, r8
 8001aca:	d2c6      	bcs.n	8001a5a <__gedf2+0x52>
 8001acc:	e7ed      	b.n	8001aaa <__gedf2+0xa2>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff

08001ad4 <__ledf2>:
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad6:	4647      	mov	r7, r8
 8001ad8:	46ce      	mov	lr, r9
 8001ada:	0004      	movs	r4, r0
 8001adc:	0018      	movs	r0, r3
 8001ade:	0016      	movs	r6, r2
 8001ae0:	031b      	lsls	r3, r3, #12
 8001ae2:	0b1b      	lsrs	r3, r3, #12
 8001ae4:	4d2c      	ldr	r5, [pc, #176]	; (8001b98 <__ledf2+0xc4>)
 8001ae6:	004a      	lsls	r2, r1, #1
 8001ae8:	4699      	mov	r9, r3
 8001aea:	b580      	push	{r7, lr}
 8001aec:	0043      	lsls	r3, r0, #1
 8001aee:	030f      	lsls	r7, r1, #12
 8001af0:	46a4      	mov	ip, r4
 8001af2:	46b0      	mov	r8, r6
 8001af4:	0b3f      	lsrs	r7, r7, #12
 8001af6:	0d52      	lsrs	r2, r2, #21
 8001af8:	0fc9      	lsrs	r1, r1, #31
 8001afa:	0d5b      	lsrs	r3, r3, #21
 8001afc:	0fc0      	lsrs	r0, r0, #31
 8001afe:	42aa      	cmp	r2, r5
 8001b00:	d00d      	beq.n	8001b1e <__ledf2+0x4a>
 8001b02:	42ab      	cmp	r3, r5
 8001b04:	d010      	beq.n	8001b28 <__ledf2+0x54>
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d127      	bne.n	8001b5a <__ledf2+0x86>
 8001b0a:	433c      	orrs	r4, r7
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <__ledf2+0x60>
 8001b10:	464d      	mov	r5, r9
 8001b12:	432e      	orrs	r6, r5
 8001b14:	d10e      	bne.n	8001b34 <__ledf2+0x60>
 8001b16:	2000      	movs	r0, #0
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d015      	beq.n	8001b48 <__ledf2+0x74>
 8001b1c:	e00e      	b.n	8001b3c <__ledf2+0x68>
 8001b1e:	003d      	movs	r5, r7
 8001b20:	4325      	orrs	r5, r4
 8001b22:	d110      	bne.n	8001b46 <__ledf2+0x72>
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d118      	bne.n	8001b5a <__ledf2+0x86>
 8001b28:	464d      	mov	r5, r9
 8001b2a:	432e      	orrs	r6, r5
 8001b2c:	d10b      	bne.n	8001b46 <__ledf2+0x72>
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d102      	bne.n	8001b38 <__ledf2+0x64>
 8001b32:	433c      	orrs	r4, r7
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d00b      	beq.n	8001b50 <__ledf2+0x7c>
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d014      	beq.n	8001b66 <__ledf2+0x92>
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	3901      	subs	r1, #1
 8001b40:	4008      	ands	r0, r1
 8001b42:	3801      	subs	r0, #1
 8001b44:	e000      	b.n	8001b48 <__ledf2+0x74>
 8001b46:	2002      	movs	r0, #2
 8001b48:	bcc0      	pop	{r6, r7}
 8001b4a:	46b9      	mov	r9, r7
 8001b4c:	46b0      	mov	r8, r6
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d1f9      	bne.n	8001b48 <__ledf2+0x74>
 8001b54:	2001      	movs	r0, #1
 8001b56:	4240      	negs	r0, r0
 8001b58:	e7f6      	b.n	8001b48 <__ledf2+0x74>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ec      	bne.n	8001b38 <__ledf2+0x64>
 8001b5e:	464c      	mov	r4, r9
 8001b60:	4326      	orrs	r6, r4
 8001b62:	d1e9      	bne.n	8001b38 <__ledf2+0x64>
 8001b64:	e7ea      	b.n	8001b3c <__ledf2+0x68>
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dd04      	ble.n	8001b74 <__ledf2+0xa0>
 8001b6a:	4243      	negs	r3, r0
 8001b6c:	4158      	adcs	r0, r3
 8001b6e:	0040      	lsls	r0, r0, #1
 8001b70:	3801      	subs	r0, #1
 8001b72:	e7e9      	b.n	8001b48 <__ledf2+0x74>
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbeb      	blt.n	8001b50 <__ledf2+0x7c>
 8001b78:	454f      	cmp	r7, r9
 8001b7a:	d8df      	bhi.n	8001b3c <__ledf2+0x68>
 8001b7c:	d006      	beq.n	8001b8c <__ledf2+0xb8>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	454f      	cmp	r7, r9
 8001b82:	d2e1      	bcs.n	8001b48 <__ledf2+0x74>
 8001b84:	2900      	cmp	r1, #0
 8001b86:	d0e5      	beq.n	8001b54 <__ledf2+0x80>
 8001b88:	0008      	movs	r0, r1
 8001b8a:	e7dd      	b.n	8001b48 <__ledf2+0x74>
 8001b8c:	45c4      	cmp	ip, r8
 8001b8e:	d8d5      	bhi.n	8001b3c <__ledf2+0x68>
 8001b90:	2000      	movs	r0, #0
 8001b92:	45c4      	cmp	ip, r8
 8001b94:	d2d8      	bcs.n	8001b48 <__ledf2+0x74>
 8001b96:	e7f5      	b.n	8001b84 <__ledf2+0xb0>
 8001b98:	000007ff 	.word	0x000007ff

08001b9c <__aeabi_dmul>:
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	4645      	mov	r5, r8
 8001ba0:	46de      	mov	lr, fp
 8001ba2:	4657      	mov	r7, sl
 8001ba4:	464e      	mov	r6, r9
 8001ba6:	b5e0      	push	{r5, r6, r7, lr}
 8001ba8:	001f      	movs	r7, r3
 8001baa:	030b      	lsls	r3, r1, #12
 8001bac:	0b1b      	lsrs	r3, r3, #12
 8001bae:	469b      	mov	fp, r3
 8001bb0:	004d      	lsls	r5, r1, #1
 8001bb2:	0fcb      	lsrs	r3, r1, #31
 8001bb4:	0004      	movs	r4, r0
 8001bb6:	4691      	mov	r9, r2
 8001bb8:	4698      	mov	r8, r3
 8001bba:	b087      	sub	sp, #28
 8001bbc:	0d6d      	lsrs	r5, r5, #21
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dmul+0x26>
 8001bc0:	e1cd      	b.n	8001f5e <__aeabi_dmul+0x3c2>
 8001bc2:	4bce      	ldr	r3, [pc, #824]	; (8001efc <__aeabi_dmul+0x360>)
 8001bc4:	429d      	cmp	r5, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dmul+0x2e>
 8001bc8:	e1e9      	b.n	8001f9e <__aeabi_dmul+0x402>
 8001bca:	465a      	mov	r2, fp
 8001bcc:	0f43      	lsrs	r3, r0, #29
 8001bce:	00d2      	lsls	r2, r2, #3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	00c3      	lsls	r3, r0, #3
 8001bda:	469a      	mov	sl, r3
 8001bdc:	4bc8      	ldr	r3, [pc, #800]	; (8001f00 <__aeabi_dmul+0x364>)
 8001bde:	4693      	mov	fp, r2
 8001be0:	469c      	mov	ip, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	2600      	movs	r6, #0
 8001be6:	4465      	add	r5, ip
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	033c      	lsls	r4, r7, #12
 8001bec:	007b      	lsls	r3, r7, #1
 8001bee:	4648      	mov	r0, r9
 8001bf0:	0b24      	lsrs	r4, r4, #12
 8001bf2:	0d5b      	lsrs	r3, r3, #21
 8001bf4:	0fff      	lsrs	r7, r7, #31
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dmul+0x60>
 8001bfa:	e189      	b.n	8001f10 <__aeabi_dmul+0x374>
 8001bfc:	4abf      	ldr	r2, [pc, #764]	; (8001efc <__aeabi_dmul+0x360>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <__aeabi_dmul+0x9a>
 8001c02:	0f42      	lsrs	r2, r0, #29
 8001c04:	00e4      	lsls	r4, r4, #3
 8001c06:	4322      	orrs	r2, r4
 8001c08:	2480      	movs	r4, #128	; 0x80
 8001c0a:	0424      	lsls	r4, r4, #16
 8001c0c:	4314      	orrs	r4, r2
 8001c0e:	4abc      	ldr	r2, [pc, #752]	; (8001f00 <__aeabi_dmul+0x364>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4694      	mov	ip, r2
 8001c14:	4642      	mov	r2, r8
 8001c16:	4463      	add	r3, ip
 8001c18:	195b      	adds	r3, r3, r5
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
 8001c1e:	407a      	eors	r2, r7
 8001c20:	3301      	adds	r3, #1
 8001c22:	00c0      	lsls	r0, r0, #3
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2e0a      	cmp	r6, #10
 8001c2a:	dd1c      	ble.n	8001c66 <__aeabi_dmul+0xca>
 8001c2c:	003a      	movs	r2, r7
 8001c2e:	2e0b      	cmp	r6, #11
 8001c30:	d05e      	beq.n	8001cf0 <__aeabi_dmul+0x154>
 8001c32:	4647      	mov	r7, r8
 8001c34:	e056      	b.n	8001ce4 <__aeabi_dmul+0x148>
 8001c36:	4649      	mov	r1, r9
 8001c38:	4bb0      	ldr	r3, [pc, #704]	; (8001efc <__aeabi_dmul+0x360>)
 8001c3a:	4321      	orrs	r1, r4
 8001c3c:	18eb      	adds	r3, r5, r3
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d12a      	bne.n	8001c9a <__aeabi_dmul+0xfe>
 8001c44:	2080      	movs	r0, #128	; 0x80
 8001c46:	2202      	movs	r2, #2
 8001c48:	0100      	lsls	r0, r0, #4
 8001c4a:	002b      	movs	r3, r5
 8001c4c:	4684      	mov	ip, r0
 8001c4e:	4316      	orrs	r6, r2
 8001c50:	4642      	mov	r2, r8
 8001c52:	4463      	add	r3, ip
 8001c54:	407a      	eors	r2, r7
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	2e0a      	cmp	r6, #10
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0xc4>
 8001c5e:	e231      	b.n	80020c4 <__aeabi_dmul+0x528>
 8001c60:	2000      	movs	r0, #0
 8001c62:	2400      	movs	r4, #0
 8001c64:	2102      	movs	r1, #2
 8001c66:	2e02      	cmp	r6, #2
 8001c68:	dc26      	bgt.n	8001cb8 <__aeabi_dmul+0x11c>
 8001c6a:	3e01      	subs	r6, #1
 8001c6c:	2e01      	cmp	r6, #1
 8001c6e:	d852      	bhi.n	8001d16 <__aeabi_dmul+0x17a>
 8001c70:	2902      	cmp	r1, #2
 8001c72:	d04c      	beq.n	8001d0e <__aeabi_dmul+0x172>
 8001c74:	2901      	cmp	r1, #1
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dmul+0xde>
 8001c78:	e118      	b.n	8001eac <__aeabi_dmul+0x310>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	2500      	movs	r5, #0
 8001c80:	051b      	lsls	r3, r3, #20
 8001c82:	4323      	orrs	r3, r4
 8001c84:	07d2      	lsls	r2, r2, #31
 8001c86:	4313      	orrs	r3, r2
 8001c88:	0028      	movs	r0, r5
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	b007      	add	sp, #28
 8001c8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c90:	46bb      	mov	fp, r7
 8001c92:	46b2      	mov	sl, r6
 8001c94:	46a9      	mov	r9, r5
 8001c96:	46a0      	mov	r8, r4
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	0109      	lsls	r1, r1, #4
 8001ca0:	002b      	movs	r3, r5
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	4316      	orrs	r6, r2
 8001ca6:	4642      	mov	r2, r8
 8001ca8:	4463      	add	r3, ip
 8001caa:	407a      	eors	r2, r7
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	2e0a      	cmp	r6, #10
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dmul+0x11a>
 8001cb4:	e228      	b.n	8002108 <__aeabi_dmul+0x56c>
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	2501      	movs	r5, #1
 8001cba:	40b5      	lsls	r5, r6
 8001cbc:	46ac      	mov	ip, r5
 8001cbe:	26a6      	movs	r6, #166	; 0xa6
 8001cc0:	4663      	mov	r3, ip
 8001cc2:	00f6      	lsls	r6, r6, #3
 8001cc4:	4035      	ands	r5, r6
 8001cc6:	4233      	tst	r3, r6
 8001cc8:	d10b      	bne.n	8001ce2 <__aeabi_dmul+0x146>
 8001cca:	2690      	movs	r6, #144	; 0x90
 8001ccc:	00b6      	lsls	r6, r6, #2
 8001cce:	4233      	tst	r3, r6
 8001cd0:	d118      	bne.n	8001d04 <__aeabi_dmul+0x168>
 8001cd2:	3eb9      	subs	r6, #185	; 0xb9
 8001cd4:	3eff      	subs	r6, #255	; 0xff
 8001cd6:	421e      	tst	r6, r3
 8001cd8:	d01d      	beq.n	8001d16 <__aeabi_dmul+0x17a>
 8001cda:	46a3      	mov	fp, r4
 8001cdc:	4682      	mov	sl, r0
 8001cde:	9100      	str	r1, [sp, #0]
 8001ce0:	e000      	b.n	8001ce4 <__aeabi_dmul+0x148>
 8001ce2:	0017      	movs	r7, r2
 8001ce4:	9900      	ldr	r1, [sp, #0]
 8001ce6:	003a      	movs	r2, r7
 8001ce8:	2902      	cmp	r1, #2
 8001cea:	d010      	beq.n	8001d0e <__aeabi_dmul+0x172>
 8001cec:	465c      	mov	r4, fp
 8001cee:	4650      	mov	r0, sl
 8001cf0:	2903      	cmp	r1, #3
 8001cf2:	d1bf      	bne.n	8001c74 <__aeabi_dmul+0xd8>
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	431c      	orrs	r4, r3
 8001cfa:	0324      	lsls	r4, r4, #12
 8001cfc:	0005      	movs	r5, r0
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <__aeabi_dmul+0x360>)
 8001d00:	0b24      	lsrs	r4, r4, #12
 8001d02:	e7bd      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8001d04:	2480      	movs	r4, #128	; 0x80
 8001d06:	2200      	movs	r2, #0
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <__aeabi_dmul+0x360>)
 8001d0a:	0324      	lsls	r4, r4, #12
 8001d0c:	e7b8      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8001d0e:	2400      	movs	r4, #0
 8001d10:	2500      	movs	r5, #0
 8001d12:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <__aeabi_dmul+0x360>)
 8001d14:	e7b4      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8001d16:	4653      	mov	r3, sl
 8001d18:	041e      	lsls	r6, r3, #16
 8001d1a:	0c36      	lsrs	r6, r6, #16
 8001d1c:	0c1f      	lsrs	r7, r3, #16
 8001d1e:	0033      	movs	r3, r6
 8001d20:	0c01      	lsrs	r1, r0, #16
 8001d22:	0400      	lsls	r0, r0, #16
 8001d24:	0c00      	lsrs	r0, r0, #16
 8001d26:	4343      	muls	r3, r0
 8001d28:	4698      	mov	r8, r3
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	437b      	muls	r3, r7
 8001d2e:	4699      	mov	r9, r3
 8001d30:	0033      	movs	r3, r6
 8001d32:	434b      	muls	r3, r1
 8001d34:	469c      	mov	ip, r3
 8001d36:	4643      	mov	r3, r8
 8001d38:	000d      	movs	r5, r1
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	437d      	muls	r5, r7
 8001d40:	44cc      	add	ip, r9
 8001d42:	44d4      	add	ip, sl
 8001d44:	9500      	str	r5, [sp, #0]
 8001d46:	45e1      	cmp	r9, ip
 8001d48:	d904      	bls.n	8001d54 <__aeabi_dmul+0x1b8>
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	4699      	mov	r9, r3
 8001d50:	444d      	add	r5, r9
 8001d52:	9500      	str	r5, [sp, #0]
 8001d54:	4663      	mov	r3, ip
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	001d      	movs	r5, r3
 8001d5a:	4663      	mov	r3, ip
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	469c      	mov	ip, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	041b      	lsls	r3, r3, #16
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	4698      	mov	r8, r3
 8001d68:	4663      	mov	r3, ip
 8001d6a:	4443      	add	r3, r8
 8001d6c:	9303      	str	r3, [sp, #12]
 8001d6e:	0c23      	lsrs	r3, r4, #16
 8001d70:	4698      	mov	r8, r3
 8001d72:	0033      	movs	r3, r6
 8001d74:	0424      	lsls	r4, r4, #16
 8001d76:	0c24      	lsrs	r4, r4, #16
 8001d78:	4363      	muls	r3, r4
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	0023      	movs	r3, r4
 8001d7e:	437b      	muls	r3, r7
 8001d80:	4699      	mov	r9, r3
 8001d82:	4643      	mov	r3, r8
 8001d84:	435e      	muls	r6, r3
 8001d86:	435f      	muls	r7, r3
 8001d88:	444e      	add	r6, r9
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	46b2      	mov	sl, r6
 8001d8e:	0c1e      	lsrs	r6, r3, #16
 8001d90:	4456      	add	r6, sl
 8001d92:	45b1      	cmp	r9, r6
 8001d94:	d903      	bls.n	8001d9e <__aeabi_dmul+0x202>
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	444f      	add	r7, r9
 8001d9e:	0c33      	lsrs	r3, r6, #16
 8001da0:	4699      	mov	r9, r3
 8001da2:	003b      	movs	r3, r7
 8001da4:	444b      	add	r3, r9
 8001da6:	9305      	str	r3, [sp, #20]
 8001da8:	4663      	mov	r3, ip
 8001daa:	46ac      	mov	ip, r5
 8001dac:	041f      	lsls	r7, r3, #16
 8001dae:	0c3f      	lsrs	r7, r7, #16
 8001db0:	0436      	lsls	r6, r6, #16
 8001db2:	19f6      	adds	r6, r6, r7
 8001db4:	44b4      	add	ip, r6
 8001db6:	4663      	mov	r3, ip
 8001db8:	9304      	str	r3, [sp, #16]
 8001dba:	465b      	mov	r3, fp
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	469c      	mov	ip, r3
 8001dc0:	465b      	mov	r3, fp
 8001dc2:	041f      	lsls	r7, r3, #16
 8001dc4:	0c3f      	lsrs	r7, r7, #16
 8001dc6:	003b      	movs	r3, r7
 8001dc8:	4343      	muls	r3, r0
 8001dca:	4699      	mov	r9, r3
 8001dcc:	4663      	mov	r3, ip
 8001dce:	4343      	muls	r3, r0
 8001dd0:	469a      	mov	sl, r3
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	4660      	mov	r0, ip
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	469b      	mov	fp, r3
 8001dda:	4348      	muls	r0, r1
 8001ddc:	4379      	muls	r1, r7
 8001dde:	4451      	add	r1, sl
 8001de0:	4459      	add	r1, fp
 8001de2:	458a      	cmp	sl, r1
 8001de4:	d903      	bls.n	8001dee <__aeabi_dmul+0x252>
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	469a      	mov	sl, r3
 8001dec:	4450      	add	r0, sl
 8001dee:	0c0b      	lsrs	r3, r1, #16
 8001df0:	469a      	mov	sl, r3
 8001df2:	464b      	mov	r3, r9
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	4699      	mov	r9, r3
 8001dfa:	003b      	movs	r3, r7
 8001dfc:	4363      	muls	r3, r4
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	4645      	mov	r5, r8
 8001e02:	4449      	add	r1, r9
 8001e04:	4699      	mov	r9, r3
 8001e06:	4663      	mov	r3, ip
 8001e08:	435c      	muls	r4, r3
 8001e0a:	436b      	muls	r3, r5
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	464b      	mov	r3, r9
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	4698      	mov	r8, r3
 8001e14:	436f      	muls	r7, r5
 8001e16:	193f      	adds	r7, r7, r4
 8001e18:	4447      	add	r7, r8
 8001e1a:	4450      	add	r0, sl
 8001e1c:	42bc      	cmp	r4, r7
 8001e1e:	d903      	bls.n	8001e28 <__aeabi_dmul+0x28c>
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	4698      	mov	r8, r3
 8001e26:	44c4      	add	ip, r8
 8001e28:	9b04      	ldr	r3, [sp, #16]
 8001e2a:	9d00      	ldr	r5, [sp, #0]
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	4445      	add	r5, r8
 8001e30:	42b5      	cmp	r5, r6
 8001e32:	41b6      	sbcs	r6, r6
 8001e34:	4273      	negs	r3, r6
 8001e36:	4698      	mov	r8, r3
 8001e38:	464b      	mov	r3, r9
 8001e3a:	041e      	lsls	r6, r3, #16
 8001e3c:	9b05      	ldr	r3, [sp, #20]
 8001e3e:	043c      	lsls	r4, r7, #16
 8001e40:	4699      	mov	r9, r3
 8001e42:	0c36      	lsrs	r6, r6, #16
 8001e44:	19a4      	adds	r4, r4, r6
 8001e46:	444c      	add	r4, r9
 8001e48:	46a1      	mov	r9, r4
 8001e4a:	4683      	mov	fp, r0
 8001e4c:	186e      	adds	r6, r5, r1
 8001e4e:	44c1      	add	r9, r8
 8001e50:	428e      	cmp	r6, r1
 8001e52:	4189      	sbcs	r1, r1
 8001e54:	44cb      	add	fp, r9
 8001e56:	465d      	mov	r5, fp
 8001e58:	4249      	negs	r1, r1
 8001e5a:	186d      	adds	r5, r5, r1
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	41a4      	sbcs	r4, r4
 8001e60:	45c1      	cmp	r9, r8
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4583      	cmp	fp, r0
 8001e66:	4180      	sbcs	r0, r0
 8001e68:	428d      	cmp	r5, r1
 8001e6a:	4189      	sbcs	r1, r1
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	4264      	negs	r4, r4
 8001e70:	431c      	orrs	r4, r3
 8001e72:	4240      	negs	r0, r0
 8001e74:	9b03      	ldr	r3, [sp, #12]
 8001e76:	4249      	negs	r1, r1
 8001e78:	4301      	orrs	r1, r0
 8001e7a:	0270      	lsls	r0, r6, #9
 8001e7c:	0c3f      	lsrs	r7, r7, #16
 8001e7e:	4318      	orrs	r0, r3
 8001e80:	19e4      	adds	r4, r4, r7
 8001e82:	1e47      	subs	r7, r0, #1
 8001e84:	41b8      	sbcs	r0, r7
 8001e86:	1864      	adds	r4, r4, r1
 8001e88:	4464      	add	r4, ip
 8001e8a:	0df6      	lsrs	r6, r6, #23
 8001e8c:	0261      	lsls	r1, r4, #9
 8001e8e:	4330      	orrs	r0, r6
 8001e90:	0dec      	lsrs	r4, r5, #23
 8001e92:	026e      	lsls	r6, r5, #9
 8001e94:	430c      	orrs	r4, r1
 8001e96:	4330      	orrs	r0, r6
 8001e98:	01c9      	lsls	r1, r1, #7
 8001e9a:	d400      	bmi.n	8001e9e <__aeabi_dmul+0x302>
 8001e9c:	e0f1      	b.n	8002082 <__aeabi_dmul+0x4e6>
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	0843      	lsrs	r3, r0, #1
 8001ea2:	4001      	ands	r1, r0
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	07e0      	lsls	r0, r4, #31
 8001ea8:	4318      	orrs	r0, r3
 8001eaa:	0864      	lsrs	r4, r4, #1
 8001eac:	4915      	ldr	r1, [pc, #84]	; (8001f04 <__aeabi_dmul+0x368>)
 8001eae:	9b02      	ldr	r3, [sp, #8]
 8001eb0:	468c      	mov	ip, r1
 8001eb2:	4463      	add	r3, ip
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dmul+0x31e>
 8001eb8:	e097      	b.n	8001fea <__aeabi_dmul+0x44e>
 8001eba:	0741      	lsls	r1, r0, #29
 8001ebc:	d009      	beq.n	8001ed2 <__aeabi_dmul+0x336>
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	4001      	ands	r1, r0
 8001ec2:	2904      	cmp	r1, #4
 8001ec4:	d005      	beq.n	8001ed2 <__aeabi_dmul+0x336>
 8001ec6:	1d01      	adds	r1, r0, #4
 8001ec8:	4281      	cmp	r1, r0
 8001eca:	4180      	sbcs	r0, r0
 8001ecc:	4240      	negs	r0, r0
 8001ece:	1824      	adds	r4, r4, r0
 8001ed0:	0008      	movs	r0, r1
 8001ed2:	01e1      	lsls	r1, r4, #7
 8001ed4:	d506      	bpl.n	8001ee4 <__aeabi_dmul+0x348>
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	00c9      	lsls	r1, r1, #3
 8001eda:	468c      	mov	ip, r1
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <__aeabi_dmul+0x36c>)
 8001ede:	401c      	ands	r4, r3
 8001ee0:	9b02      	ldr	r3, [sp, #8]
 8001ee2:	4463      	add	r3, ip
 8001ee4:	4909      	ldr	r1, [pc, #36]	; (8001f0c <__aeabi_dmul+0x370>)
 8001ee6:	428b      	cmp	r3, r1
 8001ee8:	dd00      	ble.n	8001eec <__aeabi_dmul+0x350>
 8001eea:	e710      	b.n	8001d0e <__aeabi_dmul+0x172>
 8001eec:	0761      	lsls	r1, r4, #29
 8001eee:	08c5      	lsrs	r5, r0, #3
 8001ef0:	0264      	lsls	r4, r4, #9
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	430d      	orrs	r5, r1
 8001ef6:	0b24      	lsrs	r4, r4, #12
 8001ef8:	0d5b      	lsrs	r3, r3, #21
 8001efa:	e6c1      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	fffffc01 	.word	0xfffffc01
 8001f04:	000003ff 	.word	0x000003ff
 8001f08:	feffffff 	.word	0xfeffffff
 8001f0c:	000007fe 	.word	0x000007fe
 8001f10:	464b      	mov	r3, r9
 8001f12:	4323      	orrs	r3, r4
 8001f14:	d059      	beq.n	8001fca <__aeabi_dmul+0x42e>
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dmul+0x380>
 8001f1a:	e0a3      	b.n	8002064 <__aeabi_dmul+0x4c8>
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f000 fd73 	bl	8002a08 <__clzsi2>
 8001f22:	0001      	movs	r1, r0
 8001f24:	0003      	movs	r3, r0
 8001f26:	390b      	subs	r1, #11
 8001f28:	221d      	movs	r2, #29
 8001f2a:	1a52      	subs	r2, r2, r1
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	0018      	movs	r0, r3
 8001f30:	40d1      	lsrs	r1, r2
 8001f32:	464a      	mov	r2, r9
 8001f34:	3808      	subs	r0, #8
 8001f36:	4082      	lsls	r2, r0
 8001f38:	4084      	lsls	r4, r0
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	430c      	orrs	r4, r1
 8001f3e:	4a74      	ldr	r2, [pc, #464]	; (8002110 <__aeabi_dmul+0x574>)
 8001f40:	1aeb      	subs	r3, r5, r3
 8001f42:	4694      	mov	ip, r2
 8001f44:	4642      	mov	r2, r8
 8001f46:	4463      	add	r3, ip
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	407a      	eors	r2, r7
 8001f4e:	3301      	adds	r3, #1
 8001f50:	2100      	movs	r1, #0
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	2e0a      	cmp	r6, #10
 8001f58:	dd00      	ble.n	8001f5c <__aeabi_dmul+0x3c0>
 8001f5a:	e667      	b.n	8001c2c <__aeabi_dmul+0x90>
 8001f5c:	e683      	b.n	8001c66 <__aeabi_dmul+0xca>
 8001f5e:	465b      	mov	r3, fp
 8001f60:	4303      	orrs	r3, r0
 8001f62:	469a      	mov	sl, r3
 8001f64:	d02a      	beq.n	8001fbc <__aeabi_dmul+0x420>
 8001f66:	465b      	mov	r3, fp
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d06d      	beq.n	8002048 <__aeabi_dmul+0x4ac>
 8001f6c:	4658      	mov	r0, fp
 8001f6e:	f000 fd4b 	bl	8002a08 <__clzsi2>
 8001f72:	0001      	movs	r1, r0
 8001f74:	0003      	movs	r3, r0
 8001f76:	390b      	subs	r1, #11
 8001f78:	221d      	movs	r2, #29
 8001f7a:	1a52      	subs	r2, r2, r1
 8001f7c:	0021      	movs	r1, r4
 8001f7e:	0018      	movs	r0, r3
 8001f80:	465d      	mov	r5, fp
 8001f82:	40d1      	lsrs	r1, r2
 8001f84:	3808      	subs	r0, #8
 8001f86:	4085      	lsls	r5, r0
 8001f88:	000a      	movs	r2, r1
 8001f8a:	4084      	lsls	r4, r0
 8001f8c:	432a      	orrs	r2, r5
 8001f8e:	4693      	mov	fp, r2
 8001f90:	46a2      	mov	sl, r4
 8001f92:	4d5f      	ldr	r5, [pc, #380]	; (8002110 <__aeabi_dmul+0x574>)
 8001f94:	2600      	movs	r6, #0
 8001f96:	1aed      	subs	r5, r5, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	e625      	b.n	8001bea <__aeabi_dmul+0x4e>
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	4303      	orrs	r3, r0
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	d105      	bne.n	8001fb2 <__aeabi_dmul+0x416>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	469b      	mov	fp, r3
 8001faa:	3302      	adds	r3, #2
 8001fac:	2608      	movs	r6, #8
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	e61b      	b.n	8001bea <__aeabi_dmul+0x4e>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	4682      	mov	sl, r0
 8001fb6:	260c      	movs	r6, #12
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	e616      	b.n	8001bea <__aeabi_dmul+0x4e>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	469b      	mov	fp, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	2604      	movs	r6, #4
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	e60f      	b.n	8001bea <__aeabi_dmul+0x4e>
 8001fca:	4642      	mov	r2, r8
 8001fcc:	3301      	adds	r3, #1
 8001fce:	9501      	str	r5, [sp, #4]
 8001fd0:	431e      	orrs	r6, r3
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	407a      	eors	r2, r7
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	2400      	movs	r4, #0
 8001fda:	2000      	movs	r0, #0
 8001fdc:	2101      	movs	r1, #1
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2e0a      	cmp	r6, #10
 8001fe4:	dd00      	ble.n	8001fe8 <__aeabi_dmul+0x44c>
 8001fe6:	e621      	b.n	8001c2c <__aeabi_dmul+0x90>
 8001fe8:	e63d      	b.n	8001c66 <__aeabi_dmul+0xca>
 8001fea:	2101      	movs	r1, #1
 8001fec:	1ac9      	subs	r1, r1, r3
 8001fee:	2938      	cmp	r1, #56	; 0x38
 8001ff0:	dd00      	ble.n	8001ff4 <__aeabi_dmul+0x458>
 8001ff2:	e642      	b.n	8001c7a <__aeabi_dmul+0xde>
 8001ff4:	291f      	cmp	r1, #31
 8001ff6:	dd47      	ble.n	8002088 <__aeabi_dmul+0x4ec>
 8001ff8:	261f      	movs	r6, #31
 8001ffa:	0025      	movs	r5, r4
 8001ffc:	4276      	negs	r6, r6
 8001ffe:	1af3      	subs	r3, r6, r3
 8002000:	40dd      	lsrs	r5, r3
 8002002:	002b      	movs	r3, r5
 8002004:	2920      	cmp	r1, #32
 8002006:	d005      	beq.n	8002014 <__aeabi_dmul+0x478>
 8002008:	4942      	ldr	r1, [pc, #264]	; (8002114 <__aeabi_dmul+0x578>)
 800200a:	9d02      	ldr	r5, [sp, #8]
 800200c:	468c      	mov	ip, r1
 800200e:	4465      	add	r5, ip
 8002010:	40ac      	lsls	r4, r5
 8002012:	4320      	orrs	r0, r4
 8002014:	1e41      	subs	r1, r0, #1
 8002016:	4188      	sbcs	r0, r1
 8002018:	4318      	orrs	r0, r3
 800201a:	2307      	movs	r3, #7
 800201c:	001d      	movs	r5, r3
 800201e:	2400      	movs	r4, #0
 8002020:	4005      	ands	r5, r0
 8002022:	4203      	tst	r3, r0
 8002024:	d04a      	beq.n	80020bc <__aeabi_dmul+0x520>
 8002026:	230f      	movs	r3, #15
 8002028:	2400      	movs	r4, #0
 800202a:	4003      	ands	r3, r0
 800202c:	2b04      	cmp	r3, #4
 800202e:	d042      	beq.n	80020b6 <__aeabi_dmul+0x51a>
 8002030:	1d03      	adds	r3, r0, #4
 8002032:	4283      	cmp	r3, r0
 8002034:	4180      	sbcs	r0, r0
 8002036:	4240      	negs	r0, r0
 8002038:	1824      	adds	r4, r4, r0
 800203a:	0018      	movs	r0, r3
 800203c:	0223      	lsls	r3, r4, #8
 800203e:	d53a      	bpl.n	80020b6 <__aeabi_dmul+0x51a>
 8002040:	2301      	movs	r3, #1
 8002042:	2400      	movs	r4, #0
 8002044:	2500      	movs	r5, #0
 8002046:	e61b      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8002048:	f000 fcde 	bl	8002a08 <__clzsi2>
 800204c:	0001      	movs	r1, r0
 800204e:	0003      	movs	r3, r0
 8002050:	3115      	adds	r1, #21
 8002052:	3320      	adds	r3, #32
 8002054:	291c      	cmp	r1, #28
 8002056:	dd8f      	ble.n	8001f78 <__aeabi_dmul+0x3dc>
 8002058:	3808      	subs	r0, #8
 800205a:	2200      	movs	r2, #0
 800205c:	4084      	lsls	r4, r0
 800205e:	4692      	mov	sl, r2
 8002060:	46a3      	mov	fp, r4
 8002062:	e796      	b.n	8001f92 <__aeabi_dmul+0x3f6>
 8002064:	f000 fcd0 	bl	8002a08 <__clzsi2>
 8002068:	0001      	movs	r1, r0
 800206a:	0003      	movs	r3, r0
 800206c:	3115      	adds	r1, #21
 800206e:	3320      	adds	r3, #32
 8002070:	291c      	cmp	r1, #28
 8002072:	dc00      	bgt.n	8002076 <__aeabi_dmul+0x4da>
 8002074:	e758      	b.n	8001f28 <__aeabi_dmul+0x38c>
 8002076:	0002      	movs	r2, r0
 8002078:	464c      	mov	r4, r9
 800207a:	3a08      	subs	r2, #8
 800207c:	2000      	movs	r0, #0
 800207e:	4094      	lsls	r4, r2
 8002080:	e75d      	b.n	8001f3e <__aeabi_dmul+0x3a2>
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	e711      	b.n	8001eac <__aeabi_dmul+0x310>
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <__aeabi_dmul+0x57c>)
 800208a:	0026      	movs	r6, r4
 800208c:	469c      	mov	ip, r3
 800208e:	0003      	movs	r3, r0
 8002090:	9d02      	ldr	r5, [sp, #8]
 8002092:	40cb      	lsrs	r3, r1
 8002094:	4465      	add	r5, ip
 8002096:	40ae      	lsls	r6, r5
 8002098:	431e      	orrs	r6, r3
 800209a:	0003      	movs	r3, r0
 800209c:	40ab      	lsls	r3, r5
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	4183      	sbcs	r3, r0
 80020a2:	0030      	movs	r0, r6
 80020a4:	4318      	orrs	r0, r3
 80020a6:	40cc      	lsrs	r4, r1
 80020a8:	0743      	lsls	r3, r0, #29
 80020aa:	d0c7      	beq.n	800203c <__aeabi_dmul+0x4a0>
 80020ac:	230f      	movs	r3, #15
 80020ae:	4003      	ands	r3, r0
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d1bd      	bne.n	8002030 <__aeabi_dmul+0x494>
 80020b4:	e7c2      	b.n	800203c <__aeabi_dmul+0x4a0>
 80020b6:	0765      	lsls	r5, r4, #29
 80020b8:	0264      	lsls	r4, r4, #9
 80020ba:	0b24      	lsrs	r4, r4, #12
 80020bc:	08c0      	lsrs	r0, r0, #3
 80020be:	2300      	movs	r3, #0
 80020c0:	4305      	orrs	r5, r0
 80020c2:	e5dd      	b.n	8001c80 <__aeabi_dmul+0xe4>
 80020c4:	2500      	movs	r5, #0
 80020c6:	2302      	movs	r3, #2
 80020c8:	2e0f      	cmp	r6, #15
 80020ca:	d10c      	bne.n	80020e6 <__aeabi_dmul+0x54a>
 80020cc:	2480      	movs	r4, #128	; 0x80
 80020ce:	465b      	mov	r3, fp
 80020d0:	0324      	lsls	r4, r4, #12
 80020d2:	4223      	tst	r3, r4
 80020d4:	d00e      	beq.n	80020f4 <__aeabi_dmul+0x558>
 80020d6:	4221      	tst	r1, r4
 80020d8:	d10c      	bne.n	80020f4 <__aeabi_dmul+0x558>
 80020da:	430c      	orrs	r4, r1
 80020dc:	0324      	lsls	r4, r4, #12
 80020de:	003a      	movs	r2, r7
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <__aeabi_dmul+0x580>)
 80020e2:	0b24      	lsrs	r4, r4, #12
 80020e4:	e5cc      	b.n	8001c80 <__aeabi_dmul+0xe4>
 80020e6:	2e0b      	cmp	r6, #11
 80020e8:	d000      	beq.n	80020ec <__aeabi_dmul+0x550>
 80020ea:	e5a2      	b.n	8001c32 <__aeabi_dmul+0x96>
 80020ec:	468b      	mov	fp, r1
 80020ee:	46aa      	mov	sl, r5
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	e5f7      	b.n	8001ce4 <__aeabi_dmul+0x148>
 80020f4:	2480      	movs	r4, #128	; 0x80
 80020f6:	465b      	mov	r3, fp
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	431c      	orrs	r4, r3
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	4642      	mov	r2, r8
 8002100:	4655      	mov	r5, sl
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <__aeabi_dmul+0x580>)
 8002104:	0b24      	lsrs	r4, r4, #12
 8002106:	e5bb      	b.n	8001c80 <__aeabi_dmul+0xe4>
 8002108:	464d      	mov	r5, r9
 800210a:	0021      	movs	r1, r4
 800210c:	2303      	movs	r3, #3
 800210e:	e7db      	b.n	80020c8 <__aeabi_dmul+0x52c>
 8002110:	fffffc0d 	.word	0xfffffc0d
 8002114:	0000043e 	.word	0x0000043e
 8002118:	0000041e 	.word	0x0000041e
 800211c:	000007ff 	.word	0x000007ff

08002120 <__aeabi_dsub>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	4657      	mov	r7, sl
 8002124:	464e      	mov	r6, r9
 8002126:	4645      	mov	r5, r8
 8002128:	46de      	mov	lr, fp
 800212a:	b5e0      	push	{r5, r6, r7, lr}
 800212c:	000d      	movs	r5, r1
 800212e:	0004      	movs	r4, r0
 8002130:	0019      	movs	r1, r3
 8002132:	0010      	movs	r0, r2
 8002134:	032b      	lsls	r3, r5, #12
 8002136:	0a5b      	lsrs	r3, r3, #9
 8002138:	0f62      	lsrs	r2, r4, #29
 800213a:	431a      	orrs	r2, r3
 800213c:	00e3      	lsls	r3, r4, #3
 800213e:	030c      	lsls	r4, r1, #12
 8002140:	0a64      	lsrs	r4, r4, #9
 8002142:	0f47      	lsrs	r7, r0, #29
 8002144:	4327      	orrs	r7, r4
 8002146:	4cd0      	ldr	r4, [pc, #832]	; (8002488 <__aeabi_dsub+0x368>)
 8002148:	006e      	lsls	r6, r5, #1
 800214a:	4691      	mov	r9, r2
 800214c:	b083      	sub	sp, #12
 800214e:	004a      	lsls	r2, r1, #1
 8002150:	00c0      	lsls	r0, r0, #3
 8002152:	4698      	mov	r8, r3
 8002154:	46a2      	mov	sl, r4
 8002156:	0d76      	lsrs	r6, r6, #21
 8002158:	0fed      	lsrs	r5, r5, #31
 800215a:	0d52      	lsrs	r2, r2, #21
 800215c:	0fc9      	lsrs	r1, r1, #31
 800215e:	9001      	str	r0, [sp, #4]
 8002160:	42a2      	cmp	r2, r4
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x46>
 8002164:	e0b9      	b.n	80022da <__aeabi_dsub+0x1ba>
 8002166:	2401      	movs	r4, #1
 8002168:	4061      	eors	r1, r4
 800216a:	468b      	mov	fp, r1
 800216c:	428d      	cmp	r5, r1
 800216e:	d100      	bne.n	8002172 <__aeabi_dsub+0x52>
 8002170:	e08d      	b.n	800228e <__aeabi_dsub+0x16e>
 8002172:	1ab4      	subs	r4, r6, r2
 8002174:	46a4      	mov	ip, r4
 8002176:	2c00      	cmp	r4, #0
 8002178:	dc00      	bgt.n	800217c <__aeabi_dsub+0x5c>
 800217a:	e0b7      	b.n	80022ec <__aeabi_dsub+0x1cc>
 800217c:	2a00      	cmp	r2, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x62>
 8002180:	e0cb      	b.n	800231a <__aeabi_dsub+0x1fa>
 8002182:	4ac1      	ldr	r2, [pc, #772]	; (8002488 <__aeabi_dsub+0x368>)
 8002184:	4296      	cmp	r6, r2
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x6a>
 8002188:	e186      	b.n	8002498 <__aeabi_dsub+0x378>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0412      	lsls	r2, r2, #16
 800218e:	4317      	orrs	r7, r2
 8002190:	4662      	mov	r2, ip
 8002192:	2a38      	cmp	r2, #56	; 0x38
 8002194:	dd00      	ble.n	8002198 <__aeabi_dsub+0x78>
 8002196:	e1a4      	b.n	80024e2 <__aeabi_dsub+0x3c2>
 8002198:	2a1f      	cmp	r2, #31
 800219a:	dd00      	ble.n	800219e <__aeabi_dsub+0x7e>
 800219c:	e21d      	b.n	80025da <__aeabi_dsub+0x4ba>
 800219e:	4661      	mov	r1, ip
 80021a0:	2220      	movs	r2, #32
 80021a2:	003c      	movs	r4, r7
 80021a4:	1a52      	subs	r2, r2, r1
 80021a6:	0001      	movs	r1, r0
 80021a8:	4090      	lsls	r0, r2
 80021aa:	4094      	lsls	r4, r2
 80021ac:	1e42      	subs	r2, r0, #1
 80021ae:	4190      	sbcs	r0, r2
 80021b0:	4662      	mov	r2, ip
 80021b2:	46a0      	mov	r8, r4
 80021b4:	4664      	mov	r4, ip
 80021b6:	40d7      	lsrs	r7, r2
 80021b8:	464a      	mov	r2, r9
 80021ba:	40e1      	lsrs	r1, r4
 80021bc:	4644      	mov	r4, r8
 80021be:	1bd2      	subs	r2, r2, r7
 80021c0:	4691      	mov	r9, r2
 80021c2:	430c      	orrs	r4, r1
 80021c4:	4304      	orrs	r4, r0
 80021c6:	1b1c      	subs	r4, r3, r4
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	4192      	sbcs	r2, r2
 80021cc:	464b      	mov	r3, r9
 80021ce:	4252      	negs	r2, r2
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	469a      	mov	sl, r3
 80021d4:	4653      	mov	r3, sl
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	d400      	bmi.n	80021dc <__aeabi_dsub+0xbc>
 80021da:	e12b      	b.n	8002434 <__aeabi_dsub+0x314>
 80021dc:	4653      	mov	r3, sl
 80021de:	025a      	lsls	r2, r3, #9
 80021e0:	0a53      	lsrs	r3, r2, #9
 80021e2:	469a      	mov	sl, r3
 80021e4:	4653      	mov	r3, sl
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0xcc>
 80021ea:	e166      	b.n	80024ba <__aeabi_dsub+0x39a>
 80021ec:	4650      	mov	r0, sl
 80021ee:	f000 fc0b 	bl	8002a08 <__clzsi2>
 80021f2:	0003      	movs	r3, r0
 80021f4:	3b08      	subs	r3, #8
 80021f6:	2220      	movs	r2, #32
 80021f8:	0020      	movs	r0, r4
 80021fa:	1ad2      	subs	r2, r2, r3
 80021fc:	4651      	mov	r1, sl
 80021fe:	40d0      	lsrs	r0, r2
 8002200:	4099      	lsls	r1, r3
 8002202:	0002      	movs	r2, r0
 8002204:	409c      	lsls	r4, r3
 8002206:	430a      	orrs	r2, r1
 8002208:	429e      	cmp	r6, r3
 800220a:	dd00      	ble.n	800220e <__aeabi_dsub+0xee>
 800220c:	e164      	b.n	80024d8 <__aeabi_dsub+0x3b8>
 800220e:	1b9b      	subs	r3, r3, r6
 8002210:	1c59      	adds	r1, r3, #1
 8002212:	291f      	cmp	r1, #31
 8002214:	dd00      	ble.n	8002218 <__aeabi_dsub+0xf8>
 8002216:	e0fe      	b.n	8002416 <__aeabi_dsub+0x2f6>
 8002218:	2320      	movs	r3, #32
 800221a:	0010      	movs	r0, r2
 800221c:	0026      	movs	r6, r4
 800221e:	1a5b      	subs	r3, r3, r1
 8002220:	409c      	lsls	r4, r3
 8002222:	4098      	lsls	r0, r3
 8002224:	40ce      	lsrs	r6, r1
 8002226:	40ca      	lsrs	r2, r1
 8002228:	1e63      	subs	r3, r4, #1
 800222a:	419c      	sbcs	r4, r3
 800222c:	4330      	orrs	r0, r6
 800222e:	4692      	mov	sl, r2
 8002230:	2600      	movs	r6, #0
 8002232:	4304      	orrs	r4, r0
 8002234:	0763      	lsls	r3, r4, #29
 8002236:	d009      	beq.n	800224c <__aeabi_dsub+0x12c>
 8002238:	230f      	movs	r3, #15
 800223a:	4023      	ands	r3, r4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d005      	beq.n	800224c <__aeabi_dsub+0x12c>
 8002240:	1d23      	adds	r3, r4, #4
 8002242:	42a3      	cmp	r3, r4
 8002244:	41a4      	sbcs	r4, r4
 8002246:	4264      	negs	r4, r4
 8002248:	44a2      	add	sl, r4
 800224a:	001c      	movs	r4, r3
 800224c:	4653      	mov	r3, sl
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	d400      	bmi.n	8002254 <__aeabi_dsub+0x134>
 8002252:	e0f2      	b.n	800243a <__aeabi_dsub+0x31a>
 8002254:	4b8c      	ldr	r3, [pc, #560]	; (8002488 <__aeabi_dsub+0x368>)
 8002256:	3601      	adds	r6, #1
 8002258:	429e      	cmp	r6, r3
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x13e>
 800225c:	e10f      	b.n	800247e <__aeabi_dsub+0x35e>
 800225e:	4653      	mov	r3, sl
 8002260:	498a      	ldr	r1, [pc, #552]	; (800248c <__aeabi_dsub+0x36c>)
 8002262:	08e4      	lsrs	r4, r4, #3
 8002264:	400b      	ands	r3, r1
 8002266:	0019      	movs	r1, r3
 8002268:	075b      	lsls	r3, r3, #29
 800226a:	4323      	orrs	r3, r4
 800226c:	0572      	lsls	r2, r6, #21
 800226e:	024c      	lsls	r4, r1, #9
 8002270:	0b24      	lsrs	r4, r4, #12
 8002272:	0d52      	lsrs	r2, r2, #21
 8002274:	0512      	lsls	r2, r2, #20
 8002276:	4322      	orrs	r2, r4
 8002278:	07ed      	lsls	r5, r5, #31
 800227a:	432a      	orrs	r2, r5
 800227c:	0018      	movs	r0, r3
 800227e:	0011      	movs	r1, r2
 8002280:	b003      	add	sp, #12
 8002282:	bcf0      	pop	{r4, r5, r6, r7}
 8002284:	46bb      	mov	fp, r7
 8002286:	46b2      	mov	sl, r6
 8002288:	46a9      	mov	r9, r5
 800228a:	46a0      	mov	r8, r4
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228e:	1ab4      	subs	r4, r6, r2
 8002290:	46a4      	mov	ip, r4
 8002292:	2c00      	cmp	r4, #0
 8002294:	dd59      	ble.n	800234a <__aeabi_dsub+0x22a>
 8002296:	2a00      	cmp	r2, #0
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x17c>
 800229a:	e0b0      	b.n	80023fe <__aeabi_dsub+0x2de>
 800229c:	4556      	cmp	r6, sl
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x182>
 80022a0:	e0fa      	b.n	8002498 <__aeabi_dsub+0x378>
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	0412      	lsls	r2, r2, #16
 80022a6:	4317      	orrs	r7, r2
 80022a8:	4662      	mov	r2, ip
 80022aa:	2a38      	cmp	r2, #56	; 0x38
 80022ac:	dd00      	ble.n	80022b0 <__aeabi_dsub+0x190>
 80022ae:	e0d4      	b.n	800245a <__aeabi_dsub+0x33a>
 80022b0:	2a1f      	cmp	r2, #31
 80022b2:	dc00      	bgt.n	80022b6 <__aeabi_dsub+0x196>
 80022b4:	e1c0      	b.n	8002638 <__aeabi_dsub+0x518>
 80022b6:	0039      	movs	r1, r7
 80022b8:	3a20      	subs	r2, #32
 80022ba:	40d1      	lsrs	r1, r2
 80022bc:	4662      	mov	r2, ip
 80022be:	2a20      	cmp	r2, #32
 80022c0:	d006      	beq.n	80022d0 <__aeabi_dsub+0x1b0>
 80022c2:	4664      	mov	r4, ip
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	1b12      	subs	r2, r2, r4
 80022c8:	003c      	movs	r4, r7
 80022ca:	4094      	lsls	r4, r2
 80022cc:	4304      	orrs	r4, r0
 80022ce:	9401      	str	r4, [sp, #4]
 80022d0:	9c01      	ldr	r4, [sp, #4]
 80022d2:	1e62      	subs	r2, r4, #1
 80022d4:	4194      	sbcs	r4, r2
 80022d6:	430c      	orrs	r4, r1
 80022d8:	e0c3      	b.n	8002462 <__aeabi_dsub+0x342>
 80022da:	003c      	movs	r4, r7
 80022dc:	4304      	orrs	r4, r0
 80022de:	d02b      	beq.n	8002338 <__aeabi_dsub+0x218>
 80022e0:	468b      	mov	fp, r1
 80022e2:	428d      	cmp	r5, r1
 80022e4:	d02e      	beq.n	8002344 <__aeabi_dsub+0x224>
 80022e6:	4c6a      	ldr	r4, [pc, #424]	; (8002490 <__aeabi_dsub+0x370>)
 80022e8:	46a4      	mov	ip, r4
 80022ea:	44b4      	add	ip, r6
 80022ec:	4664      	mov	r4, ip
 80022ee:	2c00      	cmp	r4, #0
 80022f0:	d05f      	beq.n	80023b2 <__aeabi_dsub+0x292>
 80022f2:	1b94      	subs	r4, r2, r6
 80022f4:	46a4      	mov	ip, r4
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x1dc>
 80022fa:	e120      	b.n	800253e <__aeabi_dsub+0x41e>
 80022fc:	464c      	mov	r4, r9
 80022fe:	431c      	orrs	r4, r3
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x1e4>
 8002302:	e1c7      	b.n	8002694 <__aeabi_dsub+0x574>
 8002304:	4661      	mov	r1, ip
 8002306:	1e4c      	subs	r4, r1, #1
 8002308:	2901      	cmp	r1, #1
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x1ee>
 800230c:	e223      	b.n	8002756 <__aeabi_dsub+0x636>
 800230e:	4d5e      	ldr	r5, [pc, #376]	; (8002488 <__aeabi_dsub+0x368>)
 8002310:	45ac      	cmp	ip, r5
 8002312:	d100      	bne.n	8002316 <__aeabi_dsub+0x1f6>
 8002314:	e1d8      	b.n	80026c8 <__aeabi_dsub+0x5a8>
 8002316:	46a4      	mov	ip, r4
 8002318:	e11a      	b.n	8002550 <__aeabi_dsub+0x430>
 800231a:	003a      	movs	r2, r7
 800231c:	4302      	orrs	r2, r0
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x202>
 8002320:	e0e4      	b.n	80024ec <__aeabi_dsub+0x3cc>
 8002322:	0022      	movs	r2, r4
 8002324:	3a01      	subs	r2, #1
 8002326:	2c01      	cmp	r4, #1
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x20c>
 800232a:	e1c3      	b.n	80026b4 <__aeabi_dsub+0x594>
 800232c:	4956      	ldr	r1, [pc, #344]	; (8002488 <__aeabi_dsub+0x368>)
 800232e:	428c      	cmp	r4, r1
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x214>
 8002332:	e0b1      	b.n	8002498 <__aeabi_dsub+0x378>
 8002334:	4694      	mov	ip, r2
 8002336:	e72b      	b.n	8002190 <__aeabi_dsub+0x70>
 8002338:	2401      	movs	r4, #1
 800233a:	4061      	eors	r1, r4
 800233c:	468b      	mov	fp, r1
 800233e:	428d      	cmp	r5, r1
 8002340:	d000      	beq.n	8002344 <__aeabi_dsub+0x224>
 8002342:	e716      	b.n	8002172 <__aeabi_dsub+0x52>
 8002344:	4952      	ldr	r1, [pc, #328]	; (8002490 <__aeabi_dsub+0x370>)
 8002346:	468c      	mov	ip, r1
 8002348:	44b4      	add	ip, r6
 800234a:	4664      	mov	r4, ip
 800234c:	2c00      	cmp	r4, #0
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x232>
 8002350:	e0d3      	b.n	80024fa <__aeabi_dsub+0x3da>
 8002352:	1b91      	subs	r1, r2, r6
 8002354:	468c      	mov	ip, r1
 8002356:	2e00      	cmp	r6, #0
 8002358:	d100      	bne.n	800235c <__aeabi_dsub+0x23c>
 800235a:	e15e      	b.n	800261a <__aeabi_dsub+0x4fa>
 800235c:	494a      	ldr	r1, [pc, #296]	; (8002488 <__aeabi_dsub+0x368>)
 800235e:	428a      	cmp	r2, r1
 8002360:	d100      	bne.n	8002364 <__aeabi_dsub+0x244>
 8002362:	e1be      	b.n	80026e2 <__aeabi_dsub+0x5c2>
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	464c      	mov	r4, r9
 8002368:	0409      	lsls	r1, r1, #16
 800236a:	430c      	orrs	r4, r1
 800236c:	46a1      	mov	r9, r4
 800236e:	4661      	mov	r1, ip
 8002370:	2938      	cmp	r1, #56	; 0x38
 8002372:	dd00      	ble.n	8002376 <__aeabi_dsub+0x256>
 8002374:	e1ba      	b.n	80026ec <__aeabi_dsub+0x5cc>
 8002376:	291f      	cmp	r1, #31
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x25c>
 800237a:	e227      	b.n	80027cc <__aeabi_dsub+0x6ac>
 800237c:	2420      	movs	r4, #32
 800237e:	1a64      	subs	r4, r4, r1
 8002380:	4649      	mov	r1, r9
 8002382:	40a1      	lsls	r1, r4
 8002384:	001e      	movs	r6, r3
 8002386:	4688      	mov	r8, r1
 8002388:	4661      	mov	r1, ip
 800238a:	40a3      	lsls	r3, r4
 800238c:	40ce      	lsrs	r6, r1
 800238e:	4641      	mov	r1, r8
 8002390:	1e5c      	subs	r4, r3, #1
 8002392:	41a3      	sbcs	r3, r4
 8002394:	4331      	orrs	r1, r6
 8002396:	4319      	orrs	r1, r3
 8002398:	000c      	movs	r4, r1
 800239a:	4663      	mov	r3, ip
 800239c:	4649      	mov	r1, r9
 800239e:	40d9      	lsrs	r1, r3
 80023a0:	187f      	adds	r7, r7, r1
 80023a2:	1824      	adds	r4, r4, r0
 80023a4:	4284      	cmp	r4, r0
 80023a6:	419b      	sbcs	r3, r3
 80023a8:	425b      	negs	r3, r3
 80023aa:	469a      	mov	sl, r3
 80023ac:	0016      	movs	r6, r2
 80023ae:	44ba      	add	sl, r7
 80023b0:	e05d      	b.n	800246e <__aeabi_dsub+0x34e>
 80023b2:	4c38      	ldr	r4, [pc, #224]	; (8002494 <__aeabi_dsub+0x374>)
 80023b4:	1c72      	adds	r2, r6, #1
 80023b6:	4222      	tst	r2, r4
 80023b8:	d000      	beq.n	80023bc <__aeabi_dsub+0x29c>
 80023ba:	e0df      	b.n	800257c <__aeabi_dsub+0x45c>
 80023bc:	464a      	mov	r2, r9
 80023be:	431a      	orrs	r2, r3
 80023c0:	2e00      	cmp	r6, #0
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dsub+0x2a6>
 80023c4:	e15c      	b.n	8002680 <__aeabi_dsub+0x560>
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x2ac>
 80023ca:	e1cf      	b.n	800276c <__aeabi_dsub+0x64c>
 80023cc:	003a      	movs	r2, r7
 80023ce:	4302      	orrs	r2, r0
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dsub+0x2b4>
 80023d2:	e17f      	b.n	80026d4 <__aeabi_dsub+0x5b4>
 80023d4:	1a1c      	subs	r4, r3, r0
 80023d6:	464a      	mov	r2, r9
 80023d8:	42a3      	cmp	r3, r4
 80023da:	4189      	sbcs	r1, r1
 80023dc:	1bd2      	subs	r2, r2, r7
 80023de:	4249      	negs	r1, r1
 80023e0:	1a52      	subs	r2, r2, r1
 80023e2:	4692      	mov	sl, r2
 80023e4:	0212      	lsls	r2, r2, #8
 80023e6:	d400      	bmi.n	80023ea <__aeabi_dsub+0x2ca>
 80023e8:	e20a      	b.n	8002800 <__aeabi_dsub+0x6e0>
 80023ea:	1ac4      	subs	r4, r0, r3
 80023ec:	42a0      	cmp	r0, r4
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	464b      	mov	r3, r9
 80023f2:	4240      	negs	r0, r0
 80023f4:	1aff      	subs	r7, r7, r3
 80023f6:	1a3b      	subs	r3, r7, r0
 80023f8:	469a      	mov	sl, r3
 80023fa:	465d      	mov	r5, fp
 80023fc:	e71a      	b.n	8002234 <__aeabi_dsub+0x114>
 80023fe:	003a      	movs	r2, r7
 8002400:	4302      	orrs	r2, r0
 8002402:	d073      	beq.n	80024ec <__aeabi_dsub+0x3cc>
 8002404:	0022      	movs	r2, r4
 8002406:	3a01      	subs	r2, #1
 8002408:	2c01      	cmp	r4, #1
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0x2ee>
 800240c:	e0cb      	b.n	80025a6 <__aeabi_dsub+0x486>
 800240e:	4554      	cmp	r4, sl
 8002410:	d042      	beq.n	8002498 <__aeabi_dsub+0x378>
 8002412:	4694      	mov	ip, r2
 8002414:	e748      	b.n	80022a8 <__aeabi_dsub+0x188>
 8002416:	0010      	movs	r0, r2
 8002418:	3b1f      	subs	r3, #31
 800241a:	40d8      	lsrs	r0, r3
 800241c:	2920      	cmp	r1, #32
 800241e:	d003      	beq.n	8002428 <__aeabi_dsub+0x308>
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	1a5b      	subs	r3, r3, r1
 8002424:	409a      	lsls	r2, r3
 8002426:	4314      	orrs	r4, r2
 8002428:	1e63      	subs	r3, r4, #1
 800242a:	419c      	sbcs	r4, r3
 800242c:	2300      	movs	r3, #0
 800242e:	2600      	movs	r6, #0
 8002430:	469a      	mov	sl, r3
 8002432:	4304      	orrs	r4, r0
 8002434:	0763      	lsls	r3, r4, #29
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x31a>
 8002438:	e6fe      	b.n	8002238 <__aeabi_dsub+0x118>
 800243a:	4652      	mov	r2, sl
 800243c:	08e3      	lsrs	r3, r4, #3
 800243e:	0752      	lsls	r2, r2, #29
 8002440:	4313      	orrs	r3, r2
 8002442:	4652      	mov	r2, sl
 8002444:	46b4      	mov	ip, r6
 8002446:	08d2      	lsrs	r2, r2, #3
 8002448:	490f      	ldr	r1, [pc, #60]	; (8002488 <__aeabi_dsub+0x368>)
 800244a:	458c      	cmp	ip, r1
 800244c:	d02a      	beq.n	80024a4 <__aeabi_dsub+0x384>
 800244e:	0312      	lsls	r2, r2, #12
 8002450:	0b14      	lsrs	r4, r2, #12
 8002452:	4662      	mov	r2, ip
 8002454:	0552      	lsls	r2, r2, #21
 8002456:	0d52      	lsrs	r2, r2, #21
 8002458:	e70c      	b.n	8002274 <__aeabi_dsub+0x154>
 800245a:	003c      	movs	r4, r7
 800245c:	4304      	orrs	r4, r0
 800245e:	1e62      	subs	r2, r4, #1
 8002460:	4194      	sbcs	r4, r2
 8002462:	18e4      	adds	r4, r4, r3
 8002464:	429c      	cmp	r4, r3
 8002466:	4192      	sbcs	r2, r2
 8002468:	4252      	negs	r2, r2
 800246a:	444a      	add	r2, r9
 800246c:	4692      	mov	sl, r2
 800246e:	4653      	mov	r3, sl
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	d5df      	bpl.n	8002434 <__aeabi_dsub+0x314>
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__aeabi_dsub+0x368>)
 8002476:	3601      	adds	r6, #1
 8002478:	429e      	cmp	r6, r3
 800247a:	d000      	beq.n	800247e <__aeabi_dsub+0x35e>
 800247c:	e0a0      	b.n	80025c0 <__aeabi_dsub+0x4a0>
 800247e:	0032      	movs	r2, r6
 8002480:	2400      	movs	r4, #0
 8002482:	2300      	movs	r3, #0
 8002484:	e6f6      	b.n	8002274 <__aeabi_dsub+0x154>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	000007ff 	.word	0x000007ff
 800248c:	ff7fffff 	.word	0xff7fffff
 8002490:	fffff801 	.word	0xfffff801
 8002494:	000007fe 	.word	0x000007fe
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	464a      	mov	r2, r9
 800249c:	0752      	lsls	r2, r2, #29
 800249e:	4313      	orrs	r3, r2
 80024a0:	464a      	mov	r2, r9
 80024a2:	08d2      	lsrs	r2, r2, #3
 80024a4:	0019      	movs	r1, r3
 80024a6:	4311      	orrs	r1, r2
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x38c>
 80024aa:	e1b5      	b.n	8002818 <__aeabi_dsub+0x6f8>
 80024ac:	2480      	movs	r4, #128	; 0x80
 80024ae:	0324      	lsls	r4, r4, #12
 80024b0:	4314      	orrs	r4, r2
 80024b2:	0324      	lsls	r4, r4, #12
 80024b4:	4ad5      	ldr	r2, [pc, #852]	; (800280c <__aeabi_dsub+0x6ec>)
 80024b6:	0b24      	lsrs	r4, r4, #12
 80024b8:	e6dc      	b.n	8002274 <__aeabi_dsub+0x154>
 80024ba:	0020      	movs	r0, r4
 80024bc:	f000 faa4 	bl	8002a08 <__clzsi2>
 80024c0:	0003      	movs	r3, r0
 80024c2:	3318      	adds	r3, #24
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	dc00      	bgt.n	80024ca <__aeabi_dsub+0x3aa>
 80024c8:	e695      	b.n	80021f6 <__aeabi_dsub+0xd6>
 80024ca:	0022      	movs	r2, r4
 80024cc:	3808      	subs	r0, #8
 80024ce:	4082      	lsls	r2, r0
 80024d0:	2400      	movs	r4, #0
 80024d2:	429e      	cmp	r6, r3
 80024d4:	dc00      	bgt.n	80024d8 <__aeabi_dsub+0x3b8>
 80024d6:	e69a      	b.n	800220e <__aeabi_dsub+0xee>
 80024d8:	1af6      	subs	r6, r6, r3
 80024da:	4bcd      	ldr	r3, [pc, #820]	; (8002810 <__aeabi_dsub+0x6f0>)
 80024dc:	401a      	ands	r2, r3
 80024de:	4692      	mov	sl, r2
 80024e0:	e6a8      	b.n	8002234 <__aeabi_dsub+0x114>
 80024e2:	003c      	movs	r4, r7
 80024e4:	4304      	orrs	r4, r0
 80024e6:	1e62      	subs	r2, r4, #1
 80024e8:	4194      	sbcs	r4, r2
 80024ea:	e66c      	b.n	80021c6 <__aeabi_dsub+0xa6>
 80024ec:	464a      	mov	r2, r9
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	0752      	lsls	r2, r2, #29
 80024f2:	4313      	orrs	r3, r2
 80024f4:	464a      	mov	r2, r9
 80024f6:	08d2      	lsrs	r2, r2, #3
 80024f8:	e7a6      	b.n	8002448 <__aeabi_dsub+0x328>
 80024fa:	4cc6      	ldr	r4, [pc, #792]	; (8002814 <__aeabi_dsub+0x6f4>)
 80024fc:	1c72      	adds	r2, r6, #1
 80024fe:	4222      	tst	r2, r4
 8002500:	d000      	beq.n	8002504 <__aeabi_dsub+0x3e4>
 8002502:	e0ac      	b.n	800265e <__aeabi_dsub+0x53e>
 8002504:	464a      	mov	r2, r9
 8002506:	431a      	orrs	r2, r3
 8002508:	2e00      	cmp	r6, #0
 800250a:	d000      	beq.n	800250e <__aeabi_dsub+0x3ee>
 800250c:	e105      	b.n	800271a <__aeabi_dsub+0x5fa>
 800250e:	2a00      	cmp	r2, #0
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x3f4>
 8002512:	e156      	b.n	80027c2 <__aeabi_dsub+0x6a2>
 8002514:	003a      	movs	r2, r7
 8002516:	4302      	orrs	r2, r0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x3fc>
 800251a:	e0db      	b.n	80026d4 <__aeabi_dsub+0x5b4>
 800251c:	181c      	adds	r4, r3, r0
 800251e:	429c      	cmp	r4, r3
 8002520:	419b      	sbcs	r3, r3
 8002522:	444f      	add	r7, r9
 8002524:	46ba      	mov	sl, r7
 8002526:	425b      	negs	r3, r3
 8002528:	449a      	add	sl, r3
 800252a:	4653      	mov	r3, sl
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	d400      	bmi.n	8002532 <__aeabi_dsub+0x412>
 8002530:	e780      	b.n	8002434 <__aeabi_dsub+0x314>
 8002532:	4652      	mov	r2, sl
 8002534:	4bb6      	ldr	r3, [pc, #728]	; (8002810 <__aeabi_dsub+0x6f0>)
 8002536:	2601      	movs	r6, #1
 8002538:	401a      	ands	r2, r3
 800253a:	4692      	mov	sl, r2
 800253c:	e77a      	b.n	8002434 <__aeabi_dsub+0x314>
 800253e:	4cb3      	ldr	r4, [pc, #716]	; (800280c <__aeabi_dsub+0x6ec>)
 8002540:	42a2      	cmp	r2, r4
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x426>
 8002544:	e0c0      	b.n	80026c8 <__aeabi_dsub+0x5a8>
 8002546:	2480      	movs	r4, #128	; 0x80
 8002548:	464d      	mov	r5, r9
 800254a:	0424      	lsls	r4, r4, #16
 800254c:	4325      	orrs	r5, r4
 800254e:	46a9      	mov	r9, r5
 8002550:	4664      	mov	r4, ip
 8002552:	2c38      	cmp	r4, #56	; 0x38
 8002554:	dc53      	bgt.n	80025fe <__aeabi_dsub+0x4de>
 8002556:	4661      	mov	r1, ip
 8002558:	2c1f      	cmp	r4, #31
 800255a:	dd00      	ble.n	800255e <__aeabi_dsub+0x43e>
 800255c:	e0cd      	b.n	80026fa <__aeabi_dsub+0x5da>
 800255e:	2520      	movs	r5, #32
 8002560:	001e      	movs	r6, r3
 8002562:	1b2d      	subs	r5, r5, r4
 8002564:	464c      	mov	r4, r9
 8002566:	40ab      	lsls	r3, r5
 8002568:	40ac      	lsls	r4, r5
 800256a:	40ce      	lsrs	r6, r1
 800256c:	1e5d      	subs	r5, r3, #1
 800256e:	41ab      	sbcs	r3, r5
 8002570:	4334      	orrs	r4, r6
 8002572:	4323      	orrs	r3, r4
 8002574:	464c      	mov	r4, r9
 8002576:	40cc      	lsrs	r4, r1
 8002578:	1b3f      	subs	r7, r7, r4
 800257a:	e045      	b.n	8002608 <__aeabi_dsub+0x4e8>
 800257c:	464a      	mov	r2, r9
 800257e:	1a1c      	subs	r4, r3, r0
 8002580:	1bd1      	subs	r1, r2, r7
 8002582:	42a3      	cmp	r3, r4
 8002584:	4192      	sbcs	r2, r2
 8002586:	4252      	negs	r2, r2
 8002588:	4692      	mov	sl, r2
 800258a:	000a      	movs	r2, r1
 800258c:	4651      	mov	r1, sl
 800258e:	1a52      	subs	r2, r2, r1
 8002590:	4692      	mov	sl, r2
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	d500      	bpl.n	8002598 <__aeabi_dsub+0x478>
 8002596:	e083      	b.n	80026a0 <__aeabi_dsub+0x580>
 8002598:	4653      	mov	r3, sl
 800259a:	4323      	orrs	r3, r4
 800259c:	d000      	beq.n	80025a0 <__aeabi_dsub+0x480>
 800259e:	e621      	b.n	80021e4 <__aeabi_dsub+0xc4>
 80025a0:	2200      	movs	r2, #0
 80025a2:	2500      	movs	r5, #0
 80025a4:	e753      	b.n	800244e <__aeabi_dsub+0x32e>
 80025a6:	181c      	adds	r4, r3, r0
 80025a8:	429c      	cmp	r4, r3
 80025aa:	419b      	sbcs	r3, r3
 80025ac:	444f      	add	r7, r9
 80025ae:	46ba      	mov	sl, r7
 80025b0:	425b      	negs	r3, r3
 80025b2:	449a      	add	sl, r3
 80025b4:	4653      	mov	r3, sl
 80025b6:	2601      	movs	r6, #1
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	d400      	bmi.n	80025be <__aeabi_dsub+0x49e>
 80025bc:	e73a      	b.n	8002434 <__aeabi_dsub+0x314>
 80025be:	2602      	movs	r6, #2
 80025c0:	4652      	mov	r2, sl
 80025c2:	4b93      	ldr	r3, [pc, #588]	; (8002810 <__aeabi_dsub+0x6f0>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	401a      	ands	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	4021      	ands	r1, r4
 80025cc:	0862      	lsrs	r2, r4, #1
 80025ce:	430a      	orrs	r2, r1
 80025d0:	07dc      	lsls	r4, r3, #31
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	469a      	mov	sl, r3
 80025d6:	4314      	orrs	r4, r2
 80025d8:	e62c      	b.n	8002234 <__aeabi_dsub+0x114>
 80025da:	0039      	movs	r1, r7
 80025dc:	3a20      	subs	r2, #32
 80025de:	40d1      	lsrs	r1, r2
 80025e0:	4662      	mov	r2, ip
 80025e2:	2a20      	cmp	r2, #32
 80025e4:	d006      	beq.n	80025f4 <__aeabi_dsub+0x4d4>
 80025e6:	4664      	mov	r4, ip
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	1b12      	subs	r2, r2, r4
 80025ec:	003c      	movs	r4, r7
 80025ee:	4094      	lsls	r4, r2
 80025f0:	4304      	orrs	r4, r0
 80025f2:	9401      	str	r4, [sp, #4]
 80025f4:	9c01      	ldr	r4, [sp, #4]
 80025f6:	1e62      	subs	r2, r4, #1
 80025f8:	4194      	sbcs	r4, r2
 80025fa:	430c      	orrs	r4, r1
 80025fc:	e5e3      	b.n	80021c6 <__aeabi_dsub+0xa6>
 80025fe:	4649      	mov	r1, r9
 8002600:	4319      	orrs	r1, r3
 8002602:	000b      	movs	r3, r1
 8002604:	1e5c      	subs	r4, r3, #1
 8002606:	41a3      	sbcs	r3, r4
 8002608:	1ac4      	subs	r4, r0, r3
 800260a:	42a0      	cmp	r0, r4
 800260c:	419b      	sbcs	r3, r3
 800260e:	425b      	negs	r3, r3
 8002610:	1afb      	subs	r3, r7, r3
 8002612:	469a      	mov	sl, r3
 8002614:	465d      	mov	r5, fp
 8002616:	0016      	movs	r6, r2
 8002618:	e5dc      	b.n	80021d4 <__aeabi_dsub+0xb4>
 800261a:	4649      	mov	r1, r9
 800261c:	4319      	orrs	r1, r3
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x502>
 8002620:	e0ae      	b.n	8002780 <__aeabi_dsub+0x660>
 8002622:	4661      	mov	r1, ip
 8002624:	4664      	mov	r4, ip
 8002626:	3901      	subs	r1, #1
 8002628:	2c01      	cmp	r4, #1
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x50e>
 800262c:	e0e0      	b.n	80027f0 <__aeabi_dsub+0x6d0>
 800262e:	4c77      	ldr	r4, [pc, #476]	; (800280c <__aeabi_dsub+0x6ec>)
 8002630:	45a4      	cmp	ip, r4
 8002632:	d056      	beq.n	80026e2 <__aeabi_dsub+0x5c2>
 8002634:	468c      	mov	ip, r1
 8002636:	e69a      	b.n	800236e <__aeabi_dsub+0x24e>
 8002638:	4661      	mov	r1, ip
 800263a:	2220      	movs	r2, #32
 800263c:	003c      	movs	r4, r7
 800263e:	1a52      	subs	r2, r2, r1
 8002640:	4094      	lsls	r4, r2
 8002642:	0001      	movs	r1, r0
 8002644:	4090      	lsls	r0, r2
 8002646:	46a0      	mov	r8, r4
 8002648:	4664      	mov	r4, ip
 800264a:	1e42      	subs	r2, r0, #1
 800264c:	4190      	sbcs	r0, r2
 800264e:	4662      	mov	r2, ip
 8002650:	40e1      	lsrs	r1, r4
 8002652:	4644      	mov	r4, r8
 8002654:	40d7      	lsrs	r7, r2
 8002656:	430c      	orrs	r4, r1
 8002658:	4304      	orrs	r4, r0
 800265a:	44b9      	add	r9, r7
 800265c:	e701      	b.n	8002462 <__aeabi_dsub+0x342>
 800265e:	496b      	ldr	r1, [pc, #428]	; (800280c <__aeabi_dsub+0x6ec>)
 8002660:	428a      	cmp	r2, r1
 8002662:	d100      	bne.n	8002666 <__aeabi_dsub+0x546>
 8002664:	e70c      	b.n	8002480 <__aeabi_dsub+0x360>
 8002666:	1818      	adds	r0, r3, r0
 8002668:	4298      	cmp	r0, r3
 800266a:	419b      	sbcs	r3, r3
 800266c:	444f      	add	r7, r9
 800266e:	425b      	negs	r3, r3
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	07dc      	lsls	r4, r3, #31
 8002674:	0840      	lsrs	r0, r0, #1
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	469a      	mov	sl, r3
 800267a:	0016      	movs	r6, r2
 800267c:	4304      	orrs	r4, r0
 800267e:	e6d9      	b.n	8002434 <__aeabi_dsub+0x314>
 8002680:	2a00      	cmp	r2, #0
 8002682:	d000      	beq.n	8002686 <__aeabi_dsub+0x566>
 8002684:	e081      	b.n	800278a <__aeabi_dsub+0x66a>
 8002686:	003b      	movs	r3, r7
 8002688:	4303      	orrs	r3, r0
 800268a:	d11d      	bne.n	80026c8 <__aeabi_dsub+0x5a8>
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	2500      	movs	r5, #0
 8002690:	0312      	lsls	r2, r2, #12
 8002692:	e70b      	b.n	80024ac <__aeabi_dsub+0x38c>
 8002694:	08c0      	lsrs	r0, r0, #3
 8002696:	077b      	lsls	r3, r7, #29
 8002698:	465d      	mov	r5, fp
 800269a:	4303      	orrs	r3, r0
 800269c:	08fa      	lsrs	r2, r7, #3
 800269e:	e6d3      	b.n	8002448 <__aeabi_dsub+0x328>
 80026a0:	1ac4      	subs	r4, r0, r3
 80026a2:	42a0      	cmp	r0, r4
 80026a4:	4180      	sbcs	r0, r0
 80026a6:	464b      	mov	r3, r9
 80026a8:	4240      	negs	r0, r0
 80026aa:	1aff      	subs	r7, r7, r3
 80026ac:	1a3b      	subs	r3, r7, r0
 80026ae:	469a      	mov	sl, r3
 80026b0:	465d      	mov	r5, fp
 80026b2:	e597      	b.n	80021e4 <__aeabi_dsub+0xc4>
 80026b4:	1a1c      	subs	r4, r3, r0
 80026b6:	464a      	mov	r2, r9
 80026b8:	42a3      	cmp	r3, r4
 80026ba:	419b      	sbcs	r3, r3
 80026bc:	1bd7      	subs	r7, r2, r7
 80026be:	425b      	negs	r3, r3
 80026c0:	1afb      	subs	r3, r7, r3
 80026c2:	469a      	mov	sl, r3
 80026c4:	2601      	movs	r6, #1
 80026c6:	e585      	b.n	80021d4 <__aeabi_dsub+0xb4>
 80026c8:	08c0      	lsrs	r0, r0, #3
 80026ca:	077b      	lsls	r3, r7, #29
 80026cc:	465d      	mov	r5, fp
 80026ce:	4303      	orrs	r3, r0
 80026d0:	08fa      	lsrs	r2, r7, #3
 80026d2:	e6e7      	b.n	80024a4 <__aeabi_dsub+0x384>
 80026d4:	464a      	mov	r2, r9
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	0752      	lsls	r2, r2, #29
 80026da:	4313      	orrs	r3, r2
 80026dc:	464a      	mov	r2, r9
 80026de:	08d2      	lsrs	r2, r2, #3
 80026e0:	e6b5      	b.n	800244e <__aeabi_dsub+0x32e>
 80026e2:	08c0      	lsrs	r0, r0, #3
 80026e4:	077b      	lsls	r3, r7, #29
 80026e6:	4303      	orrs	r3, r0
 80026e8:	08fa      	lsrs	r2, r7, #3
 80026ea:	e6db      	b.n	80024a4 <__aeabi_dsub+0x384>
 80026ec:	4649      	mov	r1, r9
 80026ee:	4319      	orrs	r1, r3
 80026f0:	000b      	movs	r3, r1
 80026f2:	1e59      	subs	r1, r3, #1
 80026f4:	418b      	sbcs	r3, r1
 80026f6:	001c      	movs	r4, r3
 80026f8:	e653      	b.n	80023a2 <__aeabi_dsub+0x282>
 80026fa:	464d      	mov	r5, r9
 80026fc:	3c20      	subs	r4, #32
 80026fe:	40e5      	lsrs	r5, r4
 8002700:	2920      	cmp	r1, #32
 8002702:	d005      	beq.n	8002710 <__aeabi_dsub+0x5f0>
 8002704:	2440      	movs	r4, #64	; 0x40
 8002706:	1a64      	subs	r4, r4, r1
 8002708:	4649      	mov	r1, r9
 800270a:	40a1      	lsls	r1, r4
 800270c:	430b      	orrs	r3, r1
 800270e:	4698      	mov	r8, r3
 8002710:	4643      	mov	r3, r8
 8002712:	1e5c      	subs	r4, r3, #1
 8002714:	41a3      	sbcs	r3, r4
 8002716:	432b      	orrs	r3, r5
 8002718:	e776      	b.n	8002608 <__aeabi_dsub+0x4e8>
 800271a:	2a00      	cmp	r2, #0
 800271c:	d0e1      	beq.n	80026e2 <__aeabi_dsub+0x5c2>
 800271e:	003a      	movs	r2, r7
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	4302      	orrs	r2, r0
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x608>
 8002726:	e6b8      	b.n	800249a <__aeabi_dsub+0x37a>
 8002728:	464a      	mov	r2, r9
 800272a:	0752      	lsls	r2, r2, #29
 800272c:	2480      	movs	r4, #128	; 0x80
 800272e:	4313      	orrs	r3, r2
 8002730:	464a      	mov	r2, r9
 8002732:	0324      	lsls	r4, r4, #12
 8002734:	08d2      	lsrs	r2, r2, #3
 8002736:	4222      	tst	r2, r4
 8002738:	d007      	beq.n	800274a <__aeabi_dsub+0x62a>
 800273a:	08fe      	lsrs	r6, r7, #3
 800273c:	4226      	tst	r6, r4
 800273e:	d104      	bne.n	800274a <__aeabi_dsub+0x62a>
 8002740:	465d      	mov	r5, fp
 8002742:	0032      	movs	r2, r6
 8002744:	08c3      	lsrs	r3, r0, #3
 8002746:	077f      	lsls	r7, r7, #29
 8002748:	433b      	orrs	r3, r7
 800274a:	0f59      	lsrs	r1, r3, #29
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	0749      	lsls	r1, r1, #29
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	430b      	orrs	r3, r1
 8002754:	e6a6      	b.n	80024a4 <__aeabi_dsub+0x384>
 8002756:	1ac4      	subs	r4, r0, r3
 8002758:	42a0      	cmp	r0, r4
 800275a:	4180      	sbcs	r0, r0
 800275c:	464b      	mov	r3, r9
 800275e:	4240      	negs	r0, r0
 8002760:	1aff      	subs	r7, r7, r3
 8002762:	1a3b      	subs	r3, r7, r0
 8002764:	469a      	mov	sl, r3
 8002766:	465d      	mov	r5, fp
 8002768:	2601      	movs	r6, #1
 800276a:	e533      	b.n	80021d4 <__aeabi_dsub+0xb4>
 800276c:	003b      	movs	r3, r7
 800276e:	4303      	orrs	r3, r0
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x654>
 8002772:	e715      	b.n	80025a0 <__aeabi_dsub+0x480>
 8002774:	08c0      	lsrs	r0, r0, #3
 8002776:	077b      	lsls	r3, r7, #29
 8002778:	465d      	mov	r5, fp
 800277a:	4303      	orrs	r3, r0
 800277c:	08fa      	lsrs	r2, r7, #3
 800277e:	e666      	b.n	800244e <__aeabi_dsub+0x32e>
 8002780:	08c0      	lsrs	r0, r0, #3
 8002782:	077b      	lsls	r3, r7, #29
 8002784:	4303      	orrs	r3, r0
 8002786:	08fa      	lsrs	r2, r7, #3
 8002788:	e65e      	b.n	8002448 <__aeabi_dsub+0x328>
 800278a:	003a      	movs	r2, r7
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	4302      	orrs	r2, r0
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x674>
 8002792:	e682      	b.n	800249a <__aeabi_dsub+0x37a>
 8002794:	464a      	mov	r2, r9
 8002796:	0752      	lsls	r2, r2, #29
 8002798:	2480      	movs	r4, #128	; 0x80
 800279a:	4313      	orrs	r3, r2
 800279c:	464a      	mov	r2, r9
 800279e:	0324      	lsls	r4, r4, #12
 80027a0:	08d2      	lsrs	r2, r2, #3
 80027a2:	4222      	tst	r2, r4
 80027a4:	d007      	beq.n	80027b6 <__aeabi_dsub+0x696>
 80027a6:	08fe      	lsrs	r6, r7, #3
 80027a8:	4226      	tst	r6, r4
 80027aa:	d104      	bne.n	80027b6 <__aeabi_dsub+0x696>
 80027ac:	465d      	mov	r5, fp
 80027ae:	0032      	movs	r2, r6
 80027b0:	08c3      	lsrs	r3, r0, #3
 80027b2:	077f      	lsls	r7, r7, #29
 80027b4:	433b      	orrs	r3, r7
 80027b6:	0f59      	lsrs	r1, r3, #29
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	0749      	lsls	r1, r1, #29
 80027be:	430b      	orrs	r3, r1
 80027c0:	e670      	b.n	80024a4 <__aeabi_dsub+0x384>
 80027c2:	08c0      	lsrs	r0, r0, #3
 80027c4:	077b      	lsls	r3, r7, #29
 80027c6:	4303      	orrs	r3, r0
 80027c8:	08fa      	lsrs	r2, r7, #3
 80027ca:	e640      	b.n	800244e <__aeabi_dsub+0x32e>
 80027cc:	464c      	mov	r4, r9
 80027ce:	3920      	subs	r1, #32
 80027d0:	40cc      	lsrs	r4, r1
 80027d2:	4661      	mov	r1, ip
 80027d4:	2920      	cmp	r1, #32
 80027d6:	d006      	beq.n	80027e6 <__aeabi_dsub+0x6c6>
 80027d8:	4666      	mov	r6, ip
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	1b89      	subs	r1, r1, r6
 80027de:	464e      	mov	r6, r9
 80027e0:	408e      	lsls	r6, r1
 80027e2:	4333      	orrs	r3, r6
 80027e4:	4698      	mov	r8, r3
 80027e6:	4643      	mov	r3, r8
 80027e8:	1e59      	subs	r1, r3, #1
 80027ea:	418b      	sbcs	r3, r1
 80027ec:	431c      	orrs	r4, r3
 80027ee:	e5d8      	b.n	80023a2 <__aeabi_dsub+0x282>
 80027f0:	181c      	adds	r4, r3, r0
 80027f2:	4284      	cmp	r4, r0
 80027f4:	4180      	sbcs	r0, r0
 80027f6:	444f      	add	r7, r9
 80027f8:	46ba      	mov	sl, r7
 80027fa:	4240      	negs	r0, r0
 80027fc:	4482      	add	sl, r0
 80027fe:	e6d9      	b.n	80025b4 <__aeabi_dsub+0x494>
 8002800:	4653      	mov	r3, sl
 8002802:	4323      	orrs	r3, r4
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x6e8>
 8002806:	e6cb      	b.n	80025a0 <__aeabi_dsub+0x480>
 8002808:	e614      	b.n	8002434 <__aeabi_dsub+0x314>
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	000007ff 	.word	0x000007ff
 8002810:	ff7fffff 	.word	0xff7fffff
 8002814:	000007fe 	.word	0x000007fe
 8002818:	2300      	movs	r3, #0
 800281a:	4a01      	ldr	r2, [pc, #4]	; (8002820 <__aeabi_dsub+0x700>)
 800281c:	001c      	movs	r4, r3
 800281e:	e529      	b.n	8002274 <__aeabi_dsub+0x154>
 8002820:	000007ff 	.word	0x000007ff

08002824 <__aeabi_dcmpun>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	0005      	movs	r5, r0
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <__aeabi_dcmpun+0x38>)
 800282a:	031c      	lsls	r4, r3, #12
 800282c:	0016      	movs	r6, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	030a      	lsls	r2, r1, #12
 8002832:	0049      	lsls	r1, r1, #1
 8002834:	0b12      	lsrs	r2, r2, #12
 8002836:	0d49      	lsrs	r1, r1, #21
 8002838:	0b24      	lsrs	r4, r4, #12
 800283a:	0d5b      	lsrs	r3, r3, #21
 800283c:	4281      	cmp	r1, r0
 800283e:	d008      	beq.n	8002852 <__aeabi_dcmpun+0x2e>
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <__aeabi_dcmpun+0x38>)
 8002842:	2000      	movs	r0, #0
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <__aeabi_dcmpun+0x2c>
 8002848:	0020      	movs	r0, r4
 800284a:	4330      	orrs	r0, r6
 800284c:	1e43      	subs	r3, r0, #1
 800284e:	4198      	sbcs	r0, r3
 8002850:	bd70      	pop	{r4, r5, r6, pc}
 8002852:	2001      	movs	r0, #1
 8002854:	432a      	orrs	r2, r5
 8002856:	d1fb      	bne.n	8002850 <__aeabi_dcmpun+0x2c>
 8002858:	e7f2      	b.n	8002840 <__aeabi_dcmpun+0x1c>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	000007ff 	.word	0x000007ff

08002860 <__aeabi_d2iz>:
 8002860:	000a      	movs	r2, r1
 8002862:	b530      	push	{r4, r5, lr}
 8002864:	4c13      	ldr	r4, [pc, #76]	; (80028b4 <__aeabi_d2iz+0x54>)
 8002866:	0053      	lsls	r3, r2, #1
 8002868:	0309      	lsls	r1, r1, #12
 800286a:	0005      	movs	r5, r0
 800286c:	0b09      	lsrs	r1, r1, #12
 800286e:	2000      	movs	r0, #0
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	0fd2      	lsrs	r2, r2, #31
 8002874:	42a3      	cmp	r3, r4
 8002876:	dd04      	ble.n	8002882 <__aeabi_d2iz+0x22>
 8002878:	480f      	ldr	r0, [pc, #60]	; (80028b8 <__aeabi_d2iz+0x58>)
 800287a:	4283      	cmp	r3, r0
 800287c:	dd02      	ble.n	8002884 <__aeabi_d2iz+0x24>
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <__aeabi_d2iz+0x5c>)
 8002880:	18d0      	adds	r0, r2, r3
 8002882:	bd30      	pop	{r4, r5, pc}
 8002884:	2080      	movs	r0, #128	; 0x80
 8002886:	0340      	lsls	r0, r0, #13
 8002888:	4301      	orrs	r1, r0
 800288a:	480d      	ldr	r0, [pc, #52]	; (80028c0 <__aeabi_d2iz+0x60>)
 800288c:	1ac0      	subs	r0, r0, r3
 800288e:	281f      	cmp	r0, #31
 8002890:	dd08      	ble.n	80028a4 <__aeabi_d2iz+0x44>
 8002892:	480c      	ldr	r0, [pc, #48]	; (80028c4 <__aeabi_d2iz+0x64>)
 8002894:	1ac3      	subs	r3, r0, r3
 8002896:	40d9      	lsrs	r1, r3
 8002898:	000b      	movs	r3, r1
 800289a:	4258      	negs	r0, r3
 800289c:	2a00      	cmp	r2, #0
 800289e:	d1f0      	bne.n	8002882 <__aeabi_d2iz+0x22>
 80028a0:	0018      	movs	r0, r3
 80028a2:	e7ee      	b.n	8002882 <__aeabi_d2iz+0x22>
 80028a4:	4c08      	ldr	r4, [pc, #32]	; (80028c8 <__aeabi_d2iz+0x68>)
 80028a6:	40c5      	lsrs	r5, r0
 80028a8:	46a4      	mov	ip, r4
 80028aa:	4463      	add	r3, ip
 80028ac:	4099      	lsls	r1, r3
 80028ae:	000b      	movs	r3, r1
 80028b0:	432b      	orrs	r3, r5
 80028b2:	e7f2      	b.n	800289a <__aeabi_d2iz+0x3a>
 80028b4:	000003fe 	.word	0x000003fe
 80028b8:	0000041d 	.word	0x0000041d
 80028bc:	7fffffff 	.word	0x7fffffff
 80028c0:	00000433 	.word	0x00000433
 80028c4:	00000413 	.word	0x00000413
 80028c8:	fffffbed 	.word	0xfffffbed

080028cc <__aeabi_i2d>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d016      	beq.n	8002900 <__aeabi_i2d+0x34>
 80028d2:	17c3      	asrs	r3, r0, #31
 80028d4:	18c5      	adds	r5, r0, r3
 80028d6:	405d      	eors	r5, r3
 80028d8:	0fc4      	lsrs	r4, r0, #31
 80028da:	0028      	movs	r0, r5
 80028dc:	f000 f894 	bl	8002a08 <__clzsi2>
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <__aeabi_i2d+0x5c>)
 80028e2:	1a1b      	subs	r3, r3, r0
 80028e4:	280a      	cmp	r0, #10
 80028e6:	dc16      	bgt.n	8002916 <__aeabi_i2d+0x4a>
 80028e8:	0002      	movs	r2, r0
 80028ea:	002e      	movs	r6, r5
 80028ec:	3215      	adds	r2, #21
 80028ee:	4096      	lsls	r6, r2
 80028f0:	220b      	movs	r2, #11
 80028f2:	1a12      	subs	r2, r2, r0
 80028f4:	40d5      	lsrs	r5, r2
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	032d      	lsls	r5, r5, #12
 80028fa:	0b2d      	lsrs	r5, r5, #12
 80028fc:	0d5b      	lsrs	r3, r3, #21
 80028fe:	e003      	b.n	8002908 <__aeabi_i2d+0x3c>
 8002900:	2400      	movs	r4, #0
 8002902:	2300      	movs	r3, #0
 8002904:	2500      	movs	r5, #0
 8002906:	2600      	movs	r6, #0
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	432b      	orrs	r3, r5
 800290c:	07e4      	lsls	r4, r4, #31
 800290e:	4323      	orrs	r3, r4
 8002910:	0030      	movs	r0, r6
 8002912:	0019      	movs	r1, r3
 8002914:	bd70      	pop	{r4, r5, r6, pc}
 8002916:	380b      	subs	r0, #11
 8002918:	4085      	lsls	r5, r0
 800291a:	055b      	lsls	r3, r3, #21
 800291c:	032d      	lsls	r5, r5, #12
 800291e:	2600      	movs	r6, #0
 8002920:	0b2d      	lsrs	r5, r5, #12
 8002922:	0d5b      	lsrs	r3, r3, #21
 8002924:	e7f0      	b.n	8002908 <__aeabi_i2d+0x3c>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	0000041e 	.word	0x0000041e

0800292c <__aeabi_ui2d>:
 800292c:	b510      	push	{r4, lr}
 800292e:	1e04      	subs	r4, r0, #0
 8002930:	d010      	beq.n	8002954 <__aeabi_ui2d+0x28>
 8002932:	f000 f869 	bl	8002a08 <__clzsi2>
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <__aeabi_ui2d+0x48>)
 8002938:	1a1b      	subs	r3, r3, r0
 800293a:	280a      	cmp	r0, #10
 800293c:	dc11      	bgt.n	8002962 <__aeabi_ui2d+0x36>
 800293e:	220b      	movs	r2, #11
 8002940:	0021      	movs	r1, r4
 8002942:	1a12      	subs	r2, r2, r0
 8002944:	40d1      	lsrs	r1, r2
 8002946:	3015      	adds	r0, #21
 8002948:	030a      	lsls	r2, r1, #12
 800294a:	055b      	lsls	r3, r3, #21
 800294c:	4084      	lsls	r4, r0
 800294e:	0b12      	lsrs	r2, r2, #12
 8002950:	0d5b      	lsrs	r3, r3, #21
 8002952:	e001      	b.n	8002958 <__aeabi_ui2d+0x2c>
 8002954:	2300      	movs	r3, #0
 8002956:	2200      	movs	r2, #0
 8002958:	051b      	lsls	r3, r3, #20
 800295a:	4313      	orrs	r3, r2
 800295c:	0020      	movs	r0, r4
 800295e:	0019      	movs	r1, r3
 8002960:	bd10      	pop	{r4, pc}
 8002962:	0022      	movs	r2, r4
 8002964:	380b      	subs	r0, #11
 8002966:	4082      	lsls	r2, r0
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	0312      	lsls	r2, r2, #12
 800296c:	2400      	movs	r4, #0
 800296e:	0b12      	lsrs	r2, r2, #12
 8002970:	0d5b      	lsrs	r3, r3, #21
 8002972:	e7f1      	b.n	8002958 <__aeabi_ui2d+0x2c>
 8002974:	0000041e 	.word	0x0000041e

08002978 <__aeabi_f2d>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	0242      	lsls	r2, r0, #9
 800297c:	0043      	lsls	r3, r0, #1
 800297e:	0fc4      	lsrs	r4, r0, #31
 8002980:	20fe      	movs	r0, #254	; 0xfe
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	1c59      	adds	r1, r3, #1
 8002986:	0a55      	lsrs	r5, r2, #9
 8002988:	4208      	tst	r0, r1
 800298a:	d00c      	beq.n	80029a6 <__aeabi_f2d+0x2e>
 800298c:	21e0      	movs	r1, #224	; 0xe0
 800298e:	0089      	lsls	r1, r1, #2
 8002990:	468c      	mov	ip, r1
 8002992:	076d      	lsls	r5, r5, #29
 8002994:	0b12      	lsrs	r2, r2, #12
 8002996:	4463      	add	r3, ip
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	4313      	orrs	r3, r2
 800299c:	07e4      	lsls	r4, r4, #31
 800299e:	4323      	orrs	r3, r4
 80029a0:	0028      	movs	r0, r5
 80029a2:	0019      	movs	r1, r3
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <__aeabi_f2d+0x5c>
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	d01b      	beq.n	80029e6 <__aeabi_f2d+0x6e>
 80029ae:	0028      	movs	r0, r5
 80029b0:	f000 f82a 	bl	8002a08 <__clzsi2>
 80029b4:	280a      	cmp	r0, #10
 80029b6:	dc1c      	bgt.n	80029f2 <__aeabi_f2d+0x7a>
 80029b8:	230b      	movs	r3, #11
 80029ba:	002a      	movs	r2, r5
 80029bc:	1a1b      	subs	r3, r3, r0
 80029be:	40da      	lsrs	r2, r3
 80029c0:	0003      	movs	r3, r0
 80029c2:	3315      	adds	r3, #21
 80029c4:	409d      	lsls	r5, r3
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <__aeabi_f2d+0x88>)
 80029c8:	0312      	lsls	r2, r2, #12
 80029ca:	1a1b      	subs	r3, r3, r0
 80029cc:	055b      	lsls	r3, r3, #21
 80029ce:	0b12      	lsrs	r2, r2, #12
 80029d0:	0d5b      	lsrs	r3, r3, #21
 80029d2:	e7e1      	b.n	8002998 <__aeabi_f2d+0x20>
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	d009      	beq.n	80029ec <__aeabi_f2d+0x74>
 80029d8:	0b13      	lsrs	r3, r2, #12
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0312      	lsls	r2, r2, #12
 80029de:	431a      	orrs	r2, r3
 80029e0:	076d      	lsls	r5, r5, #29
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <__aeabi_f2d+0x8c>)
 80029e4:	e7d8      	b.n	8002998 <__aeabi_f2d+0x20>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2200      	movs	r2, #0
 80029ea:	e7d5      	b.n	8002998 <__aeabi_f2d+0x20>
 80029ec:	2200      	movs	r2, #0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <__aeabi_f2d+0x8c>)
 80029f0:	e7d2      	b.n	8002998 <__aeabi_f2d+0x20>
 80029f2:	0003      	movs	r3, r0
 80029f4:	002a      	movs	r2, r5
 80029f6:	3b0b      	subs	r3, #11
 80029f8:	409a      	lsls	r2, r3
 80029fa:	2500      	movs	r5, #0
 80029fc:	e7e3      	b.n	80029c6 <__aeabi_f2d+0x4e>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	00000389 	.word	0x00000389
 8002a04:	000007ff 	.word	0x000007ff

08002a08 <__clzsi2>:
 8002a08:	211c      	movs	r1, #28
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	4298      	cmp	r0, r3
 8002a10:	d301      	bcc.n	8002a16 <__clzsi2+0xe>
 8002a12:	0c00      	lsrs	r0, r0, #16
 8002a14:	3910      	subs	r1, #16
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	4298      	cmp	r0, r3
 8002a1a:	d301      	bcc.n	8002a20 <__clzsi2+0x18>
 8002a1c:	0a00      	lsrs	r0, r0, #8
 8002a1e:	3908      	subs	r1, #8
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	4298      	cmp	r0, r3
 8002a24:	d301      	bcc.n	8002a2a <__clzsi2+0x22>
 8002a26:	0900      	lsrs	r0, r0, #4
 8002a28:	3904      	subs	r1, #4
 8002a2a:	a202      	add	r2, pc, #8	; (adr r2, 8002a34 <__clzsi2+0x2c>)
 8002a2c:	5c10      	ldrb	r0, [r2, r0]
 8002a2e:	1840      	adds	r0, r0, r1
 8002a30:	4770      	bx	lr
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	02020304 	.word	0x02020304
 8002a38:	01010101 	.word	0x01010101
	...

08002a44 <__clzdi2>:
 8002a44:	b510      	push	{r4, lr}
 8002a46:	2900      	cmp	r1, #0
 8002a48:	d103      	bne.n	8002a52 <__clzdi2+0xe>
 8002a4a:	f7ff ffdd 	bl	8002a08 <__clzsi2>
 8002a4e:	3020      	adds	r0, #32
 8002a50:	e002      	b.n	8002a58 <__clzdi2+0x14>
 8002a52:	0008      	movs	r0, r1
 8002a54:	f7ff ffd8 	bl	8002a08 <__clzsi2>
 8002a58:	bd10      	pop	{r4, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)

08002a5c <FIRFilter_Update>:
	/* Clear filter output */
	fir->out = 0.0f;

}

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2228      	movs	r2, #40	; 0x28
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	50d1      	str	r1, [r2, r3]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2228      	movs	r2, #40	; 0x28
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2228      	movs	r2, #40	; 0x28
 8002a84:	5499      	strb	r1, [r3, r2]

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2228      	movs	r2, #40	; 0x28
 8002a8a:	5c9b      	ldrb	r3, [r3, r2]
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d103      	bne.n	8002a98 <FIRFilter_Update+0x3c>

		fir->bufIndex = 0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2228      	movs	r2, #40	; 0x28
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	2128      	movs	r1, #40	; 0x28
 8002aa6:	5c52      	ldrb	r2, [r2, r1]
 8002aa8:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8002aaa:	230e      	movs	r3, #14
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e02e      	b.n	8002b12 <FIRFilter_Update+0xb6>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	18bb      	adds	r3, r7, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <FIRFilter_Update+0x70>

			sumIndex--;
 8002abe:	0011      	movs	r1, r2
 8002ac0:	18bb      	adds	r3, r7, r2
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	3a01      	subs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e003      	b.n	8002ad4 <FIRFilter_Update+0x78>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8002acc:	230f      	movs	r3, #15
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2209      	movs	r2, #9
 8002ad2:	701a      	strb	r2, [r3, #0]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002ad8:	250e      	movs	r5, #14
 8002ada:	197b      	adds	r3, r7, r5
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <FIRFilter_Update+0xcc>)
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	58d0      	ldr	r0, [r2, r3]
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	58d3      	ldr	r3, [r2, r3]
 8002af0:	1c19      	adds	r1, r3, #0
 8002af2:	f7fd ff63 	bl	80009bc <__aeabi_fmul>
 8002af6:	1c03      	adds	r3, r0, #0
 8002af8:	1c19      	adds	r1, r3, #0
 8002afa:	1c20      	adds	r0, r4, #0
 8002afc:	f7fd fdbe 	bl	800067c <__aeabi_fadd>
 8002b00:	1c03      	adds	r3, r0, #0
 8002b02:	1c1a      	adds	r2, r3, #0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8002b08:	197b      	adds	r3, r7, r5
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	197b      	adds	r3, r7, r5
 8002b0e:	3201      	adds	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	230e      	movs	r3, #14
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d9cb      	bls.n	8002ab4 <FIRFilter_Update+0x58>

	}

	/* Return filtered output */
	return fir->out;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 8002b20:	1c18      	adds	r0, r3, #0
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	20000000 	.word	0x20000000

08002b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b30:	f000 fde6 	bl	8003700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b34:	f000 f840 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b38:	f000 f9bc 	bl	8002eb4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002b3c:	f000 f89a 	bl	8002c74 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002b40:	f000 f984 	bl	8002e4c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8002b44:	f000 f958 	bl	8002df8 <MX_TIM17_Init>
  MX_TIM3_Init();
 8002b48:	f000 f8d4 	bl	8002cf4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  status = VL53L1_RdByte(dev, 0x010F, &byteData);
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <main+0x78>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <main+0x7c>)
 8002b52:	2110      	movs	r1, #16
 8002b54:	31ff      	adds	r1, #255	; 0xff
 8002b56:	0018      	movs	r0, r3
 8002b58:	f004 fc26 	bl	80073a8 <VL53L1_RdByte>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <main+0x80>)
 8002b62:	601a      	str	r2, [r3, #0]
  status = VL53L1_RdByte(dev, 0x0110, &byteData);
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <main+0x78>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <main+0x7c>)
 8002b6a:	2188      	movs	r1, #136	; 0x88
 8002b6c:	0049      	lsls	r1, r1, #1
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f004 fc1a 	bl	80073a8 <VL53L1_RdByte>
 8002b74:	0003      	movs	r3, r0
 8002b76:	001a      	movs	r2, r3
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <main+0x80>)
 8002b7a:	601a      	str	r2, [r3, #0]
  status = VL53L1_RdWord(dev, 0x010F, &wordData);
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <main+0x78>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <main+0x84>)
 8002b82:	2110      	movs	r1, #16
 8002b84:	31ff      	adds	r1, #255	; 0xff
 8002b86:	0018      	movs	r0, r3
 8002b88:	f004 fc32 	bl	80073f0 <VL53L1_RdWord>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	001a      	movs	r2, r3
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <main+0x80>)
 8002b92:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR. This Timer will blink the LED Motor ON twice per sec
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <main+0x88>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	22fa      	movs	r2, #250	; 0xfa
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34

	 ModeSelect();
 8002b9e:	f000 fa6f 	bl	8003080 <ModeSelect>
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR. This Timer will blink the LED Motor ON twice per sec
 8002ba2:	e7f7      	b.n	8002b94 <main+0x68>
 8002ba4:	20000028 	.word	0x20000028
 8002ba8:	20000230 	.word	0x20000230
 8002bac:	2000022c 	.word	0x2000022c
 8002bb0:	20000232 	.word	0x20000232
 8002bb4:	200002c0 	.word	0x200002c0

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b093      	sub	sp, #76	; 0x4c
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	2410      	movs	r4, #16
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	2338      	movs	r3, #56	; 0x38
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f005 f9f1 	bl	8007fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bce:	003b      	movs	r3, r7
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f005 f9ea 	bl	8007fb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 ff1f 	bl	8004a24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	2202      	movs	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	0052      	lsls	r2, r2, #1
 8002bf2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002bf4:	0021      	movs	r1, r4
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2240      	movs	r2, #64	; 0x40
 8002c00:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2202      	movs	r2, #2
 8002c06:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2208      	movs	r2, #8
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0292      	lsls	r2, r2, #10
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	0492      	lsls	r2, r2, #18
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0592      	lsls	r2, r2, #22
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	0018      	movs	r0, r3
 8002c36:	f001 ff41 	bl	8004abc <HAL_RCC_OscConfig>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002c3e:	f000 fb13 	bl	8003268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c42:	003b      	movs	r3, r7
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c48:	003b      	movs	r3, r7
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4e:	003b      	movs	r3, r7
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c54:	003b      	movs	r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c5a:	003b      	movs	r3, r7
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f002 fa46 	bl	80050f0 <HAL_RCC_ClockConfig>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002c68:	f000 fafe 	bl	8003268 <Error_Handler>
  }
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b013      	add	sp, #76	; 0x4c
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <MX_I2C2_Init+0x78>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <MX_I2C2_Init+0x7c>)
 8002c82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 f84b 	bl	8003d4c <HAL_I2C_Init>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002cba:	f000 fad5 	bl	8003268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f001 fe16 	bl	80048f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002ccc:	f000 facc 	bl	8003268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <MX_I2C2_Init+0x74>)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f001 fe59 	bl	800498c <HAL_I2CEx_ConfigDigitalFilter>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002cde:	f000 fac3 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000026c 	.word	0x2000026c
 8002cec:	40005800 	.word	0x40005800
 8002cf0:	10707dbc 	.word	0x10707dbc

08002cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	; 0x38
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfa:	2328      	movs	r3, #40	; 0x28
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	2310      	movs	r3, #16
 8002d02:	001a      	movs	r2, r3
 8002d04:	2100      	movs	r1, #0
 8002d06:	f005 f953 	bl	8007fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0a:	231c      	movs	r3, #28
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	0018      	movs	r0, r3
 8002d10:	230c      	movs	r3, #12
 8002d12:	001a      	movs	r2, r3
 8002d14:	2100      	movs	r1, #0
 8002d16:	f005 f94b 	bl	8007fb0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1a:	003b      	movs	r3, r7
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	231c      	movs	r3, #28
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f005 f944 	bl	8007fb0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d28:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <MX_TIM3_Init+0xf8>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d30:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <MX_TIM3_Init+0xfc>)
 8002d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <MX_TIM3_Init+0x100>)
 8002d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d40:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f002 fb78 	bl	8005444 <HAL_TIM_Base_Init>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d58:	f000 fa86 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5c:	2128      	movs	r1, #40	; 0x28
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	0152      	lsls	r2, r2, #5
 8002d64:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d66:	187a      	adds	r2, r7, r1
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f002 ffb7 	bl	8005ce0 <HAL_TIM_ConfigClockSource>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002d76:	f000 fa77 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f002 fbb9 	bl	80054f4 <HAL_TIM_PWM_Init>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002d86:	f000 fa6f 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8a:	211c      	movs	r1, #28
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d98:	187a      	adds	r2, r7, r1
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002d9c:	0011      	movs	r1, r2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f003 fc66 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002da8:	f000 fa5e 	bl	8003268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dac:	003b      	movs	r3, r7
 8002dae:	2260      	movs	r2, #96	; 0x60
 8002db0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002db2:	003b      	movs	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db8:	003b      	movs	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc4:	0039      	movs	r1, r7
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f002 fe88 	bl	8005ae0 <HAL_TIM_PWM_ConfigChannel>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002dd4:	f000 fa48 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <MX_TIM3_Init+0xf4>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 faf6 	bl	80033cc <HAL_TIM_MspPostInit>

}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b00e      	add	sp, #56	; 0x38
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200002c0 	.word	0x200002c0
 8002dec:	40000400 	.word	0x40000400
 8002df0:	00000f9f 	.word	0x00000f9f
 8002df4:	000003e7 	.word	0x000003e7

08002df8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <MX_TIM17_Init+0x48>)
 8002e00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <MX_TIM17_Init+0x4c>)
 8002e06:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000-1;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <MX_TIM17_Init+0x50>)
 8002e12:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <MX_TIM17_Init+0x44>)
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f002 fb0b 	bl	8005444 <HAL_TIM_Base_Init>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002e32:	f000 fa19 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	2000030c 	.word	0x2000030c
 8002e40:	40014800 	.word	0x40014800
 8002e44:	00001f3f 	.word	0x00001f3f
 8002e48:	0000270f 	.word	0x0000270f

08002e4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <MX_USART2_UART_Init+0x64>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e58:	22e1      	movs	r2, #225	; 0xe1
 8002e5a:	0252      	lsls	r2, r2, #9
 8002e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <MX_USART2_UART_Init+0x60>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f003 fc6a 	bl	8006770 <HAL_UART_Init>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ea0:	f000 f9e2 	bl	8003268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000358 	.word	0x20000358
 8002eb0:	40004400 	.word	0x40004400

08002eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	240c      	movs	r4, #12
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2314      	movs	r3, #20
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f005 f873 	bl	8007fb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ece:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	2204      	movs	r2, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002f00:	2102      	movs	r1, #2
 8002f02:	430a      	orrs	r2, r1
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <MX_GPIO_Init+0x10c>)
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin
 8002f12:	492c      	ldr	r1, [pc, #176]	; (8002fc4 <MX_GPIO_Init+0x110>)
 8002f14:	23a0      	movs	r3, #160	; 0xa0
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	2200      	movs	r2, #0
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 fef9 	bl	8003d12 <HAL_GPIO_WritePin>
                          |led_6_Pin|led_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_5_Pin|led_7_Pin|MTR_RELAY_Pin|led_10_Pin
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <MX_GPIO_Init+0x114>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	21cb      	movs	r1, #203	; 0xcb
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fef3 	bl	8003d12 <HAL_GPIO_WritePin>
                          |led_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_INPUT_Pin A_INPUT_Pin TRIGGER_INPUT_Pin */
  GPIO_InitStruct.Pin = B_INPUT_Pin|A_INPUT_Pin|TRIGGER_INPUT_Pin;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <MX_GPIO_Init+0x118>)
 8002f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	193a      	adds	r2, r7, r4
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 fd62 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_1_Pin led_2_Pin led_3_Pin led_4_Pin
                           led_6_Pin led_8_Pin */
  GPIO_InitStruct.Pin = led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <MX_GPIO_Init+0x110>)
 8002f50:	601a      	str	r2, [r3, #0]
                          |led_6_Pin|led_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2201      	movs	r2, #1
 8002f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 fd4f 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_5_Pin led_7_Pin MTR_RELAY_Pin led_10_Pin
                           led_9_Pin */
  GPIO_InitStruct.Pin = led_5_Pin|led_7_Pin|MTR_RELAY_Pin|led_10_Pin
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	22cb      	movs	r2, #203	; 0xcb
 8002f76:	601a      	str	r2, [r3, #0]
                          |led_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <MX_GPIO_Init+0x114>)
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f000 fd3d 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT_SENSE_Pin */
  GPIO_InitStruct.Pin = FLT_SENSE_Pin;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0052      	lsls	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FLT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <MX_GPIO_Init+0x114>)
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	0010      	movs	r0, r2
 8002fb4:	f000 fd2c 	bl	8003a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b009      	add	sp, #36	; 0x24
 8002fbe:	bd90      	pop	{r4, r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	000082f0 	.word	0x000082f0
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	00000403 	.word	0x00000403

08002fd0 <AutonomousLowPowerRangingTest>:

/* USER CODE BEGIN 4 */

void AutonomousLowPowerRangingTest(void){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

	  while (dataReady == 0){
 8002fd4:	e00a      	b.n	8002fec <AutonomousLowPowerRangingTest+0x1c>

		  status = VL53L1X_CheckForDataReady(dev, &dataReady);
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <AutonomousLowPowerRangingTest+0x90>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <AutonomousLowPowerRangingTest+0x94>)
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f004 f94c 	bl	800727c <VL53L1X_CheckForDataReady>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <AutonomousLowPowerRangingTest+0x98>)
 8002fea:	601a      	str	r2, [r3, #0]
	  while (dataReady == 0){
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <AutonomousLowPowerRangingTest+0x94>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <AutonomousLowPowerRangingTest+0x6>

	  }
	  dataReady = 0;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <AutonomousLowPowerRangingTest+0x94>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]

	  status = VL53L1X_GetDistance(dev, &Distance);
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <AutonomousLowPowerRangingTest+0x90>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <AutonomousLowPowerRangingTest+0x9c>)
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f004 f980 	bl	8007308 <VL53L1X_GetDistance>
 8003008:	0003      	movs	r3, r0
 800300a:	001a      	movs	r2, r3
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <AutonomousLowPowerRangingTest+0x98>)
 800300e:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <AutonomousLowPowerRangingTest+0x90>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	0018      	movs	r0, r3
 8003016:	f004 f8df 	bl	80071d8 <VL53L1X_ClearInterrupt>
 800301a:	0003      	movs	r3, r0
 800301c:	001a      	movs	r2, r3
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <AutonomousLowPowerRangingTest+0x98>)
 8003020:	601a      	str	r2, [r3, #0]

	   FIRFilter_Update(&sensor_Read, Distance);
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <AutonomousLowPowerRangingTest+0x9c>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	0018      	movs	r0, r3
 8003028:	f7fd fe16 	bl	8000c58 <__aeabi_ui2f>
 800302c:	1c02      	adds	r2, r0, #0
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <AutonomousLowPowerRangingTest+0xa0>)
 8003030:	1c11      	adds	r1, r2, #0
 8003032:	0018      	movs	r0, r3
 8003034:	f7ff fd12 	bl	8002a5c <FIRFilter_Update>
	  sprintf(buff, "%.1f \n\r", sensor_Read.out);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <AutonomousLowPowerRangingTest+0xa0>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	1c18      	adds	r0, r3, #0
 800303e:	f7ff fc9b 	bl	8002978 <__aeabi_f2d>
 8003042:	0002      	movs	r2, r0
 8003044:	000b      	movs	r3, r1
 8003046:	490b      	ldr	r1, [pc, #44]	; (8003074 <AutonomousLowPowerRangingTest+0xa4>)
 8003048:	480b      	ldr	r0, [pc, #44]	; (8003078 <AutonomousLowPowerRangingTest+0xa8>)
 800304a:	f004 ff45 	bl	8007ed8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, sizeof(buff), 200);
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <AutonomousLowPowerRangingTest+0xa8>)
 8003050:	480a      	ldr	r0, [pc, #40]	; (800307c <AutonomousLowPowerRangingTest+0xac>)
 8003052:	23c8      	movs	r3, #200	; 0xc8
 8003054:	220f      	movs	r2, #15
 8003056:	f003 fbe1 	bl	800681c <HAL_UART_Transmit>

}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000028 	.word	0x20000028
 8003064:	20000236 	.word	0x20000236
 8003068:	2000022c 	.word	0x2000022c
 800306c:	20000234 	.word	0x20000234
 8003070:	2000023c 	.word	0x2000023c
 8003074:	0800a2e8 	.word	0x0800a2e8
 8003078:	2000021c 	.word	0x2000021c
 800307c:	20000358 	.word	0x20000358

08003080 <ModeSelect>:

}


void ModeSelect()
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
		a = HAL_GPIO_ReadPin(GPIOA, A_INPUT_Pin);		// Reads Input for Auto/Manual
 8003084:	23a0      	movs	r3, #160	; 0xa0
 8003086:	05db      	lsls	r3, r3, #23
 8003088:	2102      	movs	r1, #2
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fe24 	bl	8003cd8 <HAL_GPIO_ReadPin>
 8003090:	0003      	movs	r3, r0
 8003092:	001a      	movs	r2, r3
 8003094:	4b64      	ldr	r3, [pc, #400]	; (8003228 <ModeSelect+0x1a8>)
 8003096:	701a      	strb	r2, [r3, #0]
		b = HAL_GPIO_ReadPin(GPIOA, B_INPUT_Pin);		// Reads Input for Auto/Manual
 8003098:	23a0      	movs	r3, #160	; 0xa0
 800309a:	05db      	lsls	r3, r3, #23
 800309c:	2101      	movs	r1, #1
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fe1a 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80030a4:	0003      	movs	r3, r0
 80030a6:	001a      	movs	r2, r3
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <ModeSelect+0x1ac>)
 80030aa:	701a      	strb	r2, [r3, #0]

		newTrigState = HAL_GPIO_ReadPin(GPIOA, TRIGGER_INPUT_Pin);		// Reads Input from the Trigger Pin
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	23a0      	movs	r3, #160	; 0xa0
 80030b2:	05db      	lsls	r3, r3, #23
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fe0e 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80030bc:	0003      	movs	r3, r0
 80030be:	001a      	movs	r2, r3
 80030c0:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <ModeSelect+0x1b0>)
 80030c2:	701a      	strb	r2, [r3, #0]

		float_sensor = HAL_GPIO_ReadPin(GPIOB, FLT_SENSE_Pin);		//Reads Input from the Float Sensor
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <ModeSelect+0x1b4>)
 80030ca:	0019      	movs	r1, r3
 80030cc:	0010      	movs	r0, r2
 80030ce:	f000 fe03 	bl	8003cd8 <HAL_GPIO_ReadPin>
 80030d2:	0003      	movs	r3, r0
 80030d4:	001a      	movs	r2, r3
 80030d6:	4b58      	ldr	r3, [pc, #352]	; (8003238 <ModeSelect+0x1b8>)
 80030d8:	701a      	strb	r2, [r3, #0]
		//sprintf(buff, "%d \n\r",float_sensor);
		//HAL_UART_Transmit(&huart2, (uint8_t*)buff, sizeof(buff), 200);
       // HAL_Delay(200);


		if((a==0) && (b==1)){						// The switch is in Manual Mode. When switch symbol is - then we are in manual mode, when switch symbol is = then we are in auto-mode
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <ModeSelect+0x1a8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d134      	bne.n	800314c <ModeSelect+0xcc>
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <ModeSelect+0x1ac>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d130      	bne.n	800314c <ModeSelect+0xcc>

			if(newTrigState==0 && prevTrigBtnState==1){    //If the state has changed, increment the counter
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <ModeSelect+0x1b0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d127      	bne.n	8003142 <ModeSelect+0xc2>
 80030f2:	4b52      	ldr	r3, [pc, #328]	; (800323c <ModeSelect+0x1bc>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d123      	bne.n	8003142 <ModeSelect+0xc2>

			    	if(MotorState == 0){        //If the current state of Motor is LOW, then the button went from off to on
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <ModeSelect+0x1c0>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <ModeSelect+0xa0>

			    		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);			//  Motor_On Blinky Status
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <ModeSelect+0x1c4>)
 8003104:	2100      	movs	r1, #0
 8003106:	0018      	movs	r0, r3
 8003108:	f002 fa54 	bl	80055b4 <HAL_TIM_PWM_Start>
			    		HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 800310c:	4b49      	ldr	r3, [pc, #292]	; (8003234 <ModeSelect+0x1b4>)
 800310e:	2201      	movs	r2, #1
 8003110:	2108      	movs	r1, #8
 8003112:	0018      	movs	r0, r3
 8003114:	f000 fdfd 	bl	8003d12 <HAL_GPIO_WritePin>
			    		MotorState=1;
 8003118:	4b49      	ldr	r3, [pc, #292]	; (8003240 <ModeSelect+0x1c0>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e00d      	b.n	800313c <ModeSelect+0xbc>

				    	}else{

				    	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003120:	4b48      	ldr	r3, [pc, #288]	; (8003244 <ModeSelect+0x1c4>)
 8003122:	2100      	movs	r1, #0
 8003124:	0018      	movs	r0, r3
 8003126:	f002 fb23 	bl	8005770 <HAL_TIM_PWM_Stop>
				    	HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 800312a:	4b42      	ldr	r3, [pc, #264]	; (8003234 <ModeSelect+0x1b4>)
 800312c:	2200      	movs	r2, #0
 800312e:	2108      	movs	r1, #8
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fdee 	bl	8003d12 <HAL_GPIO_WritePin>
				    	MotorState=0;
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <ModeSelect+0x1c0>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
				    	}
			    	HAL_Delay(10);
 800313c:	200a      	movs	r0, #10
 800313e:	f000 fb65 	bl	800380c <HAL_Delay>

				    }
			prevTrigBtnState = newTrigState;
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <ModeSelect+0x1b0>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <ModeSelect+0x1bc>)
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e06a      	b.n	8003222 <ModeSelect+0x1a2>



		   } else if((a==1) && (b==0)){						// The switch is in Auto Mode. ie the switch position is at =
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <ModeSelect+0x1a8>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d159      	bne.n	8003208 <ModeSelect+0x188>
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <ModeSelect+0x1ac>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d155      	bne.n	8003208 <ModeSelect+0x188>

			   newTrigState = HAL_GPIO_ReadPin(GPIOA, TRIGGER_INPUT_Pin);
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	23a0      	movs	r3, #160	; 0xa0
 8003162:	05db      	lsls	r3, r3, #23
 8003164:	0011      	movs	r1, r2
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fdb6 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800316c:	0003      	movs	r3, r0
 800316e:	001a      	movs	r2, r3
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <ModeSelect+0x1b0>)
 8003172:	701a      	strb	r2, [r3, #0]

					if(newTrigState == 0){
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <ModeSelect+0x1b0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <ModeSelect+0x12a>

					//	if (MotorState == 0 && ((Distance >= Threshold_min) || (Distance <= Threshold_min)  || float_sensor!=0)){					//Water is less than Threshold level, then turn ON the Motor
						if (MotorState == 0 && float_sensor!=0){					//Water is less than Threshold level, then turn ON the Motor
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <ModeSelect+0x1c0>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d14d      	bne.n	8003220 <ModeSelect+0x1a0>
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <ModeSelect+0x1b8>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d049      	beq.n	8003220 <ModeSelect+0x1a0>
							HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <ModeSelect+0x1c4>)
 800318e:	2100      	movs	r1, #0
 8003190:	0018      	movs	r0, r3
 8003192:	f002 fa0f 	bl	80055b4 <HAL_TIM_PWM_Start>
							HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <ModeSelect+0x1b4>)
 8003198:	2201      	movs	r2, #1
 800319a:	2108      	movs	r1, #8
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fdb8 	bl	8003d12 <HAL_GPIO_WritePin>
							MotorState = 1;
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <ModeSelect+0x1c0>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
					if(newTrigState == 0){
 80031a8:	e03a      	b.n	8003220 <ModeSelect+0x1a0>
						}

					//} else if(MotorState == 1 && ((Distance <= Threshold_max) || float_sensor==0)){		//Water has reached the Threshold Level, turn OFF the Motor
					  } else if(MotorState == 1 && float_sensor==0){		//Water has reached the Threshold Level, turn OFF the Motor
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <ModeSelect+0x1c0>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d112      	bne.n	80031d8 <ModeSelect+0x158>
 80031b2:	4b21      	ldr	r3, [pc, #132]	; (8003238 <ModeSelect+0x1b8>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <ModeSelect+0x158>

						HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <ModeSelect+0x1c4>)
 80031bc:	2100      	movs	r1, #0
 80031be:	0018      	movs	r0, r3
 80031c0:	f002 fad6 	bl	8005770 <HAL_TIM_PWM_Stop>
					    HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <ModeSelect+0x1b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	2108      	movs	r1, #8
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fda1 	bl	8003d12 <HAL_GPIO_WritePin>
					    MotorState =0;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <ModeSelect+0x1c0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
					if(newTrigState == 0){
 80031d6:	e023      	b.n	8003220 <ModeSelect+0x1a0>
					  }	else if((MotorState == 0 && newTrigState == 1) || float_sensor==0){				//Water has reached the Threshold Level, turn OFF the Motor
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <ModeSelect+0x1c0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <ModeSelect+0x168>
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <ModeSelect+0x1b0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d003      	beq.n	80031f0 <ModeSelect+0x170>
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <ModeSelect+0x1b8>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d117      	bne.n	8003220 <ModeSelect+0x1a0>

						HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <ModeSelect+0x1c4>)
 80031f2:	2100      	movs	r1, #0
 80031f4:	0018      	movs	r0, r3
 80031f6:	f002 fabb 	bl	8005770 <HAL_TIM_PWM_Stop>
					    HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <ModeSelect+0x1b4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	2108      	movs	r1, #8
 8003200:	0018      	movs	r0, r3
 8003202:	f000 fd86 	bl	8003d12 <HAL_GPIO_WritePin>
					if(newTrigState == 0){
 8003206:	e00b      	b.n	8003220 <ModeSelect+0x1a0>
					  }

		   } else  {						// The switch is in Off/Center Mode
			   	   	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <ModeSelect+0x1c4>)
 800320a:	2100      	movs	r1, #0
 800320c:	0018      	movs	r0, r3
 800320e:	f002 faaf 	bl	8005770 <HAL_TIM_PWM_Stop>
						HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <ModeSelect+0x1b4>)
 8003214:	2200      	movs	r2, #0
 8003216:	2108      	movs	r1, #8
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fd7a 	bl	8003d12 <HAL_GPIO_WritePin>
		           }

}
 800321e:	e000      	b.n	8003222 <ModeSelect+0x1a2>
					if(newTrigState == 0){
 8003220:	46c0      	nop			; (mov r8, r8)
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000237 	.word	0x20000237
 800322c:	20000238 	.word	0x20000238
 8003230:	20000239 	.word	0x20000239
 8003234:	50000400 	.word	0x50000400
 8003238:	2000023a 	.word	0x2000023a
 800323c:	2000002a 	.word	0x2000002a
 8003240:	2000023b 	.word	0x2000023b
 8003244:	200002c0 	.word	0x200002c0

08003248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)

{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  if(htim == &htim17){
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003254:	429a      	cmp	r2, r3
 8003256:	d101      	bne.n	800325c <HAL_TIM_PeriodElapsedCallback+0x14>

     AutonomousLowPowerRangingTest();				//This function or API triggers after every 30s. Update Event handler.
 8003258:	f7ff feba 	bl	8002fd0 <AutonomousLowPowerRangingTest>

  }

}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000030c 	.word	0x2000030c

08003268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003270:	e7fe      	b.n	8003270 <Error_Handler+0x8>
	...

08003274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_MspInit+0x44>)
 800327c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_MspInit+0x44>)
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_MspInit+0x44>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_MspInit+0x44>)
 8003294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_MspInit+0x44>)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0549      	lsls	r1, r1, #21
 800329c:	430a      	orrs	r2, r1
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_MspInit+0x44>)
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	055b      	lsls	r3, r3, #21
 80032a8:	4013      	ands	r3, r2
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b08b      	sub	sp, #44	; 0x2c
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	2414      	movs	r4, #20
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	0018      	movs	r0, r3
 80032ca:	2314      	movs	r3, #20
 80032cc:	001a      	movs	r2, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	f004 fe6e 	bl	8007fb0 <memset>
  if(hi2c->Instance==I2C2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_I2C_MspInit+0x90>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d131      	bne.n	8003342 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_I2C_MspInit+0x94>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_I2C_MspInit+0x94>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_I2C_MspInit+0x94>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	22c0      	movs	r2, #192	; 0xc0
 80032fa:	0152      	lsls	r2, r2, #5
 80032fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032fe:	0021      	movs	r1, r4
 8003300:	187b      	adds	r3, r7, r1
 8003302:	2212      	movs	r2, #18
 8003304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2206      	movs	r2, #6
 8003316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	187a      	adds	r2, r7, r1
 800331a:	23a0      	movs	r3, #160	; 0xa0
 800331c:	05db      	lsls	r3, r3, #23
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fb75 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_I2C_MspInit+0x94>)
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_I2C_MspInit+0x94>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	03c9      	lsls	r1, r1, #15
 8003330:	430a      	orrs	r2, r1
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_I2C_MspInit+0x94>)
 8003336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	03db      	lsls	r3, r3, #15
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b00b      	add	sp, #44	; 0x2c
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	40005800 	.word	0x40005800
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_TIM_Base_MspInit+0x6c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 8003368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 800336c:	2102      	movs	r1, #2
 800336e:	430a      	orrs	r2, r1
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	2202      	movs	r2, #2
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800337e:	e01a      	b.n	80033b6 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a10      	ldr	r2, [pc, #64]	; (80033c8 <HAL_TIM_Base_MspInit+0x74>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d115      	bne.n	80033b6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 800338c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	02c9      	lsls	r1, r1, #11
 8003394:	430a      	orrs	r2, r1
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_TIM_Base_MspInit+0x70>)
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	2016      	movs	r0, #22
 80033ac:	f000 fafe 	bl	80039ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80033b0:	2016      	movs	r0, #22
 80033b2:	f000 fb10 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40014800 	.word	0x40014800

080033cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	240c      	movs	r4, #12
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	0018      	movs	r0, r3
 80033da:	2314      	movs	r3, #20
 80033dc:	001a      	movs	r2, r3
 80033de:	2100      	movs	r1, #0
 80033e0:	f004 fde6 	bl	8007fb0 <memset>
  if(htim->Instance==TIM3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_TIM_MspPostInit+0x70>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d121      	bne.n	8003432 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_TIM_MspPostInit+0x74>)
 80033f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_TIM_MspPostInit+0x74>)
 80033f4:	2102      	movs	r1, #2
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_TIM_MspPostInit+0x74>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2202      	movs	r2, #2
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MTR_LED_STATS_Pin;
 8003406:	0021      	movs	r1, r4
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2210      	movs	r2, #16
 800340c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2202      	movs	r2, #2
 8003412:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	187b      	adds	r3, r7, r1
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	187b      	adds	r3, r7, r1
 800341c:	2200      	movs	r2, #0
 800341e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003420:	187b      	adds	r3, r7, r1
 8003422:	2201      	movs	r2, #1
 8003424:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MTR_LED_STATS_GPIO_Port, &GPIO_InitStruct);
 8003426:	187b      	adds	r3, r7, r1
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <HAL_TIM_MspPostInit+0x78>)
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f000 faef 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b009      	add	sp, #36	; 0x24
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40000400 	.word	0x40000400
 8003440:	40021000 	.word	0x40021000
 8003444:	50000400 	.word	0x50000400

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	2414      	movs	r4, #20
 8003452:	193b      	adds	r3, r7, r4
 8003454:	0018      	movs	r0, r3
 8003456:	2314      	movs	r3, #20
 8003458:	001a      	movs	r2, r3
 800345a:	2100      	movs	r1, #0
 800345c:	f004 fda8 	bl	8007fb0 <memset>
  if(huart->Instance==USART2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_UART_MspInit+0x8c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d130      	bne.n	80034cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_UART_MspInit+0x90>)
 800346c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_UART_MspInit+0x90>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	0289      	lsls	r1, r1, #10
 8003474:	430a      	orrs	r2, r1
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_UART_MspInit+0x90>)
 800347a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	029b      	lsls	r3, r3, #10
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_UART_MspInit+0x90>)
 8003488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_UART_MspInit+0x90>)
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_UART_MspInit+0x90>)
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800349e:	0021      	movs	r1, r4
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	220c      	movs	r2, #12
 80034a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2202      	movs	r2, #2
 80034aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	2201      	movs	r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	187a      	adds	r2, r7, r1
 80034c0:	23a0      	movs	r3, #160	; 0xa0
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 faa2 	bl	8003a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b00b      	add	sp, #44	; 0x2c
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	40004400 	.word	0x40004400
 80034d8:	40021000 	.word	0x40021000

080034dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034e0:	e7fe      	b.n	80034e0 <NMI_Handler+0x4>

080034e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <HardFault_Handler+0x4>

080034e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003500:	f000 f968 	bl	80037d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <TIM17_IRQHandler+0x14>)
 8003512:	0018      	movs	r0, r3
 8003514:	f002 f9b2 	bl	800587c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	2000030c 	.word	0x2000030c

08003524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_kill>:

int _kill(int pid, int sig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353a:	f004 fd93 	bl	8008064 <__errno>
 800353e:	0003      	movs	r3, r0
 8003540:	2216      	movs	r2, #22
 8003542:	601a      	str	r2, [r3, #0]
  return -1;
 8003544:	2301      	movs	r3, #1
 8003546:	425b      	negs	r3, r3
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}

08003550 <_exit>:

void _exit (int status)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003558:	2301      	movs	r3, #1
 800355a:	425a      	negs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0011      	movs	r1, r2
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff ffe5 	bl	8003530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003566:	e7fe      	b.n	8003566 <_exit+0x16>

08003568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e00a      	b.n	8003590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800357a:	e000      	b.n	800357e <_read+0x16>
 800357c:	bf00      	nop
 800357e:	0001      	movs	r1, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	dbf0      	blt.n	800357a <_read+0x12>
  }

  return len;
 8003598:	687b      	ldr	r3, [r7, #4]
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b006      	add	sp, #24
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e009      	b.n	80035c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	0018      	movs	r0, r3
 80035be:	e000      	b.n	80035c2 <_write+0x20>
 80035c0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbf1      	blt.n	80035b4 <_write+0x12>
  }
  return len;
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b006      	add	sp, #24
 80035d8:	bd80      	pop	{r7, pc}

080035da <_close>:

int _close(int file)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	425b      	negs	r3, r3
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	0192      	lsls	r2, r2, #6
 80035fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}

0800360a <_isatty>:

int _isatty(int file)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003612:	2301      	movs	r3, #1
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003628:	2300      	movs	r3, #0
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <_sbrk+0x5c>)
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <_sbrk+0x60>)
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <_sbrk+0x64>)
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <_sbrk+0x68>)
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <_sbrk+0x64>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d207      	bcs.n	8003674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003664:	f004 fcfe 	bl	8008064 <__errno>
 8003668:	0003      	movs	r3, r0
 800366a:	220c      	movs	r2, #12
 800366c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366e:	2301      	movs	r3, #1
 8003670:	425b      	negs	r3, r3
 8003672:	e009      	b.n	8003688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <_sbrk+0x64>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	18d2      	adds	r2, r2, r3
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <_sbrk+0x64>)
 8003684:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003686:	68fb      	ldr	r3, [r7, #12]
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b006      	add	sp, #24
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20002000 	.word	0x20002000
 8003694:	00000400 	.word	0x00000400
 8003698:	200003ec 	.word	0x200003ec
 800369c:	20000540 	.word	0x20000540

080036a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b0:	f7ff fff6 	bl	80036a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80036b6:	490d      	ldr	r1, [pc, #52]	; (80036ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b8:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <LoopForever+0xe>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036cc:	4c0a      	ldr	r4, [pc, #40]	; (80036f8 <LoopForever+0x16>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036da:	f004 fcc9 	bl	8008070 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036de:	f7ff fa25 	bl	8002b2c <main>

080036e2 <LoopForever>:

LoopForever:
  b LoopForever
 80036e2:	e7fe      	b.n	80036e2 <LoopForever>
  ldr   r0, =_estack
 80036e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80036e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ec:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80036f0:	0800a77c 	.word	0x0800a77c
  ldr r2, =_sbss
 80036f4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80036f8:	20000540 	.word	0x20000540

080036fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC1_IRQHandler>
	...

08003700 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003706:	1dfb      	adds	r3, r7, #7
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_Init+0x3c>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_Init+0x3c>)
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0049      	lsls	r1, r1, #1
 8003716:	430a      	orrs	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800371a:	2003      	movs	r0, #3
 800371c:	f000 f810 	bl	8003740 <HAL_InitTick>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d003      	beq.n	800372c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e001      	b.n	8003730 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800372c:	f7ff fda2 	bl	8003274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40022000 	.word	0x40022000

08003740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003748:	230f      	movs	r3, #15
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_InitTick+0x88>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02b      	beq.n	80037b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_InitTick+0x8c>)
 800375a:	681c      	ldr	r4, [r3, #0]
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_InitTick+0x88>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	0019      	movs	r1, r3
 8003762:	23fa      	movs	r3, #250	; 0xfa
 8003764:	0098      	lsls	r0, r3, #2
 8003766:	f7fc fce9 	bl	800013c <__udivsi3>
 800376a:	0003      	movs	r3, r0
 800376c:	0019      	movs	r1, r3
 800376e:	0020      	movs	r0, r4
 8003770:	f7fc fce4 	bl	800013c <__udivsi3>
 8003774:	0003      	movs	r3, r0
 8003776:	0018      	movs	r0, r3
 8003778:	f000 f93d 	bl	80039f6 <HAL_SYSTICK_Config>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d112      	bne.n	80037a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d80a      	bhi.n	800379c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	2301      	movs	r3, #1
 800378a:	425b      	negs	r3, r3
 800378c:	2200      	movs	r2, #0
 800378e:	0018      	movs	r0, r3
 8003790:	f000 f90c 	bl	80039ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_InitTick+0x90>)
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e00d      	b.n	80037b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e008      	b.n	80037b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037a6:	230f      	movs	r3, #15
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e003      	b.n	80037b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b0:	230f      	movs	r3, #15
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80037b8:	230f      	movs	r3, #15
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	781b      	ldrb	r3, [r3, #0]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b005      	add	sp, #20
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000034 	.word	0x20000034
 80037cc:	2000002c 	.word	0x2000002c
 80037d0:	20000030 	.word	0x20000030

080037d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_IncTick+0x1c>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	001a      	movs	r2, r3
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_IncTick+0x20>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	18d2      	adds	r2, r2, r3
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_IncTick+0x20>)
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	20000034 	.word	0x20000034
 80037f4:	200003f0 	.word	0x200003f0

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b02      	ldr	r3, [pc, #8]	; (8003808 <HAL_GetTick+0x10>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	200003f0 	.word	0x200003f0

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff fff0 	bl	80037f8 <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	001a      	movs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	189b      	adds	r3, r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	f7ff ffe0 	bl	80037f8 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	20000034 	.word	0x20000034

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	0002      	movs	r2, r0
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b7f      	cmp	r3, #127	; 0x7f
 8003866:	d809      	bhi.n	800387c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	001a      	movs	r2, r3
 800386e:	231f      	movs	r3, #31
 8003870:	401a      	ands	r2, r3
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_EnableIRQ+0x30>)
 8003874:	2101      	movs	r1, #1
 8003876:	4091      	lsls	r1, r2
 8003878:	000a      	movs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	0002      	movs	r2, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b7f      	cmp	r3, #127	; 0x7f
 800389c:	d828      	bhi.n	80038f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800389e:	4a2f      	ldr	r2, [pc, #188]	; (800395c <__NVIC_SetPriority+0xd4>)
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	33c0      	adds	r3, #192	; 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	589b      	ldr	r3, [r3, r2]
 80038ae:	1dfa      	adds	r2, r7, #7
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	0011      	movs	r1, r2
 80038b4:	2203      	movs	r2, #3
 80038b6:	400a      	ands	r2, r1
 80038b8:	00d2      	lsls	r2, r2, #3
 80038ba:	21ff      	movs	r1, #255	; 0xff
 80038bc:	4091      	lsls	r1, r2
 80038be:	000a      	movs	r2, r1
 80038c0:	43d2      	mvns	r2, r2
 80038c2:	401a      	ands	r2, r3
 80038c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	401a      	ands	r2, r3
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	0018      	movs	r0, r3
 80038d4:	2303      	movs	r3, #3
 80038d6:	4003      	ands	r3, r0
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038dc:	481f      	ldr	r0, [pc, #124]	; (800395c <__NVIC_SetPriority+0xd4>)
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	430a      	orrs	r2, r1
 80038e8:	33c0      	adds	r3, #192	; 0xc0
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038ee:	e031      	b.n	8003954 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <__NVIC_SetPriority+0xd8>)
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	0019      	movs	r1, r3
 80038f8:	230f      	movs	r3, #15
 80038fa:	400b      	ands	r3, r1
 80038fc:	3b08      	subs	r3, #8
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3306      	adds	r3, #6
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	3304      	adds	r3, #4
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1dfa      	adds	r2, r7, #7
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	0011      	movs	r1, r2
 8003910:	2203      	movs	r2, #3
 8003912:	400a      	ands	r2, r1
 8003914:	00d2      	lsls	r2, r2, #3
 8003916:	21ff      	movs	r1, #255	; 0xff
 8003918:	4091      	lsls	r1, r2
 800391a:	000a      	movs	r2, r1
 800391c:	43d2      	mvns	r2, r2
 800391e:	401a      	ands	r2, r3
 8003920:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	401a      	ands	r2, r3
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	0018      	movs	r0, r3
 8003930:	2303      	movs	r3, #3
 8003932:	4003      	ands	r3, r0
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003938:	4809      	ldr	r0, [pc, #36]	; (8003960 <__NVIC_SetPriority+0xd8>)
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	001c      	movs	r4, r3
 8003940:	230f      	movs	r3, #15
 8003942:	4023      	ands	r3, r4
 8003944:	3b08      	subs	r3, #8
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	430a      	orrs	r2, r1
 800394a:	3306      	adds	r3, #6
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18c3      	adds	r3, r0, r3
 8003950:	3304      	adds	r3, #4
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b003      	add	sp, #12
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	045b      	lsls	r3, r3, #17
 8003974:	429a      	cmp	r2, r3
 8003976:	d301      	bcc.n	800397c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003978:	2301      	movs	r3, #1
 800397a:	e010      	b.n	800399e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <SysTick_Config+0x44>)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	3a01      	subs	r2, #1
 8003982:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003984:	2301      	movs	r3, #1
 8003986:	425b      	negs	r3, r3
 8003988:	2103      	movs	r1, #3
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff ff7c 	bl	8003888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <SysTick_Config+0x44>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <SysTick_Config+0x44>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800399c:	2300      	movs	r3, #0
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b002      	add	sp, #8
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	e000e010 	.word	0xe000e010

080039ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	210f      	movs	r1, #15
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	1c02      	adds	r2, r0, #0
 80039bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	0011      	movs	r1, r2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff ff5d 	bl	8003888 <__NVIC_SetPriority>
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	0002      	movs	r2, r0
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff33 	bl	8003854 <__NVIC_EnableIRQ>
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff ffaf 	bl	8003964 <SysTick_Config>
 8003a06:	0003      	movs	r3, r0
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1e:	e147      	b.n	8003cb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2101      	movs	r1, #1
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4091      	lsls	r1, r2
 8003a2a:	000a      	movs	r2, r1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d100      	bne.n	8003a38 <HAL_GPIO_Init+0x28>
 8003a36:	e138      	b.n	8003caa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d005      	beq.n	8003a50 <HAL_GPIO_Init+0x40>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d130      	bne.n	8003ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a86:	2201      	movs	r2, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d017      	beq.n	8003aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	2203      	movs	r2, #3
 8003aca:	409a      	lsls	r2, r3
 8003acc:	0013      	movs	r3, r2
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d123      	bne.n	8003b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	58d3      	ldr	r3, [r2, r3]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	409a      	lsls	r2, r3
 8003b14:	0013      	movs	r3, r2
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2107      	movs	r1, #7
 8003b26:	400b      	ands	r3, r1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	0013      	movs	r3, r2
 8003b52:	43da      	mvns	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	401a      	ands	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	0013      	movs	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_GPIO_Init+0x174>
 8003b82:	e092      	b.n	8003caa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b84:	4a50      	ldr	r2, [pc, #320]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	589b      	ldr	r3, [r3, r2]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4013      	ands	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	0013      	movs	r3, r2
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	23a0      	movs	r3, #160	; 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x1ca>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <HAL_GPIO_Init+0x2bc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x1c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_GPIO_Init+0x2c0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x1c2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <HAL_GPIO_Init+0x2c4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x1be>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bce:	2305      	movs	r3, #5
 8003bd0:	e004      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_GPIO_Init+0x1cc>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	2103      	movs	r1, #3
 8003be0:	400a      	ands	r2, r1
 8003be2:	00d2      	lsls	r2, r2, #3
 8003be4:	4093      	lsls	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003bec:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bfa:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	035b      	lsls	r3, r3, #13
 8003c12:	4013      	ands	r3, r2
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	039b      	lsls	r3, r3, #14
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c50:	2384      	movs	r3, #132	; 0x84
 8003c52:	58d3      	ldr	r3, [r2, r3]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c74:	4914      	ldr	r1, [pc, #80]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c76:	2284      	movs	r2, #132	; 0x84
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	025b      	lsls	r3, r3, #9
 8003c96:	4013      	ands	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ca2:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003ca4:	2280      	movs	r2, #128	; 0x80
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	40da      	lsrs	r2, r3
 8003cb8:	1e13      	subs	r3, r2, #0
 8003cba:	d000      	beq.n	8003cbe <HAL_GPIO_Init+0x2ae>
 8003cbc:	e6b0      	b.n	8003a20 <HAL_GPIO_Init+0x10>
  }
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021800 	.word	0x40021800
 8003ccc:	50000400 	.word	0x50000400
 8003cd0:	50000800 	.word	0x50000800
 8003cd4:	50000c00 	.word	0x50000c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	000a      	movs	r2, r1
 8003ce2:	1cbb      	adds	r3, r7, #2
 8003ce4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	1cba      	adds	r2, r7, #2
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e003      	b.n	8003d04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	0008      	movs	r0, r1
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	1cbb      	adds	r3, r7, #2
 8003d20:	1c02      	adds	r2, r0, #0
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	1c7b      	adds	r3, r7, #1
 8003d26:	1c0a      	adds	r2, r1, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2a:	1c7b      	adds	r3, r7, #1
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d32:	1cbb      	adds	r3, r7, #2
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d3a:	e003      	b.n	8003d44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d3c:	1cbb      	adds	r3, r7, #2
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e082      	b.n	8003e64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2241      	movs	r2, #65	; 0x41
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7ff faa1 	bl	80032bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	2124      	movs	r1, #36	; 0x24
 8003d80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	438a      	bics	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_I2C_Init+0x120>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4931      	ldr	r1, [pc, #196]	; (8003e70 <HAL_I2C_Init+0x124>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d108      	bne.n	8003dca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	0209      	lsls	r1, r1, #8
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	e007      	b.n	8003dda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2184      	movs	r1, #132	; 0x84
 8003dd4:	0209      	lsls	r1, r1, #8
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d104      	bne.n	8003dec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	491f      	ldr	r1, [pc, #124]	; (8003e74 <HAL_I2C_Init+0x128>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	491a      	ldr	r1, [pc, #104]	; (8003e70 <HAL_I2C_Init+0x124>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69d9      	ldr	r1, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2101      	movs	r1, #1
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2241      	movs	r2, #65	; 0x41
 8003e50:	2120      	movs	r1, #32
 8003e52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2242      	movs	r2, #66	; 0x42
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	f0ffffff 	.word	0xf0ffffff
 8003e70:	ffff7fff 	.word	0xffff7fff
 8003e74:	02008000 	.word	0x02008000

08003e78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	000c      	movs	r4, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	230a      	movs	r3, #10
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	1c22      	adds	r2, r4, #0
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	2308      	movs	r3, #8
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	1c02      	adds	r2, r0, #0
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	1dbb      	adds	r3, r7, #6
 8003e98:	1c0a      	adds	r2, r1, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2241      	movs	r2, #65	; 0x41
 8003ea0:	5c9b      	ldrb	r3, [r3, r2]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d000      	beq.n	8003eaa <HAL_I2C_Mem_Write+0x32>
 8003ea8:	e10c      	b.n	80040c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_I2C_Mem_Write+0x42>
 8003eb0:	232c      	movs	r3, #44	; 0x2c
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0ff      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2240      	movs	r2, #64	; 0x40
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x5c>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e0f8      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003edc:	f7ff fc8c 	bl	80037f8 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	0219      	lsls	r1, r3, #8
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2319      	movs	r3, #25
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f000 fb0b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	1e03      	subs	r3, r0, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0e3      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2241      	movs	r2, #65	; 0x41
 8003f02:	2121      	movs	r1, #33	; 0x21
 8003f04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2242      	movs	r2, #66	; 0x42
 8003f0a:	2140      	movs	r1, #64	; 0x40
 8003f0c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	222c      	movs	r2, #44	; 0x2c
 8003f1e:	18ba      	adds	r2, r7, r2
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	881c      	ldrh	r4, [r3, #0]
 8003f2e:	2308      	movs	r3, #8
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	881a      	ldrh	r2, [r3, #0]
 8003f34:	230a      	movs	r3, #10
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	8819      	ldrh	r1, [r3, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	0023      	movs	r3, r4
 8003f46:	f000 f9f9 	bl	800433c <I2C_RequestMemoryWrite>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0b5      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2bff      	cmp	r3, #255	; 0xff
 8003f62:	d911      	bls.n	8003f88 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	045c      	lsls	r4, r3, #17
 8003f74:	230a      	movs	r3, #10
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 fc7d 	bl	8004880 <I2C_TransferConfig>
 8003f86:	e012      	b.n	8003fae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	049c      	lsls	r4, r3, #18
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	8819      	ldrh	r1, [r3, #0]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0023      	movs	r3, r4
 8003faa:	f000 fc69 	bl	8004880 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 fae8 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e081      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d03a      	beq.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d136      	bne.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	0013      	movs	r3, r2
 800400e:	2200      	movs	r2, #0
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	f000 fa7b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e053      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2bff      	cmp	r3, #255	; 0xff
 8004026:	d911      	bls.n	800404c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	045c      	lsls	r4, r3, #17
 8004038:	230a      	movs	r3, #10
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	0023      	movs	r3, r4
 8004046:	f000 fc1b 	bl	8004880 <I2C_TransferConfig>
 800404a:	e012      	b.n	8004072 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	b2da      	uxtb	r2, r3
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	049c      	lsls	r4, r3, #18
 8004060:	230a      	movs	r3, #10
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	8819      	ldrh	r1, [r3, #0]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	0023      	movs	r3, r4
 800406e:	f000 fc07 	bl	8004880 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d198      	bne.n	8003fae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fac0 	bl	8004608 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004088:	1e03      	subs	r3, r0, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e01a      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2220      	movs	r2, #32
 8004096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	490b      	ldr	r1, [pc, #44]	; (80040d0 <HAL_I2C_Mem_Write+0x258>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2241      	movs	r2, #65	; 0x41
 80040ac:	2120      	movs	r1, #32
 80040ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2242      	movs	r2, #66	; 0x42
 80040b4:	2100      	movs	r1, #0
 80040b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	2100      	movs	r1, #0
 80040be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b007      	add	sp, #28
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	000c      	movs	r4, r1
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	230a      	movs	r3, #10
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	1c22      	adds	r2, r4, #0
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	2308      	movs	r3, #8
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	1c02      	adds	r2, r0, #0
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	1dbb      	adds	r3, r7, #6
 80040f4:	1c0a      	adds	r2, r1, #0
 80040f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2241      	movs	r2, #65	; 0x41
 80040fc:	5c9b      	ldrb	r3, [r3, r2]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	d000      	beq.n	8004106 <HAL_I2C_Mem_Read+0x32>
 8004104:	e110      	b.n	8004328 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_I2C_Mem_Read+0x42>
 800410c:	232c      	movs	r3, #44	; 0x2c
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e103      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2240      	movs	r2, #64	; 0x40
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_I2C_Mem_Read+0x5c>
 800412c:	2302      	movs	r3, #2
 800412e:	e0fc      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	2101      	movs	r1, #1
 8004136:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004138:	f7ff fb5e 	bl	80037f8 <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	0219      	lsls	r1, r3, #8
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2319      	movs	r3, #25
 800414c:	2201      	movs	r2, #1
 800414e:	f000 f9dd 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0e7      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2241      	movs	r2, #65	; 0x41
 800415e:	2122      	movs	r1, #34	; 0x22
 8004160:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2242      	movs	r2, #66	; 0x42
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	222c      	movs	r2, #44	; 0x2c
 800417a:	18ba      	adds	r2, r7, r2
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881c      	ldrh	r4, [r3, #0]
 800418a:	2308      	movs	r3, #8
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	230a      	movs	r3, #10
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	8819      	ldrh	r1, [r3, #0]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0023      	movs	r3, r4
 80041a2:	f000 f92f 	bl	8004404 <I2C_RequestMemoryRead>
 80041a6:	1e03      	subs	r3, r0, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0b9      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2bff      	cmp	r3, #255	; 0xff
 80041be:	d911      	bls.n	80041e4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	045c      	lsls	r4, r3, #17
 80041d0:	230a      	movs	r3, #10
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	8819      	ldrh	r1, [r3, #0]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_I2C_Mem_Read+0x260>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	0023      	movs	r3, r4
 80041de:	f000 fb4f 	bl	8004880 <I2C_TransferConfig>
 80041e2:	e012      	b.n	800420a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	049c      	lsls	r4, r3, #18
 80041f8:	230a      	movs	r3, #10
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	8819      	ldrh	r1, [r3, #0]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_I2C_Mem_Read+0x260>)
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	0023      	movs	r3, r4
 8004206:	f000 fb3b 	bl	8004880 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800420a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	0013      	movs	r3, r2
 8004214:	2200      	movs	r2, #0
 8004216:	2104      	movs	r1, #4
 8004218:	f000 f978 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e082      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d03a      	beq.n	80042d6 <HAL_I2C_Mem_Read+0x202>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d136      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	0013      	movs	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	f000 f949 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e053      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d911      	bls.n	80042b0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	045c      	lsls	r4, r3, #17
 800429c:	230a      	movs	r3, #10
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	8819      	ldrh	r1, [r3, #0]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	2300      	movs	r3, #0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0023      	movs	r3, r4
 80042aa:	f000 fae9 	bl	8004880 <I2C_TransferConfig>
 80042ae:	e012      	b.n	80042d6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	049c      	lsls	r4, r3, #18
 80042c4:	230a      	movs	r3, #10
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	8819      	ldrh	r1, [r3, #0]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	2300      	movs	r3, #0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	0023      	movs	r3, r4
 80042d2:	f000 fad5 	bl	8004880 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d194      	bne.n	800420a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f98e 	bl	8004608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e01a      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2220      	movs	r2, #32
 80042fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	490c      	ldr	r1, [pc, #48]	; (8004338 <HAL_I2C_Mem_Read+0x264>)
 8004308:	400a      	ands	r2, r1
 800430a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2241      	movs	r2, #65	; 0x41
 8004310:	2120      	movs	r1, #32
 8004312:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2242      	movs	r2, #66	; 0x42
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b007      	add	sp, #28
 8004330:	bd90      	pop	{r4, r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	80002400 	.word	0x80002400
 8004338:	fe00e800 	.word	0xfe00e800

0800433c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	000c      	movs	r4, r1
 8004346:	0010      	movs	r0, r2
 8004348:	0019      	movs	r1, r3
 800434a:	250a      	movs	r5, #10
 800434c:	197b      	adds	r3, r7, r5
 800434e:	1c22      	adds	r2, r4, #0
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	2308      	movs	r3, #8
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	1c02      	adds	r2, r0, #0
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	1dbb      	adds	r3, r7, #6
 800435c:	1c0a      	adds	r2, r1, #0
 800435e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004360:	1dbb      	adds	r3, r7, #6
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	045c      	lsls	r4, r3, #17
 800436a:	197b      	adds	r3, r7, r5
 800436c:	8819      	ldrh	r1, [r3, #0]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	4b23      	ldr	r3, [pc, #140]	; (8004400 <I2C_RequestMemoryWrite+0xc4>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	0023      	movs	r3, r4
 8004376:	f000 fa83 	bl	8004880 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f902 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d001      	beq.n	800438e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e033      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	2308      	movs	r3, #8
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
 80043a4:	e019      	b.n	80043da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043a6:	2308      	movs	r3, #8
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	6a39      	ldr	r1, [r7, #32]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 f8e3 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e014      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043cc:	2308      	movs	r3, #8
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	0013      	movs	r3, r2
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	f000 f890 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bdb0      	pop	{r4, r5, r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	80002000 	.word	0x80002000

08004404 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	000c      	movs	r4, r1
 800440e:	0010      	movs	r0, r2
 8004410:	0019      	movs	r1, r3
 8004412:	250a      	movs	r5, #10
 8004414:	197b      	adds	r3, r7, r5
 8004416:	1c22      	adds	r2, r4, #0
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	2308      	movs	r3, #8
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	1c0a      	adds	r2, r1, #0
 8004426:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	197b      	adds	r3, r7, r5
 8004430:	8819      	ldrh	r1, [r3, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <I2C_RequestMemoryRead+0xc0>)
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	f000 fa21 	bl	8004880 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f8a0 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d001      	beq.n	8004452 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e033      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	2308      	movs	r3, #8
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e019      	b.n	800449e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800446a:	2308      	movs	r3, #8
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b29b      	uxth	r3, r3
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	6a39      	ldr	r1, [r7, #32]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	0018      	movs	r0, r3
 8004484:	f000 f881 	bl	800458a <I2C_WaitOnTXISFlagUntilTimeout>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d001      	beq.n	8004490 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e014      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004490:	2308      	movs	r3, #8
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0013      	movs	r3, r2
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	f000 f82e 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bdb0      	pop	{r4, r5, r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	80002000 	.word	0x80002000

080044c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2202      	movs	r2, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d103      	bne.n	80044e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d007      	beq.n	8004504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
  }
}
 8004504:	46c0      	nop			; (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	1dfb      	adds	r3, r7, #7
 800451a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e021      	b.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	d01e      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7ff f968 	bl	80037f8 <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	2220      	movs	r2, #32
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2241      	movs	r2, #65	; 0x41
 800454a:	2120      	movs	r1, #32
 800454c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2242      	movs	r2, #66	; 0x42
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	425a      	negs	r2, r3
 8004572:	4153      	adcs	r3, r2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	001a      	movs	r2, r3
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d0ce      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bd80      	pop	{r7, pc}

0800458a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004596:	e02b      	b.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f86e 	bl	8004680 <I2C_IsErrorOccurred>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d001      	beq.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e029      	b.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d01e      	beq.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7ff f921 	bl	80037f8 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	2220      	movs	r2, #32
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2241      	movs	r2, #65	; 0x41
 80045d8:	2120      	movs	r1, #32
 80045da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2242      	movs	r2, #66	; 0x42
 80045e0:	2100      	movs	r1, #0
 80045e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d1cc      	bne.n	8004598 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004614:	e028      	b.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0018      	movs	r0, r3
 800461e:	f000 f82f 	bl	8004680 <I2C_IsErrorOccurred>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e026      	b.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7ff f8e5 	bl	80037f8 <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	2220      	movs	r2, #32
 8004646:	431a      	orrs	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2241      	movs	r2, #65	; 0x41
 8004650:	2120      	movs	r1, #32
 8004652:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2242      	movs	r2, #66	; 0x42
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2220      	movs	r2, #32
 8004670:	4013      	ands	r3, r2
 8004672:	2b20      	cmp	r3, #32
 8004674:	d1cf      	bne.n	8004616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b08b      	sub	sp, #44	; 0x2c
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2327      	movs	r3, #39	; 0x27
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2210      	movs	r2, #16
 80046a8:	4013      	ands	r3, r2
 80046aa:	d100      	bne.n	80046ae <I2C_IsErrorOccurred+0x2e>
 80046ac:	e082      	b.n	80047b4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b6:	e060      	b.n	800477a <I2C_IsErrorOccurred+0xfa>
 80046b8:	2427      	movs	r4, #39	; 0x27
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	193a      	adds	r2, r7, r4
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d058      	beq.n	800477a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7ff f896 	bl	80037f8 <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d306      	bcc.n	80046e6 <I2C_IsErrorOccurred+0x66>
 80046d8:	193b      	adds	r3, r7, r4
 80046da:	193a      	adds	r2, r7, r4
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d149      	bne.n	800477a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	4013      	ands	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046f4:	2013      	movs	r0, #19
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	2142      	movs	r1, #66	; 0x42
 80046fc:	5c52      	ldrb	r2, [r2, r1]
 80046fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	401a      	ands	r2, r3
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	429a      	cmp	r2, r3
 8004712:	d126      	bne.n	8004762 <I2C_IsErrorOccurred+0xe2>
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	01db      	lsls	r3, r3, #7
 800471a:	429a      	cmp	r2, r3
 800471c:	d021      	beq.n	8004762 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800471e:	183b      	adds	r3, r7, r0
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d01d      	beq.n	8004762 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	01c9      	lsls	r1, r1, #7
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004738:	f7ff f85e 	bl	80037f8 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	e00f      	b.n	8004762 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004742:	f7ff f859 	bl	80037f8 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b19      	cmp	r3, #25
 800474e:	d908      	bls.n	8004762 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2220      	movs	r2, #32
 8004754:	4313      	orrs	r3, r2
 8004756:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004758:	2327      	movs	r3, #39	; 0x27
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]

              break;
 8004760:	e00b      	b.n	800477a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2220      	movs	r2, #32
 800476a:	4013      	ands	r3, r2
 800476c:	2127      	movs	r1, #39	; 0x27
 800476e:	187a      	adds	r2, r7, r1
 8004770:	1879      	adds	r1, r7, r1
 8004772:	7809      	ldrb	r1, [r1, #0]
 8004774:	7011      	strb	r1, [r2, #0]
 8004776:	2b20      	cmp	r3, #32
 8004778:	d1e3      	bne.n	8004742 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2220      	movs	r2, #32
 8004782:	4013      	ands	r3, r2
 8004784:	2b20      	cmp	r3, #32
 8004786:	d004      	beq.n	8004792 <I2C_IsErrorOccurred+0x112>
 8004788:	2327      	movs	r3, #39	; 0x27
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d092      	beq.n	80046b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004792:	2327      	movs	r3, #39	; 0x27
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2220      	movs	r2, #32
 80047a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2204      	movs	r2, #4
 80047a8:	4313      	orrs	r3, r2
 80047aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047ac:	2327      	movs	r3, #39	; 0x27
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00c      	beq.n	80047e0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2280      	movs	r2, #128	; 0x80
 80047d4:	0052      	lsls	r2, r2, #1
 80047d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d8:	2327      	movs	r3, #39	; 0x27
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4013      	ands	r3, r2
 80047e8:	d00c      	beq.n	8004804 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2208      	movs	r2, #8
 80047ee:	4313      	orrs	r3, r2
 80047f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	00d2      	lsls	r2, r2, #3
 80047fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047fc:	2327      	movs	r3, #39	; 0x27
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d00c      	beq.n	8004828 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2202      	movs	r2, #2
 8004812:	4313      	orrs	r3, r2
 8004814:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004820:	2327      	movs	r3, #39	; 0x27
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004828:	2327      	movs	r3, #39	; 0x27
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01d      	beq.n	800486e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff fe47 	bl	80044c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	490d      	ldr	r1, [pc, #52]	; (800487c <I2C_IsErrorOccurred+0x1fc>)
 8004846:	400a      	ands	r2, r1
 8004848:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2241      	movs	r2, #65	; 0x41
 800485a:	2120      	movs	r1, #32
 800485c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2242      	movs	r2, #66	; 0x42
 8004862:	2100      	movs	r1, #0
 8004864:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800486e:	2327      	movs	r3, #39	; 0x27
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	781b      	ldrb	r3, [r3, #0]
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b00b      	add	sp, #44	; 0x2c
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	fe00e800 	.word	0xfe00e800

08004880 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	0008      	movs	r0, r1
 800488a:	0011      	movs	r1, r2
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	240a      	movs	r4, #10
 8004890:	193b      	adds	r3, r7, r4
 8004892:	1c02      	adds	r2, r0, #0
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	2009      	movs	r0, #9
 8004898:	183b      	adds	r3, r7, r0
 800489a:	1c0a      	adds	r2, r1, #0
 800489c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	059b      	lsls	r3, r3, #22
 80048a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048a6:	183b      	adds	r3, r7, r0
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	0419      	lsls	r1, r3, #16
 80048ac:	23ff      	movs	r3, #255	; 0xff
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	4313      	orrs	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ca:	0d51      	lsrs	r1, r2, #21
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	00d2      	lsls	r2, r2, #3
 80048d0:	400a      	ands	r2, r1
 80048d2:	4907      	ldr	r1, [pc, #28]	; (80048f0 <I2C_TransferConfig+0x70>)
 80048d4:	430a      	orrs	r2, r1
 80048d6:	43d2      	mvns	r2, r2
 80048d8:	401a      	ands	r2, r3
 80048da:	0011      	movs	r1, r2
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b007      	add	sp, #28
 80048ec:	bd90      	pop	{r4, r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	03ff63ff 	.word	0x03ff63ff

080048f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2241      	movs	r2, #65	; 0x41
 8004902:	5c9b      	ldrb	r3, [r3, r2]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	d138      	bne.n	800497c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2240      	movs	r2, #64	; 0x40
 800490e:	5c9b      	ldrb	r3, [r3, r2]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004914:	2302      	movs	r3, #2
 8004916:	e032      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	2101      	movs	r1, #1
 800491e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2241      	movs	r2, #65	; 0x41
 8004924:	2124      	movs	r1, #36	; 0x24
 8004926:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	438a      	bics	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4911      	ldr	r1, [pc, #68]	; (8004988 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004944:	400a      	ands	r2, r1
 8004946:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2241      	movs	r2, #65	; 0x41
 800496c:	2120      	movs	r1, #32
 800496e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2240      	movs	r2, #64	; 0x40
 8004974:	2100      	movs	r1, #0
 8004976:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b002      	add	sp, #8
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	ffffefff 	.word	0xffffefff

0800498c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2241      	movs	r2, #65	; 0x41
 800499a:	5c9b      	ldrb	r3, [r3, r2]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d139      	bne.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2240      	movs	r2, #64	; 0x40
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e033      	b.n	8004a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2241      	movs	r2, #65	; 0x41
 80049bc:	2124      	movs	r1, #36	; 0x24
 80049be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049dc:	4013      	ands	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2241      	movs	r2, #65	; 0x41
 8004a06:	2120      	movs	r1, #32
 8004a08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2240      	movs	r2, #64	; 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b004      	add	sp, #16
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	fffff0ff 	.word	0xfffff0ff

08004a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d11f      	bne.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	0013      	movs	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4912      	ldr	r1, [pc, #72]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fb fb70 	bl	800013c <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a62:	e008      	b.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e001      	b.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e009      	b.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	401a      	ands	r2, r3
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d0ed      	beq.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b004      	add	sp, #16
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	40007000 	.word	0x40007000
 8004a98:	fffff9ff 	.word	0xfffff9ff
 8004a9c:	2000002c 	.word	0x2000002c
 8004aa0:	000f4240 	.word	0x000f4240

08004aa4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	23e0      	movs	r3, #224	; 0xe0
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	4013      	ands	r3, r2
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000

08004abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e2fe      	b.n	80050cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d100      	bne.n	8004ada <HAL_RCC_OscConfig+0x1e>
 8004ad8:	e07c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	4bc3      	ldr	r3, [pc, #780]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2238      	movs	r2, #56	; 0x38
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae4:	4bc0      	ldr	r3, [pc, #768]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	4013      	ands	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_OscConfig+0x3e>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4bb9      	ldr	r3, [pc, #740]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d062      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x116>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d15e      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e2d9      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x78>
 8004b24:	4bb0      	ldr	r3, [pc, #704]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4baf      	ldr	r3, [pc, #700]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0249      	lsls	r1, r1, #9
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e020      	b.n	8004b76 <HAL_RCC_OscConfig+0xba>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	23a0      	movs	r3, #160	; 0xa0
 8004b3a:	02db      	lsls	r3, r3, #11
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d10e      	bne.n	8004b5e <HAL_RCC_OscConfig+0xa2>
 8004b40:	4ba9      	ldr	r3, [pc, #676]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4ba8      	ldr	r3, [pc, #672]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	02c9      	lsls	r1, r1, #11
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	4ba6      	ldr	r3, [pc, #664]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4ba5      	ldr	r3, [pc, #660]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	0249      	lsls	r1, r1, #9
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e00b      	b.n	8004b76 <HAL_RCC_OscConfig+0xba>
 8004b5e:	4ba2      	ldr	r3, [pc, #648]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4ba1      	ldr	r3, [pc, #644]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b64:	49a1      	ldr	r1, [pc, #644]	; (8004dec <HAL_RCC_OscConfig+0x330>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	4b9f      	ldr	r3, [pc, #636]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b9e      	ldr	r3, [pc, #632]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b70:	499f      	ldr	r1, [pc, #636]	; (8004df0 <HAL_RCC_OscConfig+0x334>)
 8004b72:	400a      	ands	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d014      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fe fe3b 	bl	80037f8 <HAL_GetTick>
 8004b82:	0003      	movs	r3, r0
 8004b84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fe36 	bl	80037f8 <HAL_GetTick>
 8004b8c:	0002      	movs	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e298      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9a:	4b93      	ldr	r3, [pc, #588]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xcc>
 8004ba6:	e015      	b.n	8004bd4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fe26 	bl	80037f8 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb2:	f7fe fe21 	bl	80037f8 <HAL_GetTick>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b64      	cmp	r3, #100	; 0x64
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e283      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc4:	4b88      	ldr	r3, [pc, #544]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	029b      	lsls	r3, r3, #10
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0xf6>
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d100      	bne.n	8004be0 <HAL_RCC_OscConfig+0x124>
 8004bde:	e099      	b.n	8004d14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be0:	4b81      	ldr	r3, [pc, #516]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2238      	movs	r2, #56	; 0x38
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bea:	4b7f      	ldr	r3, [pc, #508]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCC_OscConfig+0x144>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d135      	bne.n	8004c72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c06:	4b78      	ldr	r3, [pc, #480]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x162>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e256      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b72      	ldr	r3, [pc, #456]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4a74      	ldr	r2, [pc, #464]	; (8004df4 <HAL_RCC_OscConfig+0x338>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	4b6e      	ldr	r3, [pc, #440]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c3a:	4b6b      	ldr	r3, [pc, #428]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6e      	ldr	r2, [pc, #440]	; (8004df8 <HAL_RCC_OscConfig+0x33c>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4b67      	ldr	r3, [pc, #412]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c4e:	4b66      	ldr	r3, [pc, #408]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	0adb      	lsrs	r3, r3, #11
 8004c54:	2207      	movs	r2, #7
 8004c56:	4013      	ands	r3, r2
 8004c58:	4a68      	ldr	r2, [pc, #416]	; (8004dfc <HAL_RCC_OscConfig+0x340>)
 8004c5a:	40da      	lsrs	r2, r3
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <HAL_RCC_OscConfig+0x344>)
 8004c5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c60:	4b68      	ldr	r3, [pc, #416]	; (8004e04 <HAL_RCC_OscConfig+0x348>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fe fd6b 	bl	8003740 <HAL_InitTick>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d051      	beq.n	8004d12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e22c      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d030      	beq.n	8004cdc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c7a:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5e      	ldr	r2, [pc, #376]	; (8004df8 <HAL_RCC_OscConfig+0x33c>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	0019      	movs	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	4b57      	ldr	r3, [pc, #348]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c8e:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b55      	ldr	r3, [pc, #340]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0049      	lsls	r1, r1, #1
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fdac 	bl	80037f8 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fe fda7 	bl	80037f8 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e209      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <HAL_RCC_OscConfig+0x338>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	4b44      	ldr	r3, [pc, #272]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	e01b      	b.n	8004d14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cdc:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004ce2:	4949      	ldr	r1, [pc, #292]	; (8004e08 <HAL_RCC_OscConfig+0x34c>)
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fe fd86 	bl	80037f8 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fd81 	bl	80037f8 <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1e3      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x236>
 8004d10:	e000      	b.n	8004d14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d047      	beq.n	8004dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d1e:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2238      	movs	r2, #56	; 0x38
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b18      	cmp	r3, #24
 8004d28:	d10a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	2202      	movs	r2, #2
 8004d30:	4013      	ands	r3, r2
 8004d32:	d03c      	beq.n	8004dae <HAL_RCC_OscConfig+0x2f2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d138      	bne.n	8004dae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e1c5      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d019      	beq.n	8004d7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d4c:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe fd50 	bl	80037f8 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fd4b 	bl	80037f8 <HAL_GetTick>
 8004d62:	0002      	movs	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e1ad      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	2202      	movs	r2, #2
 8004d76:	4013      	ands	r3, r2
 8004d78:	d0f1      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2a2>
 8004d7a:	e018      	b.n	8004dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004d82:	2101      	movs	r1, #1
 8004d84:	438a      	bics	r2, r1
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe fd36 	bl	80037f8 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d92:	f7fe fd31 	bl	80037f8 <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e193      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da8:	2202      	movs	r2, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	d1f1      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2204      	movs	r2, #4
 8004db4:	4013      	ands	r3, r2
 8004db6:	d100      	bne.n	8004dba <HAL_RCC_OscConfig+0x2fe>
 8004db8:	e0c6      	b.n	8004f48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dba:	231f      	movs	r3, #31
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2238      	movs	r2, #56	; 0x38
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d11e      	bne.n	8004e0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_OscConfig+0x32c>)
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d100      	bne.n	8004dda <HAL_RCC_OscConfig+0x31e>
 8004dd8:	e0b6      	b.n	8004f48 <HAL_RCC_OscConfig+0x48c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <HAL_RCC_OscConfig+0x328>
 8004de2:	e0b1      	b.n	8004f48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e171      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	fffeffff 	.word	0xfffeffff
 8004df0:	fffbffff 	.word	0xfffbffff
 8004df4:	ffff80ff 	.word	0xffff80ff
 8004df8:	ffffc7ff 	.word	0xffffc7ff
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	2000002c 	.word	0x2000002c
 8004e04:	20000030 	.word	0x20000030
 8004e08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e0c:	4bb1      	ldr	r3, [pc, #708]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	055b      	lsls	r3, r3, #21
 8004e14:	4013      	ands	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_OscConfig+0x360>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x362>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d011      	beq.n	8004e46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4bac      	ldr	r3, [pc, #688]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e26:	4bab      	ldr	r3, [pc, #684]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0549      	lsls	r1, r1, #21
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e30:	4ba8      	ldr	r3, [pc, #672]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	055b      	lsls	r3, r3, #21
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e3e:	231f      	movs	r3, #31
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e46:	4ba4      	ldr	r3, [pc, #656]	; (80050d8 <HAL_RCC_OscConfig+0x61c>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d11a      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e52:	4ba1      	ldr	r3, [pc, #644]	; (80050d8 <HAL_RCC_OscConfig+0x61c>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4ba0      	ldr	r3, [pc, #640]	; (80050d8 <HAL_RCC_OscConfig+0x61c>)
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	0049      	lsls	r1, r1, #1
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e60:	f7fe fcca 	bl	80037f8 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fe fcc5 	bl	80037f8 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e127      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7c:	4b96      	ldr	r3, [pc, #600]	; (80050d8 <HAL_RCC_OscConfig+0x61c>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCC_OscConfig+0x3e2>
 8004e90:	4b90      	ldr	r3, [pc, #576]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e94:	4b8f      	ldr	r3, [pc, #572]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004e96:	2101      	movs	r1, #1
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e9c:	e01c      	b.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x404>
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eaa:	4b8a      	ldr	r3, [pc, #552]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004eac:	2104      	movs	r1, #4
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eb6:	4b87      	ldr	r3, [pc, #540]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x41c>
 8004ec0:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004ec2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec4:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004ece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ed0:	4b80      	ldr	r3, [pc, #512]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fe fc8a 	bl	80037f8 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee8:	e009      	b.n	8004efe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fe fc85 	bl	80037f8 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	4a79      	ldr	r2, [pc, #484]	; (80050dc <HAL_RCC_OscConfig+0x620>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0e6      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	4b75      	ldr	r3, [pc, #468]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x42e>
 8004f08:	e013      	b.n	8004f32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fe fc75 	bl	80037f8 <HAL_GetTick>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f12:	e009      	b.n	8004f28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fe fc70 	bl	80037f8 <HAL_GetTick>
 8004f18:	0002      	movs	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	4a6f      	ldr	r2, [pc, #444]	; (80050dc <HAL_RCC_OscConfig+0x620>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e0d1      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f28:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f32:	231f      	movs	r3, #31
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	4b64      	ldr	r3, [pc, #400]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f42:	4967      	ldr	r1, [pc, #412]	; (80050e0 <HAL_RCC_OscConfig+0x624>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d100      	bne.n	8004f52 <HAL_RCC_OscConfig+0x496>
 8004f50:	e0bb      	b.n	80050ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f52:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2238      	movs	r2, #56	; 0x38
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d100      	bne.n	8004f60 <HAL_RCC_OscConfig+0x4a4>
 8004f5e:	e07b      	b.n	8005058 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d156      	bne.n	8005016 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f6e:	495d      	ldr	r1, [pc, #372]	; (80050e4 <HAL_RCC_OscConfig+0x628>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fe fc40 	bl	80037f8 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7fe fc3b 	bl	80037f8 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e09d      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	049b      	lsls	r3, r3, #18
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d1f0      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a51      	ldr	r2, [pc, #324]	; (80050e8 <HAL_RCC_OscConfig+0x62c>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	0449      	lsls	r1, r1, #17
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fde:	4b3d      	ldr	r3, [pc, #244]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	0549      	lsls	r1, r1, #21
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fc04 	bl	80037f8 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fe fbff 	bl	80037f8 <HAL_GetTick>
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e061      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005008:	4b32      	ldr	r3, [pc, #200]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	049b      	lsls	r3, r3, #18
 8005010:	4013      	ands	r3, r2
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x53a>
 8005014:	e059      	b.n	80050ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 800501c:	4931      	ldr	r1, [pc, #196]	; (80050e4 <HAL_RCC_OscConfig+0x628>)
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fe fbe9 	bl	80037f8 <HAL_GetTick>
 8005026:	0003      	movs	r3, r0
 8005028:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fe fbe4 	bl	80037f8 <HAL_GetTick>
 8005030:	0002      	movs	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e046      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	049b      	lsls	r3, r3, #18
 8005046:	4013      	ands	r3, r2
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800504a:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8005050:	4926      	ldr	r1, [pc, #152]	; (80050ec <HAL_RCC_OscConfig+0x630>)
 8005052:	400a      	ands	r2, r1
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e038      	b.n	80050ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e033      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x618>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2203      	movs	r2, #3
 800506e:	401a      	ands	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	429a      	cmp	r2, r3
 8005076:	d126      	bne.n	80050c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2270      	movs	r2, #112	; 0x70
 800507c:	401a      	ands	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d11f      	bne.n	80050c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	23fe      	movs	r3, #254	; 0xfe
 800508a:	01db      	lsls	r3, r3, #7
 800508c:	401a      	ands	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d116      	bne.n	80050c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	23f8      	movs	r3, #248	; 0xf8
 800509c:	039b      	lsls	r3, r3, #14
 800509e:	401a      	ands	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d10e      	bne.n	80050c6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	23e0      	movs	r3, #224	; 0xe0
 80050ac:	051b      	lsls	r3, r3, #20
 80050ae:	401a      	ands	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0f5b      	lsrs	r3, r3, #29
 80050bc:	075a      	lsls	r2, r3, #29
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b008      	add	sp, #32
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40007000 	.word	0x40007000
 80050dc:	00001388 	.word	0x00001388
 80050e0:	efffffff 	.word	0xefffffff
 80050e4:	feffffff 	.word	0xfeffffff
 80050e8:	11c1808c 	.word	0x11c1808c
 80050ec:	eefefffc 	.word	0xeefefffc

080050f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0e9      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005104:	4b76      	ldr	r3, [pc, #472]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2207      	movs	r2, #7
 800510a:	4013      	ands	r3, r2
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d91e      	bls.n	8005150 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005112:	4b73      	ldr	r3, [pc, #460]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2207      	movs	r2, #7
 8005118:	4393      	bics	r3, r2
 800511a:	0019      	movs	r1, r3
 800511c:	4b70      	ldr	r3, [pc, #448]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005124:	f7fe fb68 	bl	80037f8 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800512c:	e009      	b.n	8005142 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512e:	f7fe fb63 	bl	80037f8 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_RCC_ClockConfig+0x1f4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0ca      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005142:	4b67      	ldr	r3, [pc, #412]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2207      	movs	r2, #7
 8005148:	4013      	ands	r3, r2
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1ee      	bne.n	800512e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2202      	movs	r2, #2
 8005156:	4013      	ands	r3, r2
 8005158:	d015      	beq.n	8005186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	d006      	beq.n	8005172 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005164:	4b60      	ldr	r3, [pc, #384]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 800516a:	21e0      	movs	r1, #224	; 0xe0
 800516c:	01c9      	lsls	r1, r1, #7
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005172:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_RCC_ClockConfig+0x1fc>)
 8005178:	4013      	ands	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005182:	430a      	orrs	r2, r1
 8005184:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	4013      	ands	r3, r2
 800518e:	d057      	beq.n	8005240 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	4013      	ands	r3, r2
 80051a2:	d12b      	bne.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e097      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b0:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	049b      	lsls	r3, r3, #18
 80051b8:	4013      	ands	r3, r2
 80051ba:	d11f      	bne.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e08b      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c8:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4013      	ands	r3, r2
 80051d2:	d113      	bne.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e07f      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d106      	bne.n	80051ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	2202      	movs	r2, #2
 80051e6:	4013      	ands	r3, r2
 80051e8:	d108      	bne.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e074      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ee:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	2202      	movs	r2, #2
 80051f4:	4013      	ands	r3, r2
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e06d      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2207      	movs	r2, #7
 8005202:	4393      	bics	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005210:	f7fe faf2 	bl	80037f8 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005218:	e009      	b.n	800522e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521a:	f7fe faed 	bl	80037f8 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e054      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2238      	movs	r2, #56	; 0x38
 8005234:	401a      	ands	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	429a      	cmp	r2, r3
 800523e:	d1ec      	bne.n	800521a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2207      	movs	r2, #7
 8005246:	4013      	ands	r3, r2
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d21e      	bcs.n	800528c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2207      	movs	r2, #7
 8005254:	4393      	bics	r3, r2
 8005256:	0019      	movs	r1, r3
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005260:	f7fe faca 	bl	80037f8 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005268:	e009      	b.n	800527e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526a:	f7fe fac5 	bl	80037f8 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e02c      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2207      	movs	r2, #7
 8005284:	4013      	ands	r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d1ee      	bne.n	800526a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	4013      	ands	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <HAL_RCC_ClockConfig+0x200>)
 800529c:	4013      	ands	r3, r2
 800529e:	0019      	movs	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052aa:	f000 f829 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80052ae:	0001      	movs	r1, r0
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_RCC_ClockConfig+0x1f8>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	220f      	movs	r2, #15
 80052b8:	401a      	ands	r2, r3
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_RCC_ClockConfig+0x204>)
 80052bc:	0092      	lsls	r2, r2, #2
 80052be:	58d3      	ldr	r3, [r2, r3]
 80052c0:	221f      	movs	r2, #31
 80052c2:	4013      	ands	r3, r2
 80052c4:	000a      	movs	r2, r1
 80052c6:	40da      	lsrs	r2, r3
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_ClockConfig+0x208>)
 80052ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_ClockConfig+0x20c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fe fa35 	bl	8003740 <HAL_InitTick>
 80052d6:	0003      	movs	r3, r0
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b004      	add	sp, #16
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40022000 	.word	0x40022000
 80052e4:	00001388 	.word	0x00001388
 80052e8:	40021000 	.word	0x40021000
 80052ec:	fffff0ff 	.word	0xfffff0ff
 80052f0:	ffff8fff 	.word	0xffff8fff
 80052f4:	0800a330 	.word	0x0800a330
 80052f8:	2000002c 	.word	0x2000002c
 80052fc:	20000030 	.word	0x20000030

08005300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005306:	4b3c      	ldr	r3, [pc, #240]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2238      	movs	r2, #56	; 0x38
 800530c:	4013      	ands	r3, r2
 800530e:	d10f      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005310:	4b39      	ldr	r3, [pc, #228]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0adb      	lsrs	r3, r3, #11
 8005316:	2207      	movs	r2, #7
 8005318:	4013      	ands	r3, r2
 800531a:	2201      	movs	r2, #1
 800531c:	409a      	lsls	r2, r3
 800531e:	0013      	movs	r3, r2
 8005320:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	4835      	ldr	r0, [pc, #212]	; (80053fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005326:	f7fa ff09 	bl	800013c <__udivsi3>
 800532a:	0003      	movs	r3, r0
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e05d      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005330:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2238      	movs	r2, #56	; 0x38
 8005336:	4013      	ands	r3, r2
 8005338:	2b08      	cmp	r3, #8
 800533a:	d102      	bne.n	8005342 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800533c:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_RCC_GetSysClockFreq+0x100>)
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e054      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2238      	movs	r2, #56	; 0x38
 8005348:	4013      	ands	r3, r2
 800534a:	2b10      	cmp	r3, #16
 800534c:	d138      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2203      	movs	r2, #3
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005358:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	2207      	movs	r2, #7
 8005360:	4013      	ands	r3, r2
 8005362:	3301      	adds	r3, #1
 8005364:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d10d      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4824      	ldr	r0, [pc, #144]	; (8005400 <HAL_RCC_GetSysClockFreq+0x100>)
 8005370:	f7fa fee4 	bl	800013c <__udivsi3>
 8005374:	0003      	movs	r3, r0
 8005376:	0019      	movs	r1, r3
 8005378:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	227f      	movs	r2, #127	; 0x7f
 8005380:	4013      	ands	r3, r2
 8005382:	434b      	muls	r3, r1
 8005384:	617b      	str	r3, [r7, #20]
        break;
 8005386:	e00d      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	481c      	ldr	r0, [pc, #112]	; (80053fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800538c:	f7fa fed6 	bl	800013c <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	0019      	movs	r1, r3
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	227f      	movs	r2, #127	; 0x7f
 800539c:	4013      	ands	r3, r2
 800539e:	434b      	muls	r3, r1
 80053a0:	617b      	str	r3, [r7, #20]
        break;
 80053a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	0f5b      	lsrs	r3, r3, #29
 80053aa:	2207      	movs	r2, #7
 80053ac:	4013      	ands	r3, r2
 80053ae:	3301      	adds	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	6978      	ldr	r0, [r7, #20]
 80053b6:	f7fa fec1 	bl	800013c <__udivsi3>
 80053ba:	0003      	movs	r3, r0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e015      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2238      	movs	r2, #56	; 0x38
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d103      	bne.n	80053d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2238      	movs	r2, #56	; 0x38
 80053da:	4013      	ands	r3, r2
 80053dc:	2b18      	cmp	r3, #24
 80053de:	d103      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053e0:	23fa      	movs	r3, #250	; 0xfa
 80053e2:	01db      	lsls	r3, r3, #7
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	e001      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053ec:	693b      	ldr	r3, [r7, #16]
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b006      	add	sp, #24
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	40021000 	.word	0x40021000
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	007a1200 	.word	0x007a1200

08005404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <HAL_RCC_GetHCLKFreq+0x10>)
 800540a:	681b      	ldr	r3, [r3, #0]
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	2000002c 	.word	0x2000002c

08005418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800541c:	f7ff fff2 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005420:	0004      	movs	r4, r0
 8005422:	f7ff fb3f 	bl	8004aa4 <LL_RCC_GetAPB1Prescaler>
 8005426:	0003      	movs	r3, r0
 8005428:	0b1a      	lsrs	r2, r3, #12
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800542c:	0092      	lsls	r2, r2, #2
 800542e:	58d3      	ldr	r3, [r2, r3]
 8005430:	221f      	movs	r2, #31
 8005432:	4013      	ands	r3, r2
 8005434:	40dc      	lsrs	r4, r3
 8005436:	0023      	movs	r3, r4
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	bdb0      	pop	{r4, r5, r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	0800a370 	.word	0x0800a370

08005444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e04a      	b.n	80054ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	223d      	movs	r2, #61	; 0x3d
 800545a:	5c9b      	ldrb	r3, [r3, r2]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	223c      	movs	r2, #60	; 0x3c
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f7fd ff71 	bl	8003354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	223d      	movs	r2, #61	; 0x3d
 8005476:	2102      	movs	r1, #2
 8005478:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3304      	adds	r3, #4
 8005482:	0019      	movs	r1, r3
 8005484:	0010      	movs	r0, r2
 8005486:	f000 fd21 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2248      	movs	r2, #72	; 0x48
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223e      	movs	r2, #62	; 0x3e
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	223f      	movs	r2, #63	; 0x3f
 800549e:	2101      	movs	r1, #1
 80054a0:	5499      	strb	r1, [r3, r2]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2240      	movs	r2, #64	; 0x40
 80054a6:	2101      	movs	r1, #1
 80054a8:	5499      	strb	r1, [r3, r2]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2241      	movs	r2, #65	; 0x41
 80054ae:	2101      	movs	r1, #1
 80054b0:	5499      	strb	r1, [r3, r2]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2242      	movs	r2, #66	; 0x42
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2243      	movs	r2, #67	; 0x43
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2244      	movs	r2, #68	; 0x44
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2245      	movs	r2, #69	; 0x45
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2246      	movs	r2, #70	; 0x46
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2247      	movs	r2, #71	; 0x47
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223d      	movs	r2, #61	; 0x3d
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e04a      	b.n	800559c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	223d      	movs	r2, #61	; 0x3d
 800550a:	5c9b      	ldrb	r3, [r3, r2]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	223c      	movs	r2, #60	; 0x3c
 8005516:	2100      	movs	r1, #0
 8005518:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 f841 	bl	80055a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223d      	movs	r2, #61	; 0x3d
 8005526:	2102      	movs	r1, #2
 8005528:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	0019      	movs	r1, r3
 8005534:	0010      	movs	r0, r2
 8005536:	f000 fcc9 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2248      	movs	r2, #72	; 0x48
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	223e      	movs	r2, #62	; 0x3e
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223f      	movs	r2, #63	; 0x3f
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2240      	movs	r2, #64	; 0x40
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2241      	movs	r2, #65	; 0x41
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2242      	movs	r2, #66	; 0x42
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2243      	movs	r2, #67	; 0x43
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2244      	movs	r2, #68	; 0x44
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2245      	movs	r2, #69	; 0x45
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2246      	movs	r2, #70	; 0x46
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2247      	movs	r2, #71	; 0x47
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	223d      	movs	r2, #61	; 0x3d
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ac:	46c0      	nop			; (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x22>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	223e      	movs	r2, #62	; 0x3e
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	4193      	sbcs	r3, r2
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e037      	b.n	8005646 <HAL_TIM_PWM_Start+0x92>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d108      	bne.n	80055ee <HAL_TIM_PWM_Start+0x3a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	223f      	movs	r2, #63	; 0x3f
 80055e0:	5c9b      	ldrb	r3, [r3, r2]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	1e5a      	subs	r2, r3, #1
 80055e8:	4193      	sbcs	r3, r2
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e02b      	b.n	8005646 <HAL_TIM_PWM_Start+0x92>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d108      	bne.n	8005606 <HAL_TIM_PWM_Start+0x52>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2240      	movs	r2, #64	; 0x40
 80055f8:	5c9b      	ldrb	r3, [r3, r2]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	1e5a      	subs	r2, r3, #1
 8005600:	4193      	sbcs	r3, r2
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e01f      	b.n	8005646 <HAL_TIM_PWM_Start+0x92>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d108      	bne.n	800561e <HAL_TIM_PWM_Start+0x6a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2241      	movs	r2, #65	; 0x41
 8005610:	5c9b      	ldrb	r3, [r3, r2]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	4193      	sbcs	r3, r2
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e013      	b.n	8005646 <HAL_TIM_PWM_Start+0x92>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b10      	cmp	r3, #16
 8005622:	d108      	bne.n	8005636 <HAL_TIM_PWM_Start+0x82>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2242      	movs	r2, #66	; 0x42
 8005628:	5c9b      	ldrb	r3, [r3, r2]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	4193      	sbcs	r3, r2
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e007      	b.n	8005646 <HAL_TIM_PWM_Start+0x92>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2243      	movs	r2, #67	; 0x43
 800563a:	5c9b      	ldrb	r3, [r3, r2]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	4193      	sbcs	r3, r2
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e081      	b.n	8005752 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xaa>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	223e      	movs	r2, #62	; 0x3e
 8005658:	2102      	movs	r1, #2
 800565a:	5499      	strb	r1, [r3, r2]
 800565c:	e023      	b.n	80056a6 <HAL_TIM_PWM_Start+0xf2>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xba>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	223f      	movs	r2, #63	; 0x3f
 8005668:	2102      	movs	r1, #2
 800566a:	5499      	strb	r1, [r3, r2]
 800566c:	e01b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xf2>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xca>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	2102      	movs	r1, #2
 800567a:	5499      	strb	r1, [r3, r2]
 800567c:	e013      	b.n	80056a6 <HAL_TIM_PWM_Start+0xf2>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xda>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2241      	movs	r2, #65	; 0x41
 8005688:	2102      	movs	r1, #2
 800568a:	5499      	strb	r1, [r3, r2]
 800568c:	e00b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xf2>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b10      	cmp	r3, #16
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0xea>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2242      	movs	r2, #66	; 0x42
 8005698:	2102      	movs	r1, #2
 800569a:	5499      	strb	r1, [r3, r2]
 800569c:	e003      	b.n	80056a6 <HAL_TIM_PWM_Start+0xf2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2243      	movs	r2, #67	; 0x43
 80056a2:	2102      	movs	r1, #2
 80056a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 ffba 	bl	8006628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a28      	ldr	r2, [pc, #160]	; (800575c <HAL_TIM_PWM_Start+0x1a8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x11e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a27      	ldr	r2, [pc, #156]	; (8005760 <HAL_TIM_PWM_Start+0x1ac>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x11e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a25      	ldr	r2, [pc, #148]	; (8005764 <HAL_TIM_PWM_Start+0x1b0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x122>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_PWM_Start+0x124>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	0209      	lsls	r1, r1, #8
 80056ea:	430a      	orrs	r2, r1
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <HAL_TIM_PWM_Start+0x1a8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00a      	beq.n	800570e <HAL_TIM_PWM_Start+0x15a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	05db      	lsls	r3, r3, #23
 8005700:	429a      	cmp	r2, r3
 8005702:	d004      	beq.n	800570e <HAL_TIM_PWM_Start+0x15a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <HAL_TIM_PWM_Start+0x1b4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d116      	bne.n	800573c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_TIM_PWM_Start+0x1b8>)
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d016      	beq.n	800574e <HAL_TIM_PWM_Start+0x19a>
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	429a      	cmp	r2, r3
 8005728:	d011      	beq.n	800574e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2101      	movs	r1, #1
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	e008      	b.n	800574e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2101      	movs	r1, #1
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e000      	b.n	8005750 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b004      	add	sp, #16
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800
 8005768:	40000400 	.word	0x40000400
 800576c:	00010007 	.word	0x00010007

08005770 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	0018      	movs	r0, r3
 8005784:	f000 ff50 	bl	8006628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a35      	ldr	r2, [pc, #212]	; (8005864 <HAL_TIM_PWM_Stop+0xf4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIM_PWM_Stop+0x36>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <HAL_TIM_PWM_Stop+0xf8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIM_PWM_Stop+0x36>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a32      	ldr	r2, [pc, #200]	; (800586c <HAL_TIM_PWM_Stop+0xfc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_PWM_Stop+0x3a>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_TIM_PWM_Stop+0x3c>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4a2e      	ldr	r2, [pc, #184]	; (8005870 <HAL_TIM_PWM_Stop+0x100>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	d10d      	bne.n	80057d8 <HAL_TIM_PWM_Stop+0x68>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4a2c      	ldr	r2, [pc, #176]	; (8005874 <HAL_TIM_PWM_Stop+0x104>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_PWM_Stop+0x68>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4929      	ldr	r1, [pc, #164]	; (8005878 <HAL_TIM_PWM_Stop+0x108>)
 80057d4:	400a      	ands	r2, r1
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4a24      	ldr	r2, [pc, #144]	; (8005870 <HAL_TIM_PWM_Stop+0x100>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	d10d      	bne.n	8005800 <HAL_TIM_PWM_Stop+0x90>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_TIM_PWM_Stop+0x104>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_PWM_Stop+0x90>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	438a      	bics	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <HAL_TIM_PWM_Stop+0xa0>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	223e      	movs	r2, #62	; 0x3e
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	e023      	b.n	8005858 <HAL_TIM_PWM_Stop+0xe8>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b04      	cmp	r3, #4
 8005814:	d104      	bne.n	8005820 <HAL_TIM_PWM_Stop+0xb0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	223f      	movs	r2, #63	; 0x3f
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
 800581e:	e01b      	b.n	8005858 <HAL_TIM_PWM_Stop+0xe8>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d104      	bne.n	8005830 <HAL_TIM_PWM_Stop+0xc0>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
 800582e:	e013      	b.n	8005858 <HAL_TIM_PWM_Stop+0xe8>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d104      	bne.n	8005840 <HAL_TIM_PWM_Stop+0xd0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2241      	movs	r2, #65	; 0x41
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]
 800583e:	e00b      	b.n	8005858 <HAL_TIM_PWM_Stop+0xe8>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b10      	cmp	r3, #16
 8005844:	d104      	bne.n	8005850 <HAL_TIM_PWM_Stop+0xe0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2242      	movs	r2, #66	; 0x42
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]
 800584e:	e003      	b.n	8005858 <HAL_TIM_PWM_Stop+0xe8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2243      	movs	r2, #67	; 0x43
 8005854:	2101      	movs	r1, #1
 8005856:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	0018      	movs	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	b002      	add	sp, #8
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800
 8005870:	00001111 	.word	0x00001111
 8005874:	00000444 	.word	0x00000444
 8005878:	ffff7fff 	.word	0xffff7fff

0800587c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d124      	bne.n	80058dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2202      	movs	r2, #2
 800589a:	4013      	ands	r3, r2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d11d      	bne.n	80058dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2203      	movs	r2, #3
 80058a6:	4252      	negs	r2, r2
 80058a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2203      	movs	r2, #3
 80058b8:	4013      	ands	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 faec 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 80058c4:	e007      	b.n	80058d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f000 fadf 	bl	8005e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 faeb 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2204      	movs	r2, #4
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d125      	bne.n	8005936 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2204      	movs	r2, #4
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d11e      	bne.n	8005936 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2205      	movs	r2, #5
 80058fe:	4252      	negs	r2, r2
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	23c0      	movs	r3, #192	; 0xc0
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4013      	ands	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 fabf 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 800591e:	e007      	b.n	8005930 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fab2 	bl	8005e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 fabe 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2208      	movs	r2, #8
 800593e:	4013      	ands	r3, r2
 8005940:	2b08      	cmp	r3, #8
 8005942:	d124      	bne.n	800598e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2208      	movs	r2, #8
 800594c:	4013      	ands	r3, r2
 800594e:	2b08      	cmp	r3, #8
 8005950:	d11d      	bne.n	800598e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2209      	movs	r2, #9
 8005958:	4252      	negs	r2, r2
 800595a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2204      	movs	r2, #4
 8005960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	2203      	movs	r2, #3
 800596a:	4013      	ands	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	0018      	movs	r0, r3
 8005972:	f000 fa93 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 8005976:	e007      	b.n	8005988 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	0018      	movs	r0, r3
 800597c:	f000 fa86 	bl	8005e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0018      	movs	r0, r3
 8005984:	f000 fa92 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2210      	movs	r2, #16
 8005996:	4013      	ands	r3, r2
 8005998:	2b10      	cmp	r3, #16
 800599a:	d125      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2210      	movs	r2, #16
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d11e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2211      	movs	r2, #17
 80059b0:	4252      	negs	r2, r2
 80059b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2208      	movs	r2, #8
 80059b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	23c0      	movs	r3, #192	; 0xc0
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4013      	ands	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 fa66 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 80059d0:	e007      	b.n	80059e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fa59 	bl	8005e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 fa65 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2201      	movs	r2, #1
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10f      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d108      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	4252      	negs	r2, r2
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7fd fc19 	bl	8003248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d10f      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b80      	cmp	r3, #128	; 0x80
 8005a30:	d108      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2281      	movs	r2, #129	; 0x81
 8005a38:	4252      	negs	r2, r2
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 fe86 	bl	8006750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	401a      	ands	r2, r3
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d10e      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d107      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <HAL_TIM_IRQHandler+0x260>)
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f000 fe75 	bl	8006760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2240      	movs	r2, #64	; 0x40
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d10f      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d108      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2241      	movs	r2, #65	; 0x41
 8005a98:	4252      	negs	r2, r2
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 fa0c 	bl	8005ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d10f      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d108      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	4252      	negs	r2, r2
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 fe37 	bl	8006740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b002      	add	sp, #8
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	fffffeff 	.word	0xfffffeff

08005ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aec:	2317      	movs	r3, #23
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	223c      	movs	r2, #60	; 0x3c
 8005af8:	5c9b      	ldrb	r3, [r3, r2]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0e5      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	223c      	movs	r2, #60	; 0x3c
 8005b06:	2101      	movs	r1, #1
 8005b08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b14      	cmp	r3, #20
 8005b0e:	d900      	bls.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b10:	e0d1      	b.n	8005cb6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	009a      	lsls	r2, r3, #2
 8005b16:	4b70      	ldr	r3, [pc, #448]	; (8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b18:	18d3      	adds	r3, r2, r3
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	0011      	movs	r1, r2
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 fa46 	bl	8005fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2108      	movs	r1, #8
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2104      	movs	r1, #4
 8005b48:	438a      	bics	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	619a      	str	r2, [r3, #24]
      break;
 8005b5e:	e0af      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	0011      	movs	r1, r2
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 faa5 	bl	80060b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	0109      	lsls	r1, r1, #4
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4954      	ldr	r1, [pc, #336]	; (8005cdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	021a      	lsls	r2, r3, #8
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	619a      	str	r2, [r3, #24]
      break;
 8005ba4:	e08c      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	0011      	movs	r1, r2
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 fb00 	bl	80061b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2108      	movs	r1, #8
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2104      	movs	r1, #4
 8005bd0:	438a      	bics	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69d9      	ldr	r1, [r3, #28]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	61da      	str	r2, [r3, #28]
      break;
 8005be6:	e06b      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	0011      	movs	r1, r2
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 fb61 	bl	80062b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	0109      	lsls	r1, r1, #4
 8005c04:	430a      	orrs	r2, r1
 8005c06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69da      	ldr	r2, [r3, #28]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4932      	ldr	r1, [pc, #200]	; (8005cdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c14:	400a      	ands	r2, r1
 8005c16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69d9      	ldr	r1, [r3, #28]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
      break;
 8005c2c:	e048      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0011      	movs	r1, r2
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 fba2 	bl	8006380 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2108      	movs	r1, #8
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2104      	movs	r1, #4
 8005c58:	438a      	bics	r2, r1
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c6e:	e027      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0011      	movs	r1, r2
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 fbdb 	bl	8006434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	0109      	lsls	r1, r1, #4
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4910      	ldr	r1, [pc, #64]	; (8005cdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	021a      	lsls	r2, r3, #8
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cb4:	e004      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005cb6:	2317      	movs	r3, #23
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
      break;
 8005cbe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	223c      	movs	r2, #60	; 0x3c
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]

  return status;
 8005cc8:	2317      	movs	r3, #23
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	781b      	ldrb	r3, [r3, #0]
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b006      	add	sp, #24
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	0800a390 	.word	0x0800a390
 8005cdc:	fffffbff 	.word	0xfffffbff

08005ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	230f      	movs	r3, #15
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	223c      	movs	r2, #60	; 0x3c
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_ConfigClockSource+0x20>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e0bc      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x19a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	223c      	movs	r2, #60	; 0x3c
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	223d      	movs	r2, #61	; 0x3d
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4a5a      	ldr	r2, [pc, #360]	; (8005e84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4a59      	ldr	r2, [pc, #356]	; (8005e88 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	0192      	lsls	r2, r2, #6
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d040      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xde>
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	0192      	lsls	r2, r2, #6
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d900      	bls.n	8005d46 <HAL_TIM_ConfigClockSource+0x66>
 8005d44:	e088      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	0152      	lsls	r2, r2, #5
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d100      	bne.n	8005d50 <HAL_TIM_ConfigClockSource+0x70>
 8005d4e:	e088      	b.n	8005e62 <HAL_TIM_ConfigClockSource+0x182>
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	0152      	lsls	r2, r2, #5
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d900      	bls.n	8005d5a <HAL_TIM_ConfigClockSource+0x7a>
 8005d58:	e07e      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d5a:	2b70      	cmp	r3, #112	; 0x70
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xb0>
 8005d5e:	d900      	bls.n	8005d62 <HAL_TIM_ConfigClockSource+0x82>
 8005d60:	e07a      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d04f      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x126>
 8005d66:	d900      	bls.n	8005d6a <HAL_TIM_ConfigClockSource+0x8a>
 8005d68:	e076      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d6a:	2b50      	cmp	r3, #80	; 0x50
 8005d6c:	d03b      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x106>
 8005d6e:	d900      	bls.n	8005d72 <HAL_TIM_ConfigClockSource+0x92>
 8005d70:	e072      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d057      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x146>
 8005d76:	d900      	bls.n	8005d7a <HAL_TIM_ConfigClockSource+0x9a>
 8005d78:	e06e      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d7a:	2b30      	cmp	r3, #48	; 0x30
 8005d7c:	d063      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x166>
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d060      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x166>
 8005d84:	d868      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d05d      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x166>
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d05b      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x166>
 8005d8e:	e063      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da0:	f000 fc22 	bl	80065e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2277      	movs	r2, #119	; 0x77
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]
      break;
 8005dbc:	e052      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dce:	f000 fc0b 	bl	80065e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	01c9      	lsls	r1, r1, #7
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
      break;
 8005de4:	e03e      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	001a      	movs	r2, r3
 8005df4:	f000 fb7c 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2150      	movs	r1, #80	; 0x50
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fbd6 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005e04:	e02e      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e12:	001a      	movs	r2, r3
 8005e14:	f000 fb9a 	bl	800654c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2160      	movs	r1, #96	; 0x60
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fbc6 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005e24:	e01e      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	001a      	movs	r2, r3
 8005e34:	f000 fb5c 	bl	80064f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fbb6 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005e44:	e00e      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	0019      	movs	r1, r3
 8005e50:	0010      	movs	r0, r2
 8005e52:	f000 fbad 	bl	80065b0 <TIM_ITRx_SetConfig>
      break;
 8005e56:	e005      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005e58:	230f      	movs	r3, #15
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
      break;
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005e62:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	223d      	movs	r2, #61	; 0x3d
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	223c      	movs	r2, #60	; 0x3c
 8005e70:	2100      	movs	r1, #0
 8005e72:	5499      	strb	r1, [r3, r2]

  return status;
 8005e74:	230f      	movs	r3, #15
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	781b      	ldrb	r3, [r3, #0]
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b004      	add	sp, #16
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	ffceff88 	.word	0xffceff88
 8005e88:	ffff00ff 	.word	0xffff00ff

08005e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e94:	46c0      	nop			; (mov r8, r8)
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eb4:	46c0      	nop			; (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b002      	add	sp, #8
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <TIM_Base_SetConfig+0xd4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d008      	beq.n	8005ef6 <TIM_Base_SetConfig+0x2a>
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	05db      	lsls	r3, r3, #23
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0x2a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <TIM_Base_SetConfig+0xd8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2270      	movs	r2, #112	; 0x70
 8005efa:	4393      	bics	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <TIM_Base_SetConfig+0xd4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d014      	beq.n	8005f3a <TIM_Base_SetConfig+0x6e>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	05db      	lsls	r3, r3, #23
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d00f      	beq.n	8005f3a <TIM_Base_SetConfig+0x6e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <TIM_Base_SetConfig+0xd8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00b      	beq.n	8005f3a <TIM_Base_SetConfig+0x6e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <TIM_Base_SetConfig+0xdc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d007      	beq.n	8005f3a <TIM_Base_SetConfig+0x6e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <TIM_Base_SetConfig+0xe0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_Base_SetConfig+0x6e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <TIM_Base_SetConfig+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <TIM_Base_SetConfig+0xe8>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	4393      	bics	r3, r2
 8005f52:	001a      	movs	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <TIM_Base_SetConfig+0xd4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0xbe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <TIM_Base_SetConfig+0xe0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0xbe>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <TIM_Base_SetConfig+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d103      	bne.n	8005f92 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	615a      	str	r2, [r3, #20]
}
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b004      	add	sp, #16
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40002000 	.word	0x40002000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800
 8005fb4:	fffffcff 	.word	0xfffffcff

08005fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4393      	bics	r3, r2
 8005fca:	001a      	movs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <TIM_OC1_SetConfig+0xe8>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2203      	movs	r2, #3
 8005fee:	4393      	bics	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2202      	movs	r2, #2
 8006000:	4393      	bics	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a24      	ldr	r2, [pc, #144]	; (80060a4 <TIM_OC1_SetConfig+0xec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <TIM_OC1_SetConfig+0x6e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <TIM_OC1_SetConfig+0xf0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC1_SetConfig+0x6e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a22      	ldr	r2, [pc, #136]	; (80060ac <TIM_OC1_SetConfig+0xf4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10c      	bne.n	8006040 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2208      	movs	r2, #8
 800602a:	4393      	bics	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2204      	movs	r2, #4
 800603c:	4393      	bics	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <TIM_OC1_SetConfig+0xec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC1_SetConfig+0xa0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <TIM_OC1_SetConfig+0xf0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC1_SetConfig+0xa0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC1_SetConfig+0xf4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d111      	bne.n	800607c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <TIM_OC1_SetConfig+0xf8>)
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <TIM_OC1_SetConfig+0xfc>)
 8006064:	4013      	ands	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	46bd      	mov	sp, r7
 800609a:	b006      	add	sp, #24
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	fffeff8f 	.word	0xfffeff8f
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800
 80060b0:	fffffeff 	.word	0xfffffeff
 80060b4:	fffffdff 	.word	0xfffffdff

080060b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	2210      	movs	r2, #16
 80060c8:	4393      	bics	r3, r2
 80060ca:	001a      	movs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a2c      	ldr	r2, [pc, #176]	; (8006198 <TIM_OC2_SetConfig+0xe0>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4a2b      	ldr	r2, [pc, #172]	; (800619c <TIM_OC2_SetConfig+0xe4>)
 80060ee:	4013      	ands	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2220      	movs	r2, #32
 8006102:	4393      	bics	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a22      	ldr	r2, [pc, #136]	; (80061a0 <TIM_OC2_SetConfig+0xe8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d10d      	bne.n	8006136 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2280      	movs	r2, #128	; 0x80
 800611e:	4393      	bics	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2240      	movs	r2, #64	; 0x40
 8006132:	4393      	bics	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <TIM_OC2_SetConfig+0xe8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC2_SetConfig+0x96>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <TIM_OC2_SetConfig+0xec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC2_SetConfig+0x96>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <TIM_OC2_SetConfig+0xf0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d113      	bne.n	8006176 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <TIM_OC2_SetConfig+0xf4>)
 8006152:	4013      	ands	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <TIM_OC2_SetConfig+0xf8>)
 800615a:	4013      	ands	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b006      	add	sp, #24
 8006196:	bd80      	pop	{r7, pc}
 8006198:	feff8fff 	.word	0xfeff8fff
 800619c:	fffffcff 	.word	0xfffffcff
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	fffffbff 	.word	0xfffffbff
 80061b0:	fffff7ff 	.word	0xfffff7ff

080061b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4a33      	ldr	r2, [pc, #204]	; (8006290 <TIM_OC3_SetConfig+0xdc>)
 80061c4:	401a      	ands	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <TIM_OC3_SetConfig+0xe0>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2203      	movs	r2, #3
 80061e8:	4393      	bics	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_OC3_SetConfig+0xe4>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <TIM_OC3_SetConfig+0xe8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10d      	bne.n	800622e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <TIM_OC3_SetConfig+0xec>)
 8006216:	4013      	ands	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <TIM_OC3_SetConfig+0xf0>)
 800622a:	4013      	ands	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1a      	ldr	r2, [pc, #104]	; (800629c <TIM_OC3_SetConfig+0xe8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d007      	beq.n	8006246 <TIM_OC3_SetConfig+0x92>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <TIM_OC3_SetConfig+0xf4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_OC3_SetConfig+0x92>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <TIM_OC3_SetConfig+0xf8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d113      	bne.n	800626e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <TIM_OC3_SetConfig+0xfc>)
 800624a:	4013      	ands	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <TIM_OC3_SetConfig+0x100>)
 8006252:	4013      	ands	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	46c0      	nop			; (mov r8, r8)
 800628a:	46bd      	mov	sp, r7
 800628c:	b006      	add	sp, #24
 800628e:	bd80      	pop	{r7, pc}
 8006290:	fffffeff 	.word	0xfffffeff
 8006294:	fffeff8f 	.word	0xfffeff8f
 8006298:	fffffdff 	.word	0xfffffdff
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	fffff7ff 	.word	0xfffff7ff
 80062a4:	fffffbff 	.word	0xfffffbff
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800
 80062b0:	ffffefff 	.word	0xffffefff
 80062b4:	ffffdfff 	.word	0xffffdfff

080062b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	4a26      	ldr	r2, [pc, #152]	; (8006360 <TIM_OC4_SetConfig+0xa8>)
 80062c8:	401a      	ands	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a20      	ldr	r2, [pc, #128]	; (8006364 <TIM_OC4_SetConfig+0xac>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <TIM_OC4_SetConfig+0xb0>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4a1b      	ldr	r2, [pc, #108]	; (800636c <TIM_OC4_SetConfig+0xb4>)
 8006300:	4013      	ands	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a17      	ldr	r2, [pc, #92]	; (8006370 <TIM_OC4_SetConfig+0xb8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_OC4_SetConfig+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <TIM_OC4_SetConfig+0xbc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC4_SetConfig+0x70>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC4_SetConfig+0xc0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d109      	bne.n	800633c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC4_SetConfig+0xc4>)
 800632c:	4013      	ands	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	019b      	lsls	r3, r3, #6
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b006      	add	sp, #24
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	ffffefff 	.word	0xffffefff
 8006364:	feff8fff 	.word	0xfeff8fff
 8006368:	fffffcff 	.word	0xfffffcff
 800636c:	ffffdfff 	.word	0xffffdfff
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	ffffbfff 	.word	0xffffbfff

08006380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <TIM_OC5_SetConfig+0x9c>)
 8006390:	401a      	ands	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <TIM_OC5_SetConfig+0xa0>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <TIM_OC5_SetConfig+0xa4>)
 80063be:	4013      	ands	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	041b      	lsls	r3, r3, #16
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a15      	ldr	r2, [pc, #84]	; (8006428 <TIM_OC5_SetConfig+0xa8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d007      	beq.n	80063e6 <TIM_OC5_SetConfig+0x66>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <TIM_OC5_SetConfig+0xac>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC5_SetConfig+0x66>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <TIM_OC5_SetConfig+0xb0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d109      	bne.n	80063fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4a0c      	ldr	r2, [pc, #48]	; (800641c <TIM_OC5_SetConfig+0x9c>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	621a      	str	r2, [r3, #32]
}
 8006414:	46c0      	nop			; (mov r8, r8)
 8006416:	46bd      	mov	sp, r7
 8006418:	b006      	add	sp, #24
 800641a:	bd80      	pop	{r7, pc}
 800641c:	fffeffff 	.word	0xfffeffff
 8006420:	fffeff8f 	.word	0xfffeff8f
 8006424:	fffdffff 	.word	0xfffdffff
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <TIM_OC6_SetConfig+0xa0>)
 8006444:	401a      	ands	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <TIM_OC6_SetConfig+0xa4>)
 8006460:	4013      	ands	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4a1a      	ldr	r2, [pc, #104]	; (80064dc <TIM_OC6_SetConfig+0xa8>)
 8006474:	4013      	ands	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	051b      	lsls	r3, r3, #20
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <TIM_OC6_SetConfig+0xac>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_OC6_SetConfig+0x68>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <TIM_OC6_SetConfig+0xb0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_OC6_SetConfig+0x68>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a14      	ldr	r2, [pc, #80]	; (80064e8 <TIM_OC6_SetConfig+0xb4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d109      	bne.n	80064b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	4a13      	ldr	r2, [pc, #76]	; (80064ec <TIM_OC6_SetConfig+0xb8>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b006      	add	sp, #24
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	ffefffff 	.word	0xffefffff
 80064d8:	feff8fff 	.word	0xfeff8fff
 80064dc:	ffdfffff 	.word	0xffdfffff
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800
 80064ec:	fffbffff 	.word	0xfffbffff

080064f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	2201      	movs	r2, #1
 8006508:	4393      	bics	r3, r2
 800650a:	001a      	movs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	22f0      	movs	r2, #240	; 0xf0
 800651a:	4393      	bics	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	220a      	movs	r2, #10
 800652c:	4393      	bics	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b006      	add	sp, #24
 800654a:	bd80      	pop	{r7, pc}

0800654c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	2210      	movs	r2, #16
 800655e:	4393      	bics	r3, r2
 8006560:	001a      	movs	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <TIM_TI2_ConfigInputStage+0x60>)
 8006576:	4013      	ands	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	031b      	lsls	r3, r3, #12
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	22a0      	movs	r2, #160	; 0xa0
 8006588:	4393      	bics	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b006      	add	sp, #24
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	ffff0fff 	.word	0xffff0fff

080065b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <TIM_ITRx_SetConfig+0x34>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	2207      	movs	r2, #7
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	46bd      	mov	sp, r7
 80065de:	b004      	add	sp, #16
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	ffcfff8f 	.word	0xffcfff8f

080065e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <TIM_ETR_SetConfig+0x3c>)
 8006600:	4013      	ands	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	021a      	lsls	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	431a      	orrs	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	46bd      	mov	sp, r7
 8006620:	b006      	add	sp, #24
 8006622:	bd80      	pop	{r7, pc}
 8006624:	ffff00ff 	.word	0xffff00ff

08006628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	221f      	movs	r2, #31
 8006638:	4013      	ands	r3, r2
 800663a:	2201      	movs	r2, #1
 800663c:	409a      	lsls	r2, r3
 800663e:	0013      	movs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	43d2      	mvns	r2, r2
 800664a:	401a      	ands	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	211f      	movs	r1, #31
 8006658:	400b      	ands	r3, r1
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4099      	lsls	r1, r3
 800665e:	000b      	movs	r3, r1
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b006      	add	sp, #24
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	223c      	movs	r2, #60	; 0x3c
 800667e:	5c9b      	ldrb	r3, [r3, r2]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006684:	2302      	movs	r3, #2
 8006686:	e050      	b.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	223c      	movs	r2, #60	; 0x3c
 800668c:	2101      	movs	r1, #1
 800668e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223d      	movs	r2, #61	; 0x3d
 8006694:	2102      	movs	r1, #2
 8006696:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a21      	ldr	r2, [pc, #132]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2270      	movs	r2, #112	; 0x70
 80066c8:	4393      	bics	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a14      	ldr	r2, [pc, #80]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00a      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	05db      	lsls	r3, r3, #23
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d004      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a10      	ldr	r2, [pc, #64]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10c      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2280      	movs	r2, #128	; 0x80
 8006702:	4393      	bics	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	223d      	movs	r2, #61	; 0x3d
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	223c      	movs	r2, #60	; 0x3c
 8006724:	2100      	movs	r1, #0
 8006726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	0018      	movs	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	b004      	add	sp, #16
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	40012c00 	.word	0x40012c00
 8006738:	ff0fffff 	.word	0xff0fffff
 800673c:	40000400 	.word	0x40000400

08006740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	b002      	add	sp, #8
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e046      	b.n	8006810 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2288      	movs	r2, #136	; 0x88
 8006786:	589b      	ldr	r3, [r3, r2]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2284      	movs	r2, #132	; 0x84
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	0018      	movs	r0, r3
 8006798:	f7fc fe56 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2288      	movs	r2, #136	; 0x88
 80067a0:	2124      	movs	r1, #36	; 0x24
 80067a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2101      	movs	r1, #1
 80067b0:	438a      	bics	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	0018      	movs	r0, r3
 80067b8:	f000 f8cc 	bl	8006954 <UART_SetConfig>
 80067bc:	0003      	movs	r3, r0
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e024      	b.n	8006810 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 fb37 	bl	8006e44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	490d      	ldr	r1, [pc, #52]	; (8006818 <HAL_UART_Init+0xa8>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	212a      	movs	r1, #42	; 0x2a
 80067f2:	438a      	bics	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2101      	movs	r1, #1
 8006802:	430a      	orrs	r2, r1
 8006804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 fbcf 	bl	8006fac <UART_CheckIdleState>
 800680e:	0003      	movs	r3, r0
}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}
 8006818:	ffffb7ff 	.word	0xffffb7ff

0800681c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	1dbb      	adds	r3, r7, #6
 800682a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2288      	movs	r2, #136	; 0x88
 8006830:	589b      	ldr	r3, [r3, r2]
 8006832:	2b20      	cmp	r3, #32
 8006834:	d000      	beq.n	8006838 <HAL_UART_Transmit+0x1c>
 8006836:	e088      	b.n	800694a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_UART_Transmit+0x2a>
 800683e:	1dbb      	adds	r3, r7, #6
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e080      	b.n	800694c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	015b      	lsls	r3, r3, #5
 8006852:	429a      	cmp	r2, r3
 8006854:	d109      	bne.n	800686a <HAL_UART_Transmit+0x4e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2201      	movs	r2, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d001      	beq.n	800686a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e070      	b.n	800694c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2290      	movs	r2, #144	; 0x90
 800686e:	2100      	movs	r1, #0
 8006870:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2288      	movs	r2, #136	; 0x88
 8006876:	2121      	movs	r1, #33	; 0x21
 8006878:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687a:	f7fc ffbd 	bl	80037f8 <HAL_GetTick>
 800687e:	0003      	movs	r3, r0
 8006880:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1dba      	adds	r2, r7, #6
 8006886:	2154      	movs	r1, #84	; 0x54
 8006888:	8812      	ldrh	r2, [r2, #0]
 800688a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1dba      	adds	r2, r7, #6
 8006890:	2156      	movs	r1, #86	; 0x56
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	015b      	lsls	r3, r3, #5
 800689e:	429a      	cmp	r2, r3
 80068a0:	d108      	bne.n	80068b4 <HAL_UART_Transmit+0x98>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e003      	b.n	80068bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068bc:	e02c      	b.n	8006918 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	0013      	movs	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	f000 fbbc 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e039      	b.n	800694c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	001a      	movs	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	05d2      	lsls	r2, r2, #23
 80068ea:	0dd2      	lsrs	r2, r2, #23
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	3302      	adds	r3, #2
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e007      	b.n	8006906 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2256      	movs	r2, #86	; 0x56
 800690a:	5a9b      	ldrh	r3, [r3, r2]
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b299      	uxth	r1, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2256      	movs	r2, #86	; 0x56
 8006916:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2256      	movs	r2, #86	; 0x56
 800691c:	5a9b      	ldrh	r3, [r3, r2]
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1cc      	bne.n	80068be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	0013      	movs	r3, r2
 800692e:	2200      	movs	r2, #0
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	f000 fb89 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006936:	1e03      	subs	r3, r0, #0
 8006938:	d001      	beq.n	800693e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e006      	b.n	800694c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2288      	movs	r2, #136	; 0x88
 8006942:	2120      	movs	r1, #32
 8006944:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
  }
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b008      	add	sp, #32
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b090      	sub	sp, #64	; 0x40
 8006958:	af00      	add	r7, sp, #0
 800695a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800695c:	231a      	movs	r3, #26
 800695e:	2220      	movs	r2, #32
 8006960:	189b      	adds	r3, r3, r2
 8006962:	19db      	adds	r3, r3, r7
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4ac4      	ldr	r2, [pc, #784]	; (8006c98 <UART_SetConfig+0x344>)
 8006988:	4013      	ands	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	430b      	orrs	r3, r1
 8006994:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4abf      	ldr	r2, [pc, #764]	; (8006c9c <UART_SetConfig+0x348>)
 800699e:	4013      	ands	r3, r2
 80069a0:	0018      	movs	r0, r3
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	68d9      	ldr	r1, [r3, #12]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	0003      	movs	r3, r0
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4ab9      	ldr	r2, [pc, #740]	; (8006ca0 <UART_SetConfig+0x34c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069c6:	4313      	orrs	r3, r2
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4ab4      	ldr	r2, [pc, #720]	; (8006ca4 <UART_SetConfig+0x350>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	0019      	movs	r1, r3
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	430b      	orrs	r3, r1
 80069de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	220f      	movs	r2, #15
 80069e8:	4393      	bics	r3, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	0003      	movs	r3, r0
 80069f6:	430b      	orrs	r3, r1
 80069f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4aaa      	ldr	r2, [pc, #680]	; (8006ca8 <UART_SetConfig+0x354>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d131      	bne.n	8006a68 <UART_SetConfig+0x114>
 8006a04:	4ba9      	ldr	r3, [pc, #676]	; (8006cac <UART_SetConfig+0x358>)
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	2203      	movs	r2, #3
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d01d      	beq.n	8006a4c <UART_SetConfig+0xf8>
 8006a10:	d823      	bhi.n	8006a5a <UART_SetConfig+0x106>
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d00c      	beq.n	8006a30 <UART_SetConfig+0xdc>
 8006a16:	d820      	bhi.n	8006a5a <UART_SetConfig+0x106>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <UART_SetConfig+0xce>
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d00e      	beq.n	8006a3e <UART_SetConfig+0xea>
 8006a20:	e01b      	b.n	8006a5a <UART_SetConfig+0x106>
 8006a22:	231b      	movs	r3, #27
 8006a24:	2220      	movs	r2, #32
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	19db      	adds	r3, r3, r7
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	e071      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a30:	231b      	movs	r3, #27
 8006a32:	2220      	movs	r2, #32
 8006a34:	189b      	adds	r3, r3, r2
 8006a36:	19db      	adds	r3, r3, r7
 8006a38:	2202      	movs	r2, #2
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e06a      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a3e:	231b      	movs	r3, #27
 8006a40:	2220      	movs	r2, #32
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	19db      	adds	r3, r3, r7
 8006a46:	2204      	movs	r2, #4
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e063      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a4c:	231b      	movs	r3, #27
 8006a4e:	2220      	movs	r2, #32
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	2208      	movs	r2, #8
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e05c      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a5a:	231b      	movs	r3, #27
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	19db      	adds	r3, r3, r7
 8006a62:	2210      	movs	r2, #16
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e055      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a90      	ldr	r2, [pc, #576]	; (8006cb0 <UART_SetConfig+0x35c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d106      	bne.n	8006a80 <UART_SetConfig+0x12c>
 8006a72:	231b      	movs	r3, #27
 8006a74:	2220      	movs	r2, #32
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	19db      	adds	r3, r3, r7
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e049      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a86      	ldr	r2, [pc, #536]	; (8006ca0 <UART_SetConfig+0x34c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d13e      	bne.n	8006b08 <UART_SetConfig+0x1b4>
 8006a8a:	4b88      	ldr	r3, [pc, #544]	; (8006cac <UART_SetConfig+0x358>)
 8006a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a8e:	23c0      	movs	r3, #192	; 0xc0
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	4013      	ands	r3, r2
 8006a94:	22c0      	movs	r2, #192	; 0xc0
 8006a96:	0112      	lsls	r2, r2, #4
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d027      	beq.n	8006aec <UART_SetConfig+0x198>
 8006a9c:	22c0      	movs	r2, #192	; 0xc0
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d82a      	bhi.n	8006afa <UART_SetConfig+0x1a6>
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d011      	beq.n	8006ad0 <UART_SetConfig+0x17c>
 8006aac:	2280      	movs	r2, #128	; 0x80
 8006aae:	0112      	lsls	r2, r2, #4
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d822      	bhi.n	8006afa <UART_SetConfig+0x1a6>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <UART_SetConfig+0x16e>
 8006ab8:	2280      	movs	r2, #128	; 0x80
 8006aba:	00d2      	lsls	r2, r2, #3
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00e      	beq.n	8006ade <UART_SetConfig+0x18a>
 8006ac0:	e01b      	b.n	8006afa <UART_SetConfig+0x1a6>
 8006ac2:	231b      	movs	r3, #27
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	189b      	adds	r3, r3, r2
 8006ac8:	19db      	adds	r3, r3, r7
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	e021      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006ad0:	231b      	movs	r3, #27
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	19db      	adds	r3, r3, r7
 8006ad8:	2202      	movs	r2, #2
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e01a      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006ade:	231b      	movs	r3, #27
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	19db      	adds	r3, r3, r7
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	e013      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006aec:	231b      	movs	r3, #27
 8006aee:	2220      	movs	r2, #32
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	19db      	adds	r3, r3, r7
 8006af4:	2208      	movs	r2, #8
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	e00c      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006afa:	231b      	movs	r3, #27
 8006afc:	2220      	movs	r2, #32
 8006afe:	189b      	adds	r3, r3, r2
 8006b00:	19db      	adds	r3, r3, r7
 8006b02:	2210      	movs	r2, #16
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e005      	b.n	8006b14 <UART_SetConfig+0x1c0>
 8006b08:	231b      	movs	r3, #27
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	2210      	movs	r2, #16
 8006b12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a61      	ldr	r2, [pc, #388]	; (8006ca0 <UART_SetConfig+0x34c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d000      	beq.n	8006b20 <UART_SetConfig+0x1cc>
 8006b1e:	e092      	b.n	8006c46 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b20:	231b      	movs	r3, #27
 8006b22:	2220      	movs	r2, #32
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	19db      	adds	r3, r3, r7
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d015      	beq.n	8006b5a <UART_SetConfig+0x206>
 8006b2e:	dc18      	bgt.n	8006b62 <UART_SetConfig+0x20e>
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d00d      	beq.n	8006b50 <UART_SetConfig+0x1fc>
 8006b34:	dc15      	bgt.n	8006b62 <UART_SetConfig+0x20e>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <UART_SetConfig+0x1ec>
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d005      	beq.n	8006b4a <UART_SetConfig+0x1f6>
 8006b3e:	e010      	b.n	8006b62 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b40:	f7fe fc6a 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8006b44:	0003      	movs	r3, r0
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b48:	e014      	b.n	8006b74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b4a:	4b5a      	ldr	r3, [pc, #360]	; (8006cb4 <UART_SetConfig+0x360>)
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b4e:	e011      	b.n	8006b74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b50:	f7fe fbd6 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8006b54:	0003      	movs	r3, r0
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b58:	e00c      	b.n	8006b74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b5a:	2380      	movs	r3, #128	; 0x80
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b60:	e008      	b.n	8006b74 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006b66:	231a      	movs	r3, #26
 8006b68:	2220      	movs	r2, #32
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	19db      	adds	r3, r3, r7
 8006b6e:	2201      	movs	r2, #1
 8006b70:	701a      	strb	r2, [r3, #0]
        break;
 8006b72:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d100      	bne.n	8006b7c <UART_SetConfig+0x228>
 8006b7a:	e147      	b.n	8006e0c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b80:	4b4d      	ldr	r3, [pc, #308]	; (8006cb8 <UART_SetConfig+0x364>)
 8006b82:	0052      	lsls	r2, r2, #1
 8006b84:	5ad3      	ldrh	r3, [r2, r3]
 8006b86:	0019      	movs	r1, r3
 8006b88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b8a:	f7f9 fad7 	bl	800013c <__udivsi3>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	0013      	movs	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d305      	bcc.n	8006bae <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d906      	bls.n	8006bbc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8006bae:	231a      	movs	r3, #26
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	19db      	adds	r3, r3, r7
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e127      	b.n	8006e0c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc8:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <UART_SetConfig+0x364>)
 8006bca:	0052      	lsls	r2, r2, #1
 8006bcc:	5ad3      	ldrh	r3, [r2, r3]
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	69b8      	ldr	r0, [r7, #24]
 8006bda:	69f9      	ldr	r1, [r7, #28]
 8006bdc:	f7f9 fc62 	bl	80004a4 <__aeabi_uldivmod>
 8006be0:	0002      	movs	r2, r0
 8006be2:	000b      	movs	r3, r1
 8006be4:	0e11      	lsrs	r1, r2, #24
 8006be6:	021d      	lsls	r5, r3, #8
 8006be8:	430d      	orrs	r5, r1
 8006bea:	0214      	lsls	r4, r2, #8
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68b8      	ldr	r0, [r7, #8]
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	1900      	adds	r0, r0, r4
 8006bfe:	4169      	adcs	r1, r5
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f7f9 fc49 	bl	80004a4 <__aeabi_uldivmod>
 8006c12:	0002      	movs	r2, r0
 8006c14:	000b      	movs	r3, r1
 8006c16:	0013      	movs	r3, r2
 8006c18:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1c:	23c0      	movs	r3, #192	; 0xc0
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d309      	bcc.n	8006c38 <UART_SetConfig+0x2e4>
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	035b      	lsls	r3, r3, #13
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d204      	bcs.n	8006c38 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e0e9      	b.n	8006e0c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006c38:	231a      	movs	r3, #26
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	19db      	adds	r3, r3, r7
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	e0e2      	b.n	8006e0c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d000      	beq.n	8006c54 <UART_SetConfig+0x300>
 8006c52:	e083      	b.n	8006d5c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006c54:	231b      	movs	r3, #27
 8006c56:	2220      	movs	r2, #32
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	19db      	adds	r3, r3, r7
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d015      	beq.n	8006c8e <UART_SetConfig+0x33a>
 8006c62:	dc2b      	bgt.n	8006cbc <UART_SetConfig+0x368>
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d00d      	beq.n	8006c84 <UART_SetConfig+0x330>
 8006c68:	dc28      	bgt.n	8006cbc <UART_SetConfig+0x368>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <UART_SetConfig+0x320>
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d005      	beq.n	8006c7e <UART_SetConfig+0x32a>
 8006c72:	e023      	b.n	8006cbc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c74:	f7fe fbd0 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8006c78:	0003      	movs	r3, r0
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c7c:	e027      	b.n	8006cce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <UART_SetConfig+0x360>)
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c82:	e024      	b.n	8006cce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c84:	f7fe fb3c 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c8c:	e01f      	b.n	8006cce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c94:	e01b      	b.n	8006cce <UART_SetConfig+0x37a>
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	cfff69f3 	.word	0xcfff69f3
 8006c9c:	ffffcfff 	.word	0xffffcfff
 8006ca0:	40008000 	.word	0x40008000
 8006ca4:	11fff4ff 	.word	0x11fff4ff
 8006ca8:	40013800 	.word	0x40013800
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40004400 	.word	0x40004400
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	0800a3e4 	.word	0x0800a3e4
      default:
        pclk = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006cc0:	231a      	movs	r3, #26
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	19db      	adds	r3, r3, r7
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
        break;
 8006ccc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d100      	bne.n	8006cd6 <UART_SetConfig+0x382>
 8006cd4:	e09a      	b.n	8006e0c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cda:	4b58      	ldr	r3, [pc, #352]	; (8006e3c <UART_SetConfig+0x4e8>)
 8006cdc:	0052      	lsls	r2, r2, #1
 8006cde:	5ad3      	ldrh	r3, [r2, r3]
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ce4:	f7f9 fa2a 	bl	800013c <__udivsi3>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	005a      	lsls	r2, r3, #1
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	18d2      	adds	r2, r2, r3
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	0010      	movs	r0, r2
 8006cfc:	f7f9 fa1e 	bl	800013c <__udivsi3>
 8006d00:	0003      	movs	r3, r0
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d921      	bls.n	8006d4e <UART_SetConfig+0x3fa>
 8006d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	025b      	lsls	r3, r3, #9
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d21c      	bcs.n	8006d4e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	200e      	movs	r0, #14
 8006d1a:	2420      	movs	r4, #32
 8006d1c:	1903      	adds	r3, r0, r4
 8006d1e:	19db      	adds	r3, r3, r7
 8006d20:	210f      	movs	r1, #15
 8006d22:	438a      	bics	r2, r1
 8006d24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	4013      	ands	r3, r2
 8006d30:	b299      	uxth	r1, r3
 8006d32:	1903      	adds	r3, r0, r4
 8006d34:	19db      	adds	r3, r3, r7
 8006d36:	1902      	adds	r2, r0, r4
 8006d38:	19d2      	adds	r2, r2, r7
 8006d3a:	8812      	ldrh	r2, [r2, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1902      	adds	r2, r0, r4
 8006d46:	19d2      	adds	r2, r2, r7
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	e05e      	b.n	8006e0c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4e:	231a      	movs	r3, #26
 8006d50:	2220      	movs	r2, #32
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	19db      	adds	r3, r3, r7
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e057      	b.n	8006e0c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5c:	231b      	movs	r3, #27
 8006d5e:	2220      	movs	r2, #32
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	19db      	adds	r3, r3, r7
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d015      	beq.n	8006d96 <UART_SetConfig+0x442>
 8006d6a:	dc18      	bgt.n	8006d9e <UART_SetConfig+0x44a>
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d00d      	beq.n	8006d8c <UART_SetConfig+0x438>
 8006d70:	dc15      	bgt.n	8006d9e <UART_SetConfig+0x44a>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <UART_SetConfig+0x428>
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d005      	beq.n	8006d86 <UART_SetConfig+0x432>
 8006d7a:	e010      	b.n	8006d9e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d7c:	f7fe fb4c 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8006d80:	0003      	movs	r3, r0
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d84:	e014      	b.n	8006db0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d86:	4b2e      	ldr	r3, [pc, #184]	; (8006e40 <UART_SetConfig+0x4ec>)
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d8a:	e011      	b.n	8006db0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8c:	f7fe fab8 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8006d90:	0003      	movs	r3, r0
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d94:	e00c      	b.n	8006db0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d96:	2380      	movs	r3, #128	; 0x80
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d9c:	e008      	b.n	8006db0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006da2:	231a      	movs	r3, #26
 8006da4:	2220      	movs	r2, #32
 8006da6:	189b      	adds	r3, r3, r2
 8006da8:	19db      	adds	r3, r3, r7
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
        break;
 8006dae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02a      	beq.n	8006e0c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dba:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <UART_SetConfig+0x4e8>)
 8006dbc:	0052      	lsls	r2, r2, #1
 8006dbe:	5ad3      	ldrh	r3, [r2, r3]
 8006dc0:	0019      	movs	r1, r3
 8006dc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006dc4:	f7f9 f9ba 	bl	800013c <__udivsi3>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	001a      	movs	r2, r3
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	18d2      	adds	r2, r2, r3
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	0019      	movs	r1, r3
 8006dda:	0010      	movs	r0, r2
 8006ddc:	f7f9 f9ae 	bl	800013c <__udivsi3>
 8006de0:	0003      	movs	r3, r0
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2b0f      	cmp	r3, #15
 8006de8:	d90a      	bls.n	8006e00 <UART_SetConfig+0x4ac>
 8006dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	025b      	lsls	r3, r3, #9
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d205      	bcs.n	8006e00 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60da      	str	r2, [r3, #12]
 8006dfe:	e005      	b.n	8006e0c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e00:	231a      	movs	r3, #26
 8006e02:	2220      	movs	r2, #32
 8006e04:	189b      	adds	r3, r3, r2
 8006e06:	19db      	adds	r3, r3, r7
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	226a      	movs	r2, #106	; 0x6a
 8006e10:	2101      	movs	r1, #1
 8006e12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	2268      	movs	r2, #104	; 0x68
 8006e18:	2101      	movs	r1, #1
 8006e1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2200      	movs	r2, #0
 8006e20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	2200      	movs	r2, #0
 8006e26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e28:	231a      	movs	r3, #26
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	189b      	adds	r3, r3, r2
 8006e2e:	19db      	adds	r3, r3, r7
 8006e30:	781b      	ldrb	r3, [r3, #0]
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b010      	add	sp, #64	; 0x40
 8006e38:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	0800a3e4 	.word	0x0800a3e4
 8006e40:	00f42400 	.word	0x00f42400

08006e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	2201      	movs	r2, #1
 8006e52:	4013      	ands	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	; (8006f88 <UART_AdvFeatureConfig+0x144>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	0019      	movs	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	2202      	movs	r2, #2
 8006e74:	4013      	ands	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a43      	ldr	r2, [pc, #268]	; (8006f8c <UART_AdvFeatureConfig+0x148>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	0019      	movs	r1, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	2204      	movs	r2, #4
 8006e96:	4013      	ands	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a3b      	ldr	r2, [pc, #236]	; (8006f90 <UART_AdvFeatureConfig+0x14c>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a34      	ldr	r2, [pc, #208]	; (8006f94 <UART_AdvFeatureConfig+0x150>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	2210      	movs	r2, #16
 8006eda:	4013      	ands	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <UART_AdvFeatureConfig+0x154>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	2220      	movs	r2, #32
 8006efc:	4013      	ands	r3, r2
 8006efe:	d00b      	beq.n	8006f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4a25      	ldr	r2, [pc, #148]	; (8006f9c <UART_AdvFeatureConfig+0x158>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	2240      	movs	r2, #64	; 0x40
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <UART_AdvFeatureConfig+0x15c>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	035b      	lsls	r3, r3, #13
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d10b      	bne.n	8006f5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <UART_AdvFeatureConfig+0x160>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	0019      	movs	r1, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	4013      	ands	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4a0e      	ldr	r2, [pc, #56]	; (8006fa8 <UART_AdvFeatureConfig+0x164>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	0019      	movs	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  }
}
 8006f80:	46c0      	nop			; (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b002      	add	sp, #8
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	fffdffff 	.word	0xfffdffff
 8006f8c:	fffeffff 	.word	0xfffeffff
 8006f90:	fffbffff 	.word	0xfffbffff
 8006f94:	ffff7fff 	.word	0xffff7fff
 8006f98:	ffffefff 	.word	0xffffefff
 8006f9c:	ffffdfff 	.word	0xffffdfff
 8006fa0:	ffefffff 	.word	0xffefffff
 8006fa4:	ff9fffff 	.word	0xff9fffff
 8006fa8:	fff7ffff 	.word	0xfff7ffff

08006fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2290      	movs	r2, #144	; 0x90
 8006fb8:	2100      	movs	r1, #0
 8006fba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fbc:	f7fc fc1c 	bl	80037f8 <HAL_GetTick>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2208      	movs	r2, #8
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d10c      	bne.n	8006fec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2280      	movs	r2, #128	; 0x80
 8006fd6:	0391      	lsls	r1, r2, #14
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <UART_CheckIdleState+0x98>)
 8006fdc:	9200      	str	r2, [sp, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f000 f832 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	1e03      	subs	r3, r0, #0
 8006fe6:	d001      	beq.n	8006fec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e026      	b.n	800703a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d10c      	bne.n	8007014 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2280      	movs	r2, #128	; 0x80
 8006ffe:	03d1      	lsls	r1, r2, #15
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <UART_CheckIdleState+0x98>)
 8007004:	9200      	str	r2, [sp, #0]
 8007006:	2200      	movs	r2, #0
 8007008:	f000 f81e 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 800700c:	1e03      	subs	r3, r0, #0
 800700e:	d001      	beq.n	8007014 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e012      	b.n	800703a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2288      	movs	r2, #136	; 0x88
 8007018:	2120      	movs	r1, #32
 800701a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	228c      	movs	r2, #140	; 0x8c
 8007020:	2120      	movs	r1, #32
 8007022:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2284      	movs	r2, #132	; 0x84
 8007034:	2100      	movs	r1, #0
 8007036:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b004      	add	sp, #16
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	01ffffff 	.word	0x01ffffff

08007048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b094      	sub	sp, #80	; 0x50
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	1dfb      	adds	r3, r7, #7
 8007056:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007058:	e0a7      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800705c:	3301      	adds	r3, #1
 800705e:	d100      	bne.n	8007062 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007060:	e0a3      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007062:	f7fc fbc9 	bl	80037f8 <HAL_GetTick>
 8007066:	0002      	movs	r2, r0
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <UART_WaitOnFlagUntilTimeout+0x30>
 8007072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13f      	bne.n	80070f8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007078:	f3ef 8310 	mrs	r3, PRIMASK
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
 8007082:	2301      	movs	r3, #1
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	f383 8810 	msr	PRIMASK, r3
}
 800708c:	46c0      	nop			; (mov r8, r8)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	494e      	ldr	r1, [pc, #312]	; (80071d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800709a:	400a      	ands	r2, r1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f383 8810 	msr	PRIMASK, r3
}
 80070a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070aa:	f3ef 8310 	mrs	r3, PRIMASK
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	643b      	str	r3, [r7, #64]	; 0x40
 80070b4:	2301      	movs	r3, #1
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	f383 8810 	msr	PRIMASK, r3
}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2101      	movs	r1, #1
 80070cc:	438a      	bics	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d6:	f383 8810 	msr	PRIMASK, r3
}
 80070da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2288      	movs	r2, #136	; 0x88
 80070e0:	2120      	movs	r1, #32
 80070e2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	228c      	movs	r2, #140	; 0x8c
 80070e8:	2120      	movs	r1, #32
 80070ea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2284      	movs	r2, #132	; 0x84
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e069      	b.n	80071cc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2204      	movs	r2, #4
 8007100:	4013      	ands	r3, r2
 8007102:	d052      	beq.n	80071aa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	401a      	ands	r2, r3
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	429a      	cmp	r2, r3
 8007116:	d148      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2280      	movs	r2, #128	; 0x80
 800711e:	0112      	lsls	r2, r2, #4
 8007120:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007122:	f3ef 8310 	mrs	r3, PRIMASK
 8007126:	613b      	str	r3, [r7, #16]
  return(result);
 8007128:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f383 8810 	msr	PRIMASK, r3
}
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4924      	ldr	r1, [pc, #144]	; (80071d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007144:	400a      	ands	r2, r1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f383 8810 	msr	PRIMASK, r3
}
 8007152:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007154:	f3ef 8310 	mrs	r3, PRIMASK
 8007158:	61fb      	str	r3, [r7, #28]
  return(result);
 800715a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715c:	64bb      	str	r3, [r7, #72]	; 0x48
 800715e:	2301      	movs	r3, #1
 8007160:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f383 8810 	msr	PRIMASK, r3
}
 8007168:	46c0      	nop			; (mov r8, r8)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2101      	movs	r1, #1
 8007176:	438a      	bics	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
 800717a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	f383 8810 	msr	PRIMASK, r3
}
 8007184:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2288      	movs	r2, #136	; 0x88
 800718a:	2120      	movs	r1, #32
 800718c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	228c      	movs	r2, #140	; 0x8c
 8007192:	2120      	movs	r1, #32
 8007194:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2290      	movs	r2, #144	; 0x90
 800719a:	2120      	movs	r1, #32
 800719c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2284      	movs	r2, #132	; 0x84
 80071a2:	2100      	movs	r1, #0
 80071a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e010      	b.n	80071cc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	4013      	ands	r3, r2
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	425a      	negs	r2, r3
 80071ba:	4153      	adcs	r3, r2
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	001a      	movs	r2, r3
 80071c0:	1dfb      	adds	r3, r7, #7
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d100      	bne.n	80071ca <UART_WaitOnFlagUntilTimeout+0x182>
 80071c8:	e747      	b.n	800705a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	0018      	movs	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b014      	add	sp, #80	; 0x50
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	fffffe5f 	.word	0xfffffe5f

080071d8 <VL53L1X_ClearInterrupt>:
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
	return status;
}

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	0002      	movs	r2, r0
 80071e0:	1dbb      	adds	r3, r7, #6
 80071e2:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80071e4:	240f      	movs	r4, #15
 80071e6:	193b      	adds	r3, r7, r4
 80071e8:	2200      	movs	r2, #0
 80071ea:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80071ec:	1dbb      	adds	r3, r7, #6
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	2201      	movs	r2, #1
 80071f2:	2186      	movs	r1, #134	; 0x86
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 f8ad 	bl	8007354 <VL53L1_WrByte>
 80071fa:	0003      	movs	r3, r0
 80071fc:	0019      	movs	r1, r3
 80071fe:	193b      	adds	r3, r7, r4
 8007200:	193a      	adds	r2, r7, r4
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	701a      	strb	r2, [r3, #0]
	return status;
 8007208:	193b      	adds	r3, r7, r4
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b25b      	sxtb	r3, r3
}
 800720e:	0018      	movs	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	b005      	add	sp, #20
 8007214:	bd90      	pop	{r4, r7, pc}

08007216 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8007216:	b5b0      	push	{r4, r5, r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	0002      	movs	r2, r0
 800721e:	6039      	str	r1, [r7, #0]
 8007220:	1dbb      	adds	r3, r7, #6
 8007222:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8007224:	240f      	movs	r4, #15
 8007226:	193b      	adds	r3, r7, r4
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800722c:	250e      	movs	r5, #14
 800722e:	197a      	adds	r2, r7, r5
 8007230:	1dbb      	adds	r3, r7, #6
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	2130      	movs	r1, #48	; 0x30
 8007236:	0018      	movs	r0, r3
 8007238:	f000 f8b6 	bl	80073a8 <VL53L1_RdByte>
 800723c:	0003      	movs	r3, r0
 800723e:	0019      	movs	r1, r3
 8007240:	0020      	movs	r0, r4
 8007242:	183b      	adds	r3, r7, r0
 8007244:	183a      	adds	r2, r7, r0
 8007246:	7812      	ldrb	r2, [r2, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 800724c:	197b      	adds	r3, r7, r5
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2210      	movs	r2, #16
 8007252:	4013      	ands	r3, r2
 8007254:	b2da      	uxtb	r2, r3
 8007256:	197b      	adds	r3, r7, r5
 8007258:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 800725a:	197b      	adds	r3, r7, r5
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	091b      	lsrs	r3, r3, #4
 8007260:	b2db      	uxtb	r3, r3
 8007262:	425a      	negs	r2, r3
 8007264:	4153      	adcs	r3, r2
 8007266:	b2db      	uxtb	r3, r3
 8007268:	001a      	movs	r2, r3
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	701a      	strb	r2, [r3, #0]
	return status;
 800726e:	183b      	adds	r3, r7, r0
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b25b      	sxtb	r3, r3
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b004      	add	sp, #16
 800727a:	bdb0      	pop	{r4, r5, r7, pc}

0800727c <VL53L1X_CheckForDataReady>:
	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
	return status;
}

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800727c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	0002      	movs	r2, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	1dbb      	adds	r3, r7, #6
 8007288:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800728a:	240f      	movs	r4, #15
 800728c:	193b      	adds	r3, r7, r4
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8007292:	250d      	movs	r5, #13
 8007294:	197a      	adds	r2, r7, r5
 8007296:	1dbb      	adds	r3, r7, #6
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	0011      	movs	r1, r2
 800729c:	0018      	movs	r0, r3
 800729e:	f7ff ffba 	bl	8007216 <VL53L1X_GetInterruptPolarity>
 80072a2:	0003      	movs	r3, r0
 80072a4:	0019      	movs	r1, r3
 80072a6:	193b      	adds	r3, r7, r4
 80072a8:	193a      	adds	r2, r7, r4
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80072b0:	260e      	movs	r6, #14
 80072b2:	19ba      	adds	r2, r7, r6
 80072b4:	1dbb      	adds	r3, r7, #6
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	2131      	movs	r1, #49	; 0x31
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 f874 	bl	80073a8 <VL53L1_RdByte>
 80072c0:	0003      	movs	r3, r0
 80072c2:	0019      	movs	r1, r3
 80072c4:	193b      	adds	r3, r7, r4
 80072c6:	193a      	adds	r2, r7, r4
 80072c8:	7812      	ldrb	r2, [r2, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80072ce:	193b      	adds	r3, r7, r4
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 80072d8:	19bb      	adds	r3, r7, r6
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	001a      	movs	r2, r3
 80072de:	2301      	movs	r3, #1
 80072e0:	4013      	ands	r3, r2
 80072e2:	197a      	adds	r2, r7, r5
 80072e4:	7812      	ldrb	r2, [r2, #0]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d103      	bne.n	80072f2 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e002      	b.n	80072f8 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80072f8:	230f      	movs	r3, #15
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b25b      	sxtb	r3, r3
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b005      	add	sp, #20
 8007306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007308 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8007308:	b5b0      	push	{r4, r5, r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	0002      	movs	r2, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	1dbb      	adds	r3, r7, #6
 8007314:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007316:	240f      	movs	r4, #15
 8007318:	193b      	adds	r3, r7, r4
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800731e:	250c      	movs	r5, #12
 8007320:	197a      	adds	r2, r7, r5
 8007322:	1dbb      	adds	r3, r7, #6
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	2196      	movs	r1, #150	; 0x96
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f861 	bl	80073f0 <VL53L1_RdWord>
 800732e:	0003      	movs	r3, r0
 8007330:	0019      	movs	r1, r3
 8007332:	0020      	movs	r0, r4
 8007334:	183b      	adds	r3, r7, r0
 8007336:	183a      	adds	r2, r7, r0
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800733e:	197b      	adds	r3, r7, r5
 8007340:	881a      	ldrh	r2, [r3, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	801a      	strh	r2, [r3, #0]
	return status;
 8007346:	183b      	adds	r3, r7, r0
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b25b      	sxtb	r3, r3
}
 800734c:	0018      	movs	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	b004      	add	sp, #16
 8007352:	bdb0      	pop	{r4, r5, r7, pc}

08007354 <VL53L1_WrByte>:
		return VL53L1__IO_ERROR;
	else
	return 0; // to be implemented
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b087      	sub	sp, #28
 8007358:	af04      	add	r7, sp, #16
 800735a:	0004      	movs	r4, r0
 800735c:	0008      	movs	r0, r1
 800735e:	0011      	movs	r1, r2
 8007360:	1dbb      	adds	r3, r7, #6
 8007362:	1c22      	adds	r2, r4, #0
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	1c02      	adds	r2, r0, #0
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	1cfb      	adds	r3, r7, #3
 800736e:	1c0a      	adds	r2, r1, #0
 8007370:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8007372:	1d3b      	adds	r3, r7, #4
 8007374:	881a      	ldrh	r2, [r3, #0]
 8007376:	1dbb      	adds	r3, r7, #6
 8007378:	8819      	ldrh	r1, [r3, #0]
 800737a:	480a      	ldr	r0, [pc, #40]	; (80073a4 <VL53L1_WrByte+0x50>)
 800737c:	2314      	movs	r3, #20
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	2301      	movs	r3, #1
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	1cfb      	adds	r3, r7, #3
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2302      	movs	r3, #2
 800738a:	f7fc fd75 	bl	8003e78 <HAL_I2C_Mem_Write>
 800738e:	1e03      	subs	r3, r0, #0
 8007390:	d002      	beq.n	8007398 <VL53L1_WrByte+0x44>
		return VL53L1__IO_ERROR;
 8007392:	230d      	movs	r3, #13
 8007394:	425b      	negs	r3, r3
 8007396:	e000      	b.n	800739a <VL53L1_WrByte+0x46>
	else
	return 0; // to be implemented
 8007398:	2300      	movs	r3, #0
}
 800739a:	0018      	movs	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	b003      	add	sp, #12
 80073a0:	bd90      	pop	{r4, r7, pc}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	2000026c 	.word	0x2000026c

080073a8 <VL53L1_RdByte>:
		return VL53L1__IO_ERROR;
	else
	 return 0; // to be implemented
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	603a      	str	r2, [r7, #0]
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	1c02      	adds	r2, r0, #0
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	1c0a      	adds	r2, r1, #0
 80073ba:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	881a      	ldrh	r2, [r3, #0]
 80073c0:	1dbb      	adds	r3, r7, #6
 80073c2:	8819      	ldrh	r1, [r3, #0]
 80073c4:	4809      	ldr	r0, [pc, #36]	; (80073ec <VL53L1_RdByte+0x44>)
 80073c6:	2314      	movs	r3, #20
 80073c8:	9302      	str	r3, [sp, #8]
 80073ca:	2301      	movs	r3, #1
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	2302      	movs	r3, #2
 80073d4:	f7fc fe7e 	bl	80040d4 <HAL_I2C_Mem_Read>
 80073d8:	1e03      	subs	r3, r0, #0
 80073da:	d002      	beq.n	80073e2 <VL53L1_RdByte+0x3a>
		return VL53L1__IO_ERROR;
 80073dc:	230d      	movs	r3, #13
 80073de:	425b      	negs	r3, r3
 80073e0:	e000      	b.n	80073e4 <VL53L1_RdByte+0x3c>
	else
	return 0; // to be implemented
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	0018      	movs	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b002      	add	sp, #8
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	2000026c 	.word	0x2000026c

080073f0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af04      	add	r7, sp, #16
 80073f6:	603a      	str	r2, [r7, #0]
 80073f8:	1dbb      	adds	r3, r7, #6
 80073fa:	1c02      	adds	r2, r0, #0
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	1c0a      	adds	r2, r1, #0
 8007402:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	1dbb      	adds	r3, r7, #6
 800740a:	8819      	ldrh	r1, [r3, #0]
 800740c:	4810      	ldr	r0, [pc, #64]	; (8007450 <VL53L1_RdWord+0x60>)
 800740e:	2314      	movs	r3, #20
 8007410:	9302      	str	r3, [sp, #8]
 8007412:	2302      	movs	r3, #2
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	2302      	movs	r3, #2
 800741c:	f7fc fe5a 	bl	80040d4 <HAL_I2C_Mem_Read>
 8007420:	1e03      	subs	r3, r0, #0
 8007422:	d002      	beq.n	800742a <VL53L1_RdWord+0x3a>
		return VL53L1__IO_ERROR;
 8007424:	230d      	movs	r3, #13
 8007426:	425b      	negs	r3, r3
 8007428:	e00e      	b.n	8007448 <VL53L1_RdWord+0x58>
	else {
		*data=__REVSH(*data);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b21a      	sxth	r2, r3
 8007430:	210e      	movs	r1, #14
 8007432:	187b      	adds	r3, r7, r1
 8007434:	801a      	strh	r2, [r3, #0]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8007436:	187b      	adds	r3, r7, r1
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	ba5b      	rev16	r3, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	b21b      	sxth	r3, r3
 8007440:	b29a      	uxth	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	801a      	strh	r2, [r3, #0]
	return 0; // to be implemented
 8007446:	2300      	movs	r3, #0
	}
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b004      	add	sp, #16
 800744e:	bd80      	pop	{r7, pc}
 8007450:	2000026c 	.word	0x2000026c

08007454 <__cvt>:
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007456:	001e      	movs	r6, r3
 8007458:	2300      	movs	r3, #0
 800745a:	0014      	movs	r4, r2
 800745c:	b08b      	sub	sp, #44	; 0x2c
 800745e:	429e      	cmp	r6, r3
 8007460:	da04      	bge.n	800746c <__cvt+0x18>
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	0609      	lsls	r1, r1, #24
 8007466:	1873      	adds	r3, r6, r1
 8007468:	001e      	movs	r6, r3
 800746a:	232d      	movs	r3, #45	; 0x2d
 800746c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800746e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	2320      	movs	r3, #32
 8007474:	2203      	movs	r2, #3
 8007476:	439f      	bics	r7, r3
 8007478:	2f46      	cmp	r7, #70	; 0x46
 800747a:	d007      	beq.n	800748c <__cvt+0x38>
 800747c:	003b      	movs	r3, r7
 800747e:	3b45      	subs	r3, #69	; 0x45
 8007480:	4259      	negs	r1, r3
 8007482:	414b      	adcs	r3, r1
 8007484:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007486:	3a01      	subs	r2, #1
 8007488:	18cb      	adds	r3, r1, r3
 800748a:	9310      	str	r3, [sp, #64]	; 0x40
 800748c:	ab09      	add	r3, sp, #36	; 0x24
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	ab08      	add	r3, sp, #32
 8007492:	9303      	str	r3, [sp, #12]
 8007494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007496:	9200      	str	r2, [sp, #0]
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800749c:	0022      	movs	r2, r4
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	0033      	movs	r3, r6
 80074a2:	f000 fea7 	bl	80081f4 <_dtoa_r>
 80074a6:	0005      	movs	r5, r0
 80074a8:	2f47      	cmp	r7, #71	; 0x47
 80074aa:	d102      	bne.n	80074b2 <__cvt+0x5e>
 80074ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ae:	07db      	lsls	r3, r3, #31
 80074b0:	d528      	bpl.n	8007504 <__cvt+0xb0>
 80074b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074b4:	18eb      	adds	r3, r5, r3
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	2f46      	cmp	r7, #70	; 0x46
 80074ba:	d114      	bne.n	80074e6 <__cvt+0x92>
 80074bc:	782b      	ldrb	r3, [r5, #0]
 80074be:	2b30      	cmp	r3, #48	; 0x30
 80074c0:	d10c      	bne.n	80074dc <__cvt+0x88>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	0020      	movs	r0, r4
 80074c8:	0031      	movs	r1, r6
 80074ca:	f7f8 ffbd 	bl	8000448 <__aeabi_dcmpeq>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d104      	bne.n	80074dc <__cvt+0x88>
 80074d2:	2301      	movs	r3, #1
 80074d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074de:	9a07      	ldr	r2, [sp, #28]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	18d3      	adds	r3, r2, r3
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	2200      	movs	r2, #0
 80074e8:	2300      	movs	r3, #0
 80074ea:	0020      	movs	r0, r4
 80074ec:	0031      	movs	r1, r6
 80074ee:	f7f8 ffab 	bl	8000448 <__aeabi_dcmpeq>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d001      	beq.n	80074fa <__cvt+0xa6>
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	9309      	str	r3, [sp, #36]	; 0x24
 80074fa:	2230      	movs	r2, #48	; 0x30
 80074fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fe:	9907      	ldr	r1, [sp, #28]
 8007500:	428b      	cmp	r3, r1
 8007502:	d306      	bcc.n	8007512 <__cvt+0xbe>
 8007504:	0028      	movs	r0, r5
 8007506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007508:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800750a:	1b5b      	subs	r3, r3, r5
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	b00b      	add	sp, #44	; 0x2c
 8007510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007512:	1c59      	adds	r1, r3, #1
 8007514:	9109      	str	r1, [sp, #36]	; 0x24
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e7f0      	b.n	80074fc <__cvt+0xa8>

0800751a <__exponent>:
 800751a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751c:	1c83      	adds	r3, r0, #2
 800751e:	b087      	sub	sp, #28
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	0005      	movs	r5, r0
 8007524:	000c      	movs	r4, r1
 8007526:	232b      	movs	r3, #43	; 0x2b
 8007528:	7002      	strb	r2, [r0, #0]
 800752a:	2900      	cmp	r1, #0
 800752c:	da01      	bge.n	8007532 <__exponent+0x18>
 800752e:	424c      	negs	r4, r1
 8007530:	3302      	adds	r3, #2
 8007532:	706b      	strb	r3, [r5, #1]
 8007534:	2c09      	cmp	r4, #9
 8007536:	dd2f      	ble.n	8007598 <__exponent+0x7e>
 8007538:	270a      	movs	r7, #10
 800753a:	ab04      	add	r3, sp, #16
 800753c:	1dde      	adds	r6, r3, #7
 800753e:	0020      	movs	r0, r4
 8007540:	0039      	movs	r1, r7
 8007542:	9601      	str	r6, [sp, #4]
 8007544:	f7f8 ff6a 	bl	800041c <__aeabi_idivmod>
 8007548:	3e01      	subs	r6, #1
 800754a:	3130      	adds	r1, #48	; 0x30
 800754c:	0020      	movs	r0, r4
 800754e:	7031      	strb	r1, [r6, #0]
 8007550:	0039      	movs	r1, r7
 8007552:	9402      	str	r4, [sp, #8]
 8007554:	f7f8 fe7c 	bl	8000250 <__divsi3>
 8007558:	9b02      	ldr	r3, [sp, #8]
 800755a:	0004      	movs	r4, r0
 800755c:	2b63      	cmp	r3, #99	; 0x63
 800755e:	dcee      	bgt.n	800753e <__exponent+0x24>
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	3430      	adds	r4, #48	; 0x30
 8007564:	1e9a      	subs	r2, r3, #2
 8007566:	0013      	movs	r3, r2
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	7014      	strb	r4, [r2, #0]
 800756c:	a804      	add	r0, sp, #16
 800756e:	3007      	adds	r0, #7
 8007570:	4298      	cmp	r0, r3
 8007572:	d80c      	bhi.n	800758e <__exponent+0x74>
 8007574:	2300      	movs	r3, #0
 8007576:	4282      	cmp	r2, r0
 8007578:	d804      	bhi.n	8007584 <__exponent+0x6a>
 800757a:	aa04      	add	r2, sp, #16
 800757c:	3309      	adds	r3, #9
 800757e:	189b      	adds	r3, r3, r2
 8007580:	9a01      	ldr	r2, [sp, #4]
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	9a03      	ldr	r2, [sp, #12]
 8007586:	18d3      	adds	r3, r2, r3
 8007588:	1b58      	subs	r0, r3, r5
 800758a:	b007      	add	sp, #28
 800758c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800758e:	7818      	ldrb	r0, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	7008      	strb	r0, [r1, #0]
 8007594:	3101      	adds	r1, #1
 8007596:	e7e9      	b.n	800756c <__exponent+0x52>
 8007598:	2330      	movs	r3, #48	; 0x30
 800759a:	3430      	adds	r4, #48	; 0x30
 800759c:	70ab      	strb	r3, [r5, #2]
 800759e:	70ec      	strb	r4, [r5, #3]
 80075a0:	1d2b      	adds	r3, r5, #4
 80075a2:	e7f1      	b.n	8007588 <__exponent+0x6e>

080075a4 <_printf_float>:
 80075a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a6:	b095      	sub	sp, #84	; 0x54
 80075a8:	000c      	movs	r4, r1
 80075aa:	9208      	str	r2, [sp, #32]
 80075ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80075ae:	9309      	str	r3, [sp, #36]	; 0x24
 80075b0:	0007      	movs	r7, r0
 80075b2:	f000 fd05 	bl	8007fc0 <_localeconv_r>
 80075b6:	6803      	ldr	r3, [r0, #0]
 80075b8:	0018      	movs	r0, r3
 80075ba:	930c      	str	r3, [sp, #48]	; 0x30
 80075bc:	f7f8 fda2 	bl	8000104 <strlen>
 80075c0:	2300      	movs	r3, #0
 80075c2:	9312      	str	r3, [sp, #72]	; 0x48
 80075c4:	7e23      	ldrb	r3, [r4, #24]
 80075c6:	2207      	movs	r2, #7
 80075c8:	930a      	str	r3, [sp, #40]	; 0x28
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	900d      	str	r0, [sp, #52]	; 0x34
 80075ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	05c9      	lsls	r1, r1, #23
 80075d6:	d547      	bpl.n	8007668 <_printf_float+0xc4>
 80075d8:	189b      	adds	r3, r3, r2
 80075da:	4393      	bics	r3, r2
 80075dc:	001a      	movs	r2, r3
 80075de:	3208      	adds	r2, #8
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	681e      	ldr	r6, [r3, #0]
 80075e4:	685d      	ldr	r5, [r3, #4]
 80075e6:	0032      	movs	r2, r6
 80075e8:	002b      	movs	r3, r5
 80075ea:	64a2      	str	r2, [r4, #72]	; 0x48
 80075ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 80075ee:	2201      	movs	r2, #1
 80075f0:	006b      	lsls	r3, r5, #1
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	930e      	str	r3, [sp, #56]	; 0x38
 80075f6:	0030      	movs	r0, r6
 80075f8:	4bab      	ldr	r3, [pc, #684]	; (80078a8 <_printf_float+0x304>)
 80075fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075fc:	4252      	negs	r2, r2
 80075fe:	f7fb f911 	bl	8002824 <__aeabi_dcmpun>
 8007602:	2800      	cmp	r0, #0
 8007604:	d132      	bne.n	800766c <_printf_float+0xc8>
 8007606:	2201      	movs	r2, #1
 8007608:	0030      	movs	r0, r6
 800760a:	4ba7      	ldr	r3, [pc, #668]	; (80078a8 <_printf_float+0x304>)
 800760c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800760e:	4252      	negs	r2, r2
 8007610:	f7f8 ff2a 	bl	8000468 <__aeabi_dcmple>
 8007614:	2800      	cmp	r0, #0
 8007616:	d129      	bne.n	800766c <_printf_float+0xc8>
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	0030      	movs	r0, r6
 800761e:	0029      	movs	r1, r5
 8007620:	f7f8 ff18 	bl	8000454 <__aeabi_dcmplt>
 8007624:	2800      	cmp	r0, #0
 8007626:	d003      	beq.n	8007630 <_printf_float+0x8c>
 8007628:	0023      	movs	r3, r4
 800762a:	222d      	movs	r2, #45	; 0x2d
 800762c:	3343      	adds	r3, #67	; 0x43
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007632:	4d9e      	ldr	r5, [pc, #632]	; (80078ac <_printf_float+0x308>)
 8007634:	2b47      	cmp	r3, #71	; 0x47
 8007636:	d900      	bls.n	800763a <_printf_float+0x96>
 8007638:	4d9d      	ldr	r5, [pc, #628]	; (80078b0 <_printf_float+0x30c>)
 800763a:	2303      	movs	r3, #3
 800763c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	439a      	bics	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	930b      	str	r3, [sp, #44]	; 0x2c
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	0021      	movs	r1, r4
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	0038      	movs	r0, r7
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	aa13      	add	r2, sp, #76	; 0x4c
 8007656:	f000 f9fb 	bl	8007a50 <_printf_common>
 800765a:	3001      	adds	r0, #1
 800765c:	d000      	beq.n	8007660 <_printf_float+0xbc>
 800765e:	e0a3      	b.n	80077a8 <_printf_float+0x204>
 8007660:	2001      	movs	r0, #1
 8007662:	4240      	negs	r0, r0
 8007664:	b015      	add	sp, #84	; 0x54
 8007666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007668:	3307      	adds	r3, #7
 800766a:	e7b6      	b.n	80075da <_printf_float+0x36>
 800766c:	0032      	movs	r2, r6
 800766e:	002b      	movs	r3, r5
 8007670:	0030      	movs	r0, r6
 8007672:	0029      	movs	r1, r5
 8007674:	f7fb f8d6 	bl	8002824 <__aeabi_dcmpun>
 8007678:	2800      	cmp	r0, #0
 800767a:	d00b      	beq.n	8007694 <_printf_float+0xf0>
 800767c:	2d00      	cmp	r5, #0
 800767e:	da03      	bge.n	8007688 <_printf_float+0xe4>
 8007680:	0023      	movs	r3, r4
 8007682:	222d      	movs	r2, #45	; 0x2d
 8007684:	3343      	adds	r3, #67	; 0x43
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768a:	4d8a      	ldr	r5, [pc, #552]	; (80078b4 <_printf_float+0x310>)
 800768c:	2b47      	cmp	r3, #71	; 0x47
 800768e:	d9d4      	bls.n	800763a <_printf_float+0x96>
 8007690:	4d89      	ldr	r5, [pc, #548]	; (80078b8 <_printf_float+0x314>)
 8007692:	e7d2      	b.n	800763a <_printf_float+0x96>
 8007694:	2220      	movs	r2, #32
 8007696:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	4391      	bics	r1, r2
 800769c:	910e      	str	r1, [sp, #56]	; 0x38
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	d14a      	bne.n	8007738 <_printf_float+0x194>
 80076a2:	3307      	adds	r3, #7
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	9206      	str	r2, [sp, #24]
 80076b2:	aa12      	add	r2, sp, #72	; 0x48
 80076b4:	9205      	str	r2, [sp, #20]
 80076b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	9204      	str	r2, [sp, #16]
 80076bc:	aa11      	add	r2, sp, #68	; 0x44
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	2223      	movs	r2, #35	; 0x23
 80076c2:	a908      	add	r1, sp, #32
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	1852      	adds	r2, r2, r1
 80076ca:	9202      	str	r2, [sp, #8]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	0032      	movs	r2, r6
 80076d0:	002b      	movs	r3, r5
 80076d2:	0038      	movs	r0, r7
 80076d4:	f7ff febe 	bl	8007454 <__cvt>
 80076d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076da:	0005      	movs	r5, r0
 80076dc:	2b47      	cmp	r3, #71	; 0x47
 80076de:	d109      	bne.n	80076f4 <_printf_float+0x150>
 80076e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e2:	1cda      	adds	r2, r3, #3
 80076e4:	db02      	blt.n	80076ec <_printf_float+0x148>
 80076e6:	6862      	ldr	r2, [r4, #4]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	dd49      	ble.n	8007780 <_printf_float+0x1dc>
 80076ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ee:	3b02      	subs	r3, #2
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	930a      	str	r3, [sp, #40]	; 0x28
 80076f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076f8:	2b65      	cmp	r3, #101	; 0x65
 80076fa:	d824      	bhi.n	8007746 <_printf_float+0x1a2>
 80076fc:	0020      	movs	r0, r4
 80076fe:	001a      	movs	r2, r3
 8007700:	3901      	subs	r1, #1
 8007702:	3050      	adds	r0, #80	; 0x50
 8007704:	9111      	str	r1, [sp, #68]	; 0x44
 8007706:	f7ff ff08 	bl	800751a <__exponent>
 800770a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800770c:	900b      	str	r0, [sp, #44]	; 0x2c
 800770e:	1813      	adds	r3, r2, r0
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2a01      	cmp	r2, #1
 8007714:	dc02      	bgt.n	800771c <_printf_float+0x178>
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	07d2      	lsls	r2, r2, #31
 800771a:	d501      	bpl.n	8007720 <_printf_float+0x17c>
 800771c:	3301      	adds	r3, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	2323      	movs	r3, #35	; 0x23
 8007722:	aa08      	add	r2, sp, #32
 8007724:	189b      	adds	r3, r3, r2
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d100      	bne.n	800772e <_printf_float+0x18a>
 800772c:	e78d      	b.n	800764a <_printf_float+0xa6>
 800772e:	0023      	movs	r3, r4
 8007730:	222d      	movs	r2, #45	; 0x2d
 8007732:	3343      	adds	r3, #67	; 0x43
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e788      	b.n	800764a <_printf_float+0xa6>
 8007738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800773a:	2a47      	cmp	r2, #71	; 0x47
 800773c:	d1b3      	bne.n	80076a6 <_printf_float+0x102>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1b1      	bne.n	80076a6 <_printf_float+0x102>
 8007742:	3301      	adds	r3, #1
 8007744:	e7ae      	b.n	80076a4 <_printf_float+0x100>
 8007746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007748:	2b66      	cmp	r3, #102	; 0x66
 800774a:	d11b      	bne.n	8007784 <_printf_float+0x1e0>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	2900      	cmp	r1, #0
 8007750:	dd09      	ble.n	8007766 <_printf_float+0x1c2>
 8007752:	6121      	str	r1, [r4, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <_printf_float+0x1ba>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	07d2      	lsls	r2, r2, #31
 800775c:	d50b      	bpl.n	8007776 <_printf_float+0x1d2>
 800775e:	3301      	adds	r3, #1
 8007760:	185b      	adds	r3, r3, r1
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	e007      	b.n	8007776 <_printf_float+0x1d2>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <_printf_float+0x1ce>
 800776a:	2201      	movs	r2, #1
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	4211      	tst	r1, r2
 8007770:	d000      	beq.n	8007774 <_printf_float+0x1d0>
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	6122      	str	r2, [r4, #16]
 8007776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007778:	65a3      	str	r3, [r4, #88]	; 0x58
 800777a:	2300      	movs	r3, #0
 800777c:	930b      	str	r3, [sp, #44]	; 0x2c
 800777e:	e7cf      	b.n	8007720 <_printf_float+0x17c>
 8007780:	2367      	movs	r3, #103	; 0x67
 8007782:	930a      	str	r3, [sp, #40]	; 0x28
 8007784:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007786:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007788:	4299      	cmp	r1, r3
 800778a:	db06      	blt.n	800779a <_printf_float+0x1f6>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	6121      	str	r1, [r4, #16]
 8007790:	07db      	lsls	r3, r3, #31
 8007792:	d5f0      	bpl.n	8007776 <_printf_float+0x1d2>
 8007794:	3101      	adds	r1, #1
 8007796:	6121      	str	r1, [r4, #16]
 8007798:	e7ed      	b.n	8007776 <_printf_float+0x1d2>
 800779a:	2201      	movs	r2, #1
 800779c:	2900      	cmp	r1, #0
 800779e:	dc01      	bgt.n	80077a4 <_printf_float+0x200>
 80077a0:	1892      	adds	r2, r2, r2
 80077a2:	1a52      	subs	r2, r2, r1
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	e7dc      	b.n	8007762 <_printf_float+0x1be>
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	0553      	lsls	r3, r2, #21
 80077ac:	d408      	bmi.n	80077c0 <_printf_float+0x21c>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	002a      	movs	r2, r5
 80077b2:	0038      	movs	r0, r7
 80077b4:	9908      	ldr	r1, [sp, #32]
 80077b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077b8:	47a8      	blx	r5
 80077ba:	3001      	adds	r0, #1
 80077bc:	d12a      	bne.n	8007814 <_printf_float+0x270>
 80077be:	e74f      	b.n	8007660 <_printf_float+0xbc>
 80077c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c2:	2b65      	cmp	r3, #101	; 0x65
 80077c4:	d800      	bhi.n	80077c8 <_printf_float+0x224>
 80077c6:	e0ec      	b.n	80079a2 <_printf_float+0x3fe>
 80077c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80077ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80077cc:	2200      	movs	r2, #0
 80077ce:	2300      	movs	r3, #0
 80077d0:	f7f8 fe3a 	bl	8000448 <__aeabi_dcmpeq>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d034      	beq.n	8007842 <_printf_float+0x29e>
 80077d8:	2301      	movs	r3, #1
 80077da:	0038      	movs	r0, r7
 80077dc:	4a37      	ldr	r2, [pc, #220]	; (80078bc <_printf_float+0x318>)
 80077de:	9908      	ldr	r1, [sp, #32]
 80077e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077e2:	47a8      	blx	r5
 80077e4:	3001      	adds	r0, #1
 80077e6:	d100      	bne.n	80077ea <_printf_float+0x246>
 80077e8:	e73a      	b.n	8007660 <_printf_float+0xbc>
 80077ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ee:	429a      	cmp	r2, r3
 80077f0:	db02      	blt.n	80077f8 <_printf_float+0x254>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	07db      	lsls	r3, r3, #31
 80077f6:	d50d      	bpl.n	8007814 <_printf_float+0x270>
 80077f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077fa:	0038      	movs	r0, r7
 80077fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007800:	9908      	ldr	r1, [sp, #32]
 8007802:	47a8      	blx	r5
 8007804:	2500      	movs	r5, #0
 8007806:	3001      	adds	r0, #1
 8007808:	d100      	bne.n	800780c <_printf_float+0x268>
 800780a:	e729      	b.n	8007660 <_printf_float+0xbc>
 800780c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800780e:	3b01      	subs	r3, #1
 8007810:	42ab      	cmp	r3, r5
 8007812:	dc0a      	bgt.n	800782a <_printf_float+0x286>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	079b      	lsls	r3, r3, #30
 8007818:	d500      	bpl.n	800781c <_printf_float+0x278>
 800781a:	e116      	b.n	8007a4a <_printf_float+0x4a6>
 800781c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800781e:	68e0      	ldr	r0, [r4, #12]
 8007820:	4298      	cmp	r0, r3
 8007822:	db00      	blt.n	8007826 <_printf_float+0x282>
 8007824:	e71e      	b.n	8007664 <_printf_float+0xc0>
 8007826:	0018      	movs	r0, r3
 8007828:	e71c      	b.n	8007664 <_printf_float+0xc0>
 800782a:	0022      	movs	r2, r4
 800782c:	2301      	movs	r3, #1
 800782e:	0038      	movs	r0, r7
 8007830:	9908      	ldr	r1, [sp, #32]
 8007832:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007834:	321a      	adds	r2, #26
 8007836:	47b0      	blx	r6
 8007838:	3001      	adds	r0, #1
 800783a:	d100      	bne.n	800783e <_printf_float+0x29a>
 800783c:	e710      	b.n	8007660 <_printf_float+0xbc>
 800783e:	3501      	adds	r5, #1
 8007840:	e7e4      	b.n	800780c <_printf_float+0x268>
 8007842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc3b      	bgt.n	80078c0 <_printf_float+0x31c>
 8007848:	2301      	movs	r3, #1
 800784a:	0038      	movs	r0, r7
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <_printf_float+0x318>)
 800784e:	9908      	ldr	r1, [sp, #32]
 8007850:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007852:	47b0      	blx	r6
 8007854:	3001      	adds	r0, #1
 8007856:	d100      	bne.n	800785a <_printf_float+0x2b6>
 8007858:	e702      	b.n	8007660 <_printf_float+0xbc>
 800785a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800785c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800785e:	4313      	orrs	r3, r2
 8007860:	d102      	bne.n	8007868 <_printf_float+0x2c4>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	07db      	lsls	r3, r3, #31
 8007866:	d5d5      	bpl.n	8007814 <_printf_float+0x270>
 8007868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786a:	0038      	movs	r0, r7
 800786c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786e:	9908      	ldr	r1, [sp, #32]
 8007870:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007872:	47b0      	blx	r6
 8007874:	2300      	movs	r3, #0
 8007876:	3001      	adds	r0, #1
 8007878:	d100      	bne.n	800787c <_printf_float+0x2d8>
 800787a:	e6f1      	b.n	8007660 <_printf_float+0xbc>
 800787c:	930a      	str	r3, [sp, #40]	; 0x28
 800787e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007882:	425b      	negs	r3, r3
 8007884:	4293      	cmp	r3, r2
 8007886:	dc01      	bgt.n	800788c <_printf_float+0x2e8>
 8007888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800788a:	e791      	b.n	80077b0 <_printf_float+0x20c>
 800788c:	0022      	movs	r2, r4
 800788e:	2301      	movs	r3, #1
 8007890:	0038      	movs	r0, r7
 8007892:	9908      	ldr	r1, [sp, #32]
 8007894:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007896:	321a      	adds	r2, #26
 8007898:	47b0      	blx	r6
 800789a:	3001      	adds	r0, #1
 800789c:	d100      	bne.n	80078a0 <_printf_float+0x2fc>
 800789e:	e6df      	b.n	8007660 <_printf_float+0xbc>
 80078a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a2:	3301      	adds	r3, #1
 80078a4:	e7ea      	b.n	800787c <_printf_float+0x2d8>
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	7fefffff 	.word	0x7fefffff
 80078ac:	0800a3fc 	.word	0x0800a3fc
 80078b0:	0800a400 	.word	0x0800a400
 80078b4:	0800a404 	.word	0x0800a404
 80078b8:	0800a408 	.word	0x0800a408
 80078bc:	0800a40c 	.word	0x0800a40c
 80078c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c4:	920a      	str	r2, [sp, #40]	; 0x28
 80078c6:	429a      	cmp	r2, r3
 80078c8:	dd00      	ble.n	80078cc <_printf_float+0x328>
 80078ca:	930a      	str	r3, [sp, #40]	; 0x28
 80078cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dc3d      	bgt.n	800794e <_printf_float+0x3aa>
 80078d2:	2300      	movs	r3, #0
 80078d4:	930e      	str	r3, [sp, #56]	; 0x38
 80078d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d8:	43db      	mvns	r3, r3
 80078da:	17db      	asrs	r3, r3, #31
 80078dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80078de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	4013      	ands	r3, r2
 80078e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ee:	4293      	cmp	r3, r2
 80078f0:	dc36      	bgt.n	8007960 <_printf_float+0x3bc>
 80078f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f6:	429a      	cmp	r2, r3
 80078f8:	db40      	blt.n	800797c <_printf_float+0x3d8>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	07db      	lsls	r3, r3, #31
 80078fe:	d43d      	bmi.n	800797c <_printf_float+0x3d8>
 8007900:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007902:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007906:	1af3      	subs	r3, r6, r3
 8007908:	1ab6      	subs	r6, r6, r2
 800790a:	429e      	cmp	r6, r3
 800790c:	dd00      	ble.n	8007910 <_printf_float+0x36c>
 800790e:	001e      	movs	r6, r3
 8007910:	2e00      	cmp	r6, #0
 8007912:	dc3c      	bgt.n	800798e <_printf_float+0x3ea>
 8007914:	2300      	movs	r3, #0
 8007916:	930a      	str	r3, [sp, #40]	; 0x28
 8007918:	43f3      	mvns	r3, r6
 800791a:	17db      	asrs	r3, r3, #31
 800791c:	930b      	str	r3, [sp, #44]	; 0x2c
 800791e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007926:	4032      	ands	r2, r6
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792c:	4293      	cmp	r3, r2
 800792e:	dc00      	bgt.n	8007932 <_printf_float+0x38e>
 8007930:	e770      	b.n	8007814 <_printf_float+0x270>
 8007932:	0022      	movs	r2, r4
 8007934:	2301      	movs	r3, #1
 8007936:	0038      	movs	r0, r7
 8007938:	9908      	ldr	r1, [sp, #32]
 800793a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800793c:	321a      	adds	r2, #26
 800793e:	47a8      	blx	r5
 8007940:	3001      	adds	r0, #1
 8007942:	d100      	bne.n	8007946 <_printf_float+0x3a2>
 8007944:	e68c      	b.n	8007660 <_printf_float+0xbc>
 8007946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007948:	3301      	adds	r3, #1
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	e7e7      	b.n	800791e <_printf_float+0x37a>
 800794e:	002a      	movs	r2, r5
 8007950:	0038      	movs	r0, r7
 8007952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007954:	9908      	ldr	r1, [sp, #32]
 8007956:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007958:	47b0      	blx	r6
 800795a:	3001      	adds	r0, #1
 800795c:	d1b9      	bne.n	80078d2 <_printf_float+0x32e>
 800795e:	e67f      	b.n	8007660 <_printf_float+0xbc>
 8007960:	0022      	movs	r2, r4
 8007962:	2301      	movs	r3, #1
 8007964:	0038      	movs	r0, r7
 8007966:	9908      	ldr	r1, [sp, #32]
 8007968:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800796a:	321a      	adds	r2, #26
 800796c:	47b0      	blx	r6
 800796e:	3001      	adds	r0, #1
 8007970:	d100      	bne.n	8007974 <_printf_float+0x3d0>
 8007972:	e675      	b.n	8007660 <_printf_float+0xbc>
 8007974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007976:	3301      	adds	r3, #1
 8007978:	930e      	str	r3, [sp, #56]	; 0x38
 800797a:	e7b0      	b.n	80078de <_printf_float+0x33a>
 800797c:	0038      	movs	r0, r7
 800797e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007982:	9908      	ldr	r1, [sp, #32]
 8007984:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007986:	47b0      	blx	r6
 8007988:	3001      	adds	r0, #1
 800798a:	d1b9      	bne.n	8007900 <_printf_float+0x35c>
 800798c:	e668      	b.n	8007660 <_printf_float+0xbc>
 800798e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007990:	0038      	movs	r0, r7
 8007992:	18ea      	adds	r2, r5, r3
 8007994:	9908      	ldr	r1, [sp, #32]
 8007996:	0033      	movs	r3, r6
 8007998:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800799a:	47a8      	blx	r5
 800799c:	3001      	adds	r0, #1
 800799e:	d1b9      	bne.n	8007914 <_printf_float+0x370>
 80079a0:	e65e      	b.n	8007660 <_printf_float+0xbc>
 80079a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	dc02      	bgt.n	80079ae <_printf_float+0x40a>
 80079a8:	2301      	movs	r3, #1
 80079aa:	421a      	tst	r2, r3
 80079ac:	d03a      	beq.n	8007a24 <_printf_float+0x480>
 80079ae:	2301      	movs	r3, #1
 80079b0:	002a      	movs	r2, r5
 80079b2:	0038      	movs	r0, r7
 80079b4:	9908      	ldr	r1, [sp, #32]
 80079b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079b8:	47b0      	blx	r6
 80079ba:	3001      	adds	r0, #1
 80079bc:	d100      	bne.n	80079c0 <_printf_float+0x41c>
 80079be:	e64f      	b.n	8007660 <_printf_float+0xbc>
 80079c0:	0038      	movs	r0, r7
 80079c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079c6:	9908      	ldr	r1, [sp, #32]
 80079c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80079ca:	47b0      	blx	r6
 80079cc:	3001      	adds	r0, #1
 80079ce:	d100      	bne.n	80079d2 <_printf_float+0x42e>
 80079d0:	e646      	b.n	8007660 <_printf_float+0xbc>
 80079d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80079d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80079d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	001e      	movs	r6, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	f7f8 fd33 	bl	8000448 <__aeabi_dcmpeq>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d11c      	bne.n	8007a20 <_printf_float+0x47c>
 80079e6:	0033      	movs	r3, r6
 80079e8:	1c6a      	adds	r2, r5, #1
 80079ea:	3b01      	subs	r3, #1
 80079ec:	0038      	movs	r0, r7
 80079ee:	9908      	ldr	r1, [sp, #32]
 80079f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079f2:	47a8      	blx	r5
 80079f4:	3001      	adds	r0, #1
 80079f6:	d10f      	bne.n	8007a18 <_printf_float+0x474>
 80079f8:	e632      	b.n	8007660 <_printf_float+0xbc>
 80079fa:	0022      	movs	r2, r4
 80079fc:	2301      	movs	r3, #1
 80079fe:	0038      	movs	r0, r7
 8007a00:	9908      	ldr	r1, [sp, #32]
 8007a02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007a04:	321a      	adds	r2, #26
 8007a06:	47b0      	blx	r6
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d100      	bne.n	8007a0e <_printf_float+0x46a>
 8007a0c:	e628      	b.n	8007660 <_printf_float+0xbc>
 8007a0e:	3501      	adds	r5, #1
 8007a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a12:	3b01      	subs	r3, #1
 8007a14:	42ab      	cmp	r3, r5
 8007a16:	dcf0      	bgt.n	80079fa <_printf_float+0x456>
 8007a18:	0022      	movs	r2, r4
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	3250      	adds	r2, #80	; 0x50
 8007a1e:	e6c8      	b.n	80077b2 <_printf_float+0x20e>
 8007a20:	2500      	movs	r5, #0
 8007a22:	e7f5      	b.n	8007a10 <_printf_float+0x46c>
 8007a24:	002a      	movs	r2, r5
 8007a26:	e7e1      	b.n	80079ec <_printf_float+0x448>
 8007a28:	0022      	movs	r2, r4
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	0038      	movs	r0, r7
 8007a2e:	9908      	ldr	r1, [sp, #32]
 8007a30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007a32:	3219      	adds	r2, #25
 8007a34:	47b0      	blx	r6
 8007a36:	3001      	adds	r0, #1
 8007a38:	d100      	bne.n	8007a3c <_printf_float+0x498>
 8007a3a:	e611      	b.n	8007660 <_printf_float+0xbc>
 8007a3c:	3501      	adds	r5, #1
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	dcef      	bgt.n	8007a28 <_printf_float+0x484>
 8007a48:	e6e8      	b.n	800781c <_printf_float+0x278>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	e7f7      	b.n	8007a3e <_printf_float+0x49a>
 8007a4e:	46c0      	nop			; (mov r8, r8)

08007a50 <_printf_common>:
 8007a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a52:	0016      	movs	r6, r2
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	688a      	ldr	r2, [r1, #8]
 8007a58:	690b      	ldr	r3, [r1, #16]
 8007a5a:	000c      	movs	r4, r1
 8007a5c:	9000      	str	r0, [sp, #0]
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	da00      	bge.n	8007a64 <_printf_common+0x14>
 8007a62:	0013      	movs	r3, r2
 8007a64:	0022      	movs	r2, r4
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	3243      	adds	r2, #67	; 0x43
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	d001      	beq.n	8007a74 <_printf_common+0x24>
 8007a70:	3301      	adds	r3, #1
 8007a72:	6033      	str	r3, [r6, #0]
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	069b      	lsls	r3, r3, #26
 8007a78:	d502      	bpl.n	8007a80 <_printf_common+0x30>
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	6822      	ldr	r2, [r4, #0]
 8007a82:	2306      	movs	r3, #6
 8007a84:	0015      	movs	r5, r2
 8007a86:	401d      	ands	r5, r3
 8007a88:	421a      	tst	r2, r3
 8007a8a:	d027      	beq.n	8007adc <_printf_common+0x8c>
 8007a8c:	0023      	movs	r3, r4
 8007a8e:	3343      	adds	r3, #67	; 0x43
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	1e5a      	subs	r2, r3, #1
 8007a94:	4193      	sbcs	r3, r2
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	0692      	lsls	r2, r2, #26
 8007a9a:	d430      	bmi.n	8007afe <_printf_common+0xae>
 8007a9c:	0022      	movs	r2, r4
 8007a9e:	9901      	ldr	r1, [sp, #4]
 8007aa0:	9800      	ldr	r0, [sp, #0]
 8007aa2:	9d08      	ldr	r5, [sp, #32]
 8007aa4:	3243      	adds	r2, #67	; 0x43
 8007aa6:	47a8      	blx	r5
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d025      	beq.n	8007af8 <_printf_common+0xa8>
 8007aac:	2206      	movs	r2, #6
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	2500      	movs	r5, #0
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d105      	bne.n	8007ac4 <_printf_common+0x74>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	68e5      	ldr	r5, [r4, #12]
 8007abc:	1aed      	subs	r5, r5, r3
 8007abe:	43eb      	mvns	r3, r5
 8007ac0:	17db      	asrs	r3, r3, #31
 8007ac2:	401d      	ands	r5, r3
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	6922      	ldr	r2, [r4, #16]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	dd01      	ble.n	8007ad0 <_printf_common+0x80>
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	18ed      	adds	r5, r5, r3
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42b5      	cmp	r5, r6
 8007ad4:	d120      	bne.n	8007b18 <_printf_common+0xc8>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e010      	b.n	8007afc <_printf_common+0xac>
 8007ada:	3501      	adds	r5, #1
 8007adc:	68e3      	ldr	r3, [r4, #12]
 8007ade:	6832      	ldr	r2, [r6, #0]
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	42ab      	cmp	r3, r5
 8007ae4:	ddd2      	ble.n	8007a8c <_printf_common+0x3c>
 8007ae6:	0022      	movs	r2, r4
 8007ae8:	2301      	movs	r3, #1
 8007aea:	9901      	ldr	r1, [sp, #4]
 8007aec:	9800      	ldr	r0, [sp, #0]
 8007aee:	9f08      	ldr	r7, [sp, #32]
 8007af0:	3219      	adds	r2, #25
 8007af2:	47b8      	blx	r7
 8007af4:	3001      	adds	r0, #1
 8007af6:	d1f0      	bne.n	8007ada <_printf_common+0x8a>
 8007af8:	2001      	movs	r0, #1
 8007afa:	4240      	negs	r0, r0
 8007afc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007afe:	2030      	movs	r0, #48	; 0x30
 8007b00:	18e1      	adds	r1, r4, r3
 8007b02:	3143      	adds	r1, #67	; 0x43
 8007b04:	7008      	strb	r0, [r1, #0]
 8007b06:	0021      	movs	r1, r4
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	3145      	adds	r1, #69	; 0x45
 8007b0c:	7809      	ldrb	r1, [r1, #0]
 8007b0e:	18a2      	adds	r2, r4, r2
 8007b10:	3243      	adds	r2, #67	; 0x43
 8007b12:	3302      	adds	r3, #2
 8007b14:	7011      	strb	r1, [r2, #0]
 8007b16:	e7c1      	b.n	8007a9c <_printf_common+0x4c>
 8007b18:	0022      	movs	r2, r4
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	9901      	ldr	r1, [sp, #4]
 8007b1e:	9800      	ldr	r0, [sp, #0]
 8007b20:	9f08      	ldr	r7, [sp, #32]
 8007b22:	321a      	adds	r2, #26
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	d0e6      	beq.n	8007af8 <_printf_common+0xa8>
 8007b2a:	3601      	adds	r6, #1
 8007b2c:	e7d1      	b.n	8007ad2 <_printf_common+0x82>
	...

08007b30 <_printf_i>:
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	b08b      	sub	sp, #44	; 0x2c
 8007b34:	9206      	str	r2, [sp, #24]
 8007b36:	000a      	movs	r2, r1
 8007b38:	3243      	adds	r2, #67	; 0x43
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	9005      	str	r0, [sp, #20]
 8007b3e:	9204      	str	r2, [sp, #16]
 8007b40:	7e0a      	ldrb	r2, [r1, #24]
 8007b42:	000c      	movs	r4, r1
 8007b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b46:	2a78      	cmp	r2, #120	; 0x78
 8007b48:	d809      	bhi.n	8007b5e <_printf_i+0x2e>
 8007b4a:	2a62      	cmp	r2, #98	; 0x62
 8007b4c:	d80b      	bhi.n	8007b66 <_printf_i+0x36>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d100      	bne.n	8007b54 <_printf_i+0x24>
 8007b52:	e0be      	b.n	8007cd2 <_printf_i+0x1a2>
 8007b54:	497c      	ldr	r1, [pc, #496]	; (8007d48 <_printf_i+0x218>)
 8007b56:	9103      	str	r1, [sp, #12]
 8007b58:	2a58      	cmp	r2, #88	; 0x58
 8007b5a:	d100      	bne.n	8007b5e <_printf_i+0x2e>
 8007b5c:	e093      	b.n	8007c86 <_printf_i+0x156>
 8007b5e:	0026      	movs	r6, r4
 8007b60:	3642      	adds	r6, #66	; 0x42
 8007b62:	7032      	strb	r2, [r6, #0]
 8007b64:	e022      	b.n	8007bac <_printf_i+0x7c>
 8007b66:	0010      	movs	r0, r2
 8007b68:	3863      	subs	r0, #99	; 0x63
 8007b6a:	2815      	cmp	r0, #21
 8007b6c:	d8f7      	bhi.n	8007b5e <_printf_i+0x2e>
 8007b6e:	f7f8 fadb 	bl	8000128 <__gnu_thumb1_case_shi>
 8007b72:	0016      	.short	0x0016
 8007b74:	fff6001f 	.word	0xfff6001f
 8007b78:	fff6fff6 	.word	0xfff6fff6
 8007b7c:	001ffff6 	.word	0x001ffff6
 8007b80:	fff6fff6 	.word	0xfff6fff6
 8007b84:	fff6fff6 	.word	0xfff6fff6
 8007b88:	003600a3 	.word	0x003600a3
 8007b8c:	fff60083 	.word	0xfff60083
 8007b90:	00b4fff6 	.word	0x00b4fff6
 8007b94:	0036fff6 	.word	0x0036fff6
 8007b98:	fff6fff6 	.word	0xfff6fff6
 8007b9c:	0087      	.short	0x0087
 8007b9e:	0026      	movs	r6, r4
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	3642      	adds	r6, #66	; 0x42
 8007ba4:	1d11      	adds	r1, r2, #4
 8007ba6:	6019      	str	r1, [r3, #0]
 8007ba8:	6813      	ldr	r3, [r2, #0]
 8007baa:	7033      	strb	r3, [r6, #0]
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0a2      	b.n	8007cf6 <_printf_i+0x1c6>
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	6809      	ldr	r1, [r1, #0]
 8007bb4:	1d02      	adds	r2, r0, #4
 8007bb6:	060d      	lsls	r5, r1, #24
 8007bb8:	d50b      	bpl.n	8007bd2 <_printf_i+0xa2>
 8007bba:	6805      	ldr	r5, [r0, #0]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	da03      	bge.n	8007bca <_printf_i+0x9a>
 8007bc2:	232d      	movs	r3, #45	; 0x2d
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	426d      	negs	r5, r5
 8007bc8:	7013      	strb	r3, [r2, #0]
 8007bca:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <_printf_i+0x218>)
 8007bcc:	270a      	movs	r7, #10
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	e01b      	b.n	8007c0a <_printf_i+0xda>
 8007bd2:	6805      	ldr	r5, [r0, #0]
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	0649      	lsls	r1, r1, #25
 8007bd8:	d5f1      	bpl.n	8007bbe <_printf_i+0x8e>
 8007bda:	b22d      	sxth	r5, r5
 8007bdc:	e7ef      	b.n	8007bbe <_printf_i+0x8e>
 8007bde:	680d      	ldr	r5, [r1, #0]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	1d08      	adds	r0, r1, #4
 8007be4:	6018      	str	r0, [r3, #0]
 8007be6:	062e      	lsls	r6, r5, #24
 8007be8:	d501      	bpl.n	8007bee <_printf_i+0xbe>
 8007bea:	680d      	ldr	r5, [r1, #0]
 8007bec:	e003      	b.n	8007bf6 <_printf_i+0xc6>
 8007bee:	066d      	lsls	r5, r5, #25
 8007bf0:	d5fb      	bpl.n	8007bea <_printf_i+0xba>
 8007bf2:	680d      	ldr	r5, [r1, #0]
 8007bf4:	b2ad      	uxth	r5, r5
 8007bf6:	4b54      	ldr	r3, [pc, #336]	; (8007d48 <_printf_i+0x218>)
 8007bf8:	2708      	movs	r7, #8
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	2a6f      	cmp	r2, #111	; 0x6f
 8007bfe:	d000      	beq.n	8007c02 <_printf_i+0xd2>
 8007c00:	3702      	adds	r7, #2
 8007c02:	0023      	movs	r3, r4
 8007c04:	2200      	movs	r2, #0
 8007c06:	3343      	adds	r3, #67	; 0x43
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	6863      	ldr	r3, [r4, #4]
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db03      	blt.n	8007c1a <_printf_i+0xea>
 8007c12:	2104      	movs	r1, #4
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	438a      	bics	r2, r1
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	d102      	bne.n	8007c24 <_printf_i+0xf4>
 8007c1e:	9e04      	ldr	r6, [sp, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00c      	beq.n	8007c3e <_printf_i+0x10e>
 8007c24:	9e04      	ldr	r6, [sp, #16]
 8007c26:	0028      	movs	r0, r5
 8007c28:	0039      	movs	r1, r7
 8007c2a:	f7f8 fb0d 	bl	8000248 <__aeabi_uidivmod>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	3e01      	subs	r6, #1
 8007c32:	5c5b      	ldrb	r3, [r3, r1]
 8007c34:	7033      	strb	r3, [r6, #0]
 8007c36:	002b      	movs	r3, r5
 8007c38:	0005      	movs	r5, r0
 8007c3a:	429f      	cmp	r7, r3
 8007c3c:	d9f3      	bls.n	8007c26 <_printf_i+0xf6>
 8007c3e:	2f08      	cmp	r7, #8
 8007c40:	d109      	bne.n	8007c56 <_printf_i+0x126>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	07db      	lsls	r3, r3, #31
 8007c46:	d506      	bpl.n	8007c56 <_printf_i+0x126>
 8007c48:	6862      	ldr	r2, [r4, #4]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	dc02      	bgt.n	8007c56 <_printf_i+0x126>
 8007c50:	2330      	movs	r3, #48	; 0x30
 8007c52:	3e01      	subs	r6, #1
 8007c54:	7033      	strb	r3, [r6, #0]
 8007c56:	9b04      	ldr	r3, [sp, #16]
 8007c58:	1b9b      	subs	r3, r3, r6
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	0021      	movs	r1, r4
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	9805      	ldr	r0, [sp, #20]
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	aa09      	add	r2, sp, #36	; 0x24
 8007c68:	f7ff fef2 	bl	8007a50 <_printf_common>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d147      	bne.n	8007d00 <_printf_i+0x1d0>
 8007c70:	2001      	movs	r0, #1
 8007c72:	4240      	negs	r0, r0
 8007c74:	b00b      	add	sp, #44	; 0x2c
 8007c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c78:	2220      	movs	r2, #32
 8007c7a:	6809      	ldr	r1, [r1, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	2278      	movs	r2, #120	; 0x78
 8007c82:	4932      	ldr	r1, [pc, #200]	; (8007d4c <_printf_i+0x21c>)
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	0021      	movs	r1, r4
 8007c88:	3145      	adds	r1, #69	; 0x45
 8007c8a:	700a      	strb	r2, [r1, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	c920      	ldmia	r1!, {r5}
 8007c92:	0610      	lsls	r0, r2, #24
 8007c94:	d402      	bmi.n	8007c9c <_printf_i+0x16c>
 8007c96:	0650      	lsls	r0, r2, #25
 8007c98:	d500      	bpl.n	8007c9c <_printf_i+0x16c>
 8007c9a:	b2ad      	uxth	r5, r5
 8007c9c:	6019      	str	r1, [r3, #0]
 8007c9e:	07d3      	lsls	r3, r2, #31
 8007ca0:	d502      	bpl.n	8007ca8 <_printf_i+0x178>
 8007ca2:	2320      	movs	r3, #32
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	2710      	movs	r7, #16
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	d1a9      	bne.n	8007c02 <_printf_i+0xd2>
 8007cae:	2220      	movs	r2, #32
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	4393      	bics	r3, r2
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	e7a4      	b.n	8007c02 <_printf_i+0xd2>
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	680d      	ldr	r5, [r1, #0]
 8007cbc:	1d10      	adds	r0, r2, #4
 8007cbe:	6949      	ldr	r1, [r1, #20]
 8007cc0:	6018      	str	r0, [r3, #0]
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	062e      	lsls	r6, r5, #24
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0x19c>
 8007cc8:	6019      	str	r1, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0x1a2>
 8007ccc:	066d      	lsls	r5, r5, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0x198>
 8007cd0:	8019      	strh	r1, [r3, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9e04      	ldr	r6, [sp, #16]
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	e7c0      	b.n	8007c5c <_printf_i+0x12c>
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	1d11      	adds	r1, r2, #4
 8007cde:	6019      	str	r1, [r3, #0]
 8007ce0:	6816      	ldr	r6, [r2, #0]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	0030      	movs	r0, r6
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	f000 f9e9 	bl	80080be <memchr>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d001      	beq.n	8007cf4 <_printf_i+0x1c4>
 8007cf0:	1b80      	subs	r0, r0, r6
 8007cf2:	6060      	str	r0, [r4, #4]
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9a04      	ldr	r2, [sp, #16]
 8007cfc:	7013      	strb	r3, [r2, #0]
 8007cfe:	e7ad      	b.n	8007c5c <_printf_i+0x12c>
 8007d00:	0032      	movs	r2, r6
 8007d02:	6923      	ldr	r3, [r4, #16]
 8007d04:	9906      	ldr	r1, [sp, #24]
 8007d06:	9805      	ldr	r0, [sp, #20]
 8007d08:	9d07      	ldr	r5, [sp, #28]
 8007d0a:	47a8      	blx	r5
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d0af      	beq.n	8007c70 <_printf_i+0x140>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	079b      	lsls	r3, r3, #30
 8007d14:	d415      	bmi.n	8007d42 <_printf_i+0x212>
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	68e0      	ldr	r0, [r4, #12]
 8007d1a:	4298      	cmp	r0, r3
 8007d1c:	daaa      	bge.n	8007c74 <_printf_i+0x144>
 8007d1e:	0018      	movs	r0, r3
 8007d20:	e7a8      	b.n	8007c74 <_printf_i+0x144>
 8007d22:	0022      	movs	r2, r4
 8007d24:	2301      	movs	r3, #1
 8007d26:	9906      	ldr	r1, [sp, #24]
 8007d28:	9805      	ldr	r0, [sp, #20]
 8007d2a:	9e07      	ldr	r6, [sp, #28]
 8007d2c:	3219      	adds	r2, #25
 8007d2e:	47b0      	blx	r6
 8007d30:	3001      	adds	r0, #1
 8007d32:	d09d      	beq.n	8007c70 <_printf_i+0x140>
 8007d34:	3501      	adds	r5, #1
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	dcf0      	bgt.n	8007d22 <_printf_i+0x1f2>
 8007d40:	e7e9      	b.n	8007d16 <_printf_i+0x1e6>
 8007d42:	2500      	movs	r5, #0
 8007d44:	e7f7      	b.n	8007d36 <_printf_i+0x206>
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	0800a40e 	.word	0x0800a40e
 8007d4c:	0800a41f 	.word	0x0800a41f

08007d50 <std>:
 8007d50:	2300      	movs	r3, #0
 8007d52:	b510      	push	{r4, lr}
 8007d54:	0004      	movs	r4, r0
 8007d56:	6003      	str	r3, [r0, #0]
 8007d58:	6043      	str	r3, [r0, #4]
 8007d5a:	6083      	str	r3, [r0, #8]
 8007d5c:	8181      	strh	r1, [r0, #12]
 8007d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d60:	81c2      	strh	r2, [r0, #14]
 8007d62:	6103      	str	r3, [r0, #16]
 8007d64:	6143      	str	r3, [r0, #20]
 8007d66:	6183      	str	r3, [r0, #24]
 8007d68:	0019      	movs	r1, r3
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	305c      	adds	r0, #92	; 0x5c
 8007d6e:	f000 f91f 	bl	8007fb0 <memset>
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <std+0x50>)
 8007d74:	6224      	str	r4, [r4, #32]
 8007d76:	6263      	str	r3, [r4, #36]	; 0x24
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <std+0x54>)
 8007d7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <std+0x58>)
 8007d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <std+0x5c>)
 8007d82:	6323      	str	r3, [r4, #48]	; 0x30
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <std+0x60>)
 8007d86:	429c      	cmp	r4, r3
 8007d88:	d005      	beq.n	8007d96 <std+0x46>
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <std+0x64>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d002      	beq.n	8007d96 <std+0x46>
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <std+0x68>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d103      	bne.n	8007d9e <std+0x4e>
 8007d96:	0020      	movs	r0, r4
 8007d98:	3058      	adds	r0, #88	; 0x58
 8007d9a:	f000 f98d 	bl	80080b8 <__retarget_lock_init_recursive>
 8007d9e:	bd10      	pop	{r4, pc}
 8007da0:	08007f19 	.word	0x08007f19
 8007da4:	08007f41 	.word	0x08007f41
 8007da8:	08007f79 	.word	0x08007f79
 8007dac:	08007fa5 	.word	0x08007fa5
 8007db0:	200003f4 	.word	0x200003f4
 8007db4:	2000045c 	.word	0x2000045c
 8007db8:	200004c4 	.word	0x200004c4

08007dbc <stdio_exit_handler>:
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <stdio_exit_handler+0x10>)
 8007dc0:	4903      	ldr	r1, [pc, #12]	; (8007dd0 <stdio_exit_handler+0x14>)
 8007dc2:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <stdio_exit_handler+0x18>)
 8007dc4:	f000 f86c 	bl	8007ea0 <_fwalk_sglue>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	20000038 	.word	0x20000038
 8007dd0:	08009b2d 	.word	0x08009b2d
 8007dd4:	20000044 	.word	0x20000044

08007dd8 <cleanup_stdio>:
 8007dd8:	6841      	ldr	r1, [r0, #4]
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <cleanup_stdio+0x30>)
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	0004      	movs	r4, r0
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d001      	beq.n	8007de8 <cleanup_stdio+0x10>
 8007de4:	f001 fea2 	bl	8009b2c <_fflush_r>
 8007de8:	68a1      	ldr	r1, [r4, #8]
 8007dea:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <cleanup_stdio+0x34>)
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <cleanup_stdio+0x1e>
 8007df0:	0020      	movs	r0, r4
 8007df2:	f001 fe9b 	bl	8009b2c <_fflush_r>
 8007df6:	68e1      	ldr	r1, [r4, #12]
 8007df8:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <cleanup_stdio+0x38>)
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d002      	beq.n	8007e04 <cleanup_stdio+0x2c>
 8007dfe:	0020      	movs	r0, r4
 8007e00:	f001 fe94 	bl	8009b2c <_fflush_r>
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	200003f4 	.word	0x200003f4
 8007e0c:	2000045c 	.word	0x2000045c
 8007e10:	200004c4 	.word	0x200004c4

08007e14 <global_stdio_init.part.0>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <global_stdio_init.part.0+0x28>)
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <global_stdio_init.part.0+0x2c>)
 8007e1a:	2104      	movs	r1, #4
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	4809      	ldr	r0, [pc, #36]	; (8007e44 <global_stdio_init.part.0+0x30>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	f7ff ff95 	bl	8007d50 <std>
 8007e26:	2201      	movs	r2, #1
 8007e28:	2109      	movs	r1, #9
 8007e2a:	4807      	ldr	r0, [pc, #28]	; (8007e48 <global_stdio_init.part.0+0x34>)
 8007e2c:	f7ff ff90 	bl	8007d50 <std>
 8007e30:	2202      	movs	r2, #2
 8007e32:	2112      	movs	r1, #18
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <global_stdio_init.part.0+0x38>)
 8007e36:	f7ff ff8b 	bl	8007d50 <std>
 8007e3a:	bd10      	pop	{r4, pc}
 8007e3c:	2000052c 	.word	0x2000052c
 8007e40:	08007dbd 	.word	0x08007dbd
 8007e44:	200003f4 	.word	0x200003f4
 8007e48:	2000045c 	.word	0x2000045c
 8007e4c:	200004c4 	.word	0x200004c4

08007e50 <__sfp_lock_acquire>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4802      	ldr	r0, [pc, #8]	; (8007e5c <__sfp_lock_acquire+0xc>)
 8007e54:	f000 f931 	bl	80080ba <__retarget_lock_acquire_recursive>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	20000535 	.word	0x20000535

08007e60 <__sfp_lock_release>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4802      	ldr	r0, [pc, #8]	; (8007e6c <__sfp_lock_release+0xc>)
 8007e64:	f000 f92a 	bl	80080bc <__retarget_lock_release_recursive>
 8007e68:	bd10      	pop	{r4, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	20000535 	.word	0x20000535

08007e70 <__sinit>:
 8007e70:	b510      	push	{r4, lr}
 8007e72:	0004      	movs	r4, r0
 8007e74:	f7ff ffec 	bl	8007e50 <__sfp_lock_acquire>
 8007e78:	6a23      	ldr	r3, [r4, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <__sinit+0x14>
 8007e7e:	f7ff ffef 	bl	8007e60 <__sfp_lock_release>
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <__sinit+0x28>)
 8007e86:	6223      	str	r3, [r4, #32]
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <__sinit+0x2c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1f6      	bne.n	8007e7e <__sinit+0xe>
 8007e90:	f7ff ffc0 	bl	8007e14 <global_stdio_init.part.0>
 8007e94:	e7f3      	b.n	8007e7e <__sinit+0xe>
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	08007dd9 	.word	0x08007dd9
 8007e9c:	2000052c 	.word	0x2000052c

08007ea0 <_fwalk_sglue>:
 8007ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea2:	0014      	movs	r4, r2
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	9000      	str	r0, [sp, #0]
 8007ea8:	9101      	str	r1, [sp, #4]
 8007eaa:	68a5      	ldr	r5, [r4, #8]
 8007eac:	6867      	ldr	r7, [r4, #4]
 8007eae:	3f01      	subs	r7, #1
 8007eb0:	d504      	bpl.n	8007ebc <_fwalk_sglue+0x1c>
 8007eb2:	6824      	ldr	r4, [r4, #0]
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	d1f8      	bne.n	8007eaa <_fwalk_sglue+0xa>
 8007eb8:	0030      	movs	r0, r6
 8007eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ebc:	89ab      	ldrh	r3, [r5, #12]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d908      	bls.n	8007ed4 <_fwalk_sglue+0x34>
 8007ec2:	220e      	movs	r2, #14
 8007ec4:	5eab      	ldrsh	r3, [r5, r2]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	d004      	beq.n	8007ed4 <_fwalk_sglue+0x34>
 8007eca:	0029      	movs	r1, r5
 8007ecc:	9800      	ldr	r0, [sp, #0]
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	4798      	blx	r3
 8007ed2:	4306      	orrs	r6, r0
 8007ed4:	3568      	adds	r5, #104	; 0x68
 8007ed6:	e7ea      	b.n	8007eae <_fwalk_sglue+0xe>

08007ed8 <siprintf>:
 8007ed8:	b40e      	push	{r1, r2, r3}
 8007eda:	b500      	push	{lr}
 8007edc:	490b      	ldr	r1, [pc, #44]	; (8007f0c <siprintf+0x34>)
 8007ede:	b09c      	sub	sp, #112	; 0x70
 8007ee0:	ab1d      	add	r3, sp, #116	; 0x74
 8007ee2:	9002      	str	r0, [sp, #8]
 8007ee4:	9006      	str	r0, [sp, #24]
 8007ee6:	9107      	str	r1, [sp, #28]
 8007ee8:	9104      	str	r1, [sp, #16]
 8007eea:	4809      	ldr	r0, [pc, #36]	; (8007f10 <siprintf+0x38>)
 8007eec:	4909      	ldr	r1, [pc, #36]	; (8007f14 <siprintf+0x3c>)
 8007eee:	cb04      	ldmia	r3!, {r2}
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	a902      	add	r1, sp, #8
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	f001 fc8e 	bl	8009818 <_svfiprintf_r>
 8007efc:	2200      	movs	r2, #0
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	b01c      	add	sp, #112	; 0x70
 8007f04:	bc08      	pop	{r3}
 8007f06:	b003      	add	sp, #12
 8007f08:	4718      	bx	r3
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	7fffffff 	.word	0x7fffffff
 8007f10:	20000090 	.word	0x20000090
 8007f14:	ffff0208 	.word	0xffff0208

08007f18 <__sread>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	000c      	movs	r4, r1
 8007f1c:	250e      	movs	r5, #14
 8007f1e:	5f49      	ldrsh	r1, [r1, r5]
 8007f20:	f000 f878 	bl	8008014 <_read_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	db03      	blt.n	8007f30 <__sread+0x18>
 8007f28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f2a:	181b      	adds	r3, r3, r0
 8007f2c:	6563      	str	r3, [r4, #84]	; 0x54
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	4a02      	ldr	r2, [pc, #8]	; (8007f3c <__sread+0x24>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	e7f9      	b.n	8007f2e <__sread+0x16>
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	ffffefff 	.word	0xffffefff

08007f40 <__swrite>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	001f      	movs	r7, r3
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	0005      	movs	r5, r0
 8007f48:	000c      	movs	r4, r1
 8007f4a:	0016      	movs	r6, r2
 8007f4c:	05db      	lsls	r3, r3, #23
 8007f4e:	d505      	bpl.n	8007f5c <__swrite+0x1c>
 8007f50:	230e      	movs	r3, #14
 8007f52:	5ec9      	ldrsh	r1, [r1, r3]
 8007f54:	2200      	movs	r2, #0
 8007f56:	2302      	movs	r3, #2
 8007f58:	f000 f848 	bl	8007fec <_lseek_r>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <__swrite+0x34>)
 8007f60:	0028      	movs	r0, r5
 8007f62:	4013      	ands	r3, r2
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	0032      	movs	r2, r6
 8007f68:	230e      	movs	r3, #14
 8007f6a:	5ee1      	ldrsh	r1, [r4, r3]
 8007f6c:	003b      	movs	r3, r7
 8007f6e:	f000 f865 	bl	800803c <_write_r>
 8007f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f74:	ffffefff 	.word	0xffffefff

08007f78 <__sseek>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	000c      	movs	r4, r1
 8007f7c:	250e      	movs	r5, #14
 8007f7e:	5f49      	ldrsh	r1, [r1, r5]
 8007f80:	f000 f834 	bl	8007fec <_lseek_r>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	1c42      	adds	r2, r0, #1
 8007f88:	d103      	bne.n	8007f92 <__sseek+0x1a>
 8007f8a:	4a05      	ldr	r2, [pc, #20]	; (8007fa0 <__sseek+0x28>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	2280      	movs	r2, #128	; 0x80
 8007f94:	0152      	lsls	r2, r2, #5
 8007f96:	4313      	orrs	r3, r2
 8007f98:	81a3      	strh	r3, [r4, #12]
 8007f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f9c:	e7f8      	b.n	8007f90 <__sseek+0x18>
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	ffffefff 	.word	0xffffefff

08007fa4 <__sclose>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	230e      	movs	r3, #14
 8007fa8:	5ec9      	ldrsh	r1, [r1, r3]
 8007faa:	f000 f80d 	bl	8007fc8 <_close_r>
 8007fae:	bd10      	pop	{r4, pc}

08007fb0 <memset>:
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	1882      	adds	r2, r0, r2
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d100      	bne.n	8007fba <memset+0xa>
 8007fb8:	4770      	bx	lr
 8007fba:	7019      	strb	r1, [r3, #0]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	e7f9      	b.n	8007fb4 <memset+0x4>

08007fc0 <_localeconv_r>:
 8007fc0:	4800      	ldr	r0, [pc, #0]	; (8007fc4 <_localeconv_r+0x4>)
 8007fc2:	4770      	bx	lr
 8007fc4:	20000184 	.word	0x20000184

08007fc8 <_close_r>:
 8007fc8:	2300      	movs	r3, #0
 8007fca:	b570      	push	{r4, r5, r6, lr}
 8007fcc:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_close_r+0x20>)
 8007fce:	0004      	movs	r4, r0
 8007fd0:	0008      	movs	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fb fb01 	bl	80035da <_close>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d103      	bne.n	8007fe4 <_close_r+0x1c>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d000      	beq.n	8007fe4 <_close_r+0x1c>
 8007fe2:	6023      	str	r3, [r4, #0]
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	20000530 	.word	0x20000530

08007fec <_lseek_r>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	0004      	movs	r4, r0
 8007ff0:	0008      	movs	r0, r1
 8007ff2:	0011      	movs	r1, r2
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4d05      	ldr	r5, [pc, #20]	; (8008010 <_lseek_r+0x24>)
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	f7fb fb0e 	bl	800361c <_lseek>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d103      	bne.n	800800c <_lseek_r+0x20>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d000      	beq.n	800800c <_lseek_r+0x20>
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	20000530 	.word	0x20000530

08008014 <_read_r>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	0004      	movs	r4, r0
 8008018:	0008      	movs	r0, r1
 800801a:	0011      	movs	r1, r2
 800801c:	001a      	movs	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	4d05      	ldr	r5, [pc, #20]	; (8008038 <_read_r+0x24>)
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f7fb faa0 	bl	8003568 <_read>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d103      	bne.n	8008034 <_read_r+0x20>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d000      	beq.n	8008034 <_read_r+0x20>
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	20000530 	.word	0x20000530

0800803c <_write_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	0004      	movs	r4, r0
 8008040:	0008      	movs	r0, r1
 8008042:	0011      	movs	r1, r2
 8008044:	001a      	movs	r2, r3
 8008046:	2300      	movs	r3, #0
 8008048:	4d05      	ldr	r5, [pc, #20]	; (8008060 <_write_r+0x24>)
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7fb faa9 	bl	80035a2 <_write>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d103      	bne.n	800805c <_write_r+0x20>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d000      	beq.n	800805c <_write_r+0x20>
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	20000530 	.word	0x20000530

08008064 <__errno>:
 8008064:	4b01      	ldr	r3, [pc, #4]	; (800806c <__errno+0x8>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	4770      	bx	lr
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	20000090 	.word	0x20000090

08008070 <__libc_init_array>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	2600      	movs	r6, #0
 8008074:	4c0c      	ldr	r4, [pc, #48]	; (80080a8 <__libc_init_array+0x38>)
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x3c>)
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	42a6      	cmp	r6, r4
 800807e:	d109      	bne.n	8008094 <__libc_init_array+0x24>
 8008080:	2600      	movs	r6, #0
 8008082:	f002 f923 	bl	800a2cc <_init>
 8008086:	4c0a      	ldr	r4, [pc, #40]	; (80080b0 <__libc_init_array+0x40>)
 8008088:	4d0a      	ldr	r5, [pc, #40]	; (80080b4 <__libc_init_array+0x44>)
 800808a:	1b64      	subs	r4, r4, r5
 800808c:	10a4      	asrs	r4, r4, #2
 800808e:	42a6      	cmp	r6, r4
 8008090:	d105      	bne.n	800809e <__libc_init_array+0x2e>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	00b3      	lsls	r3, r6, #2
 8008096:	58eb      	ldr	r3, [r5, r3]
 8008098:	4798      	blx	r3
 800809a:	3601      	adds	r6, #1
 800809c:	e7ee      	b.n	800807c <__libc_init_array+0xc>
 800809e:	00b3      	lsls	r3, r6, #2
 80080a0:	58eb      	ldr	r3, [r5, r3]
 80080a2:	4798      	blx	r3
 80080a4:	3601      	adds	r6, #1
 80080a6:	e7f2      	b.n	800808e <__libc_init_array+0x1e>
 80080a8:	0800a774 	.word	0x0800a774
 80080ac:	0800a774 	.word	0x0800a774
 80080b0:	0800a778 	.word	0x0800a778
 80080b4:	0800a774 	.word	0x0800a774

080080b8 <__retarget_lock_init_recursive>:
 80080b8:	4770      	bx	lr

080080ba <__retarget_lock_acquire_recursive>:
 80080ba:	4770      	bx	lr

080080bc <__retarget_lock_release_recursive>:
 80080bc:	4770      	bx	lr

080080be <memchr>:
 80080be:	b2c9      	uxtb	r1, r1
 80080c0:	1882      	adds	r2, r0, r2
 80080c2:	4290      	cmp	r0, r2
 80080c4:	d101      	bne.n	80080ca <memchr+0xc>
 80080c6:	2000      	movs	r0, #0
 80080c8:	4770      	bx	lr
 80080ca:	7803      	ldrb	r3, [r0, #0]
 80080cc:	428b      	cmp	r3, r1
 80080ce:	d0fb      	beq.n	80080c8 <memchr+0xa>
 80080d0:	3001      	adds	r0, #1
 80080d2:	e7f6      	b.n	80080c2 <memchr+0x4>

080080d4 <quorem>:
 80080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d6:	6902      	ldr	r2, [r0, #16]
 80080d8:	690b      	ldr	r3, [r1, #16]
 80080da:	b089      	sub	sp, #36	; 0x24
 80080dc:	0007      	movs	r7, r0
 80080de:	9104      	str	r1, [sp, #16]
 80080e0:	2000      	movs	r0, #0
 80080e2:	429a      	cmp	r2, r3
 80080e4:	db69      	blt.n	80081ba <quorem+0xe6>
 80080e6:	3b01      	subs	r3, #1
 80080e8:	009c      	lsls	r4, r3, #2
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	000b      	movs	r3, r1
 80080ee:	3314      	adds	r3, #20
 80080f0:	9306      	str	r3, [sp, #24]
 80080f2:	191b      	adds	r3, r3, r4
 80080f4:	9305      	str	r3, [sp, #20]
 80080f6:	003b      	movs	r3, r7
 80080f8:	3314      	adds	r3, #20
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	191c      	adds	r4, r3, r4
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	6826      	ldr	r6, [r4, #0]
 8008102:	681d      	ldr	r5, [r3, #0]
 8008104:	0030      	movs	r0, r6
 8008106:	3501      	adds	r5, #1
 8008108:	0029      	movs	r1, r5
 800810a:	f7f8 f817 	bl	800013c <__udivsi3>
 800810e:	9002      	str	r0, [sp, #8]
 8008110:	42ae      	cmp	r6, r5
 8008112:	d329      	bcc.n	8008168 <quorem+0x94>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	2600      	movs	r6, #0
 8008118:	469c      	mov	ip, r3
 800811a:	9d03      	ldr	r5, [sp, #12]
 800811c:	9606      	str	r6, [sp, #24]
 800811e:	4662      	mov	r2, ip
 8008120:	ca08      	ldmia	r2!, {r3}
 8008122:	6828      	ldr	r0, [r5, #0]
 8008124:	4694      	mov	ip, r2
 8008126:	9a02      	ldr	r2, [sp, #8]
 8008128:	b299      	uxth	r1, r3
 800812a:	4351      	muls	r1, r2
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	4353      	muls	r3, r2
 8008130:	1989      	adds	r1, r1, r6
 8008132:	0c0a      	lsrs	r2, r1, #16
 8008134:	189b      	adds	r3, r3, r2
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	0c1e      	lsrs	r6, r3, #16
 800813a:	9b06      	ldr	r3, [sp, #24]
 800813c:	b282      	uxth	r2, r0
 800813e:	18d2      	adds	r2, r2, r3
 8008140:	466b      	mov	r3, sp
 8008142:	b289      	uxth	r1, r1
 8008144:	8b9b      	ldrh	r3, [r3, #28]
 8008146:	1a52      	subs	r2, r2, r1
 8008148:	0c01      	lsrs	r1, r0, #16
 800814a:	1ac9      	subs	r1, r1, r3
 800814c:	1413      	asrs	r3, r2, #16
 800814e:	18cb      	adds	r3, r1, r3
 8008150:	1419      	asrs	r1, r3, #16
 8008152:	b292      	uxth	r2, r2
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	4313      	orrs	r3, r2
 8008158:	c508      	stmia	r5!, {r3}
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	9106      	str	r1, [sp, #24]
 800815e:	4563      	cmp	r3, ip
 8008160:	d2dd      	bcs.n	800811e <quorem+0x4a>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d030      	beq.n	80081ca <quorem+0xf6>
 8008168:	0038      	movs	r0, r7
 800816a:	9904      	ldr	r1, [sp, #16]
 800816c:	f001 f9de 	bl	800952c <__mcmp>
 8008170:	2800      	cmp	r0, #0
 8008172:	db21      	blt.n	80081b8 <quorem+0xe4>
 8008174:	0038      	movs	r0, r7
 8008176:	2600      	movs	r6, #0
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	9c04      	ldr	r4, [sp, #16]
 800817c:	3301      	adds	r3, #1
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	3014      	adds	r0, #20
 8008182:	3414      	adds	r4, #20
 8008184:	6803      	ldr	r3, [r0, #0]
 8008186:	cc02      	ldmia	r4!, {r1}
 8008188:	b29d      	uxth	r5, r3
 800818a:	19ad      	adds	r5, r5, r6
 800818c:	b28a      	uxth	r2, r1
 800818e:	1aaa      	subs	r2, r5, r2
 8008190:	0c09      	lsrs	r1, r1, #16
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	1a5b      	subs	r3, r3, r1
 8008196:	1411      	asrs	r1, r2, #16
 8008198:	185b      	adds	r3, r3, r1
 800819a:	141e      	asrs	r6, r3, #16
 800819c:	b292      	uxth	r2, r2
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	4313      	orrs	r3, r2
 80081a2:	c008      	stmia	r0!, {r3}
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	d2ec      	bcs.n	8008184 <quorem+0xb0>
 80081aa:	9b01      	ldr	r3, [sp, #4]
 80081ac:	9a03      	ldr	r2, [sp, #12]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	18d3      	adds	r3, r2, r3
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	d015      	beq.n	80081e4 <quorem+0x110>
 80081b8:	9802      	ldr	r0, [sp, #8]
 80081ba:	b009      	add	sp, #36	; 0x24
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <quorem+0xfe>
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	3c04      	subs	r4, #4
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	d3f5      	bcc.n	80081be <quorem+0xea>
 80081d2:	9b01      	ldr	r3, [sp, #4]
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	e7c7      	b.n	8008168 <quorem+0x94>
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d106      	bne.n	80081ec <quorem+0x118>
 80081de:	9a01      	ldr	r2, [sp, #4]
 80081e0:	3a01      	subs	r2, #1
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	9a03      	ldr	r2, [sp, #12]
 80081e6:	3b04      	subs	r3, #4
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3f5      	bcc.n	80081d8 <quorem+0x104>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e7e2      	b.n	80081b8 <quorem+0xe4>
	...

080081f4 <_dtoa_r>:
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	0014      	movs	r4, r2
 80081f8:	001d      	movs	r5, r3
 80081fa:	69c6      	ldr	r6, [r0, #28]
 80081fc:	b09d      	sub	sp, #116	; 0x74
 80081fe:	9408      	str	r4, [sp, #32]
 8008200:	9509      	str	r5, [sp, #36]	; 0x24
 8008202:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008204:	9004      	str	r0, [sp, #16]
 8008206:	2e00      	cmp	r6, #0
 8008208:	d10f      	bne.n	800822a <_dtoa_r+0x36>
 800820a:	2010      	movs	r0, #16
 800820c:	f000 fe4a 	bl	8008ea4 <malloc>
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	1e02      	subs	r2, r0, #0
 8008214:	61d8      	str	r0, [r3, #28]
 8008216:	d104      	bne.n	8008222 <_dtoa_r+0x2e>
 8008218:	21ef      	movs	r1, #239	; 0xef
 800821a:	4bc6      	ldr	r3, [pc, #792]	; (8008534 <_dtoa_r+0x340>)
 800821c:	48c6      	ldr	r0, [pc, #792]	; (8008538 <_dtoa_r+0x344>)
 800821e:	f001 fcdf 	bl	8009be0 <__assert_func>
 8008222:	6046      	str	r6, [r0, #4]
 8008224:	6086      	str	r6, [r0, #8]
 8008226:	6006      	str	r6, [r0, #0]
 8008228:	60c6      	str	r6, [r0, #12]
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	2900      	cmp	r1, #0
 8008232:	d00b      	beq.n	800824c <_dtoa_r+0x58>
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	2301      	movs	r3, #1
 8008238:	4093      	lsls	r3, r2
 800823a:	604a      	str	r2, [r1, #4]
 800823c:	608b      	str	r3, [r1, #8]
 800823e:	9804      	ldr	r0, [sp, #16]
 8008240:	f000 ff32 	bl	80090a8 <_Bfree>
 8008244:	2200      	movs	r2, #0
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	2d00      	cmp	r5, #0
 800824e:	da1e      	bge.n	800828e <_dtoa_r+0x9a>
 8008250:	2301      	movs	r3, #1
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	006b      	lsls	r3, r5, #1
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800825c:	4bb7      	ldr	r3, [pc, #732]	; (800853c <_dtoa_r+0x348>)
 800825e:	4ab7      	ldr	r2, [pc, #732]	; (800853c <_dtoa_r+0x348>)
 8008260:	403b      	ands	r3, r7
 8008262:	4293      	cmp	r3, r2
 8008264:	d116      	bne.n	8008294 <_dtoa_r+0xa0>
 8008266:	4bb6      	ldr	r3, [pc, #728]	; (8008540 <_dtoa_r+0x34c>)
 8008268:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	033b      	lsls	r3, r7, #12
 800826e:	0b1b      	lsrs	r3, r3, #12
 8008270:	4323      	orrs	r3, r4
 8008272:	d101      	bne.n	8008278 <_dtoa_r+0x84>
 8008274:	f000 fdb5 	bl	8008de2 <_dtoa_r+0xbee>
 8008278:	4bb2      	ldr	r3, [pc, #712]	; (8008544 <_dtoa_r+0x350>)
 800827a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800827c:	9306      	str	r3, [sp, #24]
 800827e:	2a00      	cmp	r2, #0
 8008280:	d002      	beq.n	8008288 <_dtoa_r+0x94>
 8008282:	4bb1      	ldr	r3, [pc, #708]	; (8008548 <_dtoa_r+0x354>)
 8008284:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	9806      	ldr	r0, [sp, #24]
 800828a:	b01d      	add	sp, #116	; 0x74
 800828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828e:	2300      	movs	r3, #0
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	e7e2      	b.n	800825a <_dtoa_r+0x66>
 8008294:	9a08      	ldr	r2, [sp, #32]
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	9210      	str	r2, [sp, #64]	; 0x40
 800829a:	9311      	str	r3, [sp, #68]	; 0x44
 800829c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800829e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 f8d0 	bl	8000448 <__aeabi_dcmpeq>
 80082a8:	1e06      	subs	r6, r0, #0
 80082aa:	d009      	beq.n	80082c0 <_dtoa_r+0xcc>
 80082ac:	2301      	movs	r3, #1
 80082ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4ba6      	ldr	r3, [pc, #664]	; (800854c <_dtoa_r+0x358>)
 80082b4:	9306      	str	r3, [sp, #24]
 80082b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0e5      	beq.n	8008288 <_dtoa_r+0x94>
 80082bc:	4ba4      	ldr	r3, [pc, #656]	; (8008550 <_dtoa_r+0x35c>)
 80082be:	e7e1      	b.n	8008284 <_dtoa_r+0x90>
 80082c0:	ab1a      	add	r3, sp, #104	; 0x68
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	9804      	ldr	r0, [sp, #16]
 80082ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ce:	f001 f9e1 	bl	8009694 <__d2b>
 80082d2:	007a      	lsls	r2, r7, #1
 80082d4:	9005      	str	r0, [sp, #20]
 80082d6:	0d52      	lsrs	r2, r2, #21
 80082d8:	d100      	bne.n	80082dc <_dtoa_r+0xe8>
 80082da:	e07b      	b.n	80083d4 <_dtoa_r+0x1e0>
 80082dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082de:	9617      	str	r6, [sp, #92]	; 0x5c
 80082e0:	0319      	lsls	r1, r3, #12
 80082e2:	4b9c      	ldr	r3, [pc, #624]	; (8008554 <_dtoa_r+0x360>)
 80082e4:	0b09      	lsrs	r1, r1, #12
 80082e6:	430b      	orrs	r3, r1
 80082e8:	499b      	ldr	r1, [pc, #620]	; (8008558 <_dtoa_r+0x364>)
 80082ea:	1857      	adds	r7, r2, r1
 80082ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082f0:	0019      	movs	r1, r3
 80082f2:	2200      	movs	r2, #0
 80082f4:	4b99      	ldr	r3, [pc, #612]	; (800855c <_dtoa_r+0x368>)
 80082f6:	f7f9 ff13 	bl	8002120 <__aeabi_dsub>
 80082fa:	4a99      	ldr	r2, [pc, #612]	; (8008560 <_dtoa_r+0x36c>)
 80082fc:	4b99      	ldr	r3, [pc, #612]	; (8008564 <_dtoa_r+0x370>)
 80082fe:	f7f9 fc4d 	bl	8001b9c <__aeabi_dmul>
 8008302:	4a99      	ldr	r2, [pc, #612]	; (8008568 <_dtoa_r+0x374>)
 8008304:	4b99      	ldr	r3, [pc, #612]	; (800856c <_dtoa_r+0x378>)
 8008306:	f7f8 fcef 	bl	8000ce8 <__aeabi_dadd>
 800830a:	0004      	movs	r4, r0
 800830c:	0038      	movs	r0, r7
 800830e:	000d      	movs	r5, r1
 8008310:	f7fa fadc 	bl	80028cc <__aeabi_i2d>
 8008314:	4a96      	ldr	r2, [pc, #600]	; (8008570 <_dtoa_r+0x37c>)
 8008316:	4b97      	ldr	r3, [pc, #604]	; (8008574 <_dtoa_r+0x380>)
 8008318:	f7f9 fc40 	bl	8001b9c <__aeabi_dmul>
 800831c:	0002      	movs	r2, r0
 800831e:	000b      	movs	r3, r1
 8008320:	0020      	movs	r0, r4
 8008322:	0029      	movs	r1, r5
 8008324:	f7f8 fce0 	bl	8000ce8 <__aeabi_dadd>
 8008328:	0004      	movs	r4, r0
 800832a:	000d      	movs	r5, r1
 800832c:	f7fa fa98 	bl	8002860 <__aeabi_d2iz>
 8008330:	2200      	movs	r2, #0
 8008332:	9003      	str	r0, [sp, #12]
 8008334:	2300      	movs	r3, #0
 8008336:	0020      	movs	r0, r4
 8008338:	0029      	movs	r1, r5
 800833a:	f7f8 f88b 	bl	8000454 <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	d00b      	beq.n	800835a <_dtoa_r+0x166>
 8008342:	9803      	ldr	r0, [sp, #12]
 8008344:	f7fa fac2 	bl	80028cc <__aeabi_i2d>
 8008348:	002b      	movs	r3, r5
 800834a:	0022      	movs	r2, r4
 800834c:	f7f8 f87c 	bl	8000448 <__aeabi_dcmpeq>
 8008350:	4243      	negs	r3, r0
 8008352:	4158      	adcs	r0, r3
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1a1b      	subs	r3, r3, r0
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	2301      	movs	r3, #1
 800835c:	9316      	str	r3, [sp, #88]	; 0x58
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	2b16      	cmp	r3, #22
 8008362:	d810      	bhi.n	8008386 <_dtoa_r+0x192>
 8008364:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008366:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008368:	9a03      	ldr	r2, [sp, #12]
 800836a:	4b83      	ldr	r3, [pc, #524]	; (8008578 <_dtoa_r+0x384>)
 800836c:	00d2      	lsls	r2, r2, #3
 800836e:	189b      	adds	r3, r3, r2
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f7f8 f86e 	bl	8000454 <__aeabi_dcmplt>
 8008378:	2800      	cmp	r0, #0
 800837a:	d047      	beq.n	800840c <_dtoa_r+0x218>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	9303      	str	r3, [sp, #12]
 8008382:	2300      	movs	r3, #0
 8008384:	9316      	str	r3, [sp, #88]	; 0x58
 8008386:	2200      	movs	r2, #0
 8008388:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800838a:	920a      	str	r2, [sp, #40]	; 0x28
 800838c:	1bdb      	subs	r3, r3, r7
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	d53e      	bpl.n	8008410 <_dtoa_r+0x21c>
 8008392:	2201      	movs	r2, #1
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	930a      	str	r3, [sp, #40]	; 0x28
 8008398:	2300      	movs	r3, #0
 800839a:	930c      	str	r3, [sp, #48]	; 0x30
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	db38      	blt.n	8008414 <_dtoa_r+0x220>
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a6:	4694      	mov	ip, r2
 80083a8:	4463      	add	r3, ip
 80083aa:	930c      	str	r3, [sp, #48]	; 0x30
 80083ac:	2300      	movs	r3, #0
 80083ae:	9213      	str	r2, [sp, #76]	; 0x4c
 80083b0:	930d      	str	r3, [sp, #52]	; 0x34
 80083b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083b4:	2401      	movs	r4, #1
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d867      	bhi.n	800848a <_dtoa_r+0x296>
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	dd02      	ble.n	80083c4 <_dtoa_r+0x1d0>
 80083be:	2400      	movs	r4, #0
 80083c0:	3b04      	subs	r3, #4
 80083c2:	9322      	str	r3, [sp, #136]	; 0x88
 80083c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c6:	1e98      	subs	r0, r3, #2
 80083c8:	2803      	cmp	r0, #3
 80083ca:	d867      	bhi.n	800849c <_dtoa_r+0x2a8>
 80083cc:	f7f7 fea2 	bl	8000114 <__gnu_thumb1_case_uqi>
 80083d0:	5b383a2b 	.word	0x5b383a2b
 80083d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80083d8:	18f6      	adds	r6, r6, r3
 80083da:	4b68      	ldr	r3, [pc, #416]	; (800857c <_dtoa_r+0x388>)
 80083dc:	18f2      	adds	r2, r6, r3
 80083de:	2a20      	cmp	r2, #32
 80083e0:	dd0f      	ble.n	8008402 <_dtoa_r+0x20e>
 80083e2:	2340      	movs	r3, #64	; 0x40
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	409f      	lsls	r7, r3
 80083e8:	4b65      	ldr	r3, [pc, #404]	; (8008580 <_dtoa_r+0x38c>)
 80083ea:	0038      	movs	r0, r7
 80083ec:	18f3      	adds	r3, r6, r3
 80083ee:	40dc      	lsrs	r4, r3
 80083f0:	4320      	orrs	r0, r4
 80083f2:	f7fa fa9b 	bl	800292c <__aeabi_ui2d>
 80083f6:	2201      	movs	r2, #1
 80083f8:	4b62      	ldr	r3, [pc, #392]	; (8008584 <_dtoa_r+0x390>)
 80083fa:	1e77      	subs	r7, r6, #1
 80083fc:	18cb      	adds	r3, r1, r3
 80083fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8008400:	e776      	b.n	80082f0 <_dtoa_r+0xfc>
 8008402:	2320      	movs	r3, #32
 8008404:	0020      	movs	r0, r4
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	4098      	lsls	r0, r3
 800840a:	e7f2      	b.n	80083f2 <_dtoa_r+0x1fe>
 800840c:	9016      	str	r0, [sp, #88]	; 0x58
 800840e:	e7ba      	b.n	8008386 <_dtoa_r+0x192>
 8008410:	920c      	str	r2, [sp, #48]	; 0x30
 8008412:	e7c3      	b.n	800839c <_dtoa_r+0x1a8>
 8008414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	930a      	str	r3, [sp, #40]	; 0x28
 800841c:	4253      	negs	r3, r2
 800841e:	930d      	str	r3, [sp, #52]	; 0x34
 8008420:	2300      	movs	r3, #0
 8008422:	9313      	str	r3, [sp, #76]	; 0x4c
 8008424:	e7c5      	b.n	80083b2 <_dtoa_r+0x1be>
 8008426:	2300      	movs	r3, #0
 8008428:	930f      	str	r3, [sp, #60]	; 0x3c
 800842a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800842c:	930b      	str	r3, [sp, #44]	; 0x2c
 800842e:	9307      	str	r3, [sp, #28]
 8008430:	2b00      	cmp	r3, #0
 8008432:	dc13      	bgt.n	800845c <_dtoa_r+0x268>
 8008434:	2301      	movs	r3, #1
 8008436:	001a      	movs	r2, r3
 8008438:	930b      	str	r3, [sp, #44]	; 0x2c
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	9223      	str	r2, [sp, #140]	; 0x8c
 800843e:	e00d      	b.n	800845c <_dtoa_r+0x268>
 8008440:	2301      	movs	r3, #1
 8008442:	e7f1      	b.n	8008428 <_dtoa_r+0x234>
 8008444:	2300      	movs	r3, #0
 8008446:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008448:	930f      	str	r3, [sp, #60]	; 0x3c
 800844a:	4694      	mov	ip, r2
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	4463      	add	r3, ip
 8008450:	930b      	str	r3, [sp, #44]	; 0x2c
 8008452:	3301      	adds	r3, #1
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dc00      	bgt.n	800845c <_dtoa_r+0x268>
 800845a:	2301      	movs	r3, #1
 800845c:	9a04      	ldr	r2, [sp, #16]
 800845e:	2100      	movs	r1, #0
 8008460:	69d0      	ldr	r0, [r2, #28]
 8008462:	2204      	movs	r2, #4
 8008464:	0015      	movs	r5, r2
 8008466:	3514      	adds	r5, #20
 8008468:	429d      	cmp	r5, r3
 800846a:	d91b      	bls.n	80084a4 <_dtoa_r+0x2b0>
 800846c:	6041      	str	r1, [r0, #4]
 800846e:	9804      	ldr	r0, [sp, #16]
 8008470:	f000 fdd6 	bl	8009020 <_Balloc>
 8008474:	9006      	str	r0, [sp, #24]
 8008476:	2800      	cmp	r0, #0
 8008478:	d117      	bne.n	80084aa <_dtoa_r+0x2b6>
 800847a:	21b0      	movs	r1, #176	; 0xb0
 800847c:	4b42      	ldr	r3, [pc, #264]	; (8008588 <_dtoa_r+0x394>)
 800847e:	482e      	ldr	r0, [pc, #184]	; (8008538 <_dtoa_r+0x344>)
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	31ff      	adds	r1, #255	; 0xff
 8008484:	e6cb      	b.n	800821e <_dtoa_r+0x2a>
 8008486:	2301      	movs	r3, #1
 8008488:	e7dd      	b.n	8008446 <_dtoa_r+0x252>
 800848a:	2300      	movs	r3, #0
 800848c:	940f      	str	r4, [sp, #60]	; 0x3c
 800848e:	9322      	str	r3, [sp, #136]	; 0x88
 8008490:	3b01      	subs	r3, #1
 8008492:	930b      	str	r3, [sp, #44]	; 0x2c
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	2200      	movs	r2, #0
 8008498:	3313      	adds	r3, #19
 800849a:	e7cf      	b.n	800843c <_dtoa_r+0x248>
 800849c:	2301      	movs	r3, #1
 800849e:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a0:	3b02      	subs	r3, #2
 80084a2:	e7f6      	b.n	8008492 <_dtoa_r+0x29e>
 80084a4:	3101      	adds	r1, #1
 80084a6:	0052      	lsls	r2, r2, #1
 80084a8:	e7dc      	b.n	8008464 <_dtoa_r+0x270>
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	9a06      	ldr	r2, [sp, #24]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	9b07      	ldr	r3, [sp, #28]
 80084b4:	2b0e      	cmp	r3, #14
 80084b6:	d900      	bls.n	80084ba <_dtoa_r+0x2c6>
 80084b8:	e0e5      	b.n	8008686 <_dtoa_r+0x492>
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	d100      	bne.n	80084c0 <_dtoa_r+0x2cc>
 80084be:	e0e2      	b.n	8008686 <_dtoa_r+0x492>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd64      	ble.n	8008590 <_dtoa_r+0x39c>
 80084c6:	210f      	movs	r1, #15
 80084c8:	9a03      	ldr	r2, [sp, #12]
 80084ca:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <_dtoa_r+0x384>)
 80084cc:	400a      	ands	r2, r1
 80084ce:	00d2      	lsls	r2, r2, #3
 80084d0:	189b      	adds	r3, r3, r2
 80084d2:	681e      	ldr	r6, [r3, #0]
 80084d4:	685f      	ldr	r7, [r3, #4]
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	2402      	movs	r4, #2
 80084da:	111d      	asrs	r5, r3, #4
 80084dc:	05db      	lsls	r3, r3, #23
 80084de:	d50a      	bpl.n	80084f6 <_dtoa_r+0x302>
 80084e0:	4b2a      	ldr	r3, [pc, #168]	; (800858c <_dtoa_r+0x398>)
 80084e2:	400d      	ands	r5, r1
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084ec:	f7f8 ff5c 	bl	80013a8 <__aeabi_ddiv>
 80084f0:	9008      	str	r0, [sp, #32]
 80084f2:	9109      	str	r1, [sp, #36]	; 0x24
 80084f4:	3401      	adds	r4, #1
 80084f6:	4b25      	ldr	r3, [pc, #148]	; (800858c <_dtoa_r+0x398>)
 80084f8:	930e      	str	r3, [sp, #56]	; 0x38
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	d108      	bne.n	8008510 <_dtoa_r+0x31c>
 80084fe:	9808      	ldr	r0, [sp, #32]
 8008500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008502:	0032      	movs	r2, r6
 8008504:	003b      	movs	r3, r7
 8008506:	f7f8 ff4f 	bl	80013a8 <__aeabi_ddiv>
 800850a:	9008      	str	r0, [sp, #32]
 800850c:	9109      	str	r1, [sp, #36]	; 0x24
 800850e:	e05a      	b.n	80085c6 <_dtoa_r+0x3d2>
 8008510:	2301      	movs	r3, #1
 8008512:	421d      	tst	r5, r3
 8008514:	d009      	beq.n	800852a <_dtoa_r+0x336>
 8008516:	18e4      	adds	r4, r4, r3
 8008518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800851a:	0030      	movs	r0, r6
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	0039      	movs	r1, r7
 8008522:	f7f9 fb3b 	bl	8001b9c <__aeabi_dmul>
 8008526:	0006      	movs	r6, r0
 8008528:	000f      	movs	r7, r1
 800852a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852c:	106d      	asrs	r5, r5, #1
 800852e:	3308      	adds	r3, #8
 8008530:	e7e2      	b.n	80084f8 <_dtoa_r+0x304>
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	0800a43d 	.word	0x0800a43d
 8008538:	0800a454 	.word	0x0800a454
 800853c:	7ff00000 	.word	0x7ff00000
 8008540:	0000270f 	.word	0x0000270f
 8008544:	0800a439 	.word	0x0800a439
 8008548:	0800a43c 	.word	0x0800a43c
 800854c:	0800a40c 	.word	0x0800a40c
 8008550:	0800a40d 	.word	0x0800a40d
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	fffffc01 	.word	0xfffffc01
 800855c:	3ff80000 	.word	0x3ff80000
 8008560:	636f4361 	.word	0x636f4361
 8008564:	3fd287a7 	.word	0x3fd287a7
 8008568:	8b60c8b3 	.word	0x8b60c8b3
 800856c:	3fc68a28 	.word	0x3fc68a28
 8008570:	509f79fb 	.word	0x509f79fb
 8008574:	3fd34413 	.word	0x3fd34413
 8008578:	0800a540 	.word	0x0800a540
 800857c:	00000432 	.word	0x00000432
 8008580:	00000412 	.word	0x00000412
 8008584:	fe100000 	.word	0xfe100000
 8008588:	0800a4ac 	.word	0x0800a4ac
 800858c:	0800a518 	.word	0x0800a518
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	2402      	movs	r4, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d016      	beq.n	80085c6 <_dtoa_r+0x3d2>
 8008598:	9810      	ldr	r0, [sp, #64]	; 0x40
 800859a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800859c:	220f      	movs	r2, #15
 800859e:	425d      	negs	r5, r3
 80085a0:	402a      	ands	r2, r5
 80085a2:	4bdd      	ldr	r3, [pc, #884]	; (8008918 <_dtoa_r+0x724>)
 80085a4:	00d2      	lsls	r2, r2, #3
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f7f9 faf6 	bl	8001b9c <__aeabi_dmul>
 80085b0:	2701      	movs	r7, #1
 80085b2:	2300      	movs	r3, #0
 80085b4:	9008      	str	r0, [sp, #32]
 80085b6:	9109      	str	r1, [sp, #36]	; 0x24
 80085b8:	4ed8      	ldr	r6, [pc, #864]	; (800891c <_dtoa_r+0x728>)
 80085ba:	112d      	asrs	r5, r5, #4
 80085bc:	2d00      	cmp	r5, #0
 80085be:	d000      	beq.n	80085c2 <_dtoa_r+0x3ce>
 80085c0:	e091      	b.n	80086e6 <_dtoa_r+0x4f2>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1a1      	bne.n	800850a <_dtoa_r+0x316>
 80085c6:	9e08      	ldr	r6, [sp, #32]
 80085c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d100      	bne.n	80085d2 <_dtoa_r+0x3de>
 80085d0:	e094      	b.n	80086fc <_dtoa_r+0x508>
 80085d2:	2200      	movs	r2, #0
 80085d4:	0030      	movs	r0, r6
 80085d6:	0039      	movs	r1, r7
 80085d8:	4bd1      	ldr	r3, [pc, #836]	; (8008920 <_dtoa_r+0x72c>)
 80085da:	f7f7 ff3b 	bl	8000454 <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d100      	bne.n	80085e4 <_dtoa_r+0x3f0>
 80085e2:	e08b      	b.n	80086fc <_dtoa_r+0x508>
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d100      	bne.n	80085ec <_dtoa_r+0x3f8>
 80085ea:	e087      	b.n	80086fc <_dtoa_r+0x508>
 80085ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd45      	ble.n	800867e <_dtoa_r+0x48a>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	3b01      	subs	r3, #1
 80085f8:	930e      	str	r3, [sp, #56]	; 0x38
 80085fa:	0030      	movs	r0, r6
 80085fc:	4bc9      	ldr	r3, [pc, #804]	; (8008924 <_dtoa_r+0x730>)
 80085fe:	0039      	movs	r1, r7
 8008600:	f7f9 facc 	bl	8001b9c <__aeabi_dmul>
 8008604:	9008      	str	r0, [sp, #32]
 8008606:	9109      	str	r1, [sp, #36]	; 0x24
 8008608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800860a:	3401      	adds	r4, #1
 800860c:	0020      	movs	r0, r4
 800860e:	9e08      	ldr	r6, [sp, #32]
 8008610:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008612:	9312      	str	r3, [sp, #72]	; 0x48
 8008614:	f7fa f95a 	bl	80028cc <__aeabi_i2d>
 8008618:	0032      	movs	r2, r6
 800861a:	003b      	movs	r3, r7
 800861c:	f7f9 fabe 	bl	8001b9c <__aeabi_dmul>
 8008620:	2200      	movs	r2, #0
 8008622:	4bc1      	ldr	r3, [pc, #772]	; (8008928 <_dtoa_r+0x734>)
 8008624:	f7f8 fb60 	bl	8000ce8 <__aeabi_dadd>
 8008628:	4ac0      	ldr	r2, [pc, #768]	; (800892c <_dtoa_r+0x738>)
 800862a:	9014      	str	r0, [sp, #80]	; 0x50
 800862c:	9115      	str	r1, [sp, #84]	; 0x54
 800862e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008630:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008632:	4694      	mov	ip, r2
 8008634:	9308      	str	r3, [sp, #32]
 8008636:	9409      	str	r4, [sp, #36]	; 0x24
 8008638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800863a:	4463      	add	r3, ip
 800863c:	9318      	str	r3, [sp, #96]	; 0x60
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008642:	2b00      	cmp	r3, #0
 8008644:	d15e      	bne.n	8008704 <_dtoa_r+0x510>
 8008646:	2200      	movs	r2, #0
 8008648:	4bb9      	ldr	r3, [pc, #740]	; (8008930 <_dtoa_r+0x73c>)
 800864a:	0030      	movs	r0, r6
 800864c:	0039      	movs	r1, r7
 800864e:	f7f9 fd67 	bl	8002120 <__aeabi_dsub>
 8008652:	9a08      	ldr	r2, [sp, #32]
 8008654:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008656:	0004      	movs	r4, r0
 8008658:	000d      	movs	r5, r1
 800865a:	f7f7 ff0f 	bl	800047c <__aeabi_dcmpgt>
 800865e:	2800      	cmp	r0, #0
 8008660:	d000      	beq.n	8008664 <_dtoa_r+0x470>
 8008662:	e2b3      	b.n	8008bcc <_dtoa_r+0x9d8>
 8008664:	48b3      	ldr	r0, [pc, #716]	; (8008934 <_dtoa_r+0x740>)
 8008666:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008668:	4684      	mov	ip, r0
 800866a:	4461      	add	r1, ip
 800866c:	000b      	movs	r3, r1
 800866e:	0020      	movs	r0, r4
 8008670:	0029      	movs	r1, r5
 8008672:	9a08      	ldr	r2, [sp, #32]
 8008674:	f7f7 feee 	bl	8000454 <__aeabi_dcmplt>
 8008678:	2800      	cmp	r0, #0
 800867a:	d000      	beq.n	800867e <_dtoa_r+0x48a>
 800867c:	e2a3      	b.n	8008bc6 <_dtoa_r+0x9d2>
 800867e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008680:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	9409      	str	r4, [sp, #36]	; 0x24
 8008686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008688:	2b00      	cmp	r3, #0
 800868a:	da00      	bge.n	800868e <_dtoa_r+0x49a>
 800868c:	e179      	b.n	8008982 <_dtoa_r+0x78e>
 800868e:	9a03      	ldr	r2, [sp, #12]
 8008690:	2a0e      	cmp	r2, #14
 8008692:	dd00      	ble.n	8008696 <_dtoa_r+0x4a2>
 8008694:	e175      	b.n	8008982 <_dtoa_r+0x78e>
 8008696:	4ba0      	ldr	r3, [pc, #640]	; (8008918 <_dtoa_r+0x724>)
 8008698:	00d2      	lsls	r2, r2, #3
 800869a:	189b      	adds	r3, r3, r2
 800869c:	681e      	ldr	r6, [r3, #0]
 800869e:	685f      	ldr	r7, [r3, #4]
 80086a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db00      	blt.n	80086a8 <_dtoa_r+0x4b4>
 80086a6:	e0e5      	b.n	8008874 <_dtoa_r+0x680>
 80086a8:	9b07      	ldr	r3, [sp, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dd00      	ble.n	80086b0 <_dtoa_r+0x4bc>
 80086ae:	e0e1      	b.n	8008874 <_dtoa_r+0x680>
 80086b0:	d000      	beq.n	80086b4 <_dtoa_r+0x4c0>
 80086b2:	e288      	b.n	8008bc6 <_dtoa_r+0x9d2>
 80086b4:	2200      	movs	r2, #0
 80086b6:	0030      	movs	r0, r6
 80086b8:	0039      	movs	r1, r7
 80086ba:	4b9d      	ldr	r3, [pc, #628]	; (8008930 <_dtoa_r+0x73c>)
 80086bc:	f7f9 fa6e 	bl	8001b9c <__aeabi_dmul>
 80086c0:	9a08      	ldr	r2, [sp, #32]
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	f7f7 fee4 	bl	8000490 <__aeabi_dcmpge>
 80086c8:	9e07      	ldr	r6, [sp, #28]
 80086ca:	0037      	movs	r7, r6
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d000      	beq.n	80086d2 <_dtoa_r+0x4de>
 80086d0:	e25f      	b.n	8008b92 <_dtoa_r+0x99e>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	9a06      	ldr	r2, [sp, #24]
 80086d6:	3301      	adds	r3, #1
 80086d8:	9308      	str	r3, [sp, #32]
 80086da:	2331      	movs	r3, #49	; 0x31
 80086dc:	7013      	strb	r3, [r2, #0]
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	e25a      	b.n	8008b9c <_dtoa_r+0x9a8>
 80086e6:	423d      	tst	r5, r7
 80086e8:	d005      	beq.n	80086f6 <_dtoa_r+0x502>
 80086ea:	6832      	ldr	r2, [r6, #0]
 80086ec:	6873      	ldr	r3, [r6, #4]
 80086ee:	f7f9 fa55 	bl	8001b9c <__aeabi_dmul>
 80086f2:	003b      	movs	r3, r7
 80086f4:	3401      	adds	r4, #1
 80086f6:	106d      	asrs	r5, r5, #1
 80086f8:	3608      	adds	r6, #8
 80086fa:	e75f      	b.n	80085bc <_dtoa_r+0x3c8>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	e783      	b.n	800860c <_dtoa_r+0x418>
 8008704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008706:	4b84      	ldr	r3, [pc, #528]	; (8008918 <_dtoa_r+0x724>)
 8008708:	3a01      	subs	r2, #1
 800870a:	00d2      	lsls	r2, r2, #3
 800870c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800870e:	189b      	adds	r3, r3, r2
 8008710:	9c08      	ldr	r4, [sp, #32]
 8008712:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2900      	cmp	r1, #0
 800871a:	d051      	beq.n	80087c0 <_dtoa_r+0x5cc>
 800871c:	2000      	movs	r0, #0
 800871e:	4986      	ldr	r1, [pc, #536]	; (8008938 <_dtoa_r+0x744>)
 8008720:	f7f8 fe42 	bl	80013a8 <__aeabi_ddiv>
 8008724:	0022      	movs	r2, r4
 8008726:	002b      	movs	r3, r5
 8008728:	f7f9 fcfa 	bl	8002120 <__aeabi_dsub>
 800872c:	9a06      	ldr	r2, [sp, #24]
 800872e:	0004      	movs	r4, r0
 8008730:	4694      	mov	ip, r2
 8008732:	000d      	movs	r5, r1
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	9314      	str	r3, [sp, #80]	; 0x50
 8008738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800873a:	4463      	add	r3, ip
 800873c:	9318      	str	r3, [sp, #96]	; 0x60
 800873e:	0039      	movs	r1, r7
 8008740:	0030      	movs	r0, r6
 8008742:	f7fa f88d 	bl	8002860 <__aeabi_d2iz>
 8008746:	9012      	str	r0, [sp, #72]	; 0x48
 8008748:	f7fa f8c0 	bl	80028cc <__aeabi_i2d>
 800874c:	0002      	movs	r2, r0
 800874e:	000b      	movs	r3, r1
 8008750:	0030      	movs	r0, r6
 8008752:	0039      	movs	r1, r7
 8008754:	f7f9 fce4 	bl	8002120 <__aeabi_dsub>
 8008758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800875a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800875c:	3301      	adds	r3, #1
 800875e:	9308      	str	r3, [sp, #32]
 8008760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008762:	0006      	movs	r6, r0
 8008764:	3330      	adds	r3, #48	; 0x30
 8008766:	7013      	strb	r3, [r2, #0]
 8008768:	0022      	movs	r2, r4
 800876a:	002b      	movs	r3, r5
 800876c:	000f      	movs	r7, r1
 800876e:	f7f7 fe71 	bl	8000454 <__aeabi_dcmplt>
 8008772:	2800      	cmp	r0, #0
 8008774:	d174      	bne.n	8008860 <_dtoa_r+0x66c>
 8008776:	0032      	movs	r2, r6
 8008778:	003b      	movs	r3, r7
 800877a:	2000      	movs	r0, #0
 800877c:	4968      	ldr	r1, [pc, #416]	; (8008920 <_dtoa_r+0x72c>)
 800877e:	f7f9 fccf 	bl	8002120 <__aeabi_dsub>
 8008782:	0022      	movs	r2, r4
 8008784:	002b      	movs	r3, r5
 8008786:	f7f7 fe65 	bl	8000454 <__aeabi_dcmplt>
 800878a:	2800      	cmp	r0, #0
 800878c:	d000      	beq.n	8008790 <_dtoa_r+0x59c>
 800878e:	e0d7      	b.n	8008940 <_dtoa_r+0x74c>
 8008790:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008792:	9a08      	ldr	r2, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	d100      	bne.n	800879a <_dtoa_r+0x5a6>
 8008798:	e771      	b.n	800867e <_dtoa_r+0x48a>
 800879a:	2200      	movs	r2, #0
 800879c:	0020      	movs	r0, r4
 800879e:	0029      	movs	r1, r5
 80087a0:	4b60      	ldr	r3, [pc, #384]	; (8008924 <_dtoa_r+0x730>)
 80087a2:	f7f9 f9fb 	bl	8001b9c <__aeabi_dmul>
 80087a6:	4b5f      	ldr	r3, [pc, #380]	; (8008924 <_dtoa_r+0x730>)
 80087a8:	0004      	movs	r4, r0
 80087aa:	000d      	movs	r5, r1
 80087ac:	0030      	movs	r0, r6
 80087ae:	0039      	movs	r1, r7
 80087b0:	2200      	movs	r2, #0
 80087b2:	f7f9 f9f3 	bl	8001b9c <__aeabi_dmul>
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	0006      	movs	r6, r0
 80087ba:	000f      	movs	r7, r1
 80087bc:	9314      	str	r3, [sp, #80]	; 0x50
 80087be:	e7be      	b.n	800873e <_dtoa_r+0x54a>
 80087c0:	0020      	movs	r0, r4
 80087c2:	0029      	movs	r1, r5
 80087c4:	f7f9 f9ea 	bl	8001b9c <__aeabi_dmul>
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	9b06      	ldr	r3, [sp, #24]
 80087cc:	4694      	mov	ip, r2
 80087ce:	9308      	str	r3, [sp, #32]
 80087d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087d2:	9014      	str	r0, [sp, #80]	; 0x50
 80087d4:	9115      	str	r1, [sp, #84]	; 0x54
 80087d6:	4463      	add	r3, ip
 80087d8:	9319      	str	r3, [sp, #100]	; 0x64
 80087da:	0030      	movs	r0, r6
 80087dc:	0039      	movs	r1, r7
 80087de:	f7fa f83f 	bl	8002860 <__aeabi_d2iz>
 80087e2:	9018      	str	r0, [sp, #96]	; 0x60
 80087e4:	f7fa f872 	bl	80028cc <__aeabi_i2d>
 80087e8:	0002      	movs	r2, r0
 80087ea:	000b      	movs	r3, r1
 80087ec:	0030      	movs	r0, r6
 80087ee:	0039      	movs	r1, r7
 80087f0:	f7f9 fc96 	bl	8002120 <__aeabi_dsub>
 80087f4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80087f6:	9b08      	ldr	r3, [sp, #32]
 80087f8:	3630      	adds	r6, #48	; 0x30
 80087fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087fc:	701e      	strb	r6, [r3, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	0004      	movs	r4, r0
 8008802:	000d      	movs	r5, r1
 8008804:	9308      	str	r3, [sp, #32]
 8008806:	4293      	cmp	r3, r2
 8008808:	d12d      	bne.n	8008866 <_dtoa_r+0x672>
 800880a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800880c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800880e:	9a06      	ldr	r2, [sp, #24]
 8008810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008812:	4694      	mov	ip, r2
 8008814:	4463      	add	r3, ip
 8008816:	2200      	movs	r2, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	4b47      	ldr	r3, [pc, #284]	; (8008938 <_dtoa_r+0x744>)
 800881c:	f7f8 fa64 	bl	8000ce8 <__aeabi_dadd>
 8008820:	0002      	movs	r2, r0
 8008822:	000b      	movs	r3, r1
 8008824:	0020      	movs	r0, r4
 8008826:	0029      	movs	r1, r5
 8008828:	f7f7 fe28 	bl	800047c <__aeabi_dcmpgt>
 800882c:	2800      	cmp	r0, #0
 800882e:	d000      	beq.n	8008832 <_dtoa_r+0x63e>
 8008830:	e086      	b.n	8008940 <_dtoa_r+0x74c>
 8008832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008836:	2000      	movs	r0, #0
 8008838:	493f      	ldr	r1, [pc, #252]	; (8008938 <_dtoa_r+0x744>)
 800883a:	f7f9 fc71 	bl	8002120 <__aeabi_dsub>
 800883e:	0002      	movs	r2, r0
 8008840:	000b      	movs	r3, r1
 8008842:	0020      	movs	r0, r4
 8008844:	0029      	movs	r1, r5
 8008846:	f7f7 fe05 	bl	8000454 <__aeabi_dcmplt>
 800884a:	2800      	cmp	r0, #0
 800884c:	d100      	bne.n	8008850 <_dtoa_r+0x65c>
 800884e:	e716      	b.n	800867e <_dtoa_r+0x48a>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	001a      	movs	r2, r3
 8008854:	3a01      	subs	r2, #1
 8008856:	9208      	str	r2, [sp, #32]
 8008858:	7812      	ldrb	r2, [r2, #0]
 800885a:	2a30      	cmp	r2, #48	; 0x30
 800885c:	d0f8      	beq.n	8008850 <_dtoa_r+0x65c>
 800885e:	9308      	str	r3, [sp, #32]
 8008860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	e046      	b.n	80088f4 <_dtoa_r+0x700>
 8008866:	2200      	movs	r2, #0
 8008868:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <_dtoa_r+0x730>)
 800886a:	f7f9 f997 	bl	8001b9c <__aeabi_dmul>
 800886e:	0006      	movs	r6, r0
 8008870:	000f      	movs	r7, r1
 8008872:	e7b2      	b.n	80087da <_dtoa_r+0x5e6>
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	930a      	str	r3, [sp, #40]	; 0x28
 800887a:	9b07      	ldr	r3, [sp, #28]
 800887c:	9c08      	ldr	r4, [sp, #32]
 800887e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008880:	3b01      	subs	r3, #1
 8008882:	189b      	adds	r3, r3, r2
 8008884:	930b      	str	r3, [sp, #44]	; 0x2c
 8008886:	0032      	movs	r2, r6
 8008888:	003b      	movs	r3, r7
 800888a:	0020      	movs	r0, r4
 800888c:	0029      	movs	r1, r5
 800888e:	f7f8 fd8b 	bl	80013a8 <__aeabi_ddiv>
 8008892:	f7f9 ffe5 	bl	8002860 <__aeabi_d2iz>
 8008896:	9007      	str	r0, [sp, #28]
 8008898:	f7fa f818 	bl	80028cc <__aeabi_i2d>
 800889c:	0032      	movs	r2, r6
 800889e:	003b      	movs	r3, r7
 80088a0:	f7f9 f97c 	bl	8001b9c <__aeabi_dmul>
 80088a4:	0002      	movs	r2, r0
 80088a6:	000b      	movs	r3, r1
 80088a8:	0020      	movs	r0, r4
 80088aa:	0029      	movs	r1, r5
 80088ac:	f7f9 fc38 	bl	8002120 <__aeabi_dsub>
 80088b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b2:	001a      	movs	r2, r3
 80088b4:	3201      	adds	r2, #1
 80088b6:	920a      	str	r2, [sp, #40]	; 0x28
 80088b8:	9208      	str	r2, [sp, #32]
 80088ba:	9a07      	ldr	r2, [sp, #28]
 80088bc:	3230      	adds	r2, #48	; 0x30
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d14f      	bne.n	8008966 <_dtoa_r+0x772>
 80088c6:	0002      	movs	r2, r0
 80088c8:	000b      	movs	r3, r1
 80088ca:	f7f8 fa0d 	bl	8000ce8 <__aeabi_dadd>
 80088ce:	0032      	movs	r2, r6
 80088d0:	003b      	movs	r3, r7
 80088d2:	0004      	movs	r4, r0
 80088d4:	000d      	movs	r5, r1
 80088d6:	f7f7 fdd1 	bl	800047c <__aeabi_dcmpgt>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d12e      	bne.n	800893c <_dtoa_r+0x748>
 80088de:	0032      	movs	r2, r6
 80088e0:	003b      	movs	r3, r7
 80088e2:	0020      	movs	r0, r4
 80088e4:	0029      	movs	r1, r5
 80088e6:	f7f7 fdaf 	bl	8000448 <__aeabi_dcmpeq>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d002      	beq.n	80088f4 <_dtoa_r+0x700>
 80088ee:	9b07      	ldr	r3, [sp, #28]
 80088f0:	07de      	lsls	r6, r3, #31
 80088f2:	d423      	bmi.n	800893c <_dtoa_r+0x748>
 80088f4:	9905      	ldr	r1, [sp, #20]
 80088f6:	9804      	ldr	r0, [sp, #16]
 80088f8:	f000 fbd6 	bl	80090a8 <_Bfree>
 80088fc:	2300      	movs	r3, #0
 80088fe:	9a08      	ldr	r2, [sp, #32]
 8008900:	7013      	strb	r3, [r2, #0]
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008906:	3301      	adds	r3, #1
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800890c:	2b00      	cmp	r3, #0
 800890e:	d100      	bne.n	8008912 <_dtoa_r+0x71e>
 8008910:	e4ba      	b.n	8008288 <_dtoa_r+0x94>
 8008912:	9a08      	ldr	r2, [sp, #32]
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e4b7      	b.n	8008288 <_dtoa_r+0x94>
 8008918:	0800a540 	.word	0x0800a540
 800891c:	0800a518 	.word	0x0800a518
 8008920:	3ff00000 	.word	0x3ff00000
 8008924:	40240000 	.word	0x40240000
 8008928:	401c0000 	.word	0x401c0000
 800892c:	fcc00000 	.word	0xfcc00000
 8008930:	40140000 	.word	0x40140000
 8008934:	7cc00000 	.word	0x7cc00000
 8008938:	3fe00000 	.word	0x3fe00000
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	930e      	str	r3, [sp, #56]	; 0x38
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	3b01      	subs	r3, #1
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	2a39      	cmp	r2, #57	; 0x39
 800894a:	d108      	bne.n	800895e <_dtoa_r+0x76a>
 800894c:	9a06      	ldr	r2, [sp, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d1f7      	bne.n	8008942 <_dtoa_r+0x74e>
 8008952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008954:	9906      	ldr	r1, [sp, #24]
 8008956:	3201      	adds	r2, #1
 8008958:	920e      	str	r2, [sp, #56]	; 0x38
 800895a:	2230      	movs	r2, #48	; 0x30
 800895c:	700a      	strb	r2, [r1, #0]
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	3201      	adds	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	e77c      	b.n	8008860 <_dtoa_r+0x66c>
 8008966:	2200      	movs	r2, #0
 8008968:	4ba9      	ldr	r3, [pc, #676]	; (8008c10 <_dtoa_r+0xa1c>)
 800896a:	f7f9 f917 	bl	8001b9c <__aeabi_dmul>
 800896e:	2200      	movs	r2, #0
 8008970:	2300      	movs	r3, #0
 8008972:	0004      	movs	r4, r0
 8008974:	000d      	movs	r5, r1
 8008976:	f7f7 fd67 	bl	8000448 <__aeabi_dcmpeq>
 800897a:	2800      	cmp	r0, #0
 800897c:	d100      	bne.n	8008980 <_dtoa_r+0x78c>
 800897e:	e782      	b.n	8008886 <_dtoa_r+0x692>
 8008980:	e7b8      	b.n	80088f4 <_dtoa_r+0x700>
 8008982:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008984:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008986:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008988:	2f00      	cmp	r7, #0
 800898a:	d012      	beq.n	80089b2 <_dtoa_r+0x7be>
 800898c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800898e:	2a01      	cmp	r2, #1
 8008990:	dc6e      	bgt.n	8008a70 <_dtoa_r+0x87c>
 8008992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008994:	2a00      	cmp	r2, #0
 8008996:	d065      	beq.n	8008a64 <_dtoa_r+0x870>
 8008998:	4a9e      	ldr	r2, [pc, #632]	; (8008c14 <_dtoa_r+0xa20>)
 800899a:	189b      	adds	r3, r3, r2
 800899c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899e:	2101      	movs	r1, #1
 80089a0:	18d2      	adds	r2, r2, r3
 80089a2:	920a      	str	r2, [sp, #40]	; 0x28
 80089a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a6:	9804      	ldr	r0, [sp, #16]
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	930c      	str	r3, [sp, #48]	; 0x30
 80089ac:	f000 fc2c 	bl	8009208 <__i2b>
 80089b0:	0007      	movs	r7, r0
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	d00e      	beq.n	80089d4 <_dtoa_r+0x7e0>
 80089b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd0b      	ble.n	80089d4 <_dtoa_r+0x7e0>
 80089bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089be:	0023      	movs	r3, r4
 80089c0:	4294      	cmp	r4, r2
 80089c2:	dd00      	ble.n	80089c6 <_dtoa_r+0x7d2>
 80089c4:	0013      	movs	r3, r2
 80089c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c8:	1ae4      	subs	r4, r4, r3
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	920a      	str	r2, [sp, #40]	; 0x28
 80089ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	930c      	str	r3, [sp, #48]	; 0x30
 80089d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01e      	beq.n	8008a18 <_dtoa_r+0x824>
 80089da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d05c      	beq.n	8008a9a <_dtoa_r+0x8a6>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	dd10      	ble.n	8008a06 <_dtoa_r+0x812>
 80089e4:	0039      	movs	r1, r7
 80089e6:	002a      	movs	r2, r5
 80089e8:	9804      	ldr	r0, [sp, #16]
 80089ea:	f000 fcd5 	bl	8009398 <__pow5mult>
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	0001      	movs	r1, r0
 80089f2:	0007      	movs	r7, r0
 80089f4:	9804      	ldr	r0, [sp, #16]
 80089f6:	f000 fc1f 	bl	8009238 <__multiply>
 80089fa:	0006      	movs	r6, r0
 80089fc:	9905      	ldr	r1, [sp, #20]
 80089fe:	9804      	ldr	r0, [sp, #16]
 8008a00:	f000 fb52 	bl	80090a8 <_Bfree>
 8008a04:	9605      	str	r6, [sp, #20]
 8008a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a08:	1b5a      	subs	r2, r3, r5
 8008a0a:	42ab      	cmp	r3, r5
 8008a0c:	d004      	beq.n	8008a18 <_dtoa_r+0x824>
 8008a0e:	9905      	ldr	r1, [sp, #20]
 8008a10:	9804      	ldr	r0, [sp, #16]
 8008a12:	f000 fcc1 	bl	8009398 <__pow5mult>
 8008a16:	9005      	str	r0, [sp, #20]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	9804      	ldr	r0, [sp, #16]
 8008a1c:	f000 fbf4 	bl	8009208 <__i2b>
 8008a20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a22:	0006      	movs	r6, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd3a      	ble.n	8008a9e <_dtoa_r+0x8aa>
 8008a28:	001a      	movs	r2, r3
 8008a2a:	0001      	movs	r1, r0
 8008a2c:	9804      	ldr	r0, [sp, #16]
 8008a2e:	f000 fcb3 	bl	8009398 <__pow5mult>
 8008a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a34:	0006      	movs	r6, r0
 8008a36:	2500      	movs	r5, #0
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	dc38      	bgt.n	8008aae <_dtoa_r+0x8ba>
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	9b08      	ldr	r3, [sp, #32]
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	d130      	bne.n	8008aa6 <_dtoa_r+0x8b2>
 8008a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a46:	031b      	lsls	r3, r3, #12
 8008a48:	42ab      	cmp	r3, r5
 8008a4a:	d12c      	bne.n	8008aa6 <_dtoa_r+0x8b2>
 8008a4c:	4b72      	ldr	r3, [pc, #456]	; (8008c18 <_dtoa_r+0xa24>)
 8008a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a50:	4213      	tst	r3, r2
 8008a52:	d028      	beq.n	8008aa6 <_dtoa_r+0x8b2>
 8008a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a56:	3501      	adds	r5, #1
 8008a58:	3301      	adds	r3, #1
 8008a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a5e:	3301      	adds	r3, #1
 8008a60:	930c      	str	r3, [sp, #48]	; 0x30
 8008a62:	e020      	b.n	8008aa6 <_dtoa_r+0x8b2>
 8008a64:	2336      	movs	r3, #54	; 0x36
 8008a66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008a6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	e795      	b.n	800899c <_dtoa_r+0x7a8>
 8008a70:	9b07      	ldr	r3, [sp, #28]
 8008a72:	1e5d      	subs	r5, r3, #1
 8008a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a76:	42ab      	cmp	r3, r5
 8008a78:	db07      	blt.n	8008a8a <_dtoa_r+0x896>
 8008a7a:	1b5d      	subs	r5, r3, r5
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	da8b      	bge.n	800899c <_dtoa_r+0x7a8>
 8008a84:	1ae4      	subs	r4, r4, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	e788      	b.n	800899c <_dtoa_r+0x7a8>
 8008a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a8e:	1aeb      	subs	r3, r5, r3
 8008a90:	18d3      	adds	r3, r2, r3
 8008a92:	950d      	str	r5, [sp, #52]	; 0x34
 8008a94:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a96:	2500      	movs	r5, #0
 8008a98:	e7f0      	b.n	8008a7c <_dtoa_r+0x888>
 8008a9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a9c:	e7b7      	b.n	8008a0e <_dtoa_r+0x81a>
 8008a9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	ddca      	ble.n	8008a3c <_dtoa_r+0x848>
 8008aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d008      	beq.n	8008ac0 <_dtoa_r+0x8cc>
 8008aae:	6933      	ldr	r3, [r6, #16]
 8008ab0:	3303      	adds	r3, #3
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	18f3      	adds	r3, r6, r3
 8008ab6:	6858      	ldr	r0, [r3, #4]
 8008ab8:	f000 fb5e 	bl	8009178 <__hi0bits>
 8008abc:	2320      	movs	r3, #32
 8008abe:	1a18      	subs	r0, r3, r0
 8008ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac2:	1818      	adds	r0, r3, r0
 8008ac4:	0002      	movs	r2, r0
 8008ac6:	231f      	movs	r3, #31
 8008ac8:	401a      	ands	r2, r3
 8008aca:	4218      	tst	r0, r3
 8008acc:	d047      	beq.n	8008b5e <_dtoa_r+0x96a>
 8008ace:	3301      	adds	r3, #1
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	dd3f      	ble.n	8008b56 <_dtoa_r+0x962>
 8008ad6:	231c      	movs	r3, #28
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008adc:	18e4      	adds	r4, r4, r3
 8008ade:	18d2      	adds	r2, r2, r3
 8008ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae4:	18d3      	adds	r3, r2, r3
 8008ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x906>
 8008aee:	001a      	movs	r2, r3
 8008af0:	9905      	ldr	r1, [sp, #20]
 8008af2:	9804      	ldr	r0, [sp, #16]
 8008af4:	f000 fcac 	bl	8009450 <__lshift>
 8008af8:	9005      	str	r0, [sp, #20]
 8008afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dd05      	ble.n	8008b0c <_dtoa_r+0x918>
 8008b00:	0031      	movs	r1, r6
 8008b02:	001a      	movs	r2, r3
 8008b04:	9804      	ldr	r0, [sp, #16]
 8008b06:	f000 fca3 	bl	8009450 <__lshift>
 8008b0a:	0006      	movs	r6, r0
 8008b0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d027      	beq.n	8008b62 <_dtoa_r+0x96e>
 8008b12:	0031      	movs	r1, r6
 8008b14:	9805      	ldr	r0, [sp, #20]
 8008b16:	f000 fd09 	bl	800952c <__mcmp>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	da21      	bge.n	8008b62 <_dtoa_r+0x96e>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	220a      	movs	r2, #10
 8008b22:	3b01      	subs	r3, #1
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	9905      	ldr	r1, [sp, #20]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9804      	ldr	r0, [sp, #16]
 8008b2c:	f000 fae0 	bl	80090f0 <__multadd>
 8008b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b32:	9005      	str	r0, [sp, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d100      	bne.n	8008b3a <_dtoa_r+0x946>
 8008b38:	e15d      	b.n	8008df6 <_dtoa_r+0xc02>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	0039      	movs	r1, r7
 8008b3e:	220a      	movs	r2, #10
 8008b40:	9804      	ldr	r0, [sp, #16]
 8008b42:	f000 fad5 	bl	80090f0 <__multadd>
 8008b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b48:	0007      	movs	r7, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc49      	bgt.n	8008be2 <_dtoa_r+0x9ee>
 8008b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	dc0e      	bgt.n	8008b72 <_dtoa_r+0x97e>
 8008b54:	e045      	b.n	8008be2 <_dtoa_r+0x9ee>
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d0c6      	beq.n	8008ae8 <_dtoa_r+0x8f4>
 8008b5a:	331c      	adds	r3, #28
 8008b5c:	e7bd      	b.n	8008ada <_dtoa_r+0x8e6>
 8008b5e:	0013      	movs	r3, r2
 8008b60:	e7fb      	b.n	8008b5a <_dtoa_r+0x966>
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dc36      	bgt.n	8008bd6 <_dtoa_r+0x9e2>
 8008b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	dd33      	ble.n	8008bd6 <_dtoa_r+0x9e2>
 8008b6e:	9b07      	ldr	r3, [sp, #28]
 8008b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10c      	bne.n	8008b92 <_dtoa_r+0x99e>
 8008b78:	0031      	movs	r1, r6
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	9804      	ldr	r0, [sp, #16]
 8008b7e:	f000 fab7 	bl	80090f0 <__multadd>
 8008b82:	0006      	movs	r6, r0
 8008b84:	0001      	movs	r1, r0
 8008b86:	9805      	ldr	r0, [sp, #20]
 8008b88:	f000 fcd0 	bl	800952c <__mcmp>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dd00      	ble.n	8008b92 <_dtoa_r+0x99e>
 8008b90:	e59f      	b.n	80086d2 <_dtoa_r+0x4de>
 8008b92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b94:	43db      	mvns	r3, r3
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b06      	ldr	r3, [sp, #24]
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	0031      	movs	r1, r6
 8008ba0:	9804      	ldr	r0, [sp, #16]
 8008ba2:	f000 fa81 	bl	80090a8 <_Bfree>
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	d100      	bne.n	8008bac <_dtoa_r+0x9b8>
 8008baa:	e6a3      	b.n	80088f4 <_dtoa_r+0x700>
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	d005      	beq.n	8008bbc <_dtoa_r+0x9c8>
 8008bb0:	42bd      	cmp	r5, r7
 8008bb2:	d003      	beq.n	8008bbc <_dtoa_r+0x9c8>
 8008bb4:	0029      	movs	r1, r5
 8008bb6:	9804      	ldr	r0, [sp, #16]
 8008bb8:	f000 fa76 	bl	80090a8 <_Bfree>
 8008bbc:	0039      	movs	r1, r7
 8008bbe:	9804      	ldr	r0, [sp, #16]
 8008bc0:	f000 fa72 	bl	80090a8 <_Bfree>
 8008bc4:	e696      	b.n	80088f4 <_dtoa_r+0x700>
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	0037      	movs	r7, r6
 8008bca:	e7e2      	b.n	8008b92 <_dtoa_r+0x99e>
 8008bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	0037      	movs	r7, r6
 8008bd4:	e57d      	b.n	80086d2 <_dtoa_r+0x4de>
 8008bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d100      	bne.n	8008bde <_dtoa_r+0x9ea>
 8008bdc:	e0c3      	b.n	8008d66 <_dtoa_r+0xb72>
 8008bde:	9b07      	ldr	r3, [sp, #28]
 8008be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	dd05      	ble.n	8008bf2 <_dtoa_r+0x9fe>
 8008be6:	0039      	movs	r1, r7
 8008be8:	0022      	movs	r2, r4
 8008bea:	9804      	ldr	r0, [sp, #16]
 8008bec:	f000 fc30 	bl	8009450 <__lshift>
 8008bf0:	0007      	movs	r7, r0
 8008bf2:	0038      	movs	r0, r7
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	d024      	beq.n	8008c42 <_dtoa_r+0xa4e>
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	9804      	ldr	r0, [sp, #16]
 8008bfc:	f000 fa10 	bl	8009020 <_Balloc>
 8008c00:	1e04      	subs	r4, r0, #0
 8008c02:	d111      	bne.n	8008c28 <_dtoa_r+0xa34>
 8008c04:	0022      	movs	r2, r4
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <_dtoa_r+0xa28>)
 8008c08:	4805      	ldr	r0, [pc, #20]	; (8008c20 <_dtoa_r+0xa2c>)
 8008c0a:	4906      	ldr	r1, [pc, #24]	; (8008c24 <_dtoa_r+0xa30>)
 8008c0c:	f7ff fb07 	bl	800821e <_dtoa_r+0x2a>
 8008c10:	40240000 	.word	0x40240000
 8008c14:	00000433 	.word	0x00000433
 8008c18:	7ff00000 	.word	0x7ff00000
 8008c1c:	0800a4ac 	.word	0x0800a4ac
 8008c20:	0800a454 	.word	0x0800a454
 8008c24:	000002ef 	.word	0x000002ef
 8008c28:	0039      	movs	r1, r7
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	310c      	adds	r1, #12
 8008c2e:	3202      	adds	r2, #2
 8008c30:	0092      	lsls	r2, r2, #2
 8008c32:	300c      	adds	r0, #12
 8008c34:	f000 ffca 	bl	8009bcc <memcpy>
 8008c38:	2201      	movs	r2, #1
 8008c3a:	0021      	movs	r1, r4
 8008c3c:	9804      	ldr	r0, [sp, #16]
 8008c3e:	f000 fc07 	bl	8009450 <__lshift>
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	189b      	adds	r3, r3, r2
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	003d      	movs	r5, r7
 8008c50:	0007      	movs	r7, r0
 8008c52:	930e      	str	r3, [sp, #56]	; 0x38
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	4013      	ands	r3, r2
 8008c58:	930d      	str	r3, [sp, #52]	; 0x34
 8008c5a:	0031      	movs	r1, r6
 8008c5c:	9805      	ldr	r0, [sp, #20]
 8008c5e:	f7ff fa39 	bl	80080d4 <quorem>
 8008c62:	0029      	movs	r1, r5
 8008c64:	0004      	movs	r4, r0
 8008c66:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c68:	9805      	ldr	r0, [sp, #20]
 8008c6a:	f000 fc5f 	bl	800952c <__mcmp>
 8008c6e:	003a      	movs	r2, r7
 8008c70:	900c      	str	r0, [sp, #48]	; 0x30
 8008c72:	0031      	movs	r1, r6
 8008c74:	9804      	ldr	r0, [sp, #16]
 8008c76:	f000 fc75 	bl	8009564 <__mdiff>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	68c3      	ldr	r3, [r0, #12]
 8008c7e:	3430      	adds	r4, #48	; 0x30
 8008c80:	9008      	str	r0, [sp, #32]
 8008c82:	920a      	str	r2, [sp, #40]	; 0x28
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <_dtoa_r+0xa9e>
 8008c88:	0001      	movs	r1, r0
 8008c8a:	9805      	ldr	r0, [sp, #20]
 8008c8c:	f000 fc4e 	bl	800952c <__mcmp>
 8008c90:	900a      	str	r0, [sp, #40]	; 0x28
 8008c92:	9908      	ldr	r1, [sp, #32]
 8008c94:	9804      	ldr	r0, [sp, #16]
 8008c96:	f000 fa07 	bl	80090a8 <_Bfree>
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	9308      	str	r3, [sp, #32]
 8008ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	d109      	bne.n	8008cc0 <_dtoa_r+0xacc>
 8008cac:	2c39      	cmp	r4, #57	; 0x39
 8008cae:	d022      	beq.n	8008cf6 <_dtoa_r+0xb02>
 8008cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dd01      	ble.n	8008cba <_dtoa_r+0xac6>
 8008cb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008cb8:	3431      	adds	r4, #49	; 0x31
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	701c      	strb	r4, [r3, #0]
 8008cbe:	e76e      	b.n	8008b9e <_dtoa_r+0x9aa>
 8008cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	db04      	blt.n	8008cd0 <_dtoa_r+0xadc>
 8008cc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	d11e      	bne.n	8008d0e <_dtoa_r+0xb1a>
 8008cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	ddf1      	ble.n	8008cba <_dtoa_r+0xac6>
 8008cd6:	9905      	ldr	r1, [sp, #20]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	9804      	ldr	r0, [sp, #16]
 8008cdc:	f000 fbb8 	bl	8009450 <__lshift>
 8008ce0:	0031      	movs	r1, r6
 8008ce2:	9005      	str	r0, [sp, #20]
 8008ce4:	f000 fc22 	bl	800952c <__mcmp>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	dc02      	bgt.n	8008cf2 <_dtoa_r+0xafe>
 8008cec:	d1e5      	bne.n	8008cba <_dtoa_r+0xac6>
 8008cee:	07e3      	lsls	r3, r4, #31
 8008cf0:	d5e3      	bpl.n	8008cba <_dtoa_r+0xac6>
 8008cf2:	2c39      	cmp	r4, #57	; 0x39
 8008cf4:	d1df      	bne.n	8008cb6 <_dtoa_r+0xac2>
 8008cf6:	2339      	movs	r3, #57	; 0x39
 8008cf8:	9a07      	ldr	r2, [sp, #28]
 8008cfa:	7013      	strb	r3, [r2, #0]
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	9308      	str	r3, [sp, #32]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	781a      	ldrb	r2, [r3, #0]
 8008d04:	2a39      	cmp	r2, #57	; 0x39
 8008d06:	d063      	beq.n	8008dd0 <_dtoa_r+0xbdc>
 8008d08:	3201      	adds	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e747      	b.n	8008b9e <_dtoa_r+0x9aa>
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dd03      	ble.n	8008d1c <_dtoa_r+0xb28>
 8008d14:	2c39      	cmp	r4, #57	; 0x39
 8008d16:	d0ee      	beq.n	8008cf6 <_dtoa_r+0xb02>
 8008d18:	3401      	adds	r4, #1
 8008d1a:	e7ce      	b.n	8008cba <_dtoa_r+0xac6>
 8008d1c:	9b07      	ldr	r3, [sp, #28]
 8008d1e:	9a07      	ldr	r2, [sp, #28]
 8008d20:	701c      	strb	r4, [r3, #0]
 8008d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d03e      	beq.n	8008da6 <_dtoa_r+0xbb2>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	220a      	movs	r2, #10
 8008d2c:	9905      	ldr	r1, [sp, #20]
 8008d2e:	9804      	ldr	r0, [sp, #16]
 8008d30:	f000 f9de 	bl	80090f0 <__multadd>
 8008d34:	2300      	movs	r3, #0
 8008d36:	9005      	str	r0, [sp, #20]
 8008d38:	220a      	movs	r2, #10
 8008d3a:	0029      	movs	r1, r5
 8008d3c:	9804      	ldr	r0, [sp, #16]
 8008d3e:	42bd      	cmp	r5, r7
 8008d40:	d106      	bne.n	8008d50 <_dtoa_r+0xb5c>
 8008d42:	f000 f9d5 	bl	80090f0 <__multadd>
 8008d46:	0005      	movs	r5, r0
 8008d48:	0007      	movs	r7, r0
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	e784      	b.n	8008c5a <_dtoa_r+0xa66>
 8008d50:	f000 f9ce 	bl	80090f0 <__multadd>
 8008d54:	0039      	movs	r1, r7
 8008d56:	0005      	movs	r5, r0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	9804      	ldr	r0, [sp, #16]
 8008d5e:	f000 f9c7 	bl	80090f0 <__multadd>
 8008d62:	0007      	movs	r7, r0
 8008d64:	e7f1      	b.n	8008d4a <_dtoa_r+0xb56>
 8008d66:	9b07      	ldr	r3, [sp, #28]
 8008d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d6a:	2500      	movs	r5, #0
 8008d6c:	0031      	movs	r1, r6
 8008d6e:	9805      	ldr	r0, [sp, #20]
 8008d70:	f7ff f9b0 	bl	80080d4 <quorem>
 8008d74:	9b06      	ldr	r3, [sp, #24]
 8008d76:	3030      	adds	r0, #48	; 0x30
 8008d78:	5558      	strb	r0, [r3, r5]
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	0004      	movs	r4, r0
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dd07      	ble.n	8008d94 <_dtoa_r+0xba0>
 8008d84:	2300      	movs	r3, #0
 8008d86:	220a      	movs	r2, #10
 8008d88:	9905      	ldr	r1, [sp, #20]
 8008d8a:	9804      	ldr	r0, [sp, #16]
 8008d8c:	f000 f9b0 	bl	80090f0 <__multadd>
 8008d90:	9005      	str	r0, [sp, #20]
 8008d92:	e7eb      	b.n	8008d6c <_dtoa_r+0xb78>
 8008d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d96:	2301      	movs	r3, #1
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	dd00      	ble.n	8008d9e <_dtoa_r+0xbaa>
 8008d9c:	0013      	movs	r3, r2
 8008d9e:	2500      	movs	r5, #0
 8008da0:	9a06      	ldr	r2, [sp, #24]
 8008da2:	18d3      	adds	r3, r2, r3
 8008da4:	9308      	str	r3, [sp, #32]
 8008da6:	9905      	ldr	r1, [sp, #20]
 8008da8:	2201      	movs	r2, #1
 8008daa:	9804      	ldr	r0, [sp, #16]
 8008dac:	f000 fb50 	bl	8009450 <__lshift>
 8008db0:	0031      	movs	r1, r6
 8008db2:	9005      	str	r0, [sp, #20]
 8008db4:	f000 fbba 	bl	800952c <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	dc9f      	bgt.n	8008cfc <_dtoa_r+0xb08>
 8008dbc:	d101      	bne.n	8008dc2 <_dtoa_r+0xbce>
 8008dbe:	07e4      	lsls	r4, r4, #31
 8008dc0:	d49c      	bmi.n	8008cfc <_dtoa_r+0xb08>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	9308      	str	r3, [sp, #32]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	781a      	ldrb	r2, [r3, #0]
 8008dca:	2a30      	cmp	r2, #48	; 0x30
 8008dcc:	d0fa      	beq.n	8008dc4 <_dtoa_r+0xbd0>
 8008dce:	e6e6      	b.n	8008b9e <_dtoa_r+0x9aa>
 8008dd0:	9a06      	ldr	r2, [sp, #24]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d193      	bne.n	8008cfe <_dtoa_r+0xb0a>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	2331      	movs	r3, #49	; 0x31
 8008dde:	7013      	strb	r3, [r2, #0]
 8008de0:	e6dd      	b.n	8008b9e <_dtoa_r+0x9aa>
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <_dtoa_r+0xc14>)
 8008de4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008de6:	9306      	str	r3, [sp, #24]
 8008de8:	4b08      	ldr	r3, [pc, #32]	; (8008e0c <_dtoa_r+0xc18>)
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	d001      	beq.n	8008df2 <_dtoa_r+0xbfe>
 8008dee:	f7ff fa49 	bl	8008284 <_dtoa_r+0x90>
 8008df2:	f7ff fa49 	bl	8008288 <_dtoa_r+0x94>
 8008df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dcb6      	bgt.n	8008d6a <_dtoa_r+0xb76>
 8008dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	dd00      	ble.n	8008e04 <_dtoa_r+0xc10>
 8008e02:	e6b6      	b.n	8008b72 <_dtoa_r+0x97e>
 8008e04:	e7b1      	b.n	8008d6a <_dtoa_r+0xb76>
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	0800a430 	.word	0x0800a430
 8008e0c:	0800a438 	.word	0x0800a438

08008e10 <_free_r>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	0005      	movs	r5, r0
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d010      	beq.n	8008e3a <_free_r+0x2a>
 8008e18:	1f0c      	subs	r4, r1, #4
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	da00      	bge.n	8008e22 <_free_r+0x12>
 8008e20:	18e4      	adds	r4, r4, r3
 8008e22:	0028      	movs	r0, r5
 8008e24:	f000 f8ec 	bl	8009000 <__malloc_lock>
 8008e28:	4a1d      	ldr	r2, [pc, #116]	; (8008ea0 <_free_r+0x90>)
 8008e2a:	6813      	ldr	r3, [r2, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <_free_r+0x2c>
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	6014      	str	r4, [r2, #0]
 8008e34:	0028      	movs	r0, r5
 8008e36:	f000 f8eb 	bl	8009010 <__malloc_unlock>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d908      	bls.n	8008e52 <_free_r+0x42>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	1821      	adds	r1, r4, r0
 8008e44:	428b      	cmp	r3, r1
 8008e46:	d1f3      	bne.n	8008e30 <_free_r+0x20>
 8008e48:	6819      	ldr	r1, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	1809      	adds	r1, r1, r0
 8008e4e:	6021      	str	r1, [r4, #0]
 8008e50:	e7ee      	b.n	8008e30 <_free_r+0x20>
 8008e52:	001a      	movs	r2, r3
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <_free_r+0x4e>
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	d9f9      	bls.n	8008e52 <_free_r+0x42>
 8008e5e:	6811      	ldr	r1, [r2, #0]
 8008e60:	1850      	adds	r0, r2, r1
 8008e62:	42a0      	cmp	r0, r4
 8008e64:	d10b      	bne.n	8008e7e <_free_r+0x6e>
 8008e66:	6820      	ldr	r0, [r4, #0]
 8008e68:	1809      	adds	r1, r1, r0
 8008e6a:	1850      	adds	r0, r2, r1
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	4283      	cmp	r3, r0
 8008e70:	d1e0      	bne.n	8008e34 <_free_r+0x24>
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	1841      	adds	r1, r0, r1
 8008e78:	6011      	str	r1, [r2, #0]
 8008e7a:	6053      	str	r3, [r2, #4]
 8008e7c:	e7da      	b.n	8008e34 <_free_r+0x24>
 8008e7e:	42a0      	cmp	r0, r4
 8008e80:	d902      	bls.n	8008e88 <_free_r+0x78>
 8008e82:	230c      	movs	r3, #12
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	e7d5      	b.n	8008e34 <_free_r+0x24>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	1821      	adds	r1, r4, r0
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	d103      	bne.n	8008e98 <_free_r+0x88>
 8008e90:	6819      	ldr	r1, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	1809      	adds	r1, r1, r0
 8008e96:	6021      	str	r1, [r4, #0]
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	6054      	str	r4, [r2, #4]
 8008e9c:	e7ca      	b.n	8008e34 <_free_r+0x24>
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	20000538 	.word	0x20000538

08008ea4 <malloc>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <malloc+0x10>)
 8008ea8:	0001      	movs	r1, r0
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	f000 f826 	bl	8008efc <_malloc_r>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	20000090 	.word	0x20000090

08008eb8 <sbrk_aligned>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4e0f      	ldr	r6, [pc, #60]	; (8008ef8 <sbrk_aligned+0x40>)
 8008ebc:	000d      	movs	r5, r1
 8008ebe:	6831      	ldr	r1, [r6, #0]
 8008ec0:	0004      	movs	r4, r0
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d102      	bne.n	8008ecc <sbrk_aligned+0x14>
 8008ec6:	f000 fe6f 	bl	8009ba8 <_sbrk_r>
 8008eca:	6030      	str	r0, [r6, #0]
 8008ecc:	0029      	movs	r1, r5
 8008ece:	0020      	movs	r0, r4
 8008ed0:	f000 fe6a 	bl	8009ba8 <_sbrk_r>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d00a      	beq.n	8008eee <sbrk_aligned+0x36>
 8008ed8:	2303      	movs	r3, #3
 8008eda:	1cc5      	adds	r5, r0, #3
 8008edc:	439d      	bics	r5, r3
 8008ede:	42a8      	cmp	r0, r5
 8008ee0:	d007      	beq.n	8008ef2 <sbrk_aligned+0x3a>
 8008ee2:	1a29      	subs	r1, r5, r0
 8008ee4:	0020      	movs	r0, r4
 8008ee6:	f000 fe5f 	bl	8009ba8 <_sbrk_r>
 8008eea:	3001      	adds	r0, #1
 8008eec:	d101      	bne.n	8008ef2 <sbrk_aligned+0x3a>
 8008eee:	2501      	movs	r5, #1
 8008ef0:	426d      	negs	r5, r5
 8008ef2:	0028      	movs	r0, r5
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	2000053c 	.word	0x2000053c

08008efc <_malloc_r>:
 8008efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008efe:	2203      	movs	r2, #3
 8008f00:	1ccb      	adds	r3, r1, #3
 8008f02:	4393      	bics	r3, r2
 8008f04:	3308      	adds	r3, #8
 8008f06:	0006      	movs	r6, r0
 8008f08:	001f      	movs	r7, r3
 8008f0a:	2b0c      	cmp	r3, #12
 8008f0c:	d238      	bcs.n	8008f80 <_malloc_r+0x84>
 8008f0e:	270c      	movs	r7, #12
 8008f10:	42b9      	cmp	r1, r7
 8008f12:	d837      	bhi.n	8008f84 <_malloc_r+0x88>
 8008f14:	0030      	movs	r0, r6
 8008f16:	f000 f873 	bl	8009000 <__malloc_lock>
 8008f1a:	4b38      	ldr	r3, [pc, #224]	; (8008ffc <_malloc_r+0x100>)
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	001c      	movs	r4, r3
 8008f22:	2c00      	cmp	r4, #0
 8008f24:	d133      	bne.n	8008f8e <_malloc_r+0x92>
 8008f26:	0039      	movs	r1, r7
 8008f28:	0030      	movs	r0, r6
 8008f2a:	f7ff ffc5 	bl	8008eb8 <sbrk_aligned>
 8008f2e:	0004      	movs	r4, r0
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d15e      	bne.n	8008ff2 <_malloc_r+0xf6>
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	681c      	ldr	r4, [r3, #0]
 8008f38:	0025      	movs	r5, r4
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	d14e      	bne.n	8008fdc <_malloc_r+0xe0>
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	d051      	beq.n	8008fe6 <_malloc_r+0xea>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	0029      	movs	r1, r5
 8008f46:	18e3      	adds	r3, r4, r3
 8008f48:	0030      	movs	r0, r6
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	f000 fe2c 	bl	8009ba8 <_sbrk_r>
 8008f50:	9b01      	ldr	r3, [sp, #4]
 8008f52:	4283      	cmp	r3, r0
 8008f54:	d147      	bne.n	8008fe6 <_malloc_r+0xea>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	0030      	movs	r0, r6
 8008f5a:	1aff      	subs	r7, r7, r3
 8008f5c:	0039      	movs	r1, r7
 8008f5e:	f7ff ffab 	bl	8008eb8 <sbrk_aligned>
 8008f62:	3001      	adds	r0, #1
 8008f64:	d03f      	beq.n	8008fe6 <_malloc_r+0xea>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	19db      	adds	r3, r3, r7
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	9b00      	ldr	r3, [sp, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d040      	beq.n	8008ff6 <_malloc_r+0xfa>
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	42a2      	cmp	r2, r4
 8008f78:	d133      	bne.n	8008fe2 <_malloc_r+0xe6>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	e014      	b.n	8008faa <_malloc_r+0xae>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dac5      	bge.n	8008f10 <_malloc_r+0x14>
 8008f84:	230c      	movs	r3, #12
 8008f86:	2500      	movs	r5, #0
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	0028      	movs	r0, r5
 8008f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	1bc9      	subs	r1, r1, r7
 8008f92:	d420      	bmi.n	8008fd6 <_malloc_r+0xda>
 8008f94:	290b      	cmp	r1, #11
 8008f96:	d918      	bls.n	8008fca <_malloc_r+0xce>
 8008f98:	19e2      	adds	r2, r4, r7
 8008f9a:	6027      	str	r7, [r4, #0]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d112      	bne.n	8008fc6 <_malloc_r+0xca>
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	6011      	str	r1, [r2, #0]
 8008fa8:	6053      	str	r3, [r2, #4]
 8008faa:	0030      	movs	r0, r6
 8008fac:	0025      	movs	r5, r4
 8008fae:	f000 f82f 	bl	8009010 <__malloc_unlock>
 8008fb2:	2207      	movs	r2, #7
 8008fb4:	350b      	adds	r5, #11
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	4395      	bics	r5, r2
 8008fba:	1aea      	subs	r2, r5, r3
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	d0e4      	beq.n	8008f8a <_malloc_r+0x8e>
 8008fc0:	1b5b      	subs	r3, r3, r5
 8008fc2:	50a3      	str	r3, [r4, r2]
 8008fc4:	e7e1      	b.n	8008f8a <_malloc_r+0x8e>
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	e7ec      	b.n	8008fa4 <_malloc_r+0xa8>
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d1d5      	bne.n	8008f7c <_malloc_r+0x80>
 8008fd0:	9b00      	ldr	r3, [sp, #0]
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e7e9      	b.n	8008faa <_malloc_r+0xae>
 8008fd6:	0023      	movs	r3, r4
 8008fd8:	6864      	ldr	r4, [r4, #4]
 8008fda:	e7a2      	b.n	8008f22 <_malloc_r+0x26>
 8008fdc:	002c      	movs	r4, r5
 8008fde:	686d      	ldr	r5, [r5, #4]
 8008fe0:	e7ab      	b.n	8008f3a <_malloc_r+0x3e>
 8008fe2:	0013      	movs	r3, r2
 8008fe4:	e7c4      	b.n	8008f70 <_malloc_r+0x74>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	0030      	movs	r0, r6
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	f000 f810 	bl	8009010 <__malloc_unlock>
 8008ff0:	e7cb      	b.n	8008f8a <_malloc_r+0x8e>
 8008ff2:	6027      	str	r7, [r4, #0]
 8008ff4:	e7d9      	b.n	8008faa <_malloc_r+0xae>
 8008ff6:	605b      	str	r3, [r3, #4]
 8008ff8:	deff      	udf	#255	; 0xff
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	20000538 	.word	0x20000538

08009000 <__malloc_lock>:
 8009000:	b510      	push	{r4, lr}
 8009002:	4802      	ldr	r0, [pc, #8]	; (800900c <__malloc_lock+0xc>)
 8009004:	f7ff f859 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	20000534 	.word	0x20000534

08009010 <__malloc_unlock>:
 8009010:	b510      	push	{r4, lr}
 8009012:	4802      	ldr	r0, [pc, #8]	; (800901c <__malloc_unlock+0xc>)
 8009014:	f7ff f852 	bl	80080bc <__retarget_lock_release_recursive>
 8009018:	bd10      	pop	{r4, pc}
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	20000534 	.word	0x20000534

08009020 <_Balloc>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	69c5      	ldr	r5, [r0, #28]
 8009024:	0006      	movs	r6, r0
 8009026:	000c      	movs	r4, r1
 8009028:	2d00      	cmp	r5, #0
 800902a:	d10e      	bne.n	800904a <_Balloc+0x2a>
 800902c:	2010      	movs	r0, #16
 800902e:	f7ff ff39 	bl	8008ea4 <malloc>
 8009032:	1e02      	subs	r2, r0, #0
 8009034:	61f0      	str	r0, [r6, #28]
 8009036:	d104      	bne.n	8009042 <_Balloc+0x22>
 8009038:	216b      	movs	r1, #107	; 0x6b
 800903a:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <_Balloc+0x80>)
 800903c:	4819      	ldr	r0, [pc, #100]	; (80090a4 <_Balloc+0x84>)
 800903e:	f000 fdcf 	bl	8009be0 <__assert_func>
 8009042:	6045      	str	r5, [r0, #4]
 8009044:	6085      	str	r5, [r0, #8]
 8009046:	6005      	str	r5, [r0, #0]
 8009048:	60c5      	str	r5, [r0, #12]
 800904a:	69f5      	ldr	r5, [r6, #28]
 800904c:	68eb      	ldr	r3, [r5, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d013      	beq.n	800907a <_Balloc+0x5a>
 8009052:	69f3      	ldr	r3, [r6, #28]
 8009054:	00a2      	lsls	r2, r4, #2
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	189b      	adds	r3, r3, r2
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	2800      	cmp	r0, #0
 800905e:	d118      	bne.n	8009092 <_Balloc+0x72>
 8009060:	2101      	movs	r1, #1
 8009062:	000d      	movs	r5, r1
 8009064:	40a5      	lsls	r5, r4
 8009066:	1d6a      	adds	r2, r5, #5
 8009068:	0030      	movs	r0, r6
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	f000 fdd6 	bl	8009c1c <_calloc_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	d00c      	beq.n	800908e <_Balloc+0x6e>
 8009074:	6044      	str	r4, [r0, #4]
 8009076:	6085      	str	r5, [r0, #8]
 8009078:	e00d      	b.n	8009096 <_Balloc+0x76>
 800907a:	2221      	movs	r2, #33	; 0x21
 800907c:	2104      	movs	r1, #4
 800907e:	0030      	movs	r0, r6
 8009080:	f000 fdcc 	bl	8009c1c <_calloc_r>
 8009084:	69f3      	ldr	r3, [r6, #28]
 8009086:	60e8      	str	r0, [r5, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e1      	bne.n	8009052 <_Balloc+0x32>
 800908e:	2000      	movs	r0, #0
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	6802      	ldr	r2, [r0, #0]
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	6103      	str	r3, [r0, #16]
 800909a:	60c3      	str	r3, [r0, #12]
 800909c:	e7f8      	b.n	8009090 <_Balloc+0x70>
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	0800a43d 	.word	0x0800a43d
 80090a4:	0800a4bd 	.word	0x0800a4bd

080090a8 <_Bfree>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	69c6      	ldr	r6, [r0, #28]
 80090ac:	0005      	movs	r5, r0
 80090ae:	000c      	movs	r4, r1
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d10e      	bne.n	80090d2 <_Bfree+0x2a>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7ff fef5 	bl	8008ea4 <malloc>
 80090ba:	1e02      	subs	r2, r0, #0
 80090bc:	61e8      	str	r0, [r5, #28]
 80090be:	d104      	bne.n	80090ca <_Bfree+0x22>
 80090c0:	218f      	movs	r1, #143	; 0x8f
 80090c2:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <_Bfree+0x40>)
 80090c4:	4809      	ldr	r0, [pc, #36]	; (80090ec <_Bfree+0x44>)
 80090c6:	f000 fd8b 	bl	8009be0 <__assert_func>
 80090ca:	6046      	str	r6, [r0, #4]
 80090cc:	6086      	str	r6, [r0, #8]
 80090ce:	6006      	str	r6, [r0, #0]
 80090d0:	60c6      	str	r6, [r0, #12]
 80090d2:	2c00      	cmp	r4, #0
 80090d4:	d007      	beq.n	80090e6 <_Bfree+0x3e>
 80090d6:	69eb      	ldr	r3, [r5, #28]
 80090d8:	6862      	ldr	r2, [r4, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	189b      	adds	r3, r3, r2
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	601c      	str	r4, [r3, #0]
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	0800a43d 	.word	0x0800a43d
 80090ec:	0800a4bd 	.word	0x0800a4bd

080090f0 <__multadd>:
 80090f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f2:	000e      	movs	r6, r1
 80090f4:	9001      	str	r0, [sp, #4]
 80090f6:	000c      	movs	r4, r1
 80090f8:	001d      	movs	r5, r3
 80090fa:	2000      	movs	r0, #0
 80090fc:	690f      	ldr	r7, [r1, #16]
 80090fe:	3614      	adds	r6, #20
 8009100:	6833      	ldr	r3, [r6, #0]
 8009102:	3001      	adds	r0, #1
 8009104:	b299      	uxth	r1, r3
 8009106:	4351      	muls	r1, r2
 8009108:	0c1b      	lsrs	r3, r3, #16
 800910a:	4353      	muls	r3, r2
 800910c:	1949      	adds	r1, r1, r5
 800910e:	0c0d      	lsrs	r5, r1, #16
 8009110:	195b      	adds	r3, r3, r5
 8009112:	0c1d      	lsrs	r5, r3, #16
 8009114:	b289      	uxth	r1, r1
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	185b      	adds	r3, r3, r1
 800911a:	c608      	stmia	r6!, {r3}
 800911c:	4287      	cmp	r7, r0
 800911e:	dcef      	bgt.n	8009100 <__multadd+0x10>
 8009120:	2d00      	cmp	r5, #0
 8009122:	d022      	beq.n	800916a <__multadd+0x7a>
 8009124:	68a3      	ldr	r3, [r4, #8]
 8009126:	42bb      	cmp	r3, r7
 8009128:	dc19      	bgt.n	800915e <__multadd+0x6e>
 800912a:	6861      	ldr	r1, [r4, #4]
 800912c:	9801      	ldr	r0, [sp, #4]
 800912e:	3101      	adds	r1, #1
 8009130:	f7ff ff76 	bl	8009020 <_Balloc>
 8009134:	1e06      	subs	r6, r0, #0
 8009136:	d105      	bne.n	8009144 <__multadd+0x54>
 8009138:	0032      	movs	r2, r6
 800913a:	21ba      	movs	r1, #186	; 0xba
 800913c:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <__multadd+0x80>)
 800913e:	480d      	ldr	r0, [pc, #52]	; (8009174 <__multadd+0x84>)
 8009140:	f000 fd4e 	bl	8009be0 <__assert_func>
 8009144:	0021      	movs	r1, r4
 8009146:	6922      	ldr	r2, [r4, #16]
 8009148:	310c      	adds	r1, #12
 800914a:	3202      	adds	r2, #2
 800914c:	0092      	lsls	r2, r2, #2
 800914e:	300c      	adds	r0, #12
 8009150:	f000 fd3c 	bl	8009bcc <memcpy>
 8009154:	0021      	movs	r1, r4
 8009156:	9801      	ldr	r0, [sp, #4]
 8009158:	f7ff ffa6 	bl	80090a8 <_Bfree>
 800915c:	0034      	movs	r4, r6
 800915e:	1d3b      	adds	r3, r7, #4
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	18e3      	adds	r3, r4, r3
 8009164:	605d      	str	r5, [r3, #4]
 8009166:	1c7b      	adds	r3, r7, #1
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	0020      	movs	r0, r4
 800916c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	0800a4ac 	.word	0x0800a4ac
 8009174:	0800a4bd 	.word	0x0800a4bd

08009178 <__hi0bits>:
 8009178:	0003      	movs	r3, r0
 800917a:	0c02      	lsrs	r2, r0, #16
 800917c:	2000      	movs	r0, #0
 800917e:	4282      	cmp	r2, r0
 8009180:	d101      	bne.n	8009186 <__hi0bits+0xe>
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	3010      	adds	r0, #16
 8009186:	0e1a      	lsrs	r2, r3, #24
 8009188:	d101      	bne.n	800918e <__hi0bits+0x16>
 800918a:	3008      	adds	r0, #8
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	0f1a      	lsrs	r2, r3, #28
 8009190:	d101      	bne.n	8009196 <__hi0bits+0x1e>
 8009192:	3004      	adds	r0, #4
 8009194:	011b      	lsls	r3, r3, #4
 8009196:	0f9a      	lsrs	r2, r3, #30
 8009198:	d101      	bne.n	800919e <__hi0bits+0x26>
 800919a:	3002      	adds	r0, #2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	db03      	blt.n	80091aa <__hi0bits+0x32>
 80091a2:	3001      	adds	r0, #1
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	d400      	bmi.n	80091aa <__hi0bits+0x32>
 80091a8:	2020      	movs	r0, #32
 80091aa:	4770      	bx	lr

080091ac <__lo0bits>:
 80091ac:	6803      	ldr	r3, [r0, #0]
 80091ae:	0001      	movs	r1, r0
 80091b0:	2207      	movs	r2, #7
 80091b2:	0018      	movs	r0, r3
 80091b4:	4010      	ands	r0, r2
 80091b6:	4213      	tst	r3, r2
 80091b8:	d00d      	beq.n	80091d6 <__lo0bits+0x2a>
 80091ba:	3a06      	subs	r2, #6
 80091bc:	2000      	movs	r0, #0
 80091be:	4213      	tst	r3, r2
 80091c0:	d105      	bne.n	80091ce <__lo0bits+0x22>
 80091c2:	3002      	adds	r0, #2
 80091c4:	4203      	tst	r3, r0
 80091c6:	d003      	beq.n	80091d0 <__lo0bits+0x24>
 80091c8:	40d3      	lsrs	r3, r2
 80091ca:	0010      	movs	r0, r2
 80091cc:	600b      	str	r3, [r1, #0]
 80091ce:	4770      	bx	lr
 80091d0:	089b      	lsrs	r3, r3, #2
 80091d2:	600b      	str	r3, [r1, #0]
 80091d4:	e7fb      	b.n	80091ce <__lo0bits+0x22>
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d101      	bne.n	80091e0 <__lo0bits+0x34>
 80091dc:	2010      	movs	r0, #16
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d101      	bne.n	80091ea <__lo0bits+0x3e>
 80091e6:	3008      	adds	r0, #8
 80091e8:	0a1b      	lsrs	r3, r3, #8
 80091ea:	071a      	lsls	r2, r3, #28
 80091ec:	d101      	bne.n	80091f2 <__lo0bits+0x46>
 80091ee:	3004      	adds	r0, #4
 80091f0:	091b      	lsrs	r3, r3, #4
 80091f2:	079a      	lsls	r2, r3, #30
 80091f4:	d101      	bne.n	80091fa <__lo0bits+0x4e>
 80091f6:	3002      	adds	r0, #2
 80091f8:	089b      	lsrs	r3, r3, #2
 80091fa:	07da      	lsls	r2, r3, #31
 80091fc:	d4e9      	bmi.n	80091d2 <__lo0bits+0x26>
 80091fe:	3001      	adds	r0, #1
 8009200:	085b      	lsrs	r3, r3, #1
 8009202:	d1e6      	bne.n	80091d2 <__lo0bits+0x26>
 8009204:	2020      	movs	r0, #32
 8009206:	e7e2      	b.n	80091ce <__lo0bits+0x22>

08009208 <__i2b>:
 8009208:	b510      	push	{r4, lr}
 800920a:	000c      	movs	r4, r1
 800920c:	2101      	movs	r1, #1
 800920e:	f7ff ff07 	bl	8009020 <_Balloc>
 8009212:	2800      	cmp	r0, #0
 8009214:	d107      	bne.n	8009226 <__i2b+0x1e>
 8009216:	2146      	movs	r1, #70	; 0x46
 8009218:	4c05      	ldr	r4, [pc, #20]	; (8009230 <__i2b+0x28>)
 800921a:	0002      	movs	r2, r0
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <__i2b+0x2c>)
 800921e:	0020      	movs	r0, r4
 8009220:	31ff      	adds	r1, #255	; 0xff
 8009222:	f000 fcdd 	bl	8009be0 <__assert_func>
 8009226:	2301      	movs	r3, #1
 8009228:	6144      	str	r4, [r0, #20]
 800922a:	6103      	str	r3, [r0, #16]
 800922c:	bd10      	pop	{r4, pc}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	0800a4bd 	.word	0x0800a4bd
 8009234:	0800a4ac 	.word	0x0800a4ac

08009238 <__multiply>:
 8009238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923a:	0015      	movs	r5, r2
 800923c:	690a      	ldr	r2, [r1, #16]
 800923e:	692b      	ldr	r3, [r5, #16]
 8009240:	000c      	movs	r4, r1
 8009242:	b08b      	sub	sp, #44	; 0x2c
 8009244:	429a      	cmp	r2, r3
 8009246:	da01      	bge.n	800924c <__multiply+0x14>
 8009248:	002c      	movs	r4, r5
 800924a:	000d      	movs	r5, r1
 800924c:	6927      	ldr	r7, [r4, #16]
 800924e:	692e      	ldr	r6, [r5, #16]
 8009250:	6861      	ldr	r1, [r4, #4]
 8009252:	19bb      	adds	r3, r7, r6
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	19ba      	adds	r2, r7, r6
 800925a:	4293      	cmp	r3, r2
 800925c:	da00      	bge.n	8009260 <__multiply+0x28>
 800925e:	3101      	adds	r1, #1
 8009260:	f7ff fede 	bl	8009020 <_Balloc>
 8009264:	9002      	str	r0, [sp, #8]
 8009266:	2800      	cmp	r0, #0
 8009268:	d106      	bne.n	8009278 <__multiply+0x40>
 800926a:	21b1      	movs	r1, #177	; 0xb1
 800926c:	4b48      	ldr	r3, [pc, #288]	; (8009390 <__multiply+0x158>)
 800926e:	4849      	ldr	r0, [pc, #292]	; (8009394 <__multiply+0x15c>)
 8009270:	9a02      	ldr	r2, [sp, #8]
 8009272:	0049      	lsls	r1, r1, #1
 8009274:	f000 fcb4 	bl	8009be0 <__assert_func>
 8009278:	9b02      	ldr	r3, [sp, #8]
 800927a:	2200      	movs	r2, #0
 800927c:	3314      	adds	r3, #20
 800927e:	469c      	mov	ip, r3
 8009280:	19bb      	adds	r3, r7, r6
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4463      	add	r3, ip
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	4663      	mov	r3, ip
 800928a:	9904      	ldr	r1, [sp, #16]
 800928c:	428b      	cmp	r3, r1
 800928e:	d32a      	bcc.n	80092e6 <__multiply+0xae>
 8009290:	0023      	movs	r3, r4
 8009292:	00bf      	lsls	r7, r7, #2
 8009294:	3314      	adds	r3, #20
 8009296:	3514      	adds	r5, #20
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	00b6      	lsls	r6, r6, #2
 800929c:	19db      	adds	r3, r3, r7
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	19ab      	adds	r3, r5, r6
 80092a2:	9309      	str	r3, [sp, #36]	; 0x24
 80092a4:	2304      	movs	r3, #4
 80092a6:	9306      	str	r3, [sp, #24]
 80092a8:	0023      	movs	r3, r4
 80092aa:	9a05      	ldr	r2, [sp, #20]
 80092ac:	3315      	adds	r3, #21
 80092ae:	9501      	str	r5, [sp, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d305      	bcc.n	80092c0 <__multiply+0x88>
 80092b4:	1b13      	subs	r3, r2, r4
 80092b6:	3b15      	subs	r3, #21
 80092b8:	089b      	lsrs	r3, r3, #2
 80092ba:	3301      	adds	r3, #1
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	9306      	str	r3, [sp, #24]
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d310      	bcc.n	80092ea <__multiply+0xb2>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dd05      	ble.n	80092da <__multiply+0xa2>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d056      	beq.n	8009388 <__multiply+0x150>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	9a03      	ldr	r2, [sp, #12]
 80092de:	0018      	movs	r0, r3
 80092e0:	611a      	str	r2, [r3, #16]
 80092e2:	b00b      	add	sp, #44	; 0x2c
 80092e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e6:	c304      	stmia	r3!, {r2}
 80092e8:	e7cf      	b.n	800928a <__multiply+0x52>
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	b280      	uxth	r0, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d01e      	beq.n	8009332 <__multiply+0xfa>
 80092f4:	4667      	mov	r7, ip
 80092f6:	2500      	movs	r5, #0
 80092f8:	9e08      	ldr	r6, [sp, #32]
 80092fa:	ce02      	ldmia	r6!, {r1}
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	9307      	str	r3, [sp, #28]
 8009300:	b28b      	uxth	r3, r1
 8009302:	4343      	muls	r3, r0
 8009304:	001a      	movs	r2, r3
 8009306:	466b      	mov	r3, sp
 8009308:	8b9b      	ldrh	r3, [r3, #28]
 800930a:	18d3      	adds	r3, r2, r3
 800930c:	195b      	adds	r3, r3, r5
 800930e:	0c0d      	lsrs	r5, r1, #16
 8009310:	4345      	muls	r5, r0
 8009312:	9a07      	ldr	r2, [sp, #28]
 8009314:	0c11      	lsrs	r1, r2, #16
 8009316:	1869      	adds	r1, r5, r1
 8009318:	0c1a      	lsrs	r2, r3, #16
 800931a:	188a      	adds	r2, r1, r2
 800931c:	b29b      	uxth	r3, r3
 800931e:	0c15      	lsrs	r5, r2, #16
 8009320:	0412      	lsls	r2, r2, #16
 8009322:	431a      	orrs	r2, r3
 8009324:	9b05      	ldr	r3, [sp, #20]
 8009326:	c704      	stmia	r7!, {r2}
 8009328:	42b3      	cmp	r3, r6
 800932a:	d8e6      	bhi.n	80092fa <__multiply+0xc2>
 800932c:	4663      	mov	r3, ip
 800932e:	9a06      	ldr	r2, [sp, #24]
 8009330:	509d      	str	r5, [r3, r2]
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	0c00      	lsrs	r0, r0, #16
 8009338:	d020      	beq.n	800937c <__multiply+0x144>
 800933a:	4663      	mov	r3, ip
 800933c:	0025      	movs	r5, r4
 800933e:	4661      	mov	r1, ip
 8009340:	2700      	movs	r7, #0
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3514      	adds	r5, #20
 8009346:	682a      	ldr	r2, [r5, #0]
 8009348:	680e      	ldr	r6, [r1, #0]
 800934a:	b292      	uxth	r2, r2
 800934c:	4342      	muls	r2, r0
 800934e:	0c36      	lsrs	r6, r6, #16
 8009350:	1992      	adds	r2, r2, r6
 8009352:	19d2      	adds	r2, r2, r7
 8009354:	0416      	lsls	r6, r2, #16
 8009356:	b29b      	uxth	r3, r3
 8009358:	431e      	orrs	r6, r3
 800935a:	600e      	str	r6, [r1, #0]
 800935c:	cd40      	ldmia	r5!, {r6}
 800935e:	684b      	ldr	r3, [r1, #4]
 8009360:	0c36      	lsrs	r6, r6, #16
 8009362:	4346      	muls	r6, r0
 8009364:	b29b      	uxth	r3, r3
 8009366:	0c12      	lsrs	r2, r2, #16
 8009368:	18f3      	adds	r3, r6, r3
 800936a:	189b      	adds	r3, r3, r2
 800936c:	9a05      	ldr	r2, [sp, #20]
 800936e:	0c1f      	lsrs	r7, r3, #16
 8009370:	3104      	adds	r1, #4
 8009372:	42aa      	cmp	r2, r5
 8009374:	d8e7      	bhi.n	8009346 <__multiply+0x10e>
 8009376:	4662      	mov	r2, ip
 8009378:	9906      	ldr	r1, [sp, #24]
 800937a:	5053      	str	r3, [r2, r1]
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	2304      	movs	r3, #4
 8009384:	449c      	add	ip, r3
 8009386:	e79b      	b.n	80092c0 <__multiply+0x88>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	3b01      	subs	r3, #1
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	e79b      	b.n	80092c8 <__multiply+0x90>
 8009390:	0800a4ac 	.word	0x0800a4ac
 8009394:	0800a4bd 	.word	0x0800a4bd

08009398 <__pow5mult>:
 8009398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800939a:	2303      	movs	r3, #3
 800939c:	0015      	movs	r5, r2
 800939e:	0007      	movs	r7, r0
 80093a0:	000e      	movs	r6, r1
 80093a2:	401a      	ands	r2, r3
 80093a4:	421d      	tst	r5, r3
 80093a6:	d008      	beq.n	80093ba <__pow5mult+0x22>
 80093a8:	4925      	ldr	r1, [pc, #148]	; (8009440 <__pow5mult+0xa8>)
 80093aa:	3a01      	subs	r2, #1
 80093ac:	0092      	lsls	r2, r2, #2
 80093ae:	5852      	ldr	r2, [r2, r1]
 80093b0:	2300      	movs	r3, #0
 80093b2:	0031      	movs	r1, r6
 80093b4:	f7ff fe9c 	bl	80090f0 <__multadd>
 80093b8:	0006      	movs	r6, r0
 80093ba:	10ad      	asrs	r5, r5, #2
 80093bc:	d03d      	beq.n	800943a <__pow5mult+0xa2>
 80093be:	69fc      	ldr	r4, [r7, #28]
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	d10f      	bne.n	80093e4 <__pow5mult+0x4c>
 80093c4:	2010      	movs	r0, #16
 80093c6:	f7ff fd6d 	bl	8008ea4 <malloc>
 80093ca:	1e02      	subs	r2, r0, #0
 80093cc:	61f8      	str	r0, [r7, #28]
 80093ce:	d105      	bne.n	80093dc <__pow5mult+0x44>
 80093d0:	21b4      	movs	r1, #180	; 0xb4
 80093d2:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <__pow5mult+0xac>)
 80093d4:	481c      	ldr	r0, [pc, #112]	; (8009448 <__pow5mult+0xb0>)
 80093d6:	31ff      	adds	r1, #255	; 0xff
 80093d8:	f000 fc02 	bl	8009be0 <__assert_func>
 80093dc:	6044      	str	r4, [r0, #4]
 80093de:	6084      	str	r4, [r0, #8]
 80093e0:	6004      	str	r4, [r0, #0]
 80093e2:	60c4      	str	r4, [r0, #12]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	689c      	ldr	r4, [r3, #8]
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	d108      	bne.n	8009400 <__pow5mult+0x68>
 80093ee:	0038      	movs	r0, r7
 80093f0:	4916      	ldr	r1, [pc, #88]	; (800944c <__pow5mult+0xb4>)
 80093f2:	f7ff ff09 	bl	8009208 <__i2b>
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	0004      	movs	r4, r0
 80093fa:	6098      	str	r0, [r3, #8]
 80093fc:	2300      	movs	r3, #0
 80093fe:	6003      	str	r3, [r0, #0]
 8009400:	2301      	movs	r3, #1
 8009402:	421d      	tst	r5, r3
 8009404:	d00a      	beq.n	800941c <__pow5mult+0x84>
 8009406:	0031      	movs	r1, r6
 8009408:	0022      	movs	r2, r4
 800940a:	0038      	movs	r0, r7
 800940c:	f7ff ff14 	bl	8009238 <__multiply>
 8009410:	0031      	movs	r1, r6
 8009412:	9001      	str	r0, [sp, #4]
 8009414:	0038      	movs	r0, r7
 8009416:	f7ff fe47 	bl	80090a8 <_Bfree>
 800941a:	9e01      	ldr	r6, [sp, #4]
 800941c:	106d      	asrs	r5, r5, #1
 800941e:	d00c      	beq.n	800943a <__pow5mult+0xa2>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	2800      	cmp	r0, #0
 8009424:	d107      	bne.n	8009436 <__pow5mult+0x9e>
 8009426:	0022      	movs	r2, r4
 8009428:	0021      	movs	r1, r4
 800942a:	0038      	movs	r0, r7
 800942c:	f7ff ff04 	bl	8009238 <__multiply>
 8009430:	2300      	movs	r3, #0
 8009432:	6020      	str	r0, [r4, #0]
 8009434:	6003      	str	r3, [r0, #0]
 8009436:	0004      	movs	r4, r0
 8009438:	e7e2      	b.n	8009400 <__pow5mult+0x68>
 800943a:	0030      	movs	r0, r6
 800943c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	0800a608 	.word	0x0800a608
 8009444:	0800a43d 	.word	0x0800a43d
 8009448:	0800a4bd 	.word	0x0800a4bd
 800944c:	00000271 	.word	0x00000271

08009450 <__lshift>:
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009452:	000c      	movs	r4, r1
 8009454:	0017      	movs	r7, r2
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	1155      	asrs	r5, r2, #5
 800945a:	b087      	sub	sp, #28
 800945c:	18eb      	adds	r3, r5, r3
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	3301      	adds	r3, #1
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	6849      	ldr	r1, [r1, #4]
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	9004      	str	r0, [sp, #16]
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	4293      	cmp	r3, r2
 800946e:	db10      	blt.n	8009492 <__lshift+0x42>
 8009470:	9804      	ldr	r0, [sp, #16]
 8009472:	f7ff fdd5 	bl	8009020 <_Balloc>
 8009476:	2300      	movs	r3, #0
 8009478:	0002      	movs	r2, r0
 800947a:	0006      	movs	r6, r0
 800947c:	0019      	movs	r1, r3
 800947e:	3214      	adds	r2, #20
 8009480:	4298      	cmp	r0, r3
 8009482:	d10c      	bne.n	800949e <__lshift+0x4e>
 8009484:	31df      	adds	r1, #223	; 0xdf
 8009486:	0032      	movs	r2, r6
 8009488:	4b26      	ldr	r3, [pc, #152]	; (8009524 <__lshift+0xd4>)
 800948a:	4827      	ldr	r0, [pc, #156]	; (8009528 <__lshift+0xd8>)
 800948c:	31ff      	adds	r1, #255	; 0xff
 800948e:	f000 fba7 	bl	8009be0 <__assert_func>
 8009492:	3101      	adds	r1, #1
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	e7e8      	b.n	800946a <__lshift+0x1a>
 8009498:	0098      	lsls	r0, r3, #2
 800949a:	5011      	str	r1, [r2, r0]
 800949c:	3301      	adds	r3, #1
 800949e:	42ab      	cmp	r3, r5
 80094a0:	dbfa      	blt.n	8009498 <__lshift+0x48>
 80094a2:	43eb      	mvns	r3, r5
 80094a4:	17db      	asrs	r3, r3, #31
 80094a6:	401d      	ands	r5, r3
 80094a8:	211f      	movs	r1, #31
 80094aa:	0023      	movs	r3, r4
 80094ac:	0038      	movs	r0, r7
 80094ae:	00ad      	lsls	r5, r5, #2
 80094b0:	1955      	adds	r5, r2, r5
 80094b2:	6922      	ldr	r2, [r4, #16]
 80094b4:	3314      	adds	r3, #20
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	4008      	ands	r0, r1
 80094ba:	4684      	mov	ip, r0
 80094bc:	189a      	adds	r2, r3, r2
 80094be:	420f      	tst	r7, r1
 80094c0:	d02a      	beq.n	8009518 <__lshift+0xc8>
 80094c2:	3101      	adds	r1, #1
 80094c4:	1a09      	subs	r1, r1, r0
 80094c6:	9105      	str	r1, [sp, #20]
 80094c8:	2100      	movs	r1, #0
 80094ca:	9503      	str	r5, [sp, #12]
 80094cc:	4667      	mov	r7, ip
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	40b8      	lsls	r0, r7
 80094d2:	4308      	orrs	r0, r1
 80094d4:	9903      	ldr	r1, [sp, #12]
 80094d6:	c101      	stmia	r1!, {r0}
 80094d8:	9103      	str	r1, [sp, #12]
 80094da:	9805      	ldr	r0, [sp, #20]
 80094dc:	cb02      	ldmia	r3!, {r1}
 80094de:	40c1      	lsrs	r1, r0
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d8f3      	bhi.n	80094cc <__lshift+0x7c>
 80094e4:	0020      	movs	r0, r4
 80094e6:	3015      	adds	r0, #21
 80094e8:	2304      	movs	r3, #4
 80094ea:	4282      	cmp	r2, r0
 80094ec:	d304      	bcc.n	80094f8 <__lshift+0xa8>
 80094ee:	1b13      	subs	r3, r2, r4
 80094f0:	3b15      	subs	r3, #21
 80094f2:	089b      	lsrs	r3, r3, #2
 80094f4:	3301      	adds	r3, #1
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	50e9      	str	r1, [r5, r3]
 80094fa:	2900      	cmp	r1, #0
 80094fc:	d002      	beq.n	8009504 <__lshift+0xb4>
 80094fe:	9b02      	ldr	r3, [sp, #8]
 8009500:	3302      	adds	r3, #2
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	9804      	ldr	r0, [sp, #16]
 8009508:	3b01      	subs	r3, #1
 800950a:	0021      	movs	r1, r4
 800950c:	6133      	str	r3, [r6, #16]
 800950e:	f7ff fdcb 	bl	80090a8 <_Bfree>
 8009512:	0030      	movs	r0, r6
 8009514:	b007      	add	sp, #28
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	cb02      	ldmia	r3!, {r1}
 800951a:	c502      	stmia	r5!, {r1}
 800951c:	429a      	cmp	r2, r3
 800951e:	d8fb      	bhi.n	8009518 <__lshift+0xc8>
 8009520:	e7f0      	b.n	8009504 <__lshift+0xb4>
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	0800a4ac 	.word	0x0800a4ac
 8009528:	0800a4bd 	.word	0x0800a4bd

0800952c <__mcmp>:
 800952c:	b530      	push	{r4, r5, lr}
 800952e:	690b      	ldr	r3, [r1, #16]
 8009530:	6904      	ldr	r4, [r0, #16]
 8009532:	0002      	movs	r2, r0
 8009534:	1ae0      	subs	r0, r4, r3
 8009536:	429c      	cmp	r4, r3
 8009538:	d10e      	bne.n	8009558 <__mcmp+0x2c>
 800953a:	3214      	adds	r2, #20
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	3114      	adds	r1, #20
 8009540:	0014      	movs	r4, r2
 8009542:	18c9      	adds	r1, r1, r3
 8009544:	18d2      	adds	r2, r2, r3
 8009546:	3a04      	subs	r2, #4
 8009548:	3904      	subs	r1, #4
 800954a:	6815      	ldr	r5, [r2, #0]
 800954c:	680b      	ldr	r3, [r1, #0]
 800954e:	429d      	cmp	r5, r3
 8009550:	d003      	beq.n	800955a <__mcmp+0x2e>
 8009552:	2001      	movs	r0, #1
 8009554:	429d      	cmp	r5, r3
 8009556:	d303      	bcc.n	8009560 <__mcmp+0x34>
 8009558:	bd30      	pop	{r4, r5, pc}
 800955a:	4294      	cmp	r4, r2
 800955c:	d3f3      	bcc.n	8009546 <__mcmp+0x1a>
 800955e:	e7fb      	b.n	8009558 <__mcmp+0x2c>
 8009560:	4240      	negs	r0, r0
 8009562:	e7f9      	b.n	8009558 <__mcmp+0x2c>

08009564 <__mdiff>:
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009566:	000e      	movs	r6, r1
 8009568:	0007      	movs	r7, r0
 800956a:	0011      	movs	r1, r2
 800956c:	0030      	movs	r0, r6
 800956e:	b087      	sub	sp, #28
 8009570:	0014      	movs	r4, r2
 8009572:	f7ff ffdb 	bl	800952c <__mcmp>
 8009576:	1e05      	subs	r5, r0, #0
 8009578:	d110      	bne.n	800959c <__mdiff+0x38>
 800957a:	0001      	movs	r1, r0
 800957c:	0038      	movs	r0, r7
 800957e:	f7ff fd4f 	bl	8009020 <_Balloc>
 8009582:	1e02      	subs	r2, r0, #0
 8009584:	d104      	bne.n	8009590 <__mdiff+0x2c>
 8009586:	4b3f      	ldr	r3, [pc, #252]	; (8009684 <__mdiff+0x120>)
 8009588:	483f      	ldr	r0, [pc, #252]	; (8009688 <__mdiff+0x124>)
 800958a:	4940      	ldr	r1, [pc, #256]	; (800968c <__mdiff+0x128>)
 800958c:	f000 fb28 	bl	8009be0 <__assert_func>
 8009590:	2301      	movs	r3, #1
 8009592:	6145      	str	r5, [r0, #20]
 8009594:	6103      	str	r3, [r0, #16]
 8009596:	0010      	movs	r0, r2
 8009598:	b007      	add	sp, #28
 800959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959c:	2301      	movs	r3, #1
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	2800      	cmp	r0, #0
 80095a2:	db04      	blt.n	80095ae <__mdiff+0x4a>
 80095a4:	0023      	movs	r3, r4
 80095a6:	0034      	movs	r4, r6
 80095a8:	001e      	movs	r6, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	0038      	movs	r0, r7
 80095b0:	6861      	ldr	r1, [r4, #4]
 80095b2:	f7ff fd35 	bl	8009020 <_Balloc>
 80095b6:	1e02      	subs	r2, r0, #0
 80095b8:	d103      	bne.n	80095c2 <__mdiff+0x5e>
 80095ba:	4b32      	ldr	r3, [pc, #200]	; (8009684 <__mdiff+0x120>)
 80095bc:	4832      	ldr	r0, [pc, #200]	; (8009688 <__mdiff+0x124>)
 80095be:	4934      	ldr	r1, [pc, #208]	; (8009690 <__mdiff+0x12c>)
 80095c0:	e7e4      	b.n	800958c <__mdiff+0x28>
 80095c2:	9b01      	ldr	r3, [sp, #4]
 80095c4:	2700      	movs	r7, #0
 80095c6:	60c3      	str	r3, [r0, #12]
 80095c8:	6920      	ldr	r0, [r4, #16]
 80095ca:	3414      	adds	r4, #20
 80095cc:	0083      	lsls	r3, r0, #2
 80095ce:	18e3      	adds	r3, r4, r3
 80095d0:	0021      	movs	r1, r4
 80095d2:	9401      	str	r4, [sp, #4]
 80095d4:	0034      	movs	r4, r6
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	6933      	ldr	r3, [r6, #16]
 80095da:	3414      	adds	r4, #20
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	18e3      	adds	r3, r4, r3
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	0013      	movs	r3, r2
 80095e4:	3314      	adds	r3, #20
 80095e6:	469c      	mov	ip, r3
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	9104      	str	r1, [sp, #16]
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	cc02      	ldmia	r4!, {r1}
 80095f0:	cb20      	ldmia	r3!, {r5}
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	b2ab      	uxth	r3, r5
 80095f6:	19df      	adds	r7, r3, r7
 80095f8:	b28b      	uxth	r3, r1
 80095fa:	1afb      	subs	r3, r7, r3
 80095fc:	0c09      	lsrs	r1, r1, #16
 80095fe:	0c2d      	lsrs	r5, r5, #16
 8009600:	1a6d      	subs	r5, r5, r1
 8009602:	1419      	asrs	r1, r3, #16
 8009604:	1869      	adds	r1, r5, r1
 8009606:	b29b      	uxth	r3, r3
 8009608:	140f      	asrs	r7, r1, #16
 800960a:	0409      	lsls	r1, r1, #16
 800960c:	4319      	orrs	r1, r3
 800960e:	4663      	mov	r3, ip
 8009610:	c302      	stmia	r3!, {r1}
 8009612:	469c      	mov	ip, r3
 8009614:	9b03      	ldr	r3, [sp, #12]
 8009616:	42a3      	cmp	r3, r4
 8009618:	d8e8      	bhi.n	80095ec <__mdiff+0x88>
 800961a:	0031      	movs	r1, r6
 800961c:	9c03      	ldr	r4, [sp, #12]
 800961e:	3115      	adds	r1, #21
 8009620:	2304      	movs	r3, #4
 8009622:	428c      	cmp	r4, r1
 8009624:	d304      	bcc.n	8009630 <__mdiff+0xcc>
 8009626:	1ba3      	subs	r3, r4, r6
 8009628:	3b15      	subs	r3, #21
 800962a:	089b      	lsrs	r3, r3, #2
 800962c:	3301      	adds	r3, #1
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	9901      	ldr	r1, [sp, #4]
 8009632:	18cd      	adds	r5, r1, r3
 8009634:	9905      	ldr	r1, [sp, #20]
 8009636:	002e      	movs	r6, r5
 8009638:	18cb      	adds	r3, r1, r3
 800963a:	469c      	mov	ip, r3
 800963c:	9902      	ldr	r1, [sp, #8]
 800963e:	428e      	cmp	r6, r1
 8009640:	d310      	bcc.n	8009664 <__mdiff+0x100>
 8009642:	9e02      	ldr	r6, [sp, #8]
 8009644:	1ee9      	subs	r1, r5, #3
 8009646:	2400      	movs	r4, #0
 8009648:	428e      	cmp	r6, r1
 800964a:	d304      	bcc.n	8009656 <__mdiff+0xf2>
 800964c:	0031      	movs	r1, r6
 800964e:	3103      	adds	r1, #3
 8009650:	1b49      	subs	r1, r1, r5
 8009652:	0889      	lsrs	r1, r1, #2
 8009654:	008c      	lsls	r4, r1, #2
 8009656:	191b      	adds	r3, r3, r4
 8009658:	3b04      	subs	r3, #4
 800965a:	6819      	ldr	r1, [r3, #0]
 800965c:	2900      	cmp	r1, #0
 800965e:	d00f      	beq.n	8009680 <__mdiff+0x11c>
 8009660:	6110      	str	r0, [r2, #16]
 8009662:	e798      	b.n	8009596 <__mdiff+0x32>
 8009664:	ce02      	ldmia	r6!, {r1}
 8009666:	b28c      	uxth	r4, r1
 8009668:	19e4      	adds	r4, r4, r7
 800966a:	0c0f      	lsrs	r7, r1, #16
 800966c:	1421      	asrs	r1, r4, #16
 800966e:	1879      	adds	r1, r7, r1
 8009670:	b2a4      	uxth	r4, r4
 8009672:	140f      	asrs	r7, r1, #16
 8009674:	0409      	lsls	r1, r1, #16
 8009676:	4321      	orrs	r1, r4
 8009678:	4664      	mov	r4, ip
 800967a:	c402      	stmia	r4!, {r1}
 800967c:	46a4      	mov	ip, r4
 800967e:	e7dd      	b.n	800963c <__mdiff+0xd8>
 8009680:	3801      	subs	r0, #1
 8009682:	e7e9      	b.n	8009658 <__mdiff+0xf4>
 8009684:	0800a4ac 	.word	0x0800a4ac
 8009688:	0800a4bd 	.word	0x0800a4bd
 800968c:	00000237 	.word	0x00000237
 8009690:	00000245 	.word	0x00000245

08009694 <__d2b>:
 8009694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009696:	2101      	movs	r1, #1
 8009698:	0014      	movs	r4, r2
 800969a:	001d      	movs	r5, r3
 800969c:	9f08      	ldr	r7, [sp, #32]
 800969e:	f7ff fcbf 	bl	8009020 <_Balloc>
 80096a2:	1e06      	subs	r6, r0, #0
 80096a4:	d105      	bne.n	80096b2 <__d2b+0x1e>
 80096a6:	0032      	movs	r2, r6
 80096a8:	4b24      	ldr	r3, [pc, #144]	; (800973c <__d2b+0xa8>)
 80096aa:	4825      	ldr	r0, [pc, #148]	; (8009740 <__d2b+0xac>)
 80096ac:	4925      	ldr	r1, [pc, #148]	; (8009744 <__d2b+0xb0>)
 80096ae:	f000 fa97 	bl	8009be0 <__assert_func>
 80096b2:	032b      	lsls	r3, r5, #12
 80096b4:	006d      	lsls	r5, r5, #1
 80096b6:	0b1b      	lsrs	r3, r3, #12
 80096b8:	0d6d      	lsrs	r5, r5, #21
 80096ba:	d125      	bne.n	8009708 <__d2b+0x74>
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	2c00      	cmp	r4, #0
 80096c0:	d028      	beq.n	8009714 <__d2b+0x80>
 80096c2:	4668      	mov	r0, sp
 80096c4:	9400      	str	r4, [sp, #0]
 80096c6:	f7ff fd71 	bl	80091ac <__lo0bits>
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	9900      	ldr	r1, [sp, #0]
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d01e      	beq.n	8009710 <__d2b+0x7c>
 80096d2:	2220      	movs	r2, #32
 80096d4:	001c      	movs	r4, r3
 80096d6:	1a12      	subs	r2, r2, r0
 80096d8:	4094      	lsls	r4, r2
 80096da:	0022      	movs	r2, r4
 80096dc:	40c3      	lsrs	r3, r0
 80096de:	430a      	orrs	r2, r1
 80096e0:	6172      	str	r2, [r6, #20]
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	9c01      	ldr	r4, [sp, #4]
 80096e6:	61b4      	str	r4, [r6, #24]
 80096e8:	1e63      	subs	r3, r4, #1
 80096ea:	419c      	sbcs	r4, r3
 80096ec:	3401      	adds	r4, #1
 80096ee:	6134      	str	r4, [r6, #16]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	d017      	beq.n	8009724 <__d2b+0x90>
 80096f4:	2435      	movs	r4, #53	; 0x35
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <__d2b+0xb4>)
 80096f8:	18ed      	adds	r5, r5, r3
 80096fa:	182d      	adds	r5, r5, r0
 80096fc:	603d      	str	r5, [r7, #0]
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	1a24      	subs	r4, r4, r0
 8009702:	601c      	str	r4, [r3, #0]
 8009704:	0030      	movs	r0, r6
 8009706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009708:	2280      	movs	r2, #128	; 0x80
 800970a:	0352      	lsls	r2, r2, #13
 800970c:	4313      	orrs	r3, r2
 800970e:	e7d5      	b.n	80096bc <__d2b+0x28>
 8009710:	6171      	str	r1, [r6, #20]
 8009712:	e7e7      	b.n	80096e4 <__d2b+0x50>
 8009714:	a801      	add	r0, sp, #4
 8009716:	f7ff fd49 	bl	80091ac <__lo0bits>
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	2401      	movs	r4, #1
 800971e:	6173      	str	r3, [r6, #20]
 8009720:	3020      	adds	r0, #32
 8009722:	e7e4      	b.n	80096ee <__d2b+0x5a>
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <__d2b+0xb8>)
 8009726:	18c0      	adds	r0, r0, r3
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__d2b+0xbc>)
 800972a:	6038      	str	r0, [r7, #0]
 800972c:	18e3      	adds	r3, r4, r3
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	18f3      	adds	r3, r6, r3
 8009732:	6958      	ldr	r0, [r3, #20]
 8009734:	f7ff fd20 	bl	8009178 <__hi0bits>
 8009738:	0164      	lsls	r4, r4, #5
 800973a:	e7e0      	b.n	80096fe <__d2b+0x6a>
 800973c:	0800a4ac 	.word	0x0800a4ac
 8009740:	0800a4bd 	.word	0x0800a4bd
 8009744:	0000030f 	.word	0x0000030f
 8009748:	fffffbcd 	.word	0xfffffbcd
 800974c:	fffffbce 	.word	0xfffffbce
 8009750:	3fffffff 	.word	0x3fffffff

08009754 <__ssputs_r>:
 8009754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009756:	b085      	sub	sp, #20
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	688e      	ldr	r6, [r1, #8]
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	0007      	movs	r7, r0
 8009762:	000c      	movs	r4, r1
 8009764:	680b      	ldr	r3, [r1, #0]
 8009766:	4296      	cmp	r6, r2
 8009768:	d831      	bhi.n	80097ce <__ssputs_r+0x7a>
 800976a:	898a      	ldrh	r2, [r1, #12]
 800976c:	2190      	movs	r1, #144	; 0x90
 800976e:	00c9      	lsls	r1, r1, #3
 8009770:	420a      	tst	r2, r1
 8009772:	d029      	beq.n	80097c8 <__ssputs_r+0x74>
 8009774:	2003      	movs	r0, #3
 8009776:	6921      	ldr	r1, [r4, #16]
 8009778:	1a5b      	subs	r3, r3, r1
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	6963      	ldr	r3, [r4, #20]
 800977e:	4343      	muls	r3, r0
 8009780:	0fdd      	lsrs	r5, r3, #31
 8009782:	18ed      	adds	r5, r5, r3
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	9802      	ldr	r0, [sp, #8]
 8009788:	3301      	adds	r3, #1
 800978a:	181b      	adds	r3, r3, r0
 800978c:	106d      	asrs	r5, r5, #1
 800978e:	42ab      	cmp	r3, r5
 8009790:	d900      	bls.n	8009794 <__ssputs_r+0x40>
 8009792:	001d      	movs	r5, r3
 8009794:	0552      	lsls	r2, r2, #21
 8009796:	d529      	bpl.n	80097ec <__ssputs_r+0x98>
 8009798:	0029      	movs	r1, r5
 800979a:	0038      	movs	r0, r7
 800979c:	f7ff fbae 	bl	8008efc <_malloc_r>
 80097a0:	1e06      	subs	r6, r0, #0
 80097a2:	d02d      	beq.n	8009800 <__ssputs_r+0xac>
 80097a4:	9a02      	ldr	r2, [sp, #8]
 80097a6:	6921      	ldr	r1, [r4, #16]
 80097a8:	f000 fa10 	bl	8009bcc <memcpy>
 80097ac:	89a2      	ldrh	r2, [r4, #12]
 80097ae:	4b19      	ldr	r3, [pc, #100]	; (8009814 <__ssputs_r+0xc0>)
 80097b0:	401a      	ands	r2, r3
 80097b2:	2380      	movs	r3, #128	; 0x80
 80097b4:	4313      	orrs	r3, r2
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	6126      	str	r6, [r4, #16]
 80097bc:	18f6      	adds	r6, r6, r3
 80097be:	6026      	str	r6, [r4, #0]
 80097c0:	6165      	str	r5, [r4, #20]
 80097c2:	9e01      	ldr	r6, [sp, #4]
 80097c4:	1aed      	subs	r5, r5, r3
 80097c6:	60a5      	str	r5, [r4, #8]
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	429e      	cmp	r6, r3
 80097cc:	d900      	bls.n	80097d0 <__ssputs_r+0x7c>
 80097ce:	9e01      	ldr	r6, [sp, #4]
 80097d0:	0032      	movs	r2, r6
 80097d2:	9903      	ldr	r1, [sp, #12]
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	f000 f9d4 	bl	8009b82 <memmove>
 80097da:	2000      	movs	r0, #0
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	1b9b      	subs	r3, r3, r6
 80097e0:	60a3      	str	r3, [r4, #8]
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	199b      	adds	r3, r3, r6
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	b005      	add	sp, #20
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ec:	002a      	movs	r2, r5
 80097ee:	0038      	movs	r0, r7
 80097f0:	f000 fa53 	bl	8009c9a <_realloc_r>
 80097f4:	1e06      	subs	r6, r0, #0
 80097f6:	d1df      	bne.n	80097b8 <__ssputs_r+0x64>
 80097f8:	0038      	movs	r0, r7
 80097fa:	6921      	ldr	r1, [r4, #16]
 80097fc:	f7ff fb08 	bl	8008e10 <_free_r>
 8009800:	230c      	movs	r3, #12
 8009802:	2001      	movs	r0, #1
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	89a2      	ldrh	r2, [r4, #12]
 8009808:	3334      	adds	r3, #52	; 0x34
 800980a:	4313      	orrs	r3, r2
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	4240      	negs	r0, r0
 8009810:	e7ea      	b.n	80097e8 <__ssputs_r+0x94>
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	fffffb7f 	.word	0xfffffb7f

08009818 <_svfiprintf_r>:
 8009818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800981a:	b0a1      	sub	sp, #132	; 0x84
 800981c:	9003      	str	r0, [sp, #12]
 800981e:	001d      	movs	r5, r3
 8009820:	898b      	ldrh	r3, [r1, #12]
 8009822:	000f      	movs	r7, r1
 8009824:	0016      	movs	r6, r2
 8009826:	061b      	lsls	r3, r3, #24
 8009828:	d511      	bpl.n	800984e <_svfiprintf_r+0x36>
 800982a:	690b      	ldr	r3, [r1, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10e      	bne.n	800984e <_svfiprintf_r+0x36>
 8009830:	2140      	movs	r1, #64	; 0x40
 8009832:	f7ff fb63 	bl	8008efc <_malloc_r>
 8009836:	6038      	str	r0, [r7, #0]
 8009838:	6138      	str	r0, [r7, #16]
 800983a:	2800      	cmp	r0, #0
 800983c:	d105      	bne.n	800984a <_svfiprintf_r+0x32>
 800983e:	230c      	movs	r3, #12
 8009840:	9a03      	ldr	r2, [sp, #12]
 8009842:	3801      	subs	r0, #1
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	b021      	add	sp, #132	; 0x84
 8009848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	2300      	movs	r3, #0
 8009850:	ac08      	add	r4, sp, #32
 8009852:	6163      	str	r3, [r4, #20]
 8009854:	3320      	adds	r3, #32
 8009856:	7663      	strb	r3, [r4, #25]
 8009858:	3310      	adds	r3, #16
 800985a:	76a3      	strb	r3, [r4, #26]
 800985c:	9507      	str	r5, [sp, #28]
 800985e:	0035      	movs	r5, r6
 8009860:	782b      	ldrb	r3, [r5, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <_svfiprintf_r+0x52>
 8009866:	2b25      	cmp	r3, #37	; 0x25
 8009868:	d148      	bne.n	80098fc <_svfiprintf_r+0xe4>
 800986a:	1bab      	subs	r3, r5, r6
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	42b5      	cmp	r5, r6
 8009870:	d00b      	beq.n	800988a <_svfiprintf_r+0x72>
 8009872:	0032      	movs	r2, r6
 8009874:	0039      	movs	r1, r7
 8009876:	9803      	ldr	r0, [sp, #12]
 8009878:	f7ff ff6c 	bl	8009754 <__ssputs_r>
 800987c:	3001      	adds	r0, #1
 800987e:	d100      	bne.n	8009882 <_svfiprintf_r+0x6a>
 8009880:	e0af      	b.n	80099e2 <_svfiprintf_r+0x1ca>
 8009882:	6963      	ldr	r3, [r4, #20]
 8009884:	9a05      	ldr	r2, [sp, #20]
 8009886:	189b      	adds	r3, r3, r2
 8009888:	6163      	str	r3, [r4, #20]
 800988a:	782b      	ldrb	r3, [r5, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d100      	bne.n	8009892 <_svfiprintf_r+0x7a>
 8009890:	e0a7      	b.n	80099e2 <_svfiprintf_r+0x1ca>
 8009892:	2201      	movs	r2, #1
 8009894:	2300      	movs	r3, #0
 8009896:	4252      	negs	r2, r2
 8009898:	6062      	str	r2, [r4, #4]
 800989a:	a904      	add	r1, sp, #16
 800989c:	3254      	adds	r2, #84	; 0x54
 800989e:	1852      	adds	r2, r2, r1
 80098a0:	1c6e      	adds	r6, r5, #1
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	60e3      	str	r3, [r4, #12]
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	7013      	strb	r3, [r2, #0]
 80098aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80098ac:	4b55      	ldr	r3, [pc, #340]	; (8009a04 <_svfiprintf_r+0x1ec>)
 80098ae:	2205      	movs	r2, #5
 80098b0:	0018      	movs	r0, r3
 80098b2:	7831      	ldrb	r1, [r6, #0]
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	f7fe fc02 	bl	80080be <memchr>
 80098ba:	1c75      	adds	r5, r6, #1
 80098bc:	2800      	cmp	r0, #0
 80098be:	d11f      	bne.n	8009900 <_svfiprintf_r+0xe8>
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	06d3      	lsls	r3, r2, #27
 80098c4:	d504      	bpl.n	80098d0 <_svfiprintf_r+0xb8>
 80098c6:	2353      	movs	r3, #83	; 0x53
 80098c8:	a904      	add	r1, sp, #16
 80098ca:	185b      	adds	r3, r3, r1
 80098cc:	2120      	movs	r1, #32
 80098ce:	7019      	strb	r1, [r3, #0]
 80098d0:	0713      	lsls	r3, r2, #28
 80098d2:	d504      	bpl.n	80098de <_svfiprintf_r+0xc6>
 80098d4:	2353      	movs	r3, #83	; 0x53
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	185b      	adds	r3, r3, r1
 80098da:	212b      	movs	r1, #43	; 0x2b
 80098dc:	7019      	strb	r1, [r3, #0]
 80098de:	7833      	ldrb	r3, [r6, #0]
 80098e0:	2b2a      	cmp	r3, #42	; 0x2a
 80098e2:	d016      	beq.n	8009912 <_svfiprintf_r+0xfa>
 80098e4:	0035      	movs	r5, r6
 80098e6:	2100      	movs	r1, #0
 80098e8:	200a      	movs	r0, #10
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	782a      	ldrb	r2, [r5, #0]
 80098ee:	1c6e      	adds	r6, r5, #1
 80098f0:	3a30      	subs	r2, #48	; 0x30
 80098f2:	2a09      	cmp	r2, #9
 80098f4:	d94e      	bls.n	8009994 <_svfiprintf_r+0x17c>
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d111      	bne.n	800991e <_svfiprintf_r+0x106>
 80098fa:	e017      	b.n	800992c <_svfiprintf_r+0x114>
 80098fc:	3501      	adds	r5, #1
 80098fe:	e7af      	b.n	8009860 <_svfiprintf_r+0x48>
 8009900:	9b05      	ldr	r3, [sp, #20]
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	1ac0      	subs	r0, r0, r3
 8009906:	2301      	movs	r3, #1
 8009908:	4083      	lsls	r3, r0
 800990a:	4313      	orrs	r3, r2
 800990c:	002e      	movs	r6, r5
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	e7cc      	b.n	80098ac <_svfiprintf_r+0x94>
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	1d19      	adds	r1, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9107      	str	r1, [sp, #28]
 800991a:	2b00      	cmp	r3, #0
 800991c:	db01      	blt.n	8009922 <_svfiprintf_r+0x10a>
 800991e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009920:	e004      	b.n	800992c <_svfiprintf_r+0x114>
 8009922:	425b      	negs	r3, r3
 8009924:	60e3      	str	r3, [r4, #12]
 8009926:	2302      	movs	r3, #2
 8009928:	4313      	orrs	r3, r2
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	782b      	ldrb	r3, [r5, #0]
 800992e:	2b2e      	cmp	r3, #46	; 0x2e
 8009930:	d10a      	bne.n	8009948 <_svfiprintf_r+0x130>
 8009932:	786b      	ldrb	r3, [r5, #1]
 8009934:	2b2a      	cmp	r3, #42	; 0x2a
 8009936:	d135      	bne.n	80099a4 <_svfiprintf_r+0x18c>
 8009938:	9b07      	ldr	r3, [sp, #28]
 800993a:	3502      	adds	r5, #2
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	9207      	str	r2, [sp, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db2b      	blt.n	800999e <_svfiprintf_r+0x186>
 8009946:	9309      	str	r3, [sp, #36]	; 0x24
 8009948:	4e2f      	ldr	r6, [pc, #188]	; (8009a08 <_svfiprintf_r+0x1f0>)
 800994a:	2203      	movs	r2, #3
 800994c:	0030      	movs	r0, r6
 800994e:	7829      	ldrb	r1, [r5, #0]
 8009950:	f7fe fbb5 	bl	80080be <memchr>
 8009954:	2800      	cmp	r0, #0
 8009956:	d006      	beq.n	8009966 <_svfiprintf_r+0x14e>
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	1b80      	subs	r0, r0, r6
 800995c:	4083      	lsls	r3, r0
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	3501      	adds	r5, #1
 8009962:	4313      	orrs	r3, r2
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	7829      	ldrb	r1, [r5, #0]
 8009968:	2206      	movs	r2, #6
 800996a:	4828      	ldr	r0, [pc, #160]	; (8009a0c <_svfiprintf_r+0x1f4>)
 800996c:	1c6e      	adds	r6, r5, #1
 800996e:	7621      	strb	r1, [r4, #24]
 8009970:	f7fe fba5 	bl	80080be <memchr>
 8009974:	2800      	cmp	r0, #0
 8009976:	d03c      	beq.n	80099f2 <_svfiprintf_r+0x1da>
 8009978:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <_svfiprintf_r+0x1f8>)
 800997a:	2b00      	cmp	r3, #0
 800997c:	d125      	bne.n	80099ca <_svfiprintf_r+0x1b2>
 800997e:	2207      	movs	r2, #7
 8009980:	9b07      	ldr	r3, [sp, #28]
 8009982:	3307      	adds	r3, #7
 8009984:	4393      	bics	r3, r2
 8009986:	3308      	adds	r3, #8
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	6963      	ldr	r3, [r4, #20]
 800998c:	9a04      	ldr	r2, [sp, #16]
 800998e:	189b      	adds	r3, r3, r2
 8009990:	6163      	str	r3, [r4, #20]
 8009992:	e764      	b.n	800985e <_svfiprintf_r+0x46>
 8009994:	4343      	muls	r3, r0
 8009996:	0035      	movs	r5, r6
 8009998:	2101      	movs	r1, #1
 800999a:	189b      	adds	r3, r3, r2
 800999c:	e7a6      	b.n	80098ec <_svfiprintf_r+0xd4>
 800999e:	2301      	movs	r3, #1
 80099a0:	425b      	negs	r3, r3
 80099a2:	e7d0      	b.n	8009946 <_svfiprintf_r+0x12e>
 80099a4:	2300      	movs	r3, #0
 80099a6:	200a      	movs	r0, #10
 80099a8:	001a      	movs	r2, r3
 80099aa:	3501      	adds	r5, #1
 80099ac:	6063      	str	r3, [r4, #4]
 80099ae:	7829      	ldrb	r1, [r5, #0]
 80099b0:	1c6e      	adds	r6, r5, #1
 80099b2:	3930      	subs	r1, #48	; 0x30
 80099b4:	2909      	cmp	r1, #9
 80099b6:	d903      	bls.n	80099c0 <_svfiprintf_r+0x1a8>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0c5      	beq.n	8009948 <_svfiprintf_r+0x130>
 80099bc:	9209      	str	r2, [sp, #36]	; 0x24
 80099be:	e7c3      	b.n	8009948 <_svfiprintf_r+0x130>
 80099c0:	4342      	muls	r2, r0
 80099c2:	0035      	movs	r5, r6
 80099c4:	2301      	movs	r3, #1
 80099c6:	1852      	adds	r2, r2, r1
 80099c8:	e7f1      	b.n	80099ae <_svfiprintf_r+0x196>
 80099ca:	aa07      	add	r2, sp, #28
 80099cc:	9200      	str	r2, [sp, #0]
 80099ce:	0021      	movs	r1, r4
 80099d0:	003a      	movs	r2, r7
 80099d2:	4b10      	ldr	r3, [pc, #64]	; (8009a14 <_svfiprintf_r+0x1fc>)
 80099d4:	9803      	ldr	r0, [sp, #12]
 80099d6:	f7fd fde5 	bl	80075a4 <_printf_float>
 80099da:	9004      	str	r0, [sp, #16]
 80099dc:	9b04      	ldr	r3, [sp, #16]
 80099de:	3301      	adds	r3, #1
 80099e0:	d1d3      	bne.n	800998a <_svfiprintf_r+0x172>
 80099e2:	89bb      	ldrh	r3, [r7, #12]
 80099e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80099e6:	065b      	lsls	r3, r3, #25
 80099e8:	d400      	bmi.n	80099ec <_svfiprintf_r+0x1d4>
 80099ea:	e72c      	b.n	8009846 <_svfiprintf_r+0x2e>
 80099ec:	2001      	movs	r0, #1
 80099ee:	4240      	negs	r0, r0
 80099f0:	e729      	b.n	8009846 <_svfiprintf_r+0x2e>
 80099f2:	aa07      	add	r2, sp, #28
 80099f4:	9200      	str	r2, [sp, #0]
 80099f6:	0021      	movs	r1, r4
 80099f8:	003a      	movs	r2, r7
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <_svfiprintf_r+0x1fc>)
 80099fc:	9803      	ldr	r0, [sp, #12]
 80099fe:	f7fe f897 	bl	8007b30 <_printf_i>
 8009a02:	e7ea      	b.n	80099da <_svfiprintf_r+0x1c2>
 8009a04:	0800a614 	.word	0x0800a614
 8009a08:	0800a61a 	.word	0x0800a61a
 8009a0c:	0800a61e 	.word	0x0800a61e
 8009a10:	080075a5 	.word	0x080075a5
 8009a14:	08009755 	.word	0x08009755

08009a18 <__sflush_r>:
 8009a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a1a:	898b      	ldrh	r3, [r1, #12]
 8009a1c:	0005      	movs	r5, r0
 8009a1e:	000c      	movs	r4, r1
 8009a20:	071a      	lsls	r2, r3, #28
 8009a22:	d45c      	bmi.n	8009ade <__sflush_r+0xc6>
 8009a24:	684a      	ldr	r2, [r1, #4]
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	dc04      	bgt.n	8009a34 <__sflush_r+0x1c>
 8009a2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	dc01      	bgt.n	8009a34 <__sflush_r+0x1c>
 8009a30:	2000      	movs	r0, #0
 8009a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	d0fa      	beq.n	8009a30 <__sflush_r+0x18>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2080      	movs	r0, #128	; 0x80
 8009a3e:	682e      	ldr	r6, [r5, #0]
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	001a      	movs	r2, r3
 8009a44:	0140      	lsls	r0, r0, #5
 8009a46:	6a21      	ldr	r1, [r4, #32]
 8009a48:	4002      	ands	r2, r0
 8009a4a:	4203      	tst	r3, r0
 8009a4c:	d034      	beq.n	8009ab8 <__sflush_r+0xa0>
 8009a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	075b      	lsls	r3, r3, #29
 8009a54:	d506      	bpl.n	8009a64 <__sflush_r+0x4c>
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	1ac0      	subs	r0, r0, r3
 8009a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <__sflush_r+0x4c>
 8009a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a62:	1ac0      	subs	r0, r0, r3
 8009a64:	0002      	movs	r2, r0
 8009a66:	2300      	movs	r3, #0
 8009a68:	0028      	movs	r0, r5
 8009a6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009a6c:	6a21      	ldr	r1, [r4, #32]
 8009a6e:	47b8      	blx	r7
 8009a70:	89a2      	ldrh	r2, [r4, #12]
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d106      	bne.n	8009a84 <__sflush_r+0x6c>
 8009a76:	6829      	ldr	r1, [r5, #0]
 8009a78:	291d      	cmp	r1, #29
 8009a7a:	d82c      	bhi.n	8009ad6 <__sflush_r+0xbe>
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <__sflush_r+0x110>)
 8009a7e:	410b      	asrs	r3, r1
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d428      	bmi.n	8009ad6 <__sflush_r+0xbe>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	04d2      	lsls	r2, r2, #19
 8009a8e:	d505      	bpl.n	8009a9c <__sflush_r+0x84>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <__sflush_r+0x82>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d100      	bne.n	8009a9c <__sflush_r+0x84>
 8009a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9e:	602e      	str	r6, [r5, #0]
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d0c5      	beq.n	8009a30 <__sflush_r+0x18>
 8009aa4:	0023      	movs	r3, r4
 8009aa6:	3344      	adds	r3, #68	; 0x44
 8009aa8:	4299      	cmp	r1, r3
 8009aaa:	d002      	beq.n	8009ab2 <__sflush_r+0x9a>
 8009aac:	0028      	movs	r0, r5
 8009aae:	f7ff f9af 	bl	8008e10 <_free_r>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ab6:	e7bc      	b.n	8009a32 <__sflush_r+0x1a>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	0028      	movs	r0, r5
 8009abc:	47b8      	blx	r7
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d1c6      	bne.n	8009a50 <__sflush_r+0x38>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0c3      	beq.n	8009a50 <__sflush_r+0x38>
 8009ac8:	2b1d      	cmp	r3, #29
 8009aca:	d001      	beq.n	8009ad0 <__sflush_r+0xb8>
 8009acc:	2b16      	cmp	r3, #22
 8009ace:	d101      	bne.n	8009ad4 <__sflush_r+0xbc>
 8009ad0:	602e      	str	r6, [r5, #0]
 8009ad2:	e7ad      	b.n	8009a30 <__sflush_r+0x18>
 8009ad4:	89a2      	ldrh	r2, [r4, #12]
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	e7a9      	b.n	8009a32 <__sflush_r+0x1a>
 8009ade:	690e      	ldr	r6, [r1, #16]
 8009ae0:	2e00      	cmp	r6, #0
 8009ae2:	d0a5      	beq.n	8009a30 <__sflush_r+0x18>
 8009ae4:	680f      	ldr	r7, [r1, #0]
 8009ae6:	600e      	str	r6, [r1, #0]
 8009ae8:	1bba      	subs	r2, r7, r6
 8009aea:	9201      	str	r2, [sp, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	079b      	lsls	r3, r3, #30
 8009af0:	d100      	bne.n	8009af4 <__sflush_r+0xdc>
 8009af2:	694a      	ldr	r2, [r1, #20]
 8009af4:	60a2      	str	r2, [r4, #8]
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dd99      	ble.n	8009a30 <__sflush_r+0x18>
 8009afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009afe:	0032      	movs	r2, r6
 8009b00:	001f      	movs	r7, r3
 8009b02:	0028      	movs	r0, r5
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	6a21      	ldr	r1, [r4, #32]
 8009b08:	47b8      	blx	r7
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	dc06      	bgt.n	8009b1c <__sflush_r+0x104>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	2001      	movs	r0, #1
 8009b12:	89a2      	ldrh	r2, [r4, #12]
 8009b14:	4240      	negs	r0, r0
 8009b16:	4313      	orrs	r3, r2
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	e78a      	b.n	8009a32 <__sflush_r+0x1a>
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	1836      	adds	r6, r6, r0
 8009b20:	1a1b      	subs	r3, r3, r0
 8009b22:	9301      	str	r3, [sp, #4]
 8009b24:	e7e7      	b.n	8009af6 <__sflush_r+0xde>
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	dfbffffe 	.word	0xdfbffffe

08009b2c <_fflush_r>:
 8009b2c:	690b      	ldr	r3, [r1, #16]
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	0005      	movs	r5, r0
 8009b32:	000c      	movs	r4, r1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <_fflush_r+0x12>
 8009b38:	2500      	movs	r5, #0
 8009b3a:	0028      	movs	r0, r5
 8009b3c:	bd70      	pop	{r4, r5, r6, pc}
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d004      	beq.n	8009b4c <_fflush_r+0x20>
 8009b42:	6a03      	ldr	r3, [r0, #32]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <_fflush_r+0x20>
 8009b48:	f7fe f992 	bl	8007e70 <__sinit>
 8009b4c:	220c      	movs	r2, #12
 8009b4e:	5ea3      	ldrsh	r3, [r4, r2]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f1      	beq.n	8009b38 <_fflush_r+0xc>
 8009b54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b56:	07d2      	lsls	r2, r2, #31
 8009b58:	d404      	bmi.n	8009b64 <_fflush_r+0x38>
 8009b5a:	059b      	lsls	r3, r3, #22
 8009b5c:	d402      	bmi.n	8009b64 <_fflush_r+0x38>
 8009b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b60:	f7fe faab 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009b64:	0028      	movs	r0, r5
 8009b66:	0021      	movs	r1, r4
 8009b68:	f7ff ff56 	bl	8009a18 <__sflush_r>
 8009b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b6e:	0005      	movs	r5, r0
 8009b70:	07db      	lsls	r3, r3, #31
 8009b72:	d4e2      	bmi.n	8009b3a <_fflush_r+0xe>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	059b      	lsls	r3, r3, #22
 8009b78:	d4df      	bmi.n	8009b3a <_fflush_r+0xe>
 8009b7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b7c:	f7fe fa9e 	bl	80080bc <__retarget_lock_release_recursive>
 8009b80:	e7db      	b.n	8009b3a <_fflush_r+0xe>

08009b82 <memmove>:
 8009b82:	b510      	push	{r4, lr}
 8009b84:	4288      	cmp	r0, r1
 8009b86:	d902      	bls.n	8009b8e <memmove+0xc>
 8009b88:	188b      	adds	r3, r1, r2
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	d303      	bcc.n	8009b96 <memmove+0x14>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e007      	b.n	8009ba2 <memmove+0x20>
 8009b92:	5c8b      	ldrb	r3, [r1, r2]
 8009b94:	5483      	strb	r3, [r0, r2]
 8009b96:	3a01      	subs	r2, #1
 8009b98:	d2fb      	bcs.n	8009b92 <memmove+0x10>
 8009b9a:	bd10      	pop	{r4, pc}
 8009b9c:	5ccc      	ldrb	r4, [r1, r3]
 8009b9e:	54c4      	strb	r4, [r0, r3]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d1fa      	bne.n	8009b9c <memmove+0x1a>
 8009ba6:	e7f8      	b.n	8009b9a <memmove+0x18>

08009ba8 <_sbrk_r>:
 8009ba8:	2300      	movs	r3, #0
 8009baa:	b570      	push	{r4, r5, r6, lr}
 8009bac:	4d06      	ldr	r5, [pc, #24]	; (8009bc8 <_sbrk_r+0x20>)
 8009bae:	0004      	movs	r4, r0
 8009bb0:	0008      	movs	r0, r1
 8009bb2:	602b      	str	r3, [r5, #0]
 8009bb4:	f7f9 fd3e 	bl	8003634 <_sbrk>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d103      	bne.n	8009bc4 <_sbrk_r+0x1c>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d000      	beq.n	8009bc4 <_sbrk_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd70      	pop	{r4, r5, r6, pc}
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	20000530 	.word	0x20000530

08009bcc <memcpy>:
 8009bcc:	2300      	movs	r3, #0
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d100      	bne.n	8009bd6 <memcpy+0xa>
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	5ccc      	ldrb	r4, [r1, r3]
 8009bd8:	54c4      	strb	r4, [r0, r3]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	e7f8      	b.n	8009bd0 <memcpy+0x4>
	...

08009be0 <__assert_func>:
 8009be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009be2:	0014      	movs	r4, r2
 8009be4:	001a      	movs	r2, r3
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <__assert_func+0x2c>)
 8009be8:	0005      	movs	r5, r0
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	000e      	movs	r6, r1
 8009bee:	68d8      	ldr	r0, [r3, #12]
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <__assert_func+0x30>)
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d101      	bne.n	8009bfa <__assert_func+0x1a>
 8009bf6:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <__assert_func+0x34>)
 8009bf8:	001c      	movs	r4, r3
 8009bfa:	4907      	ldr	r1, [pc, #28]	; (8009c18 <__assert_func+0x38>)
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	9402      	str	r4, [sp, #8]
 8009c00:	002b      	movs	r3, r5
 8009c02:	9600      	str	r6, [sp, #0]
 8009c04:	f000 f886 	bl	8009d14 <fiprintf>
 8009c08:	f000 f894 	bl	8009d34 <abort>
 8009c0c:	20000090 	.word	0x20000090
 8009c10:	0800a62f 	.word	0x0800a62f
 8009c14:	0800a66a 	.word	0x0800a66a
 8009c18:	0800a63c 	.word	0x0800a63c

08009c1c <_calloc_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	0c0b      	lsrs	r3, r1, #16
 8009c20:	0c15      	lsrs	r5, r2, #16
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d11e      	bne.n	8009c64 <_calloc_r+0x48>
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	d10c      	bne.n	8009c44 <_calloc_r+0x28>
 8009c2a:	b289      	uxth	r1, r1
 8009c2c:	b294      	uxth	r4, r2
 8009c2e:	434c      	muls	r4, r1
 8009c30:	0021      	movs	r1, r4
 8009c32:	f7ff f963 	bl	8008efc <_malloc_r>
 8009c36:	1e05      	subs	r5, r0, #0
 8009c38:	d01b      	beq.n	8009c72 <_calloc_r+0x56>
 8009c3a:	0022      	movs	r2, r4
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	f7fe f9b7 	bl	8007fb0 <memset>
 8009c42:	e016      	b.n	8009c72 <_calloc_r+0x56>
 8009c44:	1c2b      	adds	r3, r5, #0
 8009c46:	1c0c      	adds	r4, r1, #0
 8009c48:	b289      	uxth	r1, r1
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	434a      	muls	r2, r1
 8009c4e:	b2a1      	uxth	r1, r4
 8009c50:	b29c      	uxth	r4, r3
 8009c52:	434c      	muls	r4, r1
 8009c54:	0c13      	lsrs	r3, r2, #16
 8009c56:	18e4      	adds	r4, r4, r3
 8009c58:	0c23      	lsrs	r3, r4, #16
 8009c5a:	d107      	bne.n	8009c6c <_calloc_r+0x50>
 8009c5c:	0424      	lsls	r4, r4, #16
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	4314      	orrs	r4, r2
 8009c62:	e7e5      	b.n	8009c30 <_calloc_r+0x14>
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	d101      	bne.n	8009c6c <_calloc_r+0x50>
 8009c68:	1c14      	adds	r4, r2, #0
 8009c6a:	e7ed      	b.n	8009c48 <_calloc_r+0x2c>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	2500      	movs	r5, #0
 8009c70:	6003      	str	r3, [r0, #0]
 8009c72:	0028      	movs	r0, r5
 8009c74:	bd70      	pop	{r4, r5, r6, pc}

08009c76 <__ascii_mbtowc>:
 8009c76:	b082      	sub	sp, #8
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	d100      	bne.n	8009c7e <__ascii_mbtowc+0x8>
 8009c7c:	a901      	add	r1, sp, #4
 8009c7e:	1e10      	subs	r0, r2, #0
 8009c80:	d006      	beq.n	8009c90 <__ascii_mbtowc+0x1a>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d006      	beq.n	8009c94 <__ascii_mbtowc+0x1e>
 8009c86:	7813      	ldrb	r3, [r2, #0]
 8009c88:	600b      	str	r3, [r1, #0]
 8009c8a:	7810      	ldrb	r0, [r2, #0]
 8009c8c:	1e43      	subs	r3, r0, #1
 8009c8e:	4198      	sbcs	r0, r3
 8009c90:	b002      	add	sp, #8
 8009c92:	4770      	bx	lr
 8009c94:	2002      	movs	r0, #2
 8009c96:	4240      	negs	r0, r0
 8009c98:	e7fa      	b.n	8009c90 <__ascii_mbtowc+0x1a>

08009c9a <_realloc_r>:
 8009c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c9c:	0007      	movs	r7, r0
 8009c9e:	000e      	movs	r6, r1
 8009ca0:	0014      	movs	r4, r2
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d105      	bne.n	8009cb2 <_realloc_r+0x18>
 8009ca6:	0011      	movs	r1, r2
 8009ca8:	f7ff f928 	bl	8008efc <_malloc_r>
 8009cac:	0005      	movs	r5, r0
 8009cae:	0028      	movs	r0, r5
 8009cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d103      	bne.n	8009cbe <_realloc_r+0x24>
 8009cb6:	f7ff f8ab 	bl	8008e10 <_free_r>
 8009cba:	0025      	movs	r5, r4
 8009cbc:	e7f7      	b.n	8009cae <_realloc_r+0x14>
 8009cbe:	f000 f840 	bl	8009d42 <_malloc_usable_size_r>
 8009cc2:	9001      	str	r0, [sp, #4]
 8009cc4:	4284      	cmp	r4, r0
 8009cc6:	d803      	bhi.n	8009cd0 <_realloc_r+0x36>
 8009cc8:	0035      	movs	r5, r6
 8009cca:	0843      	lsrs	r3, r0, #1
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d3ee      	bcc.n	8009cae <_realloc_r+0x14>
 8009cd0:	0021      	movs	r1, r4
 8009cd2:	0038      	movs	r0, r7
 8009cd4:	f7ff f912 	bl	8008efc <_malloc_r>
 8009cd8:	1e05      	subs	r5, r0, #0
 8009cda:	d0e8      	beq.n	8009cae <_realloc_r+0x14>
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	0022      	movs	r2, r4
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d900      	bls.n	8009ce6 <_realloc_r+0x4c>
 8009ce4:	001a      	movs	r2, r3
 8009ce6:	0031      	movs	r1, r6
 8009ce8:	0028      	movs	r0, r5
 8009cea:	f7ff ff6f 	bl	8009bcc <memcpy>
 8009cee:	0031      	movs	r1, r6
 8009cf0:	0038      	movs	r0, r7
 8009cf2:	f7ff f88d 	bl	8008e10 <_free_r>
 8009cf6:	e7da      	b.n	8009cae <_realloc_r+0x14>

08009cf8 <__ascii_wctomb>:
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	1e08      	subs	r0, r1, #0
 8009cfc:	d005      	beq.n	8009d0a <__ascii_wctomb+0x12>
 8009cfe:	2aff      	cmp	r2, #255	; 0xff
 8009d00:	d904      	bls.n	8009d0c <__ascii_wctomb+0x14>
 8009d02:	228a      	movs	r2, #138	; 0x8a
 8009d04:	2001      	movs	r0, #1
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	4240      	negs	r0, r0
 8009d0a:	4770      	bx	lr
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	700a      	strb	r2, [r1, #0]
 8009d10:	e7fb      	b.n	8009d0a <__ascii_wctomb+0x12>
	...

08009d14 <fiprintf>:
 8009d14:	b40e      	push	{r1, r2, r3}
 8009d16:	b517      	push	{r0, r1, r2, r4, lr}
 8009d18:	4c05      	ldr	r4, [pc, #20]	; (8009d30 <fiprintf+0x1c>)
 8009d1a:	ab05      	add	r3, sp, #20
 8009d1c:	cb04      	ldmia	r3!, {r2}
 8009d1e:	0001      	movs	r1, r0
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	f000 f83c 	bl	8009da0 <_vfiprintf_r>
 8009d28:	bc1e      	pop	{r1, r2, r3, r4}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	b003      	add	sp, #12
 8009d2e:	4718      	bx	r3
 8009d30:	20000090 	.word	0x20000090

08009d34 <abort>:
 8009d34:	2006      	movs	r0, #6
 8009d36:	b510      	push	{r4, lr}
 8009d38:	f000 fa1e 	bl	800a178 <raise>
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	f7f9 fc07 	bl	8003550 <_exit>

08009d42 <_malloc_usable_size_r>:
 8009d42:	1f0b      	subs	r3, r1, #4
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	1f18      	subs	r0, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	da01      	bge.n	8009d50 <_malloc_usable_size_r+0xe>
 8009d4c:	580b      	ldr	r3, [r1, r0]
 8009d4e:	18c0      	adds	r0, r0, r3
 8009d50:	4770      	bx	lr

08009d52 <__sfputc_r>:
 8009d52:	6893      	ldr	r3, [r2, #8]
 8009d54:	b510      	push	{r4, lr}
 8009d56:	3b01      	subs	r3, #1
 8009d58:	6093      	str	r3, [r2, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da04      	bge.n	8009d68 <__sfputc_r+0x16>
 8009d5e:	6994      	ldr	r4, [r2, #24]
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	db07      	blt.n	8009d74 <__sfputc_r+0x22>
 8009d64:	290a      	cmp	r1, #10
 8009d66:	d005      	beq.n	8009d74 <__sfputc_r+0x22>
 8009d68:	6813      	ldr	r3, [r2, #0]
 8009d6a:	1c58      	adds	r0, r3, #1
 8009d6c:	6010      	str	r0, [r2, #0]
 8009d6e:	7019      	strb	r1, [r3, #0]
 8009d70:	0008      	movs	r0, r1
 8009d72:	bd10      	pop	{r4, pc}
 8009d74:	f000 f930 	bl	8009fd8 <__swbuf_r>
 8009d78:	0001      	movs	r1, r0
 8009d7a:	e7f9      	b.n	8009d70 <__sfputc_r+0x1e>

08009d7c <__sfputs_r>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	0006      	movs	r6, r0
 8009d80:	000f      	movs	r7, r1
 8009d82:	0014      	movs	r4, r2
 8009d84:	18d5      	adds	r5, r2, r3
 8009d86:	42ac      	cmp	r4, r5
 8009d88:	d101      	bne.n	8009d8e <__sfputs_r+0x12>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e007      	b.n	8009d9e <__sfputs_r+0x22>
 8009d8e:	7821      	ldrb	r1, [r4, #0]
 8009d90:	003a      	movs	r2, r7
 8009d92:	0030      	movs	r0, r6
 8009d94:	f7ff ffdd 	bl	8009d52 <__sfputc_r>
 8009d98:	3401      	adds	r4, #1
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	d1f3      	bne.n	8009d86 <__sfputs_r+0xa>
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009da0 <_vfiprintf_r>:
 8009da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da2:	b0a1      	sub	sp, #132	; 0x84
 8009da4:	000f      	movs	r7, r1
 8009da6:	0015      	movs	r5, r2
 8009da8:	001e      	movs	r6, r3
 8009daa:	9003      	str	r0, [sp, #12]
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d004      	beq.n	8009dba <_vfiprintf_r+0x1a>
 8009db0:	6a03      	ldr	r3, [r0, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <_vfiprintf_r+0x1a>
 8009db6:	f7fe f85b 	bl	8007e70 <__sinit>
 8009dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dbc:	07db      	lsls	r3, r3, #31
 8009dbe:	d405      	bmi.n	8009dcc <_vfiprintf_r+0x2c>
 8009dc0:	89bb      	ldrh	r3, [r7, #12]
 8009dc2:	059b      	lsls	r3, r3, #22
 8009dc4:	d402      	bmi.n	8009dcc <_vfiprintf_r+0x2c>
 8009dc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009dc8:	f7fe f977 	bl	80080ba <__retarget_lock_acquire_recursive>
 8009dcc:	89bb      	ldrh	r3, [r7, #12]
 8009dce:	071b      	lsls	r3, r3, #28
 8009dd0:	d502      	bpl.n	8009dd8 <_vfiprintf_r+0x38>
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d113      	bne.n	8009e00 <_vfiprintf_r+0x60>
 8009dd8:	0039      	movs	r1, r7
 8009dda:	9803      	ldr	r0, [sp, #12]
 8009ddc:	f000 f93e 	bl	800a05c <__swsetup_r>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d00d      	beq.n	8009e00 <_vfiprintf_r+0x60>
 8009de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009de6:	07db      	lsls	r3, r3, #31
 8009de8:	d503      	bpl.n	8009df2 <_vfiprintf_r+0x52>
 8009dea:	2001      	movs	r0, #1
 8009dec:	4240      	negs	r0, r0
 8009dee:	b021      	add	sp, #132	; 0x84
 8009df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df2:	89bb      	ldrh	r3, [r7, #12]
 8009df4:	059b      	lsls	r3, r3, #22
 8009df6:	d4f8      	bmi.n	8009dea <_vfiprintf_r+0x4a>
 8009df8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009dfa:	f7fe f95f 	bl	80080bc <__retarget_lock_release_recursive>
 8009dfe:	e7f4      	b.n	8009dea <_vfiprintf_r+0x4a>
 8009e00:	2300      	movs	r3, #0
 8009e02:	ac08      	add	r4, sp, #32
 8009e04:	6163      	str	r3, [r4, #20]
 8009e06:	3320      	adds	r3, #32
 8009e08:	7663      	strb	r3, [r4, #25]
 8009e0a:	3310      	adds	r3, #16
 8009e0c:	76a3      	strb	r3, [r4, #26]
 8009e0e:	9607      	str	r6, [sp, #28]
 8009e10:	002e      	movs	r6, r5
 8009e12:	7833      	ldrb	r3, [r6, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <_vfiprintf_r+0x7c>
 8009e18:	2b25      	cmp	r3, #37	; 0x25
 8009e1a:	d148      	bne.n	8009eae <_vfiprintf_r+0x10e>
 8009e1c:	1b73      	subs	r3, r6, r5
 8009e1e:	9305      	str	r3, [sp, #20]
 8009e20:	42ae      	cmp	r6, r5
 8009e22:	d00b      	beq.n	8009e3c <_vfiprintf_r+0x9c>
 8009e24:	002a      	movs	r2, r5
 8009e26:	0039      	movs	r1, r7
 8009e28:	9803      	ldr	r0, [sp, #12]
 8009e2a:	f7ff ffa7 	bl	8009d7c <__sfputs_r>
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d100      	bne.n	8009e34 <_vfiprintf_r+0x94>
 8009e32:	e0af      	b.n	8009f94 <_vfiprintf_r+0x1f4>
 8009e34:	6963      	ldr	r3, [r4, #20]
 8009e36:	9a05      	ldr	r2, [sp, #20]
 8009e38:	189b      	adds	r3, r3, r2
 8009e3a:	6163      	str	r3, [r4, #20]
 8009e3c:	7833      	ldrb	r3, [r6, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d100      	bne.n	8009e44 <_vfiprintf_r+0xa4>
 8009e42:	e0a7      	b.n	8009f94 <_vfiprintf_r+0x1f4>
 8009e44:	2201      	movs	r2, #1
 8009e46:	2300      	movs	r3, #0
 8009e48:	4252      	negs	r2, r2
 8009e4a:	6062      	str	r2, [r4, #4]
 8009e4c:	a904      	add	r1, sp, #16
 8009e4e:	3254      	adds	r2, #84	; 0x54
 8009e50:	1852      	adds	r2, r2, r1
 8009e52:	1c75      	adds	r5, r6, #1
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	60e3      	str	r3, [r4, #12]
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	7013      	strb	r3, [r2, #0]
 8009e5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e5e:	4b59      	ldr	r3, [pc, #356]	; (8009fc4 <_vfiprintf_r+0x224>)
 8009e60:	2205      	movs	r2, #5
 8009e62:	0018      	movs	r0, r3
 8009e64:	7829      	ldrb	r1, [r5, #0]
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	f7fe f929 	bl	80080be <memchr>
 8009e6c:	1c6e      	adds	r6, r5, #1
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d11f      	bne.n	8009eb2 <_vfiprintf_r+0x112>
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	06d3      	lsls	r3, r2, #27
 8009e76:	d504      	bpl.n	8009e82 <_vfiprintf_r+0xe2>
 8009e78:	2353      	movs	r3, #83	; 0x53
 8009e7a:	a904      	add	r1, sp, #16
 8009e7c:	185b      	adds	r3, r3, r1
 8009e7e:	2120      	movs	r1, #32
 8009e80:	7019      	strb	r1, [r3, #0]
 8009e82:	0713      	lsls	r3, r2, #28
 8009e84:	d504      	bpl.n	8009e90 <_vfiprintf_r+0xf0>
 8009e86:	2353      	movs	r3, #83	; 0x53
 8009e88:	a904      	add	r1, sp, #16
 8009e8a:	185b      	adds	r3, r3, r1
 8009e8c:	212b      	movs	r1, #43	; 0x2b
 8009e8e:	7019      	strb	r1, [r3, #0]
 8009e90:	782b      	ldrb	r3, [r5, #0]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d016      	beq.n	8009ec4 <_vfiprintf_r+0x124>
 8009e96:	002e      	movs	r6, r5
 8009e98:	2100      	movs	r1, #0
 8009e9a:	200a      	movs	r0, #10
 8009e9c:	68e3      	ldr	r3, [r4, #12]
 8009e9e:	7832      	ldrb	r2, [r6, #0]
 8009ea0:	1c75      	adds	r5, r6, #1
 8009ea2:	3a30      	subs	r2, #48	; 0x30
 8009ea4:	2a09      	cmp	r2, #9
 8009ea6:	d94e      	bls.n	8009f46 <_vfiprintf_r+0x1a6>
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d111      	bne.n	8009ed0 <_vfiprintf_r+0x130>
 8009eac:	e017      	b.n	8009ede <_vfiprintf_r+0x13e>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7af      	b.n	8009e12 <_vfiprintf_r+0x72>
 8009eb2:	9b05      	ldr	r3, [sp, #20]
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	1ac0      	subs	r0, r0, r3
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4083      	lsls	r3, r0
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	0035      	movs	r5, r6
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	e7cc      	b.n	8009e5e <_vfiprintf_r+0xbe>
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	1d19      	adds	r1, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	9107      	str	r1, [sp, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	db01      	blt.n	8009ed4 <_vfiprintf_r+0x134>
 8009ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed2:	e004      	b.n	8009ede <_vfiprintf_r+0x13e>
 8009ed4:	425b      	negs	r3, r3
 8009ed6:	60e3      	str	r3, [r4, #12]
 8009ed8:	2302      	movs	r3, #2
 8009eda:	4313      	orrs	r3, r2
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	7833      	ldrb	r3, [r6, #0]
 8009ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ee2:	d10a      	bne.n	8009efa <_vfiprintf_r+0x15a>
 8009ee4:	7873      	ldrb	r3, [r6, #1]
 8009ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee8:	d135      	bne.n	8009f56 <_vfiprintf_r+0x1b6>
 8009eea:	9b07      	ldr	r3, [sp, #28]
 8009eec:	3602      	adds	r6, #2
 8009eee:	1d1a      	adds	r2, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9207      	str	r2, [sp, #28]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	db2b      	blt.n	8009f50 <_vfiprintf_r+0x1b0>
 8009ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8009efa:	4d33      	ldr	r5, [pc, #204]	; (8009fc8 <_vfiprintf_r+0x228>)
 8009efc:	2203      	movs	r2, #3
 8009efe:	0028      	movs	r0, r5
 8009f00:	7831      	ldrb	r1, [r6, #0]
 8009f02:	f7fe f8dc 	bl	80080be <memchr>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d006      	beq.n	8009f18 <_vfiprintf_r+0x178>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	1b40      	subs	r0, r0, r5
 8009f0e:	4083      	lsls	r3, r0
 8009f10:	6822      	ldr	r2, [r4, #0]
 8009f12:	3601      	adds	r6, #1
 8009f14:	4313      	orrs	r3, r2
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	7831      	ldrb	r1, [r6, #0]
 8009f1a:	2206      	movs	r2, #6
 8009f1c:	482b      	ldr	r0, [pc, #172]	; (8009fcc <_vfiprintf_r+0x22c>)
 8009f1e:	1c75      	adds	r5, r6, #1
 8009f20:	7621      	strb	r1, [r4, #24]
 8009f22:	f7fe f8cc 	bl	80080be <memchr>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d043      	beq.n	8009fb2 <_vfiprintf_r+0x212>
 8009f2a:	4b29      	ldr	r3, [pc, #164]	; (8009fd0 <_vfiprintf_r+0x230>)
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d125      	bne.n	8009f7c <_vfiprintf_r+0x1dc>
 8009f30:	2207      	movs	r2, #7
 8009f32:	9b07      	ldr	r3, [sp, #28]
 8009f34:	3307      	adds	r3, #7
 8009f36:	4393      	bics	r3, r2
 8009f38:	3308      	adds	r3, #8
 8009f3a:	9307      	str	r3, [sp, #28]
 8009f3c:	6963      	ldr	r3, [r4, #20]
 8009f3e:	9a04      	ldr	r2, [sp, #16]
 8009f40:	189b      	adds	r3, r3, r2
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	e764      	b.n	8009e10 <_vfiprintf_r+0x70>
 8009f46:	4343      	muls	r3, r0
 8009f48:	002e      	movs	r6, r5
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	189b      	adds	r3, r3, r2
 8009f4e:	e7a6      	b.n	8009e9e <_vfiprintf_r+0xfe>
 8009f50:	2301      	movs	r3, #1
 8009f52:	425b      	negs	r3, r3
 8009f54:	e7d0      	b.n	8009ef8 <_vfiprintf_r+0x158>
 8009f56:	2300      	movs	r3, #0
 8009f58:	200a      	movs	r0, #10
 8009f5a:	001a      	movs	r2, r3
 8009f5c:	3601      	adds	r6, #1
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	7831      	ldrb	r1, [r6, #0]
 8009f62:	1c75      	adds	r5, r6, #1
 8009f64:	3930      	subs	r1, #48	; 0x30
 8009f66:	2909      	cmp	r1, #9
 8009f68:	d903      	bls.n	8009f72 <_vfiprintf_r+0x1d2>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0c5      	beq.n	8009efa <_vfiprintf_r+0x15a>
 8009f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f70:	e7c3      	b.n	8009efa <_vfiprintf_r+0x15a>
 8009f72:	4342      	muls	r2, r0
 8009f74:	002e      	movs	r6, r5
 8009f76:	2301      	movs	r3, #1
 8009f78:	1852      	adds	r2, r2, r1
 8009f7a:	e7f1      	b.n	8009f60 <_vfiprintf_r+0x1c0>
 8009f7c:	aa07      	add	r2, sp, #28
 8009f7e:	9200      	str	r2, [sp, #0]
 8009f80:	0021      	movs	r1, r4
 8009f82:	003a      	movs	r2, r7
 8009f84:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <_vfiprintf_r+0x234>)
 8009f86:	9803      	ldr	r0, [sp, #12]
 8009f88:	f7fd fb0c 	bl	80075a4 <_printf_float>
 8009f8c:	9004      	str	r0, [sp, #16]
 8009f8e:	9b04      	ldr	r3, [sp, #16]
 8009f90:	3301      	adds	r3, #1
 8009f92:	d1d3      	bne.n	8009f3c <_vfiprintf_r+0x19c>
 8009f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f96:	07db      	lsls	r3, r3, #31
 8009f98:	d405      	bmi.n	8009fa6 <_vfiprintf_r+0x206>
 8009f9a:	89bb      	ldrh	r3, [r7, #12]
 8009f9c:	059b      	lsls	r3, r3, #22
 8009f9e:	d402      	bmi.n	8009fa6 <_vfiprintf_r+0x206>
 8009fa0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009fa2:	f7fe f88b 	bl	80080bc <__retarget_lock_release_recursive>
 8009fa6:	89bb      	ldrh	r3, [r7, #12]
 8009fa8:	065b      	lsls	r3, r3, #25
 8009faa:	d500      	bpl.n	8009fae <_vfiprintf_r+0x20e>
 8009fac:	e71d      	b.n	8009dea <_vfiprintf_r+0x4a>
 8009fae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fb0:	e71d      	b.n	8009dee <_vfiprintf_r+0x4e>
 8009fb2:	aa07      	add	r2, sp, #28
 8009fb4:	9200      	str	r2, [sp, #0]
 8009fb6:	0021      	movs	r1, r4
 8009fb8:	003a      	movs	r2, r7
 8009fba:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <_vfiprintf_r+0x234>)
 8009fbc:	9803      	ldr	r0, [sp, #12]
 8009fbe:	f7fd fdb7 	bl	8007b30 <_printf_i>
 8009fc2:	e7e3      	b.n	8009f8c <_vfiprintf_r+0x1ec>
 8009fc4:	0800a614 	.word	0x0800a614
 8009fc8:	0800a61a 	.word	0x0800a61a
 8009fcc:	0800a61e 	.word	0x0800a61e
 8009fd0:	080075a5 	.word	0x080075a5
 8009fd4:	08009d7d 	.word	0x08009d7d

08009fd8 <__swbuf_r>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	0006      	movs	r6, r0
 8009fdc:	000d      	movs	r5, r1
 8009fde:	0014      	movs	r4, r2
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d004      	beq.n	8009fee <__swbuf_r+0x16>
 8009fe4:	6a03      	ldr	r3, [r0, #32]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <__swbuf_r+0x16>
 8009fea:	f7fd ff41 	bl	8007e70 <__sinit>
 8009fee:	69a3      	ldr	r3, [r4, #24]
 8009ff0:	60a3      	str	r3, [r4, #8]
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	071b      	lsls	r3, r3, #28
 8009ff6:	d528      	bpl.n	800a04a <__swbuf_r+0x72>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d025      	beq.n	800a04a <__swbuf_r+0x72>
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	b2ef      	uxtb	r7, r5
 800a004:	1ac0      	subs	r0, r0, r3
 800a006:	6963      	ldr	r3, [r4, #20]
 800a008:	b2ed      	uxtb	r5, r5
 800a00a:	4283      	cmp	r3, r0
 800a00c:	dc05      	bgt.n	800a01a <__swbuf_r+0x42>
 800a00e:	0021      	movs	r1, r4
 800a010:	0030      	movs	r0, r6
 800a012:	f7ff fd8b 	bl	8009b2c <_fflush_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	d11d      	bne.n	800a056 <__swbuf_r+0x7e>
 800a01a:	68a3      	ldr	r3, [r4, #8]
 800a01c:	3001      	adds	r0, #1
 800a01e:	3b01      	subs	r3, #1
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	701f      	strb	r7, [r3, #0]
 800a02a:	6963      	ldr	r3, [r4, #20]
 800a02c:	4283      	cmp	r3, r0
 800a02e:	d004      	beq.n	800a03a <__swbuf_r+0x62>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	07db      	lsls	r3, r3, #31
 800a034:	d507      	bpl.n	800a046 <__swbuf_r+0x6e>
 800a036:	2d0a      	cmp	r5, #10
 800a038:	d105      	bne.n	800a046 <__swbuf_r+0x6e>
 800a03a:	0021      	movs	r1, r4
 800a03c:	0030      	movs	r0, r6
 800a03e:	f7ff fd75 	bl	8009b2c <_fflush_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	d107      	bne.n	800a056 <__swbuf_r+0x7e>
 800a046:	0028      	movs	r0, r5
 800a048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04a:	0021      	movs	r1, r4
 800a04c:	0030      	movs	r0, r6
 800a04e:	f000 f805 	bl	800a05c <__swsetup_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d0d3      	beq.n	8009ffe <__swbuf_r+0x26>
 800a056:	2501      	movs	r5, #1
 800a058:	426d      	negs	r5, r5
 800a05a:	e7f4      	b.n	800a046 <__swbuf_r+0x6e>

0800a05c <__swsetup_r>:
 800a05c:	4b30      	ldr	r3, [pc, #192]	; (800a120 <__swsetup_r+0xc4>)
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	0005      	movs	r5, r0
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	000c      	movs	r4, r1
 800a066:	2800      	cmp	r0, #0
 800a068:	d004      	beq.n	800a074 <__swsetup_r+0x18>
 800a06a:	6a03      	ldr	r3, [r0, #32]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <__swsetup_r+0x18>
 800a070:	f7fd fefe 	bl	8007e70 <__sinit>
 800a074:	230c      	movs	r3, #12
 800a076:	5ee2      	ldrsh	r2, [r4, r3]
 800a078:	b293      	uxth	r3, r2
 800a07a:	0711      	lsls	r1, r2, #28
 800a07c:	d423      	bmi.n	800a0c6 <__swsetup_r+0x6a>
 800a07e:	06d9      	lsls	r1, r3, #27
 800a080:	d407      	bmi.n	800a092 <__swsetup_r+0x36>
 800a082:	2309      	movs	r3, #9
 800a084:	2001      	movs	r0, #1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	3337      	adds	r3, #55	; 0x37
 800a08a:	4313      	orrs	r3, r2
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	4240      	negs	r0, r0
 800a090:	bd70      	pop	{r4, r5, r6, pc}
 800a092:	075b      	lsls	r3, r3, #29
 800a094:	d513      	bpl.n	800a0be <__swsetup_r+0x62>
 800a096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a098:	2900      	cmp	r1, #0
 800a09a:	d008      	beq.n	800a0ae <__swsetup_r+0x52>
 800a09c:	0023      	movs	r3, r4
 800a09e:	3344      	adds	r3, #68	; 0x44
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d002      	beq.n	800a0aa <__swsetup_r+0x4e>
 800a0a4:	0028      	movs	r0, r5
 800a0a6:	f7fe feb3 	bl	8008e10 <_free_r>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ae:	2224      	movs	r2, #36	; 0x24
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	4393      	bics	r3, r2
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6063      	str	r3, [r4, #4]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	2308      	movs	r3, #8
 800a0c0:	89a2      	ldrh	r2, [r4, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <__swsetup_r+0x88>
 800a0cc:	21a0      	movs	r1, #160	; 0xa0
 800a0ce:	2280      	movs	r2, #128	; 0x80
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	0089      	lsls	r1, r1, #2
 800a0d4:	0092      	lsls	r2, r2, #2
 800a0d6:	400b      	ands	r3, r1
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <__swsetup_r+0x88>
 800a0dc:	0021      	movs	r1, r4
 800a0de:	0028      	movs	r0, r5
 800a0e0:	f000 f892 	bl	800a208 <__smakebuf_r>
 800a0e4:	220c      	movs	r2, #12
 800a0e6:	5ea3      	ldrsh	r3, [r4, r2]
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	001a      	movs	r2, r3
 800a0ec:	b299      	uxth	r1, r3
 800a0ee:	4002      	ands	r2, r0
 800a0f0:	4203      	tst	r3, r0
 800a0f2:	d00f      	beq.n	800a114 <__swsetup_r+0xb8>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	60a2      	str	r2, [r4, #8]
 800a0f8:	6962      	ldr	r2, [r4, #20]
 800a0fa:	4252      	negs	r2, r2
 800a0fc:	61a2      	str	r2, [r4, #24]
 800a0fe:	2000      	movs	r0, #0
 800a100:	6922      	ldr	r2, [r4, #16]
 800a102:	4282      	cmp	r2, r0
 800a104:	d1c4      	bne.n	800a090 <__swsetup_r+0x34>
 800a106:	0609      	lsls	r1, r1, #24
 800a108:	d5c2      	bpl.n	800a090 <__swsetup_r+0x34>
 800a10a:	2240      	movs	r2, #64	; 0x40
 800a10c:	4313      	orrs	r3, r2
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	3801      	subs	r0, #1
 800a112:	e7bd      	b.n	800a090 <__swsetup_r+0x34>
 800a114:	0788      	lsls	r0, r1, #30
 800a116:	d400      	bmi.n	800a11a <__swsetup_r+0xbe>
 800a118:	6962      	ldr	r2, [r4, #20]
 800a11a:	60a2      	str	r2, [r4, #8]
 800a11c:	e7ef      	b.n	800a0fe <__swsetup_r+0xa2>
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	20000090 	.word	0x20000090

0800a124 <_raise_r>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	0004      	movs	r4, r0
 800a128:	000d      	movs	r5, r1
 800a12a:	291f      	cmp	r1, #31
 800a12c:	d904      	bls.n	800a138 <_raise_r+0x14>
 800a12e:	2316      	movs	r3, #22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	2001      	movs	r0, #1
 800a134:	4240      	negs	r0, r0
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <_raise_r+0x24>
 800a13e:	008a      	lsls	r2, r1, #2
 800a140:	189b      	adds	r3, r3, r2
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	2a00      	cmp	r2, #0
 800a146:	d108      	bne.n	800a15a <_raise_r+0x36>
 800a148:	0020      	movs	r0, r4
 800a14a:	f000 f831 	bl	800a1b0 <_getpid_r>
 800a14e:	002a      	movs	r2, r5
 800a150:	0001      	movs	r1, r0
 800a152:	0020      	movs	r0, r4
 800a154:	f000 f81a 	bl	800a18c <_kill_r>
 800a158:	e7ed      	b.n	800a136 <_raise_r+0x12>
 800a15a:	2000      	movs	r0, #0
 800a15c:	2a01      	cmp	r2, #1
 800a15e:	d0ea      	beq.n	800a136 <_raise_r+0x12>
 800a160:	1c51      	adds	r1, r2, #1
 800a162:	d103      	bne.n	800a16c <_raise_r+0x48>
 800a164:	2316      	movs	r3, #22
 800a166:	3001      	adds	r0, #1
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	e7e4      	b.n	800a136 <_raise_r+0x12>
 800a16c:	2400      	movs	r4, #0
 800a16e:	0028      	movs	r0, r5
 800a170:	601c      	str	r4, [r3, #0]
 800a172:	4790      	blx	r2
 800a174:	0020      	movs	r0, r4
 800a176:	e7de      	b.n	800a136 <_raise_r+0x12>

0800a178 <raise>:
 800a178:	b510      	push	{r4, lr}
 800a17a:	4b03      	ldr	r3, [pc, #12]	; (800a188 <raise+0x10>)
 800a17c:	0001      	movs	r1, r0
 800a17e:	6818      	ldr	r0, [r3, #0]
 800a180:	f7ff ffd0 	bl	800a124 <_raise_r>
 800a184:	bd10      	pop	{r4, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	20000090 	.word	0x20000090

0800a18c <_kill_r>:
 800a18c:	2300      	movs	r3, #0
 800a18e:	b570      	push	{r4, r5, r6, lr}
 800a190:	4d06      	ldr	r5, [pc, #24]	; (800a1ac <_kill_r+0x20>)
 800a192:	0004      	movs	r4, r0
 800a194:	0008      	movs	r0, r1
 800a196:	0011      	movs	r1, r2
 800a198:	602b      	str	r3, [r5, #0]
 800a19a:	f7f9 f9c9 	bl	8003530 <_kill>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	d103      	bne.n	800a1aa <_kill_r+0x1e>
 800a1a2:	682b      	ldr	r3, [r5, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d000      	beq.n	800a1aa <_kill_r+0x1e>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	20000530 	.word	0x20000530

0800a1b0 <_getpid_r>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	f7f9 f9b7 	bl	8003524 <_getpid>
 800a1b6:	bd10      	pop	{r4, pc}

0800a1b8 <__swhatbuf_r>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	000e      	movs	r6, r1
 800a1bc:	001d      	movs	r5, r3
 800a1be:	230e      	movs	r3, #14
 800a1c0:	5ec9      	ldrsh	r1, [r1, r3]
 800a1c2:	0014      	movs	r4, r2
 800a1c4:	b096      	sub	sp, #88	; 0x58
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	da0c      	bge.n	800a1e4 <__swhatbuf_r+0x2c>
 800a1ca:	89b2      	ldrh	r2, [r6, #12]
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	0011      	movs	r1, r2
 800a1d0:	4019      	ands	r1, r3
 800a1d2:	421a      	tst	r2, r3
 800a1d4:	d013      	beq.n	800a1fe <__swhatbuf_r+0x46>
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	3b40      	subs	r3, #64	; 0x40
 800a1da:	2000      	movs	r0, #0
 800a1dc:	6029      	str	r1, [r5, #0]
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	b016      	add	sp, #88	; 0x58
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	466a      	mov	r2, sp
 800a1e6:	f000 f84d 	bl	800a284 <_fstat_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	dbed      	blt.n	800a1ca <__swhatbuf_r+0x12>
 800a1ee:	23f0      	movs	r3, #240	; 0xf0
 800a1f0:	9901      	ldr	r1, [sp, #4]
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	4019      	ands	r1, r3
 800a1f6:	4b03      	ldr	r3, [pc, #12]	; (800a204 <__swhatbuf_r+0x4c>)
 800a1f8:	18c9      	adds	r1, r1, r3
 800a1fa:	424b      	negs	r3, r1
 800a1fc:	4159      	adcs	r1, r3
 800a1fe:	2380      	movs	r3, #128	; 0x80
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	e7ea      	b.n	800a1da <__swhatbuf_r+0x22>
 800a204:	ffffe000 	.word	0xffffe000

0800a208 <__smakebuf_r>:
 800a208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a20a:	2602      	movs	r6, #2
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	0005      	movs	r5, r0
 800a210:	000c      	movs	r4, r1
 800a212:	4233      	tst	r3, r6
 800a214:	d006      	beq.n	800a224 <__smakebuf_r+0x1c>
 800a216:	0023      	movs	r3, r4
 800a218:	3347      	adds	r3, #71	; 0x47
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	2301      	movs	r3, #1
 800a220:	6163      	str	r3, [r4, #20]
 800a222:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a224:	466a      	mov	r2, sp
 800a226:	ab01      	add	r3, sp, #4
 800a228:	f7ff ffc6 	bl	800a1b8 <__swhatbuf_r>
 800a22c:	9900      	ldr	r1, [sp, #0]
 800a22e:	0007      	movs	r7, r0
 800a230:	0028      	movs	r0, r5
 800a232:	f7fe fe63 	bl	8008efc <_malloc_r>
 800a236:	2800      	cmp	r0, #0
 800a238:	d108      	bne.n	800a24c <__smakebuf_r+0x44>
 800a23a:	220c      	movs	r2, #12
 800a23c:	5ea3      	ldrsh	r3, [r4, r2]
 800a23e:	059a      	lsls	r2, r3, #22
 800a240:	d4ef      	bmi.n	800a222 <__smakebuf_r+0x1a>
 800a242:	2203      	movs	r2, #3
 800a244:	4393      	bics	r3, r2
 800a246:	431e      	orrs	r6, r3
 800a248:	81a6      	strh	r6, [r4, #12]
 800a24a:	e7e4      	b.n	800a216 <__smakebuf_r+0xe>
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	89a2      	ldrh	r2, [r4, #12]
 800a250:	6020      	str	r0, [r4, #0]
 800a252:	4313      	orrs	r3, r2
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	9b00      	ldr	r3, [sp, #0]
 800a258:	6120      	str	r0, [r4, #16]
 800a25a:	6163      	str	r3, [r4, #20]
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00c      	beq.n	800a27c <__smakebuf_r+0x74>
 800a262:	0028      	movs	r0, r5
 800a264:	230e      	movs	r3, #14
 800a266:	5ee1      	ldrsh	r1, [r4, r3]
 800a268:	f000 f81e 	bl	800a2a8 <_isatty_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d005      	beq.n	800a27c <__smakebuf_r+0x74>
 800a270:	2303      	movs	r3, #3
 800a272:	89a2      	ldrh	r2, [r4, #12]
 800a274:	439a      	bics	r2, r3
 800a276:	3b02      	subs	r3, #2
 800a278:	4313      	orrs	r3, r2
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	433b      	orrs	r3, r7
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	e7ce      	b.n	800a222 <__smakebuf_r+0x1a>

0800a284 <_fstat_r>:
 800a284:	2300      	movs	r3, #0
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	4d06      	ldr	r5, [pc, #24]	; (800a2a4 <_fstat_r+0x20>)
 800a28a:	0004      	movs	r4, r0
 800a28c:	0008      	movs	r0, r1
 800a28e:	0011      	movs	r1, r2
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	f7f9 f9ac 	bl	80035ee <_fstat>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d103      	bne.n	800a2a2 <_fstat_r+0x1e>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d000      	beq.n	800a2a2 <_fstat_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	20000530 	.word	0x20000530

0800a2a8 <_isatty_r>:
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	b570      	push	{r4, r5, r6, lr}
 800a2ac:	4d06      	ldr	r5, [pc, #24]	; (800a2c8 <_isatty_r+0x20>)
 800a2ae:	0004      	movs	r4, r0
 800a2b0:	0008      	movs	r0, r1
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	f7f9 f9a9 	bl	800360a <_isatty>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d103      	bne.n	800a2c4 <_isatty_r+0x1c>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d000      	beq.n	800a2c4 <_isatty_r+0x1c>
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	20000530 	.word	0x20000530

0800a2cc <_init>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <_fini>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	46c0      	nop			; (mov r8, r8)
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr

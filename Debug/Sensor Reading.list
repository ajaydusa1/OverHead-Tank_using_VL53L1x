
Sensor Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08009f80  08009f80  00019f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a464  0800a464  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a464  0800a464  0001a464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a46c  0800a46c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200001d8  0800a64c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800a64c  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d9c  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000273e  00000000  00000000  00033fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  000379a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017939  00000000  00000000  00038845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f48  00000000  00000000  0005017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098cd3  00000000  00000000  000660c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005638  00000000  00000000  000fed9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001043d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009f64 	.word	0x08009f64

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	08009f64 	.word	0x08009f64

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f951 	bl	80016e0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8a1 	bl	8001590 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f943 	bl	80016e0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f939 	bl	80016e0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f8c9 	bl	8001614 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f8bf 	bl	8001614 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 f98b 	bl	80007c8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f917 	bl	80006f0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f97d 	bl	80007c8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f973 	bl	80007c8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f923 	bl	800073c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f919 	bl	800073c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	; (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f002 f822 	bl	80025c0 <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f002 f81d 	bl	80025c0 <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	d434      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 800058e:	469b      	mov	fp, r3
 8000590:	4653      	mov	r3, sl
 8000592:	465a      	mov	r2, fp
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83b      	bhi.n	800061c <__udivmoddi4+0xc4>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e079      	b.n	800069e <__udivmoddi4+0x146>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e076      	b.n	80006a4 <__udivmoddi4+0x14c>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e029      	b.n	8000624 <__udivmoddi4+0xcc>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	469b      	mov	fp, r3
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4652      	mov	r2, sl
 8000602:	40da      	lsrs	r2, r3
 8000604:	4641      	mov	r1, r8
 8000606:	0013      	movs	r3, r2
 8000608:	464a      	mov	r2, r9
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	4642      	mov	r2, r8
 8000610:	431f      	orrs	r7, r3
 8000612:	4653      	mov	r3, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	001e      	movs	r6, r3
 8000618:	42af      	cmp	r7, r5
 800061a:	d9c3      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	4643      	mov	r3, r8
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0d8      	beq.n	80005dc <__udivmoddi4+0x84>
 800062a:	07fb      	lsls	r3, r7, #31
 800062c:	0872      	lsrs	r2, r6, #1
 800062e:	431a      	orrs	r2, r3
 8000630:	4646      	mov	r6, r8
 8000632:	087b      	lsrs	r3, r7, #1
 8000634:	e00e      	b.n	8000654 <__udivmoddi4+0xfc>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d101      	bne.n	800063e <__udivmoddi4+0xe6>
 800063a:	42a2      	cmp	r2, r4
 800063c:	d80c      	bhi.n	8000658 <__udivmoddi4+0x100>
 800063e:	1aa4      	subs	r4, r4, r2
 8000640:	419d      	sbcs	r5, r3
 8000642:	2001      	movs	r0, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2100      	movs	r1, #0
 800064a:	3e01      	subs	r6, #1
 800064c:	1824      	adds	r4, r4, r0
 800064e:	414d      	adcs	r5, r1
 8000650:	2e00      	cmp	r6, #0
 8000652:	d006      	beq.n	8000662 <__udivmoddi4+0x10a>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d9ee      	bls.n	8000636 <__udivmoddi4+0xde>
 8000658:	3e01      	subs	r6, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__udivmoddi4+0xfc>
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	465b      	mov	r3, fp
 8000668:	1900      	adds	r0, r0, r4
 800066a:	4169      	adcs	r1, r5
 800066c:	2b00      	cmp	r3, #0
 800066e:	db24      	blt.n	80006ba <__udivmoddi4+0x162>
 8000670:	002b      	movs	r3, r5
 8000672:	465a      	mov	r2, fp
 8000674:	4644      	mov	r4, r8
 8000676:	40d3      	lsrs	r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	40e2      	lsrs	r2, r4
 800067c:	001c      	movs	r4, r3
 800067e:	465b      	mov	r3, fp
 8000680:	0015      	movs	r5, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	db2a      	blt.n	80006dc <__udivmoddi4+0x184>
 8000686:	0026      	movs	r6, r4
 8000688:	409e      	lsls	r6, r3
 800068a:	0033      	movs	r3, r6
 800068c:	0026      	movs	r6, r4
 800068e:	4647      	mov	r7, r8
 8000690:	40be      	lsls	r6, r7
 8000692:	0032      	movs	r2, r6
 8000694:	1a80      	subs	r0, r0, r2
 8000696:	4199      	sbcs	r1, r3
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	9101      	str	r1, [sp, #4]
 800069c:	e79e      	b.n	80005dc <__udivmoddi4+0x84>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d8bc      	bhi.n	800061c <__udivmoddi4+0xc4>
 80006a2:	e782      	b.n	80005aa <__udivmoddi4+0x52>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	9100      	str	r1, [sp, #0]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	e785      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	4646      	mov	r6, r8
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0023      	movs	r3, r4
 80006c8:	40f3      	lsrs	r3, r6
 80006ca:	4644      	mov	r4, r8
 80006cc:	4313      	orrs	r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	40e2      	lsrs	r2, r4
 80006d2:	001c      	movs	r4, r3
 80006d4:	465b      	mov	r3, fp
 80006d6:	0015      	movs	r5, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dad4      	bge.n	8000686 <__udivmoddi4+0x12e>
 80006dc:	4642      	mov	r2, r8
 80006de:	002f      	movs	r7, r5
 80006e0:	2320      	movs	r3, #32
 80006e2:	0026      	movs	r6, r4
 80006e4:	4097      	lsls	r7, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	40de      	lsrs	r6, r3
 80006ea:	003b      	movs	r3, r7
 80006ec:	4333      	orrs	r3, r6
 80006ee:	e7cd      	b.n	800068c <__udivmoddi4+0x134>

080006f0 <__eqsf2>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	0042      	lsls	r2, r0, #1
 80006f4:	0245      	lsls	r5, r0, #9
 80006f6:	024e      	lsls	r6, r1, #9
 80006f8:	004c      	lsls	r4, r1, #1
 80006fa:	0fc3      	lsrs	r3, r0, #31
 80006fc:	0a6d      	lsrs	r5, r5, #9
 80006fe:	2001      	movs	r0, #1
 8000700:	0e12      	lsrs	r2, r2, #24
 8000702:	0a76      	lsrs	r6, r6, #9
 8000704:	0e24      	lsrs	r4, r4, #24
 8000706:	0fc9      	lsrs	r1, r1, #31
 8000708:	2aff      	cmp	r2, #255	; 0xff
 800070a:	d006      	beq.n	800071a <__eqsf2+0x2a>
 800070c:	2cff      	cmp	r4, #255	; 0xff
 800070e:	d003      	beq.n	8000718 <__eqsf2+0x28>
 8000710:	42a2      	cmp	r2, r4
 8000712:	d101      	bne.n	8000718 <__eqsf2+0x28>
 8000714:	42b5      	cmp	r5, r6
 8000716:	d006      	beq.n	8000726 <__eqsf2+0x36>
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	2d00      	cmp	r5, #0
 800071c:	d1fc      	bne.n	8000718 <__eqsf2+0x28>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d1fa      	bne.n	8000718 <__eqsf2+0x28>
 8000722:	2e00      	cmp	r6, #0
 8000724:	d1f8      	bne.n	8000718 <__eqsf2+0x28>
 8000726:	428b      	cmp	r3, r1
 8000728:	d006      	beq.n	8000738 <__eqsf2+0x48>
 800072a:	2001      	movs	r0, #1
 800072c:	2a00      	cmp	r2, #0
 800072e:	d1f3      	bne.n	8000718 <__eqsf2+0x28>
 8000730:	0028      	movs	r0, r5
 8000732:	1e43      	subs	r3, r0, #1
 8000734:	4198      	sbcs	r0, r3
 8000736:	e7ef      	b.n	8000718 <__eqsf2+0x28>
 8000738:	2000      	movs	r0, #0
 800073a:	e7ed      	b.n	8000718 <__eqsf2+0x28>

0800073c <__gesf2>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	0042      	lsls	r2, r0, #1
 8000740:	0245      	lsls	r5, r0, #9
 8000742:	024e      	lsls	r6, r1, #9
 8000744:	004c      	lsls	r4, r1, #1
 8000746:	0fc3      	lsrs	r3, r0, #31
 8000748:	0a6d      	lsrs	r5, r5, #9
 800074a:	0e12      	lsrs	r2, r2, #24
 800074c:	0a76      	lsrs	r6, r6, #9
 800074e:	0e24      	lsrs	r4, r4, #24
 8000750:	0fc8      	lsrs	r0, r1, #31
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d01b      	beq.n	800078e <__gesf2+0x52>
 8000756:	2cff      	cmp	r4, #255	; 0xff
 8000758:	d00e      	beq.n	8000778 <__gesf2+0x3c>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d11b      	bne.n	8000796 <__gesf2+0x5a>
 800075e:	2c00      	cmp	r4, #0
 8000760:	d101      	bne.n	8000766 <__gesf2+0x2a>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d01c      	beq.n	80007a0 <__gesf2+0x64>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d00c      	beq.n	8000784 <__gesf2+0x48>
 800076a:	4283      	cmp	r3, r0
 800076c:	d01c      	beq.n	80007a8 <__gesf2+0x6c>
 800076e:	2102      	movs	r1, #2
 8000770:	1e58      	subs	r0, r3, #1
 8000772:	4008      	ands	r0, r1
 8000774:	3801      	subs	r0, #1
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	2e00      	cmp	r6, #0
 800077a:	d122      	bne.n	80007c2 <__gesf2+0x86>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d1f4      	bne.n	800076a <__gesf2+0x2e>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d1f2      	bne.n	800076a <__gesf2+0x2e>
 8000784:	2800      	cmp	r0, #0
 8000786:	d1f6      	bne.n	8000776 <__gesf2+0x3a>
 8000788:	2001      	movs	r0, #1
 800078a:	4240      	negs	r0, r0
 800078c:	e7f3      	b.n	8000776 <__gesf2+0x3a>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d117      	bne.n	80007c2 <__gesf2+0x86>
 8000792:	2cff      	cmp	r4, #255	; 0xff
 8000794:	d0f0      	beq.n	8000778 <__gesf2+0x3c>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d1e7      	bne.n	800076a <__gesf2+0x2e>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d1e5      	bne.n	800076a <__gesf2+0x2e>
 800079e:	e7e6      	b.n	800076e <__gesf2+0x32>
 80007a0:	2000      	movs	r0, #0
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0e7      	beq.n	8000776 <__gesf2+0x3a>
 80007a6:	e7e2      	b.n	800076e <__gesf2+0x32>
 80007a8:	42a2      	cmp	r2, r4
 80007aa:	dc05      	bgt.n	80007b8 <__gesf2+0x7c>
 80007ac:	dbea      	blt.n	8000784 <__gesf2+0x48>
 80007ae:	42b5      	cmp	r5, r6
 80007b0:	d802      	bhi.n	80007b8 <__gesf2+0x7c>
 80007b2:	d3e7      	bcc.n	8000784 <__gesf2+0x48>
 80007b4:	2000      	movs	r0, #0
 80007b6:	e7de      	b.n	8000776 <__gesf2+0x3a>
 80007b8:	4243      	negs	r3, r0
 80007ba:	4158      	adcs	r0, r3
 80007bc:	0040      	lsls	r0, r0, #1
 80007be:	3801      	subs	r0, #1
 80007c0:	e7d9      	b.n	8000776 <__gesf2+0x3a>
 80007c2:	2002      	movs	r0, #2
 80007c4:	4240      	negs	r0, r0
 80007c6:	e7d6      	b.n	8000776 <__gesf2+0x3a>

080007c8 <__lesf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	024e      	lsls	r6, r1, #9
 80007d0:	004c      	lsls	r4, r1, #1
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0a6d      	lsrs	r5, r5, #9
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	0a76      	lsrs	r6, r6, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0fc8      	lsrs	r0, r1, #31
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d00b      	beq.n	80007fa <__lesf2+0x32>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d00d      	beq.n	8000802 <__lesf2+0x3a>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d11f      	bne.n	800082a <__lesf2+0x62>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d116      	bne.n	800081c <__lesf2+0x54>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d114      	bne.n	800081c <__lesf2+0x54>
 80007f2:	2000      	movs	r0, #0
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d010      	beq.n	800081a <__lesf2+0x52>
 80007f8:	e009      	b.n	800080e <__lesf2+0x46>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d10c      	bne.n	8000818 <__lesf2+0x50>
 80007fe:	2cff      	cmp	r4, #255	; 0xff
 8000800:	d113      	bne.n	800082a <__lesf2+0x62>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d108      	bne.n	8000818 <__lesf2+0x50>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d008      	beq.n	800081c <__lesf2+0x54>
 800080a:	4283      	cmp	r3, r0
 800080c:	d012      	beq.n	8000834 <__lesf2+0x6c>
 800080e:	2102      	movs	r1, #2
 8000810:	1e58      	subs	r0, r3, #1
 8000812:	4008      	ands	r0, r1
 8000814:	3801      	subs	r0, #1
 8000816:	e000      	b.n	800081a <__lesf2+0x52>
 8000818:	2002      	movs	r0, #2
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	2d00      	cmp	r5, #0
 800081e:	d1f4      	bne.n	800080a <__lesf2+0x42>
 8000820:	2800      	cmp	r0, #0
 8000822:	d1fa      	bne.n	800081a <__lesf2+0x52>
 8000824:	2001      	movs	r0, #1
 8000826:	4240      	negs	r0, r0
 8000828:	e7f7      	b.n	800081a <__lesf2+0x52>
 800082a:	2c00      	cmp	r4, #0
 800082c:	d1ed      	bne.n	800080a <__lesf2+0x42>
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1eb      	bne.n	800080a <__lesf2+0x42>
 8000832:	e7ec      	b.n	800080e <__lesf2+0x46>
 8000834:	42a2      	cmp	r2, r4
 8000836:	dc05      	bgt.n	8000844 <__lesf2+0x7c>
 8000838:	dbf2      	blt.n	8000820 <__lesf2+0x58>
 800083a:	42b5      	cmp	r5, r6
 800083c:	d802      	bhi.n	8000844 <__lesf2+0x7c>
 800083e:	d3ef      	bcc.n	8000820 <__lesf2+0x58>
 8000840:	2000      	movs	r0, #0
 8000842:	e7ea      	b.n	800081a <__lesf2+0x52>
 8000844:	4243      	negs	r3, r0
 8000846:	4158      	adcs	r0, r3
 8000848:	0040      	lsls	r0, r0, #1
 800084a:	3801      	subs	r0, #1
 800084c:	e7e5      	b.n	800081a <__lesf2+0x52>
 800084e:	46c0      	nop			; (mov r8, r8)

08000850 <__aeabi_i2f>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	2800      	cmp	r0, #0
 8000854:	d013      	beq.n	800087e <__aeabi_i2f+0x2e>
 8000856:	17c3      	asrs	r3, r0, #31
 8000858:	18c5      	adds	r5, r0, r3
 800085a:	405d      	eors	r5, r3
 800085c:	0fc4      	lsrs	r4, r0, #31
 800085e:	0028      	movs	r0, r5
 8000860:	f001 fe90 	bl	8002584 <__clzsi2>
 8000864:	239e      	movs	r3, #158	; 0x9e
 8000866:	0001      	movs	r1, r0
 8000868:	1a1b      	subs	r3, r3, r0
 800086a:	2b96      	cmp	r3, #150	; 0x96
 800086c:	dc0f      	bgt.n	800088e <__aeabi_i2f+0x3e>
 800086e:	2808      	cmp	r0, #8
 8000870:	d031      	beq.n	80008d6 <__aeabi_i2f+0x86>
 8000872:	3908      	subs	r1, #8
 8000874:	408d      	lsls	r5, r1
 8000876:	026d      	lsls	r5, r5, #9
 8000878:	0a6d      	lsrs	r5, r5, #9
 800087a:	b2d8      	uxtb	r0, r3
 800087c:	e002      	b.n	8000884 <__aeabi_i2f+0x34>
 800087e:	2400      	movs	r4, #0
 8000880:	2000      	movs	r0, #0
 8000882:	2500      	movs	r5, #0
 8000884:	05c0      	lsls	r0, r0, #23
 8000886:	4328      	orrs	r0, r5
 8000888:	07e4      	lsls	r4, r4, #31
 800088a:	4320      	orrs	r0, r4
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	2b99      	cmp	r3, #153	; 0x99
 8000890:	dd0c      	ble.n	80008ac <__aeabi_i2f+0x5c>
 8000892:	2205      	movs	r2, #5
 8000894:	1a12      	subs	r2, r2, r0
 8000896:	0028      	movs	r0, r5
 8000898:	40d0      	lsrs	r0, r2
 800089a:	0002      	movs	r2, r0
 800089c:	0008      	movs	r0, r1
 800089e:	301b      	adds	r0, #27
 80008a0:	4085      	lsls	r5, r0
 80008a2:	0028      	movs	r0, r5
 80008a4:	1e45      	subs	r5, r0, #1
 80008a6:	41a8      	sbcs	r0, r5
 80008a8:	4302      	orrs	r2, r0
 80008aa:	0015      	movs	r5, r2
 80008ac:	2905      	cmp	r1, #5
 80008ae:	dc16      	bgt.n	80008de <__aeabi_i2f+0x8e>
 80008b0:	002a      	movs	r2, r5
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <__aeabi_i2f+0xa0>)
 80008b4:	4002      	ands	r2, r0
 80008b6:	076e      	lsls	r6, r5, #29
 80008b8:	d009      	beq.n	80008ce <__aeabi_i2f+0x7e>
 80008ba:	260f      	movs	r6, #15
 80008bc:	4035      	ands	r5, r6
 80008be:	2d04      	cmp	r5, #4
 80008c0:	d005      	beq.n	80008ce <__aeabi_i2f+0x7e>
 80008c2:	3204      	adds	r2, #4
 80008c4:	0155      	lsls	r5, r2, #5
 80008c6:	d502      	bpl.n	80008ce <__aeabi_i2f+0x7e>
 80008c8:	239f      	movs	r3, #159	; 0x9f
 80008ca:	4002      	ands	r2, r0
 80008cc:	1a5b      	subs	r3, r3, r1
 80008ce:	0192      	lsls	r2, r2, #6
 80008d0:	0a55      	lsrs	r5, r2, #9
 80008d2:	b2d8      	uxtb	r0, r3
 80008d4:	e7d6      	b.n	8000884 <__aeabi_i2f+0x34>
 80008d6:	026d      	lsls	r5, r5, #9
 80008d8:	2096      	movs	r0, #150	; 0x96
 80008da:	0a6d      	lsrs	r5, r5, #9
 80008dc:	e7d2      	b.n	8000884 <__aeabi_i2f+0x34>
 80008de:	1f4a      	subs	r2, r1, #5
 80008e0:	4095      	lsls	r5, r2
 80008e2:	002a      	movs	r2, r5
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <__aeabi_i2f+0xa0>)
 80008e6:	4002      	ands	r2, r0
 80008e8:	076e      	lsls	r6, r5, #29
 80008ea:	d0f0      	beq.n	80008ce <__aeabi_i2f+0x7e>
 80008ec:	e7e5      	b.n	80008ba <__aeabi_i2f+0x6a>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	fbffffff 	.word	0xfbffffff

080008f4 <__aeabi_dadd>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	464f      	mov	r7, r9
 80008f8:	4646      	mov	r6, r8
 80008fa:	46d6      	mov	lr, sl
 80008fc:	0004      	movs	r4, r0
 80008fe:	b5c0      	push	{r6, r7, lr}
 8000900:	001f      	movs	r7, r3
 8000902:	030b      	lsls	r3, r1, #12
 8000904:	0010      	movs	r0, r2
 8000906:	004e      	lsls	r6, r1, #1
 8000908:	0a5b      	lsrs	r3, r3, #9
 800090a:	0fcd      	lsrs	r5, r1, #31
 800090c:	0f61      	lsrs	r1, r4, #29
 800090e:	007a      	lsls	r2, r7, #1
 8000910:	4319      	orrs	r1, r3
 8000912:	00e3      	lsls	r3, r4, #3
 8000914:	033c      	lsls	r4, r7, #12
 8000916:	0fff      	lsrs	r7, r7, #31
 8000918:	46bc      	mov	ip, r7
 800091a:	0a64      	lsrs	r4, r4, #9
 800091c:	0f47      	lsrs	r7, r0, #29
 800091e:	4327      	orrs	r7, r4
 8000920:	0d76      	lsrs	r6, r6, #21
 8000922:	0d52      	lsrs	r2, r2, #21
 8000924:	00c0      	lsls	r0, r0, #3
 8000926:	46b9      	mov	r9, r7
 8000928:	4680      	mov	r8, r0
 800092a:	1ab7      	subs	r7, r6, r2
 800092c:	4565      	cmp	r5, ip
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x3e>
 8000930:	e09b      	b.n	8000a6a <__aeabi_dadd+0x176>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x44>
 8000936:	e084      	b.n	8000a42 <__aeabi_dadd+0x14e>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4a>
 800093c:	e0be      	b.n	8000abc <__aeabi_dadd+0x1c8>
 800093e:	4ac8      	ldr	r2, [pc, #800]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000940:	4296      	cmp	r6, r2
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x52>
 8000944:	e124      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	464c      	mov	r4, r9
 800094a:	0412      	lsls	r2, r2, #16
 800094c:	4314      	orrs	r4, r2
 800094e:	46a1      	mov	r9, r4
 8000950:	2f38      	cmp	r7, #56	; 0x38
 8000952:	dd00      	ble.n	8000956 <__aeabi_dadd+0x62>
 8000954:	e167      	b.n	8000c26 <__aeabi_dadd+0x332>
 8000956:	2f1f      	cmp	r7, #31
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x68>
 800095a:	e1d6      	b.n	8000d0a <__aeabi_dadd+0x416>
 800095c:	2220      	movs	r2, #32
 800095e:	464c      	mov	r4, r9
 8000960:	1bd2      	subs	r2, r2, r7
 8000962:	4094      	lsls	r4, r2
 8000964:	46a2      	mov	sl, r4
 8000966:	4644      	mov	r4, r8
 8000968:	40fc      	lsrs	r4, r7
 800096a:	0020      	movs	r0, r4
 800096c:	4654      	mov	r4, sl
 800096e:	4304      	orrs	r4, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4090      	lsls	r0, r2
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	464a      	mov	r2, r9
 800097a:	40fa      	lsrs	r2, r7
 800097c:	4304      	orrs	r4, r0
 800097e:	1a89      	subs	r1, r1, r2
 8000980:	1b1c      	subs	r4, r3, r4
 8000982:	42a3      	cmp	r3, r4
 8000984:	4192      	sbcs	r2, r2
 8000986:	4252      	negs	r2, r2
 8000988:	1a8b      	subs	r3, r1, r2
 800098a:	469a      	mov	sl, r3
 800098c:	4653      	mov	r3, sl
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_dadd+0xa0>
 8000992:	e0d4      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000994:	4653      	mov	r3, sl
 8000996:	025a      	lsls	r2, r3, #9
 8000998:	0a53      	lsrs	r3, r2, #9
 800099a:	469a      	mov	sl, r3
 800099c:	4653      	mov	r3, sl
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0xb0>
 80009a2:	e104      	b.n	8000bae <__aeabi_dadd+0x2ba>
 80009a4:	4650      	mov	r0, sl
 80009a6:	f001 fded 	bl	8002584 <__clzsi2>
 80009aa:	0003      	movs	r3, r0
 80009ac:	3b08      	subs	r3, #8
 80009ae:	2220      	movs	r2, #32
 80009b0:	0020      	movs	r0, r4
 80009b2:	1ad2      	subs	r2, r2, r3
 80009b4:	4651      	mov	r1, sl
 80009b6:	40d0      	lsrs	r0, r2
 80009b8:	4099      	lsls	r1, r3
 80009ba:	0002      	movs	r2, r0
 80009bc:	409c      	lsls	r4, r3
 80009be:	430a      	orrs	r2, r1
 80009c0:	42b3      	cmp	r3, r6
 80009c2:	da00      	bge.n	80009c6 <__aeabi_dadd+0xd2>
 80009c4:	e102      	b.n	8000bcc <__aeabi_dadd+0x2d8>
 80009c6:	1b9b      	subs	r3, r3, r6
 80009c8:	1c59      	adds	r1, r3, #1
 80009ca:	291f      	cmp	r1, #31
 80009cc:	dd00      	ble.n	80009d0 <__aeabi_dadd+0xdc>
 80009ce:	e0a7      	b.n	8000b20 <__aeabi_dadd+0x22c>
 80009d0:	2320      	movs	r3, #32
 80009d2:	0010      	movs	r0, r2
 80009d4:	0026      	movs	r6, r4
 80009d6:	1a5b      	subs	r3, r3, r1
 80009d8:	409c      	lsls	r4, r3
 80009da:	4098      	lsls	r0, r3
 80009dc:	40ce      	lsrs	r6, r1
 80009de:	40ca      	lsrs	r2, r1
 80009e0:	1e63      	subs	r3, r4, #1
 80009e2:	419c      	sbcs	r4, r3
 80009e4:	4330      	orrs	r0, r6
 80009e6:	4692      	mov	sl, r2
 80009e8:	2600      	movs	r6, #0
 80009ea:	4304      	orrs	r4, r0
 80009ec:	0763      	lsls	r3, r4, #29
 80009ee:	d009      	beq.n	8000a04 <__aeabi_dadd+0x110>
 80009f0:	230f      	movs	r3, #15
 80009f2:	4023      	ands	r3, r4
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d005      	beq.n	8000a04 <__aeabi_dadd+0x110>
 80009f8:	1d23      	adds	r3, r4, #4
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	41a4      	sbcs	r4, r4
 80009fe:	4264      	negs	r4, r4
 8000a00:	44a2      	add	sl, r4
 8000a02:	001c      	movs	r4, r3
 8000a04:	4653      	mov	r3, sl
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	d400      	bmi.n	8000a0c <__aeabi_dadd+0x118>
 8000a0a:	e09b      	b.n	8000b44 <__aeabi_dadd+0x250>
 8000a0c:	4b94      	ldr	r3, [pc, #592]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000a0e:	3601      	adds	r6, #1
 8000a10:	429e      	cmp	r6, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x122>
 8000a14:	e0b8      	b.n	8000b88 <__aeabi_dadd+0x294>
 8000a16:	4653      	mov	r3, sl
 8000a18:	4992      	ldr	r1, [pc, #584]	; (8000c64 <__aeabi_dadd+0x370>)
 8000a1a:	08e4      	lsrs	r4, r4, #3
 8000a1c:	400b      	ands	r3, r1
 8000a1e:	0019      	movs	r1, r3
 8000a20:	075b      	lsls	r3, r3, #29
 8000a22:	4323      	orrs	r3, r4
 8000a24:	0572      	lsls	r2, r6, #21
 8000a26:	024c      	lsls	r4, r1, #9
 8000a28:	0b24      	lsrs	r4, r4, #12
 8000a2a:	0d52      	lsrs	r2, r2, #21
 8000a2c:	0512      	lsls	r2, r2, #20
 8000a2e:	07ed      	lsls	r5, r5, #31
 8000a30:	4322      	orrs	r2, r4
 8000a32:	432a      	orrs	r2, r5
 8000a34:	0018      	movs	r0, r3
 8000a36:	0011      	movs	r1, r2
 8000a38:	bce0      	pop	{r5, r6, r7}
 8000a3a:	46ba      	mov	sl, r7
 8000a3c:	46b1      	mov	r9, r6
 8000a3e:	46a8      	mov	r8, r5
 8000a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d048      	beq.n	8000ad8 <__aeabi_dadd+0x1e4>
 8000a46:	1b97      	subs	r7, r2, r6
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x15a>
 8000a4c:	e10e      	b.n	8000c6c <__aeabi_dadd+0x378>
 8000a4e:	000c      	movs	r4, r1
 8000a50:	431c      	orrs	r4, r3
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x162>
 8000a54:	e1b7      	b.n	8000dc6 <__aeabi_dadd+0x4d2>
 8000a56:	1e7c      	subs	r4, r7, #1
 8000a58:	2f01      	cmp	r7, #1
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x16a>
 8000a5c:	e226      	b.n	8000eac <__aeabi_dadd+0x5b8>
 8000a5e:	4d80      	ldr	r5, [pc, #512]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000a60:	42af      	cmp	r7, r5
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x172>
 8000a64:	e1d5      	b.n	8000e12 <__aeabi_dadd+0x51e>
 8000a66:	0027      	movs	r7, r4
 8000a68:	e107      	b.n	8000c7a <__aeabi_dadd+0x386>
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	dc00      	bgt.n	8000a70 <__aeabi_dadd+0x17c>
 8000a6e:	e0b2      	b.n	8000bd6 <__aeabi_dadd+0x2e2>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d047      	beq.n	8000b04 <__aeabi_dadd+0x210>
 8000a74:	4a7a      	ldr	r2, [pc, #488]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000a76:	4296      	cmp	r6, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x188>
 8000a7a:	e089      	b.n	8000b90 <__aeabi_dadd+0x29c>
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	464c      	mov	r4, r9
 8000a80:	0412      	lsls	r2, r2, #16
 8000a82:	4314      	orrs	r4, r2
 8000a84:	46a1      	mov	r9, r4
 8000a86:	2f38      	cmp	r7, #56	; 0x38
 8000a88:	dc6b      	bgt.n	8000b62 <__aeabi_dadd+0x26e>
 8000a8a:	2f1f      	cmp	r7, #31
 8000a8c:	dc00      	bgt.n	8000a90 <__aeabi_dadd+0x19c>
 8000a8e:	e16e      	b.n	8000d6e <__aeabi_dadd+0x47a>
 8000a90:	003a      	movs	r2, r7
 8000a92:	4648      	mov	r0, r9
 8000a94:	3a20      	subs	r2, #32
 8000a96:	40d0      	lsrs	r0, r2
 8000a98:	4684      	mov	ip, r0
 8000a9a:	2f20      	cmp	r7, #32
 8000a9c:	d007      	beq.n	8000aae <__aeabi_dadd+0x1ba>
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	4648      	mov	r0, r9
 8000aa2:	1bd2      	subs	r2, r2, r7
 8000aa4:	4090      	lsls	r0, r2
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	4310      	orrs	r0, r2
 8000aac:	4680      	mov	r8, r0
 8000aae:	4640      	mov	r0, r8
 8000ab0:	1e42      	subs	r2, r0, #1
 8000ab2:	4190      	sbcs	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	4314      	orrs	r4, r2
 8000aba:	e057      	b.n	8000b6c <__aeabi_dadd+0x278>
 8000abc:	464a      	mov	r2, r9
 8000abe:	4302      	orrs	r2, r0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x1d0>
 8000ac2:	e103      	b.n	8000ccc <__aeabi_dadd+0x3d8>
 8000ac4:	1e7a      	subs	r2, r7, #1
 8000ac6:	2f01      	cmp	r7, #1
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x1d8>
 8000aca:	e193      	b.n	8000df4 <__aeabi_dadd+0x500>
 8000acc:	4c64      	ldr	r4, [pc, #400]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000ace:	42a7      	cmp	r7, r4
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x1e0>
 8000ad2:	e18a      	b.n	8000dea <__aeabi_dadd+0x4f6>
 8000ad4:	0017      	movs	r7, r2
 8000ad6:	e73b      	b.n	8000950 <__aeabi_dadd+0x5c>
 8000ad8:	4c63      	ldr	r4, [pc, #396]	; (8000c68 <__aeabi_dadd+0x374>)
 8000ada:	1c72      	adds	r2, r6, #1
 8000adc:	4222      	tst	r2, r4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_dadd+0x1ee>
 8000ae0:	e0e0      	b.n	8000ca4 <__aeabi_dadd+0x3b0>
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dadd+0x1f8>
 8000aea:	e174      	b.n	8000dd6 <__aeabi_dadd+0x4e2>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x1fe>
 8000af0:	e1d0      	b.n	8000e94 <__aeabi_dadd+0x5a0>
 8000af2:	464a      	mov	r2, r9
 8000af4:	4302      	orrs	r2, r0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x206>
 8000af8:	e1e3      	b.n	8000ec2 <__aeabi_dadd+0x5ce>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	08c9      	lsrs	r1, r1, #3
 8000b02:	e029      	b.n	8000b58 <__aeabi_dadd+0x264>
 8000b04:	464a      	mov	r2, r9
 8000b06:	4302      	orrs	r2, r0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x218>
 8000b0a:	e17d      	b.n	8000e08 <__aeabi_dadd+0x514>
 8000b0c:	1e7a      	subs	r2, r7, #1
 8000b0e:	2f01      	cmp	r7, #1
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x220>
 8000b12:	e0e0      	b.n	8000cd6 <__aeabi_dadd+0x3e2>
 8000b14:	4c52      	ldr	r4, [pc, #328]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000b16:	42a7      	cmp	r7, r4
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x228>
 8000b1a:	e166      	b.n	8000dea <__aeabi_dadd+0x4f6>
 8000b1c:	0017      	movs	r7, r2
 8000b1e:	e7b2      	b.n	8000a86 <__aeabi_dadd+0x192>
 8000b20:	0010      	movs	r0, r2
 8000b22:	3b1f      	subs	r3, #31
 8000b24:	40d8      	lsrs	r0, r3
 8000b26:	2920      	cmp	r1, #32
 8000b28:	d003      	beq.n	8000b32 <__aeabi_dadd+0x23e>
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	4314      	orrs	r4, r2
 8000b32:	1e63      	subs	r3, r4, #1
 8000b34:	419c      	sbcs	r4, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	2600      	movs	r6, #0
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	4304      	orrs	r4, r0
 8000b3e:	0763      	lsls	r3, r4, #29
 8000b40:	d000      	beq.n	8000b44 <__aeabi_dadd+0x250>
 8000b42:	e755      	b.n	80009f0 <__aeabi_dadd+0xfc>
 8000b44:	4652      	mov	r2, sl
 8000b46:	08e3      	lsrs	r3, r4, #3
 8000b48:	0752      	lsls	r2, r2, #29
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	4652      	mov	r2, sl
 8000b4e:	0037      	movs	r7, r6
 8000b50:	08d1      	lsrs	r1, r2, #3
 8000b52:	4a43      	ldr	r2, [pc, #268]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000b54:	4297      	cmp	r7, r2
 8000b56:	d01f      	beq.n	8000b98 <__aeabi_dadd+0x2a4>
 8000b58:	0309      	lsls	r1, r1, #12
 8000b5a:	057a      	lsls	r2, r7, #21
 8000b5c:	0b0c      	lsrs	r4, r1, #12
 8000b5e:	0d52      	lsrs	r2, r2, #21
 8000b60:	e764      	b.n	8000a2c <__aeabi_dadd+0x138>
 8000b62:	4642      	mov	r2, r8
 8000b64:	464c      	mov	r4, r9
 8000b66:	4314      	orrs	r4, r2
 8000b68:	1e62      	subs	r2, r4, #1
 8000b6a:	4194      	sbcs	r4, r2
 8000b6c:	18e4      	adds	r4, r4, r3
 8000b6e:	429c      	cmp	r4, r3
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	448a      	add	sl, r1
 8000b78:	4653      	mov	r3, sl
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	d5df      	bpl.n	8000b3e <__aeabi_dadd+0x24a>
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000b80:	3601      	adds	r6, #1
 8000b82:	429e      	cmp	r6, r3
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x294>
 8000b86:	e0b3      	b.n	8000cf0 <__aeabi_dadd+0x3fc>
 8000b88:	0032      	movs	r2, r6
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e74d      	b.n	8000a2c <__aeabi_dadd+0x138>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	001a      	movs	r2, r3
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x2ac>
 8000b9e:	e200      	b.n	8000fa2 <__aeabi_dadd+0x6ae>
 8000ba0:	2480      	movs	r4, #128	; 0x80
 8000ba2:	0324      	lsls	r4, r4, #12
 8000ba4:	430c      	orrs	r4, r1
 8000ba6:	0324      	lsls	r4, r4, #12
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000baa:	0b24      	lsrs	r4, r4, #12
 8000bac:	e73e      	b.n	8000a2c <__aeabi_dadd+0x138>
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f001 fce8 	bl	8002584 <__clzsi2>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	2b1f      	cmp	r3, #31
 8000bba:	dc00      	bgt.n	8000bbe <__aeabi_dadd+0x2ca>
 8000bbc:	e6f7      	b.n	80009ae <__aeabi_dadd+0xba>
 8000bbe:	0022      	movs	r2, r4
 8000bc0:	3808      	subs	r0, #8
 8000bc2:	4082      	lsls	r2, r0
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	42b3      	cmp	r3, r6
 8000bc8:	db00      	blt.n	8000bcc <__aeabi_dadd+0x2d8>
 8000bca:	e6fc      	b.n	80009c6 <__aeabi_dadd+0xd2>
 8000bcc:	1af6      	subs	r6, r6, r3
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <__aeabi_dadd+0x370>)
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	4692      	mov	sl, r2
 8000bd4:	e70a      	b.n	80009ec <__aeabi_dadd+0xf8>
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d02b      	beq.n	8000c32 <__aeabi_dadd+0x33e>
 8000bda:	1b97      	subs	r7, r2, r6
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x2ee>
 8000be0:	e0b8      	b.n	8000d54 <__aeabi_dadd+0x460>
 8000be2:	4c1f      	ldr	r4, [pc, #124]	; (8000c60 <__aeabi_dadd+0x36c>)
 8000be4:	42a2      	cmp	r2, r4
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x2f6>
 8000be8:	e11c      	b.n	8000e24 <__aeabi_dadd+0x530>
 8000bea:	2480      	movs	r4, #128	; 0x80
 8000bec:	0424      	lsls	r4, r4, #16
 8000bee:	4321      	orrs	r1, r4
 8000bf0:	2f38      	cmp	r7, #56	; 0x38
 8000bf2:	dd00      	ble.n	8000bf6 <__aeabi_dadd+0x302>
 8000bf4:	e11e      	b.n	8000e34 <__aeabi_dadd+0x540>
 8000bf6:	2f1f      	cmp	r7, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0x308>
 8000bfa:	e19e      	b.n	8000f3a <__aeabi_dadd+0x646>
 8000bfc:	2620      	movs	r6, #32
 8000bfe:	000c      	movs	r4, r1
 8000c00:	1bf6      	subs	r6, r6, r7
 8000c02:	0018      	movs	r0, r3
 8000c04:	40b3      	lsls	r3, r6
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	40f8      	lsrs	r0, r7
 8000c0a:	1e5e      	subs	r6, r3, #1
 8000c0c:	41b3      	sbcs	r3, r6
 8000c0e:	40f9      	lsrs	r1, r7
 8000c10:	4304      	orrs	r4, r0
 8000c12:	431c      	orrs	r4, r3
 8000c14:	4489      	add	r9, r1
 8000c16:	4444      	add	r4, r8
 8000c18:	4544      	cmp	r4, r8
 8000c1a:	419b      	sbcs	r3, r3
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	444b      	add	r3, r9
 8000c20:	469a      	mov	sl, r3
 8000c22:	0016      	movs	r6, r2
 8000c24:	e7a8      	b.n	8000b78 <__aeabi_dadd+0x284>
 8000c26:	4642      	mov	r2, r8
 8000c28:	464c      	mov	r4, r9
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	1e62      	subs	r2, r4, #1
 8000c2e:	4194      	sbcs	r4, r2
 8000c30:	e6a6      	b.n	8000980 <__aeabi_dadd+0x8c>
 8000c32:	4c0d      	ldr	r4, [pc, #52]	; (8000c68 <__aeabi_dadd+0x374>)
 8000c34:	1c72      	adds	r2, r6, #1
 8000c36:	4222      	tst	r2, r4
 8000c38:	d000      	beq.n	8000c3c <__aeabi_dadd+0x348>
 8000c3a:	e0a8      	b.n	8000d8e <__aeabi_dadd+0x49a>
 8000c3c:	000a      	movs	r2, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	d000      	beq.n	8000c46 <__aeabi_dadd+0x352>
 8000c44:	e10a      	b.n	8000e5c <__aeabi_dadd+0x568>
 8000c46:	2a00      	cmp	r2, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x358>
 8000c4a:	e15e      	b.n	8000f0a <__aeabi_dadd+0x616>
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	4302      	orrs	r2, r0
 8000c50:	d000      	beq.n	8000c54 <__aeabi_dadd+0x360>
 8000c52:	e161      	b.n	8000f18 <__aeabi_dadd+0x624>
 8000c54:	074a      	lsls	r2, r1, #29
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c9      	lsrs	r1, r1, #3
 8000c5c:	e77c      	b.n	8000b58 <__aeabi_dadd+0x264>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	000007ff 	.word	0x000007ff
 8000c64:	ff7fffff 	.word	0xff7fffff
 8000c68:	000007fe 	.word	0x000007fe
 8000c6c:	4ccf      	ldr	r4, [pc, #828]	; (8000fac <__aeabi_dadd+0x6b8>)
 8000c6e:	42a2      	cmp	r2, r4
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x380>
 8000c72:	e0ce      	b.n	8000e12 <__aeabi_dadd+0x51e>
 8000c74:	2480      	movs	r4, #128	; 0x80
 8000c76:	0424      	lsls	r4, r4, #16
 8000c78:	4321      	orrs	r1, r4
 8000c7a:	2f38      	cmp	r7, #56	; 0x38
 8000c7c:	dc5b      	bgt.n	8000d36 <__aeabi_dadd+0x442>
 8000c7e:	2f1f      	cmp	r7, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dadd+0x390>
 8000c82:	e0dc      	b.n	8000e3e <__aeabi_dadd+0x54a>
 8000c84:	2520      	movs	r5, #32
 8000c86:	000c      	movs	r4, r1
 8000c88:	1bed      	subs	r5, r5, r7
 8000c8a:	001e      	movs	r6, r3
 8000c8c:	40ab      	lsls	r3, r5
 8000c8e:	40ac      	lsls	r4, r5
 8000c90:	40fe      	lsrs	r6, r7
 8000c92:	1e5d      	subs	r5, r3, #1
 8000c94:	41ab      	sbcs	r3, r5
 8000c96:	4334      	orrs	r4, r6
 8000c98:	40f9      	lsrs	r1, r7
 8000c9a:	431c      	orrs	r4, r3
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	1a5b      	subs	r3, r3, r1
 8000ca0:	4699      	mov	r9, r3
 8000ca2:	e04c      	b.n	8000d3e <__aeabi_dadd+0x44a>
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	1a1c      	subs	r4, r3, r0
 8000ca8:	1a88      	subs	r0, r1, r2
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	4252      	negs	r2, r2
 8000cb0:	4692      	mov	sl, r2
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	4650      	mov	r0, sl
 8000cb6:	1a12      	subs	r2, r2, r0
 8000cb8:	4692      	mov	sl, r2
 8000cba:	0212      	lsls	r2, r2, #8
 8000cbc:	d478      	bmi.n	8000db0 <__aeabi_dadd+0x4bc>
 8000cbe:	4653      	mov	r3, sl
 8000cc0:	4323      	orrs	r3, r4
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x3d2>
 8000cc4:	e66a      	b.n	800099c <__aeabi_dadd+0xa8>
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2500      	movs	r5, #0
 8000cca:	e745      	b.n	8000b58 <__aeabi_dadd+0x264>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e73d      	b.n	8000b52 <__aeabi_dadd+0x25e>
 8000cd6:	181c      	adds	r4, r3, r0
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	4449      	add	r1, r9
 8000cde:	468a      	mov	sl, r1
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	449a      	add	sl, r3
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	d400      	bmi.n	8000cee <__aeabi_dadd+0x3fa>
 8000cec:	e727      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000cee:	2602      	movs	r6, #2
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	4baf      	ldr	r3, [pc, #700]	; (8000fb0 <__aeabi_dadd+0x6bc>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	4021      	ands	r1, r4
 8000cfc:	0862      	lsrs	r2, r4, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	07dc      	lsls	r4, r3, #31
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	469a      	mov	sl, r3
 8000d06:	4314      	orrs	r4, r2
 8000d08:	e670      	b.n	80009ec <__aeabi_dadd+0xf8>
 8000d0a:	003a      	movs	r2, r7
 8000d0c:	464c      	mov	r4, r9
 8000d0e:	3a20      	subs	r2, #32
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	46a4      	mov	ip, r4
 8000d14:	2f20      	cmp	r7, #32
 8000d16:	d007      	beq.n	8000d28 <__aeabi_dadd+0x434>
 8000d18:	2240      	movs	r2, #64	; 0x40
 8000d1a:	4648      	mov	r0, r9
 8000d1c:	1bd2      	subs	r2, r2, r7
 8000d1e:	4090      	lsls	r0, r2
 8000d20:	0002      	movs	r2, r0
 8000d22:	4640      	mov	r0, r8
 8000d24:	4310      	orrs	r0, r2
 8000d26:	4680      	mov	r8, r0
 8000d28:	4640      	mov	r0, r8
 8000d2a:	1e42      	subs	r2, r0, #1
 8000d2c:	4190      	sbcs	r0, r2
 8000d2e:	4662      	mov	r2, ip
 8000d30:	0004      	movs	r4, r0
 8000d32:	4314      	orrs	r4, r2
 8000d34:	e624      	b.n	8000980 <__aeabi_dadd+0x8c>
 8000d36:	4319      	orrs	r1, r3
 8000d38:	000c      	movs	r4, r1
 8000d3a:	1e63      	subs	r3, r4, #1
 8000d3c:	419c      	sbcs	r4, r3
 8000d3e:	4643      	mov	r3, r8
 8000d40:	1b1c      	subs	r4, r3, r4
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	419b      	sbcs	r3, r3
 8000d46:	4649      	mov	r1, r9
 8000d48:	425b      	negs	r3, r3
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	4665      	mov	r5, ip
 8000d50:	0016      	movs	r6, r2
 8000d52:	e61b      	b.n	800098c <__aeabi_dadd+0x98>
 8000d54:	000c      	movs	r4, r1
 8000d56:	431c      	orrs	r4, r3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x468>
 8000d5a:	e0c7      	b.n	8000eec <__aeabi_dadd+0x5f8>
 8000d5c:	1e7c      	subs	r4, r7, #1
 8000d5e:	2f01      	cmp	r7, #1
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x470>
 8000d62:	e0f9      	b.n	8000f58 <__aeabi_dadd+0x664>
 8000d64:	4e91      	ldr	r6, [pc, #580]	; (8000fac <__aeabi_dadd+0x6b8>)
 8000d66:	42b7      	cmp	r7, r6
 8000d68:	d05c      	beq.n	8000e24 <__aeabi_dadd+0x530>
 8000d6a:	0027      	movs	r7, r4
 8000d6c:	e740      	b.n	8000bf0 <__aeabi_dadd+0x2fc>
 8000d6e:	2220      	movs	r2, #32
 8000d70:	464c      	mov	r4, r9
 8000d72:	4640      	mov	r0, r8
 8000d74:	1bd2      	subs	r2, r2, r7
 8000d76:	4094      	lsls	r4, r2
 8000d78:	40f8      	lsrs	r0, r7
 8000d7a:	4304      	orrs	r4, r0
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	4090      	lsls	r0, r2
 8000d80:	1e42      	subs	r2, r0, #1
 8000d82:	4190      	sbcs	r0, r2
 8000d84:	464a      	mov	r2, r9
 8000d86:	40fa      	lsrs	r2, r7
 8000d88:	4304      	orrs	r4, r0
 8000d8a:	1889      	adds	r1, r1, r2
 8000d8c:	e6ee      	b.n	8000b6c <__aeabi_dadd+0x278>
 8000d8e:	4c87      	ldr	r4, [pc, #540]	; (8000fac <__aeabi_dadd+0x6b8>)
 8000d90:	42a2      	cmp	r2, r4
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x4a2>
 8000d94:	e6f9      	b.n	8000b8a <__aeabi_dadd+0x296>
 8000d96:	1818      	adds	r0, r3, r0
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	4449      	add	r1, r9
 8000d9e:	425b      	negs	r3, r3
 8000da0:	18cb      	adds	r3, r1, r3
 8000da2:	07dc      	lsls	r4, r3, #31
 8000da4:	0840      	lsrs	r0, r0, #1
 8000da6:	085b      	lsrs	r3, r3, #1
 8000da8:	469a      	mov	sl, r3
 8000daa:	0016      	movs	r6, r2
 8000dac:	4304      	orrs	r4, r0
 8000dae:	e6c6      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000db0:	4642      	mov	r2, r8
 8000db2:	1ad4      	subs	r4, r2, r3
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	4180      	sbcs	r0, r0
 8000db8:	464b      	mov	r3, r9
 8000dba:	4240      	negs	r0, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	1a0b      	subs	r3, r1, r0
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	4665      	mov	r5, ip
 8000dc4:	e5ea      	b.n	800099c <__aeabi_dadd+0xa8>
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	464a      	mov	r2, r9
 8000dca:	08c0      	lsrs	r0, r0, #3
 8000dcc:	075b      	lsls	r3, r3, #29
 8000dce:	4665      	mov	r5, ip
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	08d1      	lsrs	r1, r2, #3
 8000dd4:	e6bd      	b.n	8000b52 <__aeabi_dadd+0x25e>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_dadd+0x4e8>
 8000dda:	e08e      	b.n	8000efa <__aeabi_dadd+0x606>
 8000ddc:	464b      	mov	r3, r9
 8000dde:	4303      	orrs	r3, r0
 8000de0:	d117      	bne.n	8000e12 <__aeabi_dadd+0x51e>
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	2500      	movs	r5, #0
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	e6da      	b.n	8000ba0 <__aeabi_dadd+0x2ac>
 8000dea:	074a      	lsls	r2, r1, #29
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	08c9      	lsrs	r1, r1, #3
 8000df2:	e6d1      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	464a      	mov	r2, r9
 8000df8:	42a3      	cmp	r3, r4
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	1a89      	subs	r1, r1, r2
 8000dfe:	425b      	negs	r3, r3
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	469a      	mov	sl, r3
 8000e04:	2601      	movs	r6, #1
 8000e06:	e5c1      	b.n	800098c <__aeabi_dadd+0x98>
 8000e08:	074a      	lsls	r2, r1, #29
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	08c9      	lsrs	r1, r1, #3
 8000e10:	e69f      	b.n	8000b52 <__aeabi_dadd+0x25e>
 8000e12:	4643      	mov	r3, r8
 8000e14:	08d8      	lsrs	r0, r3, #3
 8000e16:	464b      	mov	r3, r9
 8000e18:	464a      	mov	r2, r9
 8000e1a:	075b      	lsls	r3, r3, #29
 8000e1c:	4665      	mov	r5, ip
 8000e1e:	4303      	orrs	r3, r0
 8000e20:	08d1      	lsrs	r1, r2, #3
 8000e22:	e6b9      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000e24:	4643      	mov	r3, r8
 8000e26:	08d8      	lsrs	r0, r3, #3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	075b      	lsls	r3, r3, #29
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	08d1      	lsrs	r1, r2, #3
 8000e32:	e6b1      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000e34:	4319      	orrs	r1, r3
 8000e36:	000c      	movs	r4, r1
 8000e38:	1e63      	subs	r3, r4, #1
 8000e3a:	419c      	sbcs	r4, r3
 8000e3c:	e6eb      	b.n	8000c16 <__aeabi_dadd+0x322>
 8000e3e:	003c      	movs	r4, r7
 8000e40:	000d      	movs	r5, r1
 8000e42:	3c20      	subs	r4, #32
 8000e44:	40e5      	lsrs	r5, r4
 8000e46:	2f20      	cmp	r7, #32
 8000e48:	d003      	beq.n	8000e52 <__aeabi_dadd+0x55e>
 8000e4a:	2440      	movs	r4, #64	; 0x40
 8000e4c:	1be4      	subs	r4, r4, r7
 8000e4e:	40a1      	lsls	r1, r4
 8000e50:	430b      	orrs	r3, r1
 8000e52:	001c      	movs	r4, r3
 8000e54:	1e63      	subs	r3, r4, #1
 8000e56:	419c      	sbcs	r4, r3
 8000e58:	432c      	orrs	r4, r5
 8000e5a:	e770      	b.n	8000d3e <__aeabi_dadd+0x44a>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d0e1      	beq.n	8000e24 <__aeabi_dadd+0x530>
 8000e60:	464a      	mov	r2, r9
 8000e62:	4302      	orrs	r2, r0
 8000e64:	d0c1      	beq.n	8000dea <__aeabi_dadd+0x4f6>
 8000e66:	074a      	lsls	r2, r1, #29
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	08c9      	lsrs	r1, r1, #3
 8000e70:	0312      	lsls	r2, r2, #12
 8000e72:	4211      	tst	r1, r2
 8000e74:	d008      	beq.n	8000e88 <__aeabi_dadd+0x594>
 8000e76:	4648      	mov	r0, r9
 8000e78:	08c4      	lsrs	r4, r0, #3
 8000e7a:	4214      	tst	r4, r2
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_dadd+0x594>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	0021      	movs	r1, r4
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	0742      	lsls	r2, r0, #29
 8000e86:	4313      	orrs	r3, r2
 8000e88:	0f5a      	lsrs	r2, r3, #29
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	0752      	lsls	r2, r2, #29
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	e681      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000e94:	464b      	mov	r3, r9
 8000e96:	4303      	orrs	r3, r0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x5a8>
 8000e9a:	e714      	b.n	8000cc6 <__aeabi_dadd+0x3d2>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	464a      	mov	r2, r9
 8000ea0:	08c0      	lsrs	r0, r0, #3
 8000ea2:	075b      	lsls	r3, r3, #29
 8000ea4:	4665      	mov	r5, ip
 8000ea6:	4303      	orrs	r3, r0
 8000ea8:	08d1      	lsrs	r1, r2, #3
 8000eaa:	e655      	b.n	8000b58 <__aeabi_dadd+0x264>
 8000eac:	1ac4      	subs	r4, r0, r3
 8000eae:	45a0      	cmp	r8, r4
 8000eb0:	4180      	sbcs	r0, r0
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	4240      	negs	r0, r0
 8000eb6:	1a59      	subs	r1, r3, r1
 8000eb8:	1a0b      	subs	r3, r1, r0
 8000eba:	469a      	mov	sl, r3
 8000ebc:	4665      	mov	r5, ip
 8000ebe:	2601      	movs	r6, #1
 8000ec0:	e564      	b.n	800098c <__aeabi_dadd+0x98>
 8000ec2:	1a1c      	subs	r4, r3, r0
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	4180      	sbcs	r0, r0
 8000eca:	1a8a      	subs	r2, r1, r2
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1a12      	subs	r2, r2, r0
 8000ed0:	4692      	mov	sl, r2
 8000ed2:	0212      	lsls	r2, r2, #8
 8000ed4:	d549      	bpl.n	8000f6a <__aeabi_dadd+0x676>
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	1ad4      	subs	r4, r2, r3
 8000eda:	45a0      	cmp	r8, r4
 8000edc:	4180      	sbcs	r0, r0
 8000ede:	464b      	mov	r3, r9
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	1a59      	subs	r1, r3, r1
 8000ee4:	1a0b      	subs	r3, r1, r0
 8000ee6:	469a      	mov	sl, r3
 8000ee8:	4665      	mov	r5, ip
 8000eea:	e57f      	b.n	80009ec <__aeabi_dadd+0xf8>
 8000eec:	464b      	mov	r3, r9
 8000eee:	464a      	mov	r2, r9
 8000ef0:	08c0      	lsrs	r0, r0, #3
 8000ef2:	075b      	lsls	r3, r3, #29
 8000ef4:	4303      	orrs	r3, r0
 8000ef6:	08d1      	lsrs	r1, r2, #3
 8000ef8:	e62b      	b.n	8000b52 <__aeabi_dadd+0x25e>
 8000efa:	464a      	mov	r2, r9
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	4302      	orrs	r2, r0
 8000f00:	d138      	bne.n	8000f74 <__aeabi_dadd+0x680>
 8000f02:	074a      	lsls	r2, r1, #29
 8000f04:	4313      	orrs	r3, r2
 8000f06:	08c9      	lsrs	r1, r1, #3
 8000f08:	e646      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	08c0      	lsrs	r0, r0, #3
 8000f10:	075b      	lsls	r3, r3, #29
 8000f12:	4303      	orrs	r3, r0
 8000f14:	08d1      	lsrs	r1, r2, #3
 8000f16:	e61f      	b.n	8000b58 <__aeabi_dadd+0x264>
 8000f18:	181c      	adds	r4, r3, r0
 8000f1a:	429c      	cmp	r4, r3
 8000f1c:	419b      	sbcs	r3, r3
 8000f1e:	4449      	add	r1, r9
 8000f20:	468a      	mov	sl, r1
 8000f22:	425b      	negs	r3, r3
 8000f24:	449a      	add	sl, r3
 8000f26:	4653      	mov	r3, sl
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_dadd+0x63a>
 8000f2c:	e607      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000f2e:	4652      	mov	r2, sl
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <__aeabi_dadd+0x6bc>)
 8000f32:	2601      	movs	r6, #1
 8000f34:	401a      	ands	r2, r3
 8000f36:	4692      	mov	sl, r2
 8000f38:	e601      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000f3a:	003c      	movs	r4, r7
 8000f3c:	000e      	movs	r6, r1
 8000f3e:	3c20      	subs	r4, #32
 8000f40:	40e6      	lsrs	r6, r4
 8000f42:	2f20      	cmp	r7, #32
 8000f44:	d003      	beq.n	8000f4e <__aeabi_dadd+0x65a>
 8000f46:	2440      	movs	r4, #64	; 0x40
 8000f48:	1be4      	subs	r4, r4, r7
 8000f4a:	40a1      	lsls	r1, r4
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	001c      	movs	r4, r3
 8000f50:	1e63      	subs	r3, r4, #1
 8000f52:	419c      	sbcs	r4, r3
 8000f54:	4334      	orrs	r4, r6
 8000f56:	e65e      	b.n	8000c16 <__aeabi_dadd+0x322>
 8000f58:	4443      	add	r3, r8
 8000f5a:	4283      	cmp	r3, r0
 8000f5c:	4180      	sbcs	r0, r0
 8000f5e:	4449      	add	r1, r9
 8000f60:	468a      	mov	sl, r1
 8000f62:	4240      	negs	r0, r0
 8000f64:	001c      	movs	r4, r3
 8000f66:	4482      	add	sl, r0
 8000f68:	e6bc      	b.n	8000ce4 <__aeabi_dadd+0x3f0>
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	4323      	orrs	r3, r4
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dadd+0x67e>
 8000f70:	e6a9      	b.n	8000cc6 <__aeabi_dadd+0x3d2>
 8000f72:	e5e4      	b.n	8000b3e <__aeabi_dadd+0x24a>
 8000f74:	074a      	lsls	r2, r1, #29
 8000f76:	4313      	orrs	r3, r2
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	08c9      	lsrs	r1, r1, #3
 8000f7c:	0312      	lsls	r2, r2, #12
 8000f7e:	4211      	tst	r1, r2
 8000f80:	d009      	beq.n	8000f96 <__aeabi_dadd+0x6a2>
 8000f82:	4648      	mov	r0, r9
 8000f84:	08c4      	lsrs	r4, r0, #3
 8000f86:	4214      	tst	r4, r2
 8000f88:	d105      	bne.n	8000f96 <__aeabi_dadd+0x6a2>
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	4665      	mov	r5, ip
 8000f8e:	0021      	movs	r1, r4
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	0742      	lsls	r2, r0, #29
 8000f94:	4313      	orrs	r3, r2
 8000f96:	0f5a      	lsrs	r2, r3, #29
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	0752      	lsls	r2, r2, #29
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	e5fa      	b.n	8000b98 <__aeabi_dadd+0x2a4>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a01      	ldr	r2, [pc, #4]	; (8000fac <__aeabi_dadd+0x6b8>)
 8000fa6:	001c      	movs	r4, r3
 8000fa8:	e540      	b.n	8000a2c <__aeabi_dadd+0x138>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	000007ff 	.word	0x000007ff
 8000fb0:	ff7fffff 	.word	0xff7fffff

08000fb4 <__aeabi_ddiv>:
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	4657      	mov	r7, sl
 8000fb8:	464e      	mov	r6, r9
 8000fba:	4645      	mov	r5, r8
 8000fbc:	46de      	mov	lr, fp
 8000fbe:	b5e0      	push	{r5, r6, r7, lr}
 8000fc0:	030c      	lsls	r4, r1, #12
 8000fc2:	001f      	movs	r7, r3
 8000fc4:	004b      	lsls	r3, r1, #1
 8000fc6:	4681      	mov	r9, r0
 8000fc8:	4692      	mov	sl, r2
 8000fca:	0005      	movs	r5, r0
 8000fcc:	b085      	sub	sp, #20
 8000fce:	0b24      	lsrs	r4, r4, #12
 8000fd0:	0d5b      	lsrs	r3, r3, #21
 8000fd2:	0fce      	lsrs	r6, r1, #31
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x26>
 8000fd8:	e152      	b.n	8001280 <__aeabi_ddiv+0x2cc>
 8000fda:	4ad2      	ldr	r2, [pc, #840]	; (8001324 <__aeabi_ddiv+0x370>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x2e>
 8000fe0:	e16e      	b.n	80012c0 <__aeabi_ddiv+0x30c>
 8000fe2:	0f42      	lsrs	r2, r0, #29
 8000fe4:	00e4      	lsls	r4, r4, #3
 8000fe6:	4314      	orrs	r4, r2
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	0412      	lsls	r2, r2, #16
 8000fec:	4322      	orrs	r2, r4
 8000fee:	4690      	mov	r8, r2
 8000ff0:	4acd      	ldr	r2, [pc, #820]	; (8001328 <__aeabi_ddiv+0x374>)
 8000ff2:	00c5      	lsls	r5, r0, #3
 8000ff4:	4693      	mov	fp, r2
 8000ff6:	449b      	add	fp, r3
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4699      	mov	r9, r3
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	033c      	lsls	r4, r7, #12
 8001000:	007b      	lsls	r3, r7, #1
 8001002:	4650      	mov	r0, sl
 8001004:	0b24      	lsrs	r4, r4, #12
 8001006:	0d5b      	lsrs	r3, r3, #21
 8001008:	0fff      	lsrs	r7, r7, #31
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x5c>
 800100e:	e11a      	b.n	8001246 <__aeabi_ddiv+0x292>
 8001010:	4ac4      	ldr	r2, [pc, #784]	; (8001324 <__aeabi_ddiv+0x370>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d100      	bne.n	8001018 <__aeabi_ddiv+0x64>
 8001016:	e15e      	b.n	80012d6 <__aeabi_ddiv+0x322>
 8001018:	0f42      	lsrs	r2, r0, #29
 800101a:	00e4      	lsls	r4, r4, #3
 800101c:	4322      	orrs	r2, r4
 800101e:	2480      	movs	r4, #128	; 0x80
 8001020:	0424      	lsls	r4, r4, #16
 8001022:	4314      	orrs	r4, r2
 8001024:	4ac0      	ldr	r2, [pc, #768]	; (8001328 <__aeabi_ddiv+0x374>)
 8001026:	00c1      	lsls	r1, r0, #3
 8001028:	4694      	mov	ip, r2
 800102a:	465a      	mov	r2, fp
 800102c:	4463      	add	r3, ip
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	469b      	mov	fp, r3
 8001032:	2000      	movs	r0, #0
 8001034:	0033      	movs	r3, r6
 8001036:	407b      	eors	r3, r7
 8001038:	469a      	mov	sl, r3
 800103a:	464b      	mov	r3, r9
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d827      	bhi.n	8001090 <__aeabi_ddiv+0xdc>
 8001040:	4aba      	ldr	r2, [pc, #744]	; (800132c <__aeabi_ddiv+0x378>)
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	58d3      	ldr	r3, [r2, r3]
 8001046:	469f      	mov	pc, r3
 8001048:	46b2      	mov	sl, r6
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d016      	beq.n	800107e <__aeabi_ddiv+0xca>
 8001050:	2b03      	cmp	r3, #3
 8001052:	d100      	bne.n	8001056 <__aeabi_ddiv+0xa2>
 8001054:	e287      	b.n	8001566 <__aeabi_ddiv+0x5b2>
 8001056:	2b01      	cmp	r3, #1
 8001058:	d000      	beq.n	800105c <__aeabi_ddiv+0xa8>
 800105a:	e0d5      	b.n	8001208 <__aeabi_ddiv+0x254>
 800105c:	2300      	movs	r3, #0
 800105e:	2200      	movs	r2, #0
 8001060:	2500      	movs	r5, #0
 8001062:	051b      	lsls	r3, r3, #20
 8001064:	4313      	orrs	r3, r2
 8001066:	4652      	mov	r2, sl
 8001068:	07d2      	lsls	r2, r2, #31
 800106a:	4313      	orrs	r3, r2
 800106c:	0028      	movs	r0, r5
 800106e:	0019      	movs	r1, r3
 8001070:	b005      	add	sp, #20
 8001072:	bcf0      	pop	{r4, r5, r6, r7}
 8001074:	46bb      	mov	fp, r7
 8001076:	46b2      	mov	sl, r6
 8001078:	46a9      	mov	r9, r5
 800107a:	46a0      	mov	r8, r4
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	2200      	movs	r2, #0
 8001080:	2500      	movs	r5, #0
 8001082:	4ba8      	ldr	r3, [pc, #672]	; (8001324 <__aeabi_ddiv+0x370>)
 8001084:	e7ed      	b.n	8001062 <__aeabi_ddiv+0xae>
 8001086:	46ba      	mov	sl, r7
 8001088:	46a0      	mov	r8, r4
 800108a:	000d      	movs	r5, r1
 800108c:	9000      	str	r0, [sp, #0]
 800108e:	e7dc      	b.n	800104a <__aeabi_ddiv+0x96>
 8001090:	4544      	cmp	r4, r8
 8001092:	d200      	bcs.n	8001096 <__aeabi_ddiv+0xe2>
 8001094:	e1c4      	b.n	8001420 <__aeabi_ddiv+0x46c>
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0xe6>
 8001098:	e1bf      	b.n	800141a <__aeabi_ddiv+0x466>
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	469c      	mov	ip, r3
 80010a0:	002e      	movs	r6, r5
 80010a2:	4640      	mov	r0, r8
 80010a4:	2500      	movs	r5, #0
 80010a6:	44e3      	add	fp, ip
 80010a8:	0223      	lsls	r3, r4, #8
 80010aa:	0e0c      	lsrs	r4, r1, #24
 80010ac:	431c      	orrs	r4, r3
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	4699      	mov	r9, r3
 80010b2:	0423      	lsls	r3, r4, #16
 80010b4:	020a      	lsls	r2, r1, #8
 80010b6:	0c1f      	lsrs	r7, r3, #16
 80010b8:	4649      	mov	r1, r9
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	9701      	str	r7, [sp, #4]
 80010be:	f7ff f8c3 	bl	8000248 <__aeabi_uidivmod>
 80010c2:	0002      	movs	r2, r0
 80010c4:	437a      	muls	r2, r7
 80010c6:	040b      	lsls	r3, r1, #16
 80010c8:	0c31      	lsrs	r1, r6, #16
 80010ca:	4680      	mov	r8, r0
 80010cc:	4319      	orrs	r1, r3
 80010ce:	428a      	cmp	r2, r1
 80010d0:	d907      	bls.n	80010e2 <__aeabi_ddiv+0x12e>
 80010d2:	2301      	movs	r3, #1
 80010d4:	425b      	negs	r3, r3
 80010d6:	469c      	mov	ip, r3
 80010d8:	1909      	adds	r1, r1, r4
 80010da:	44e0      	add	r8, ip
 80010dc:	428c      	cmp	r4, r1
 80010de:	d800      	bhi.n	80010e2 <__aeabi_ddiv+0x12e>
 80010e0:	e201      	b.n	80014e6 <__aeabi_ddiv+0x532>
 80010e2:	1a88      	subs	r0, r1, r2
 80010e4:	4649      	mov	r1, r9
 80010e6:	f7ff f8af 	bl	8000248 <__aeabi_uidivmod>
 80010ea:	9a01      	ldr	r2, [sp, #4]
 80010ec:	0436      	lsls	r6, r6, #16
 80010ee:	4342      	muls	r2, r0
 80010f0:	0409      	lsls	r1, r1, #16
 80010f2:	0c36      	lsrs	r6, r6, #16
 80010f4:	0003      	movs	r3, r0
 80010f6:	430e      	orrs	r6, r1
 80010f8:	42b2      	cmp	r2, r6
 80010fa:	d904      	bls.n	8001106 <__aeabi_ddiv+0x152>
 80010fc:	1936      	adds	r6, r6, r4
 80010fe:	3b01      	subs	r3, #1
 8001100:	42b4      	cmp	r4, r6
 8001102:	d800      	bhi.n	8001106 <__aeabi_ddiv+0x152>
 8001104:	e1e9      	b.n	80014da <__aeabi_ddiv+0x526>
 8001106:	1ab0      	subs	r0, r6, r2
 8001108:	4642      	mov	r2, r8
 800110a:	9e00      	ldr	r6, [sp, #0]
 800110c:	0412      	lsls	r2, r2, #16
 800110e:	431a      	orrs	r2, r3
 8001110:	0c33      	lsrs	r3, r6, #16
 8001112:	001f      	movs	r7, r3
 8001114:	0c11      	lsrs	r1, r2, #16
 8001116:	4690      	mov	r8, r2
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	0413      	lsls	r3, r2, #16
 800111c:	0432      	lsls	r2, r6, #16
 800111e:	0c16      	lsrs	r6, r2, #16
 8001120:	0032      	movs	r2, r6
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	435a      	muls	r2, r3
 8001126:	9603      	str	r6, [sp, #12]
 8001128:	437b      	muls	r3, r7
 800112a:	434e      	muls	r6, r1
 800112c:	4379      	muls	r1, r7
 800112e:	0c17      	lsrs	r7, r2, #16
 8001130:	46bc      	mov	ip, r7
 8001132:	199b      	adds	r3, r3, r6
 8001134:	4463      	add	r3, ip
 8001136:	429e      	cmp	r6, r3
 8001138:	d903      	bls.n	8001142 <__aeabi_ddiv+0x18e>
 800113a:	2680      	movs	r6, #128	; 0x80
 800113c:	0276      	lsls	r6, r6, #9
 800113e:	46b4      	mov	ip, r6
 8001140:	4461      	add	r1, ip
 8001142:	0c1e      	lsrs	r6, r3, #16
 8001144:	1871      	adds	r1, r6, r1
 8001146:	0416      	lsls	r6, r2, #16
 8001148:	041b      	lsls	r3, r3, #16
 800114a:	0c36      	lsrs	r6, r6, #16
 800114c:	199e      	adds	r6, r3, r6
 800114e:	4288      	cmp	r0, r1
 8001150:	d302      	bcc.n	8001158 <__aeabi_ddiv+0x1a4>
 8001152:	d112      	bne.n	800117a <__aeabi_ddiv+0x1c6>
 8001154:	42b5      	cmp	r5, r6
 8001156:	d210      	bcs.n	800117a <__aeabi_ddiv+0x1c6>
 8001158:	4643      	mov	r3, r8
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	9b00      	ldr	r3, [sp, #0]
 800115e:	469c      	mov	ip, r3
 8001160:	4465      	add	r5, ip
 8001162:	001f      	movs	r7, r3
 8001164:	429d      	cmp	r5, r3
 8001166:	419b      	sbcs	r3, r3
 8001168:	425b      	negs	r3, r3
 800116a:	191b      	adds	r3, r3, r4
 800116c:	18c0      	adds	r0, r0, r3
 800116e:	4284      	cmp	r4, r0
 8001170:	d200      	bcs.n	8001174 <__aeabi_ddiv+0x1c0>
 8001172:	e19e      	b.n	80014b2 <__aeabi_ddiv+0x4fe>
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x1c4>
 8001176:	e199      	b.n	80014ac <__aeabi_ddiv+0x4f8>
 8001178:	4690      	mov	r8, r2
 800117a:	1bae      	subs	r6, r5, r6
 800117c:	42b5      	cmp	r5, r6
 800117e:	41ad      	sbcs	r5, r5
 8001180:	1a40      	subs	r0, r0, r1
 8001182:	426d      	negs	r5, r5
 8001184:	1b40      	subs	r0, r0, r5
 8001186:	4284      	cmp	r4, r0
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x1d8>
 800118a:	e1d2      	b.n	8001532 <__aeabi_ddiv+0x57e>
 800118c:	4649      	mov	r1, r9
 800118e:	f7ff f85b 	bl	8000248 <__aeabi_uidivmod>
 8001192:	9a01      	ldr	r2, [sp, #4]
 8001194:	040b      	lsls	r3, r1, #16
 8001196:	4342      	muls	r2, r0
 8001198:	0c31      	lsrs	r1, r6, #16
 800119a:	0005      	movs	r5, r0
 800119c:	4319      	orrs	r1, r3
 800119e:	428a      	cmp	r2, r1
 80011a0:	d900      	bls.n	80011a4 <__aeabi_ddiv+0x1f0>
 80011a2:	e16c      	b.n	800147e <__aeabi_ddiv+0x4ca>
 80011a4:	1a88      	subs	r0, r1, r2
 80011a6:	4649      	mov	r1, r9
 80011a8:	f7ff f84e 	bl	8000248 <__aeabi_uidivmod>
 80011ac:	9a01      	ldr	r2, [sp, #4]
 80011ae:	0436      	lsls	r6, r6, #16
 80011b0:	4342      	muls	r2, r0
 80011b2:	0409      	lsls	r1, r1, #16
 80011b4:	0c36      	lsrs	r6, r6, #16
 80011b6:	0003      	movs	r3, r0
 80011b8:	430e      	orrs	r6, r1
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d900      	bls.n	80011c0 <__aeabi_ddiv+0x20c>
 80011be:	e153      	b.n	8001468 <__aeabi_ddiv+0x4b4>
 80011c0:	9803      	ldr	r0, [sp, #12]
 80011c2:	1ab6      	subs	r6, r6, r2
 80011c4:	0002      	movs	r2, r0
 80011c6:	042d      	lsls	r5, r5, #16
 80011c8:	431d      	orrs	r5, r3
 80011ca:	9f02      	ldr	r7, [sp, #8]
 80011cc:	042b      	lsls	r3, r5, #16
 80011ce:	0c1b      	lsrs	r3, r3, #16
 80011d0:	435a      	muls	r2, r3
 80011d2:	437b      	muls	r3, r7
 80011d4:	469c      	mov	ip, r3
 80011d6:	0c29      	lsrs	r1, r5, #16
 80011d8:	4348      	muls	r0, r1
 80011da:	0c13      	lsrs	r3, r2, #16
 80011dc:	4484      	add	ip, r0
 80011de:	4463      	add	r3, ip
 80011e0:	4379      	muls	r1, r7
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d903      	bls.n	80011ee <__aeabi_ddiv+0x23a>
 80011e6:	2080      	movs	r0, #128	; 0x80
 80011e8:	0240      	lsls	r0, r0, #9
 80011ea:	4684      	mov	ip, r0
 80011ec:	4461      	add	r1, ip
 80011ee:	0c18      	lsrs	r0, r3, #16
 80011f0:	0412      	lsls	r2, r2, #16
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	0c12      	lsrs	r2, r2, #16
 80011f6:	1840      	adds	r0, r0, r1
 80011f8:	189b      	adds	r3, r3, r2
 80011fa:	4286      	cmp	r6, r0
 80011fc:	d200      	bcs.n	8001200 <__aeabi_ddiv+0x24c>
 80011fe:	e100      	b.n	8001402 <__aeabi_ddiv+0x44e>
 8001200:	d100      	bne.n	8001204 <__aeabi_ddiv+0x250>
 8001202:	e0fb      	b.n	80013fc <__aeabi_ddiv+0x448>
 8001204:	2301      	movs	r3, #1
 8001206:	431d      	orrs	r5, r3
 8001208:	4b49      	ldr	r3, [pc, #292]	; (8001330 <__aeabi_ddiv+0x37c>)
 800120a:	445b      	add	r3, fp
 800120c:	2b00      	cmp	r3, #0
 800120e:	dc00      	bgt.n	8001212 <__aeabi_ddiv+0x25e>
 8001210:	e0aa      	b.n	8001368 <__aeabi_ddiv+0x3b4>
 8001212:	076a      	lsls	r2, r5, #29
 8001214:	d000      	beq.n	8001218 <__aeabi_ddiv+0x264>
 8001216:	e13d      	b.n	8001494 <__aeabi_ddiv+0x4e0>
 8001218:	08e9      	lsrs	r1, r5, #3
 800121a:	4642      	mov	r2, r8
 800121c:	01d2      	lsls	r2, r2, #7
 800121e:	d506      	bpl.n	800122e <__aeabi_ddiv+0x27a>
 8001220:	4642      	mov	r2, r8
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <__aeabi_ddiv+0x380>)
 8001224:	401a      	ands	r2, r3
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	4690      	mov	r8, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	445b      	add	r3, fp
 800122e:	4a42      	ldr	r2, [pc, #264]	; (8001338 <__aeabi_ddiv+0x384>)
 8001230:	4293      	cmp	r3, r2
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x282>
 8001234:	e723      	b.n	800107e <__aeabi_ddiv+0xca>
 8001236:	4642      	mov	r2, r8
 8001238:	055b      	lsls	r3, r3, #21
 800123a:	0755      	lsls	r5, r2, #29
 800123c:	0252      	lsls	r2, r2, #9
 800123e:	430d      	orrs	r5, r1
 8001240:	0b12      	lsrs	r2, r2, #12
 8001242:	0d5b      	lsrs	r3, r3, #21
 8001244:	e70d      	b.n	8001062 <__aeabi_ddiv+0xae>
 8001246:	4651      	mov	r1, sl
 8001248:	4321      	orrs	r1, r4
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x29a>
 800124c:	e07c      	b.n	8001348 <__aeabi_ddiv+0x394>
 800124e:	2c00      	cmp	r4, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x2a0>
 8001252:	e0fb      	b.n	800144c <__aeabi_ddiv+0x498>
 8001254:	0020      	movs	r0, r4
 8001256:	f001 f995 	bl	8002584 <__clzsi2>
 800125a:	0002      	movs	r2, r0
 800125c:	3a0b      	subs	r2, #11
 800125e:	231d      	movs	r3, #29
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	4652      	mov	r2, sl
 8001264:	0001      	movs	r1, r0
 8001266:	40da      	lsrs	r2, r3
 8001268:	4653      	mov	r3, sl
 800126a:	3908      	subs	r1, #8
 800126c:	408b      	lsls	r3, r1
 800126e:	408c      	lsls	r4, r1
 8001270:	0019      	movs	r1, r3
 8001272:	4314      	orrs	r4, r2
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <__aeabi_ddiv+0x388>)
 8001276:	4458      	add	r0, fp
 8001278:	469b      	mov	fp, r3
 800127a:	4483      	add	fp, r0
 800127c:	2000      	movs	r0, #0
 800127e:	e6d9      	b.n	8001034 <__aeabi_ddiv+0x80>
 8001280:	0003      	movs	r3, r0
 8001282:	4323      	orrs	r3, r4
 8001284:	4698      	mov	r8, r3
 8001286:	d044      	beq.n	8001312 <__aeabi_ddiv+0x35e>
 8001288:	2c00      	cmp	r4, #0
 800128a:	d100      	bne.n	800128e <__aeabi_ddiv+0x2da>
 800128c:	e0cf      	b.n	800142e <__aeabi_ddiv+0x47a>
 800128e:	0020      	movs	r0, r4
 8001290:	f001 f978 	bl	8002584 <__clzsi2>
 8001294:	0001      	movs	r1, r0
 8001296:	0002      	movs	r2, r0
 8001298:	390b      	subs	r1, #11
 800129a:	231d      	movs	r3, #29
 800129c:	1a5b      	subs	r3, r3, r1
 800129e:	4649      	mov	r1, r9
 80012a0:	0010      	movs	r0, r2
 80012a2:	40d9      	lsrs	r1, r3
 80012a4:	3808      	subs	r0, #8
 80012a6:	4084      	lsls	r4, r0
 80012a8:	000b      	movs	r3, r1
 80012aa:	464d      	mov	r5, r9
 80012ac:	4323      	orrs	r3, r4
 80012ae:	4698      	mov	r8, r3
 80012b0:	4085      	lsls	r5, r0
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <__aeabi_ddiv+0x38c>)
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	469b      	mov	fp, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4699      	mov	r9, r3
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	e69e      	b.n	8000ffe <__aeabi_ddiv+0x4a>
 80012c0:	0002      	movs	r2, r0
 80012c2:	4322      	orrs	r2, r4
 80012c4:	4690      	mov	r8, r2
 80012c6:	d11d      	bne.n	8001304 <__aeabi_ddiv+0x350>
 80012c8:	2208      	movs	r2, #8
 80012ca:	469b      	mov	fp, r3
 80012cc:	2302      	movs	r3, #2
 80012ce:	2500      	movs	r5, #0
 80012d0:	4691      	mov	r9, r2
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	e693      	b.n	8000ffe <__aeabi_ddiv+0x4a>
 80012d6:	4651      	mov	r1, sl
 80012d8:	4321      	orrs	r1, r4
 80012da:	d109      	bne.n	80012f0 <__aeabi_ddiv+0x33c>
 80012dc:	2302      	movs	r3, #2
 80012de:	464a      	mov	r2, r9
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <__aeabi_ddiv+0x390>)
 80012e4:	4691      	mov	r9, r2
 80012e6:	469c      	mov	ip, r3
 80012e8:	2400      	movs	r4, #0
 80012ea:	2002      	movs	r0, #2
 80012ec:	44e3      	add	fp, ip
 80012ee:	e6a1      	b.n	8001034 <__aeabi_ddiv+0x80>
 80012f0:	2303      	movs	r3, #3
 80012f2:	464a      	mov	r2, r9
 80012f4:	431a      	orrs	r2, r3
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <__aeabi_ddiv+0x390>)
 80012f8:	4691      	mov	r9, r2
 80012fa:	469c      	mov	ip, r3
 80012fc:	4651      	mov	r1, sl
 80012fe:	2003      	movs	r0, #3
 8001300:	44e3      	add	fp, ip
 8001302:	e697      	b.n	8001034 <__aeabi_ddiv+0x80>
 8001304:	220c      	movs	r2, #12
 8001306:	469b      	mov	fp, r3
 8001308:	2303      	movs	r3, #3
 800130a:	46a0      	mov	r8, r4
 800130c:	4691      	mov	r9, r2
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	e675      	b.n	8000ffe <__aeabi_ddiv+0x4a>
 8001312:	2304      	movs	r3, #4
 8001314:	4699      	mov	r9, r3
 8001316:	2300      	movs	r3, #0
 8001318:	469b      	mov	fp, r3
 800131a:	3301      	adds	r3, #1
 800131c:	2500      	movs	r5, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	e66d      	b.n	8000ffe <__aeabi_ddiv+0x4a>
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	000007ff 	.word	0x000007ff
 8001328:	fffffc01 	.word	0xfffffc01
 800132c:	08009f88 	.word	0x08009f88
 8001330:	000003ff 	.word	0x000003ff
 8001334:	feffffff 	.word	0xfeffffff
 8001338:	000007fe 	.word	0x000007fe
 800133c:	000003f3 	.word	0x000003f3
 8001340:	fffffc0d 	.word	0xfffffc0d
 8001344:	fffff801 	.word	0xfffff801
 8001348:	464a      	mov	r2, r9
 800134a:	2301      	movs	r3, #1
 800134c:	431a      	orrs	r2, r3
 800134e:	4691      	mov	r9, r2
 8001350:	2400      	movs	r4, #0
 8001352:	2001      	movs	r0, #1
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x80>
 8001356:	2300      	movs	r3, #0
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	469a      	mov	sl, r3
 800135c:	2500      	movs	r5, #0
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <__aeabi_ddiv+0x5cc>)
 8001360:	0312      	lsls	r2, r2, #12
 8001362:	e67e      	b.n	8001062 <__aeabi_ddiv+0xae>
 8001364:	2501      	movs	r5, #1
 8001366:	426d      	negs	r5, r5
 8001368:	2201      	movs	r2, #1
 800136a:	1ad2      	subs	r2, r2, r3
 800136c:	2a38      	cmp	r2, #56	; 0x38
 800136e:	dd00      	ble.n	8001372 <__aeabi_ddiv+0x3be>
 8001370:	e674      	b.n	800105c <__aeabi_ddiv+0xa8>
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dc00      	bgt.n	8001378 <__aeabi_ddiv+0x3c4>
 8001376:	e0bd      	b.n	80014f4 <__aeabi_ddiv+0x540>
 8001378:	211f      	movs	r1, #31
 800137a:	4249      	negs	r1, r1
 800137c:	1acb      	subs	r3, r1, r3
 800137e:	4641      	mov	r1, r8
 8001380:	40d9      	lsrs	r1, r3
 8001382:	000b      	movs	r3, r1
 8001384:	2a20      	cmp	r2, #32
 8001386:	d004      	beq.n	8001392 <__aeabi_ddiv+0x3de>
 8001388:	4641      	mov	r1, r8
 800138a:	4a7e      	ldr	r2, [pc, #504]	; (8001584 <__aeabi_ddiv+0x5d0>)
 800138c:	445a      	add	r2, fp
 800138e:	4091      	lsls	r1, r2
 8001390:	430d      	orrs	r5, r1
 8001392:	0029      	movs	r1, r5
 8001394:	1e4a      	subs	r2, r1, #1
 8001396:	4191      	sbcs	r1, r2
 8001398:	4319      	orrs	r1, r3
 800139a:	2307      	movs	r3, #7
 800139c:	001d      	movs	r5, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	400d      	ands	r5, r1
 80013a2:	420b      	tst	r3, r1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_ddiv+0x3f4>
 80013a6:	e0d0      	b.n	800154a <__aeabi_ddiv+0x596>
 80013a8:	220f      	movs	r2, #15
 80013aa:	2300      	movs	r3, #0
 80013ac:	400a      	ands	r2, r1
 80013ae:	2a04      	cmp	r2, #4
 80013b0:	d100      	bne.n	80013b4 <__aeabi_ddiv+0x400>
 80013b2:	e0c7      	b.n	8001544 <__aeabi_ddiv+0x590>
 80013b4:	1d0a      	adds	r2, r1, #4
 80013b6:	428a      	cmp	r2, r1
 80013b8:	4189      	sbcs	r1, r1
 80013ba:	4249      	negs	r1, r1
 80013bc:	185b      	adds	r3, r3, r1
 80013be:	0011      	movs	r1, r2
 80013c0:	021a      	lsls	r2, r3, #8
 80013c2:	d400      	bmi.n	80013c6 <__aeabi_ddiv+0x412>
 80013c4:	e0be      	b.n	8001544 <__aeabi_ddiv+0x590>
 80013c6:	2301      	movs	r3, #1
 80013c8:	2200      	movs	r2, #0
 80013ca:	2500      	movs	r5, #0
 80013cc:	e649      	b.n	8001062 <__aeabi_ddiv+0xae>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	4213      	tst	r3, r2
 80013d6:	d008      	beq.n	80013ea <__aeabi_ddiv+0x436>
 80013d8:	4214      	tst	r4, r2
 80013da:	d106      	bne.n	80013ea <__aeabi_ddiv+0x436>
 80013dc:	4322      	orrs	r2, r4
 80013de:	0312      	lsls	r2, r2, #12
 80013e0:	46ba      	mov	sl, r7
 80013e2:	000d      	movs	r5, r1
 80013e4:	4b66      	ldr	r3, [pc, #408]	; (8001580 <__aeabi_ddiv+0x5cc>)
 80013e6:	0b12      	lsrs	r2, r2, #12
 80013e8:	e63b      	b.n	8001062 <__aeabi_ddiv+0xae>
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	4643      	mov	r3, r8
 80013ee:	0312      	lsls	r2, r2, #12
 80013f0:	431a      	orrs	r2, r3
 80013f2:	0312      	lsls	r2, r2, #12
 80013f4:	46b2      	mov	sl, r6
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <__aeabi_ddiv+0x5cc>)
 80013f8:	0b12      	lsrs	r2, r2, #12
 80013fa:	e632      	b.n	8001062 <__aeabi_ddiv+0xae>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d100      	bne.n	8001402 <__aeabi_ddiv+0x44e>
 8001400:	e702      	b.n	8001208 <__aeabi_ddiv+0x254>
 8001402:	19a6      	adds	r6, r4, r6
 8001404:	1e6a      	subs	r2, r5, #1
 8001406:	42a6      	cmp	r6, r4
 8001408:	d200      	bcs.n	800140c <__aeabi_ddiv+0x458>
 800140a:	e089      	b.n	8001520 <__aeabi_ddiv+0x56c>
 800140c:	4286      	cmp	r6, r0
 800140e:	d200      	bcs.n	8001412 <__aeabi_ddiv+0x45e>
 8001410:	e09f      	b.n	8001552 <__aeabi_ddiv+0x59e>
 8001412:	d100      	bne.n	8001416 <__aeabi_ddiv+0x462>
 8001414:	e0af      	b.n	8001576 <__aeabi_ddiv+0x5c2>
 8001416:	0015      	movs	r5, r2
 8001418:	e6f4      	b.n	8001204 <__aeabi_ddiv+0x250>
 800141a:	42a9      	cmp	r1, r5
 800141c:	d900      	bls.n	8001420 <__aeabi_ddiv+0x46c>
 800141e:	e63c      	b.n	800109a <__aeabi_ddiv+0xe6>
 8001420:	4643      	mov	r3, r8
 8001422:	07de      	lsls	r6, r3, #31
 8001424:	0858      	lsrs	r0, r3, #1
 8001426:	086b      	lsrs	r3, r5, #1
 8001428:	431e      	orrs	r6, r3
 800142a:	07ed      	lsls	r5, r5, #31
 800142c:	e63c      	b.n	80010a8 <__aeabi_ddiv+0xf4>
 800142e:	f001 f8a9 	bl	8002584 <__clzsi2>
 8001432:	0001      	movs	r1, r0
 8001434:	0002      	movs	r2, r0
 8001436:	3115      	adds	r1, #21
 8001438:	3220      	adds	r2, #32
 800143a:	291c      	cmp	r1, #28
 800143c:	dc00      	bgt.n	8001440 <__aeabi_ddiv+0x48c>
 800143e:	e72c      	b.n	800129a <__aeabi_ddiv+0x2e6>
 8001440:	464b      	mov	r3, r9
 8001442:	3808      	subs	r0, #8
 8001444:	4083      	lsls	r3, r0
 8001446:	2500      	movs	r5, #0
 8001448:	4698      	mov	r8, r3
 800144a:	e732      	b.n	80012b2 <__aeabi_ddiv+0x2fe>
 800144c:	f001 f89a 	bl	8002584 <__clzsi2>
 8001450:	0003      	movs	r3, r0
 8001452:	001a      	movs	r2, r3
 8001454:	3215      	adds	r2, #21
 8001456:	3020      	adds	r0, #32
 8001458:	2a1c      	cmp	r2, #28
 800145a:	dc00      	bgt.n	800145e <__aeabi_ddiv+0x4aa>
 800145c:	e6ff      	b.n	800125e <__aeabi_ddiv+0x2aa>
 800145e:	4654      	mov	r4, sl
 8001460:	3b08      	subs	r3, #8
 8001462:	2100      	movs	r1, #0
 8001464:	409c      	lsls	r4, r3
 8001466:	e705      	b.n	8001274 <__aeabi_ddiv+0x2c0>
 8001468:	1936      	adds	r6, r6, r4
 800146a:	3b01      	subs	r3, #1
 800146c:	42b4      	cmp	r4, r6
 800146e:	d900      	bls.n	8001472 <__aeabi_ddiv+0x4be>
 8001470:	e6a6      	b.n	80011c0 <__aeabi_ddiv+0x20c>
 8001472:	42b2      	cmp	r2, r6
 8001474:	d800      	bhi.n	8001478 <__aeabi_ddiv+0x4c4>
 8001476:	e6a3      	b.n	80011c0 <__aeabi_ddiv+0x20c>
 8001478:	1e83      	subs	r3, r0, #2
 800147a:	1936      	adds	r6, r6, r4
 800147c:	e6a0      	b.n	80011c0 <__aeabi_ddiv+0x20c>
 800147e:	1909      	adds	r1, r1, r4
 8001480:	3d01      	subs	r5, #1
 8001482:	428c      	cmp	r4, r1
 8001484:	d900      	bls.n	8001488 <__aeabi_ddiv+0x4d4>
 8001486:	e68d      	b.n	80011a4 <__aeabi_ddiv+0x1f0>
 8001488:	428a      	cmp	r2, r1
 800148a:	d800      	bhi.n	800148e <__aeabi_ddiv+0x4da>
 800148c:	e68a      	b.n	80011a4 <__aeabi_ddiv+0x1f0>
 800148e:	1e85      	subs	r5, r0, #2
 8001490:	1909      	adds	r1, r1, r4
 8001492:	e687      	b.n	80011a4 <__aeabi_ddiv+0x1f0>
 8001494:	220f      	movs	r2, #15
 8001496:	402a      	ands	r2, r5
 8001498:	2a04      	cmp	r2, #4
 800149a:	d100      	bne.n	800149e <__aeabi_ddiv+0x4ea>
 800149c:	e6bc      	b.n	8001218 <__aeabi_ddiv+0x264>
 800149e:	1d29      	adds	r1, r5, #4
 80014a0:	42a9      	cmp	r1, r5
 80014a2:	41ad      	sbcs	r5, r5
 80014a4:	426d      	negs	r5, r5
 80014a6:	08c9      	lsrs	r1, r1, #3
 80014a8:	44a8      	add	r8, r5
 80014aa:	e6b6      	b.n	800121a <__aeabi_ddiv+0x266>
 80014ac:	42af      	cmp	r7, r5
 80014ae:	d900      	bls.n	80014b2 <__aeabi_ddiv+0x4fe>
 80014b0:	e662      	b.n	8001178 <__aeabi_ddiv+0x1c4>
 80014b2:	4281      	cmp	r1, r0
 80014b4:	d804      	bhi.n	80014c0 <__aeabi_ddiv+0x50c>
 80014b6:	d000      	beq.n	80014ba <__aeabi_ddiv+0x506>
 80014b8:	e65e      	b.n	8001178 <__aeabi_ddiv+0x1c4>
 80014ba:	42ae      	cmp	r6, r5
 80014bc:	d800      	bhi.n	80014c0 <__aeabi_ddiv+0x50c>
 80014be:	e65b      	b.n	8001178 <__aeabi_ddiv+0x1c4>
 80014c0:	2302      	movs	r3, #2
 80014c2:	425b      	negs	r3, r3
 80014c4:	469c      	mov	ip, r3
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	44e0      	add	r8, ip
 80014ca:	469c      	mov	ip, r3
 80014cc:	4465      	add	r5, ip
 80014ce:	429d      	cmp	r5, r3
 80014d0:	419b      	sbcs	r3, r3
 80014d2:	425b      	negs	r3, r3
 80014d4:	191b      	adds	r3, r3, r4
 80014d6:	18c0      	adds	r0, r0, r3
 80014d8:	e64f      	b.n	800117a <__aeabi_ddiv+0x1c6>
 80014da:	42b2      	cmp	r2, r6
 80014dc:	d800      	bhi.n	80014e0 <__aeabi_ddiv+0x52c>
 80014de:	e612      	b.n	8001106 <__aeabi_ddiv+0x152>
 80014e0:	1e83      	subs	r3, r0, #2
 80014e2:	1936      	adds	r6, r6, r4
 80014e4:	e60f      	b.n	8001106 <__aeabi_ddiv+0x152>
 80014e6:	428a      	cmp	r2, r1
 80014e8:	d800      	bhi.n	80014ec <__aeabi_ddiv+0x538>
 80014ea:	e5fa      	b.n	80010e2 <__aeabi_ddiv+0x12e>
 80014ec:	1e83      	subs	r3, r0, #2
 80014ee:	4698      	mov	r8, r3
 80014f0:	1909      	adds	r1, r1, r4
 80014f2:	e5f6      	b.n	80010e2 <__aeabi_ddiv+0x12e>
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <__aeabi_ddiv+0x5d4>)
 80014f6:	0028      	movs	r0, r5
 80014f8:	445b      	add	r3, fp
 80014fa:	4641      	mov	r1, r8
 80014fc:	409d      	lsls	r5, r3
 80014fe:	4099      	lsls	r1, r3
 8001500:	40d0      	lsrs	r0, r2
 8001502:	1e6b      	subs	r3, r5, #1
 8001504:	419d      	sbcs	r5, r3
 8001506:	4643      	mov	r3, r8
 8001508:	4301      	orrs	r1, r0
 800150a:	4329      	orrs	r1, r5
 800150c:	40d3      	lsrs	r3, r2
 800150e:	074a      	lsls	r2, r1, #29
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0x560>
 8001512:	e755      	b.n	80013c0 <__aeabi_ddiv+0x40c>
 8001514:	220f      	movs	r2, #15
 8001516:	400a      	ands	r2, r1
 8001518:	2a04      	cmp	r2, #4
 800151a:	d000      	beq.n	800151e <__aeabi_ddiv+0x56a>
 800151c:	e74a      	b.n	80013b4 <__aeabi_ddiv+0x400>
 800151e:	e74f      	b.n	80013c0 <__aeabi_ddiv+0x40c>
 8001520:	0015      	movs	r5, r2
 8001522:	4286      	cmp	r6, r0
 8001524:	d000      	beq.n	8001528 <__aeabi_ddiv+0x574>
 8001526:	e66d      	b.n	8001204 <__aeabi_ddiv+0x250>
 8001528:	9a00      	ldr	r2, [sp, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x57c>
 800152e:	e669      	b.n	8001204 <__aeabi_ddiv+0x250>
 8001530:	e66a      	b.n	8001208 <__aeabi_ddiv+0x254>
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <__aeabi_ddiv+0x5d8>)
 8001534:	445b      	add	r3, fp
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc00      	bgt.n	800153c <__aeabi_ddiv+0x588>
 800153a:	e713      	b.n	8001364 <__aeabi_ddiv+0x3b0>
 800153c:	2501      	movs	r5, #1
 800153e:	2100      	movs	r1, #0
 8001540:	44a8      	add	r8, r5
 8001542:	e66a      	b.n	800121a <__aeabi_ddiv+0x266>
 8001544:	075d      	lsls	r5, r3, #29
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	0b1a      	lsrs	r2, r3, #12
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	2300      	movs	r3, #0
 800154e:	430d      	orrs	r5, r1
 8001550:	e587      	b.n	8001062 <__aeabi_ddiv+0xae>
 8001552:	9900      	ldr	r1, [sp, #0]
 8001554:	3d02      	subs	r5, #2
 8001556:	004a      	lsls	r2, r1, #1
 8001558:	428a      	cmp	r2, r1
 800155a:	41bf      	sbcs	r7, r7
 800155c:	427f      	negs	r7, r7
 800155e:	193f      	adds	r7, r7, r4
 8001560:	19f6      	adds	r6, r6, r7
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	e7dd      	b.n	8001522 <__aeabi_ddiv+0x56e>
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	4643      	mov	r3, r8
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	431a      	orrs	r2, r3
 800156e:	0312      	lsls	r2, r2, #12
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <__aeabi_ddiv+0x5cc>)
 8001572:	0b12      	lsrs	r2, r2, #12
 8001574:	e575      	b.n	8001062 <__aeabi_ddiv+0xae>
 8001576:	9900      	ldr	r1, [sp, #0]
 8001578:	4299      	cmp	r1, r3
 800157a:	d3ea      	bcc.n	8001552 <__aeabi_ddiv+0x59e>
 800157c:	0015      	movs	r5, r2
 800157e:	e7d3      	b.n	8001528 <__aeabi_ddiv+0x574>
 8001580:	000007ff 	.word	0x000007ff
 8001584:	0000043e 	.word	0x0000043e
 8001588:	0000041e 	.word	0x0000041e
 800158c:	000003ff 	.word	0x000003ff

08001590 <__eqdf2>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	464e      	mov	r6, r9
 8001594:	4645      	mov	r5, r8
 8001596:	46de      	mov	lr, fp
 8001598:	4657      	mov	r7, sl
 800159a:	4690      	mov	r8, r2
 800159c:	b5e0      	push	{r5, r6, r7, lr}
 800159e:	0017      	movs	r7, r2
 80015a0:	031a      	lsls	r2, r3, #12
 80015a2:	0b12      	lsrs	r2, r2, #12
 80015a4:	0005      	movs	r5, r0
 80015a6:	4684      	mov	ip, r0
 80015a8:	4819      	ldr	r0, [pc, #100]	; (8001610 <__eqdf2+0x80>)
 80015aa:	030e      	lsls	r6, r1, #12
 80015ac:	004c      	lsls	r4, r1, #1
 80015ae:	4691      	mov	r9, r2
 80015b0:	005a      	lsls	r2, r3, #1
 80015b2:	0fdb      	lsrs	r3, r3, #31
 80015b4:	469b      	mov	fp, r3
 80015b6:	0b36      	lsrs	r6, r6, #12
 80015b8:	0d64      	lsrs	r4, r4, #21
 80015ba:	0fc9      	lsrs	r1, r1, #31
 80015bc:	0d52      	lsrs	r2, r2, #21
 80015be:	4284      	cmp	r4, r0
 80015c0:	d019      	beq.n	80015f6 <__eqdf2+0x66>
 80015c2:	4282      	cmp	r2, r0
 80015c4:	d010      	beq.n	80015e8 <__eqdf2+0x58>
 80015c6:	2001      	movs	r0, #1
 80015c8:	4294      	cmp	r4, r2
 80015ca:	d10e      	bne.n	80015ea <__eqdf2+0x5a>
 80015cc:	454e      	cmp	r6, r9
 80015ce:	d10c      	bne.n	80015ea <__eqdf2+0x5a>
 80015d0:	2001      	movs	r0, #1
 80015d2:	45c4      	cmp	ip, r8
 80015d4:	d109      	bne.n	80015ea <__eqdf2+0x5a>
 80015d6:	4559      	cmp	r1, fp
 80015d8:	d017      	beq.n	800160a <__eqdf2+0x7a>
 80015da:	2c00      	cmp	r4, #0
 80015dc:	d105      	bne.n	80015ea <__eqdf2+0x5a>
 80015de:	0030      	movs	r0, r6
 80015e0:	4328      	orrs	r0, r5
 80015e2:	1e43      	subs	r3, r0, #1
 80015e4:	4198      	sbcs	r0, r3
 80015e6:	e000      	b.n	80015ea <__eqdf2+0x5a>
 80015e8:	2001      	movs	r0, #1
 80015ea:	bcf0      	pop	{r4, r5, r6, r7}
 80015ec:	46bb      	mov	fp, r7
 80015ee:	46b2      	mov	sl, r6
 80015f0:	46a9      	mov	r9, r5
 80015f2:	46a0      	mov	r8, r4
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f6:	0033      	movs	r3, r6
 80015f8:	2001      	movs	r0, #1
 80015fa:	432b      	orrs	r3, r5
 80015fc:	d1f5      	bne.n	80015ea <__eqdf2+0x5a>
 80015fe:	42a2      	cmp	r2, r4
 8001600:	d1f3      	bne.n	80015ea <__eqdf2+0x5a>
 8001602:	464b      	mov	r3, r9
 8001604:	433b      	orrs	r3, r7
 8001606:	d1f0      	bne.n	80015ea <__eqdf2+0x5a>
 8001608:	e7e2      	b.n	80015d0 <__eqdf2+0x40>
 800160a:	2000      	movs	r0, #0
 800160c:	e7ed      	b.n	80015ea <__eqdf2+0x5a>
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	000007ff 	.word	0x000007ff

08001614 <__gedf2>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	4647      	mov	r7, r8
 8001618:	46ce      	mov	lr, r9
 800161a:	0004      	movs	r4, r0
 800161c:	0018      	movs	r0, r3
 800161e:	0016      	movs	r6, r2
 8001620:	031b      	lsls	r3, r3, #12
 8001622:	0b1b      	lsrs	r3, r3, #12
 8001624:	4d2d      	ldr	r5, [pc, #180]	; (80016dc <__gedf2+0xc8>)
 8001626:	004a      	lsls	r2, r1, #1
 8001628:	4699      	mov	r9, r3
 800162a:	b580      	push	{r7, lr}
 800162c:	0043      	lsls	r3, r0, #1
 800162e:	030f      	lsls	r7, r1, #12
 8001630:	46a4      	mov	ip, r4
 8001632:	46b0      	mov	r8, r6
 8001634:	0b3f      	lsrs	r7, r7, #12
 8001636:	0d52      	lsrs	r2, r2, #21
 8001638:	0fc9      	lsrs	r1, r1, #31
 800163a:	0d5b      	lsrs	r3, r3, #21
 800163c:	0fc0      	lsrs	r0, r0, #31
 800163e:	42aa      	cmp	r2, r5
 8001640:	d021      	beq.n	8001686 <__gedf2+0x72>
 8001642:	42ab      	cmp	r3, r5
 8001644:	d013      	beq.n	800166e <__gedf2+0x5a>
 8001646:	2a00      	cmp	r2, #0
 8001648:	d122      	bne.n	8001690 <__gedf2+0x7c>
 800164a:	433c      	orrs	r4, r7
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <__gedf2+0x42>
 8001650:	464d      	mov	r5, r9
 8001652:	432e      	orrs	r6, r5
 8001654:	d022      	beq.n	800169c <__gedf2+0x88>
 8001656:	2c00      	cmp	r4, #0
 8001658:	d010      	beq.n	800167c <__gedf2+0x68>
 800165a:	4281      	cmp	r1, r0
 800165c:	d022      	beq.n	80016a4 <__gedf2+0x90>
 800165e:	2002      	movs	r0, #2
 8001660:	3901      	subs	r1, #1
 8001662:	4008      	ands	r0, r1
 8001664:	3801      	subs	r0, #1
 8001666:	bcc0      	pop	{r6, r7}
 8001668:	46b9      	mov	r9, r7
 800166a:	46b0      	mov	r8, r6
 800166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166e:	464d      	mov	r5, r9
 8001670:	432e      	orrs	r6, r5
 8001672:	d129      	bne.n	80016c8 <__gedf2+0xb4>
 8001674:	2a00      	cmp	r2, #0
 8001676:	d1f0      	bne.n	800165a <__gedf2+0x46>
 8001678:	433c      	orrs	r4, r7
 800167a:	d1ee      	bne.n	800165a <__gedf2+0x46>
 800167c:	2800      	cmp	r0, #0
 800167e:	d1f2      	bne.n	8001666 <__gedf2+0x52>
 8001680:	2001      	movs	r0, #1
 8001682:	4240      	negs	r0, r0
 8001684:	e7ef      	b.n	8001666 <__gedf2+0x52>
 8001686:	003d      	movs	r5, r7
 8001688:	4325      	orrs	r5, r4
 800168a:	d11d      	bne.n	80016c8 <__gedf2+0xb4>
 800168c:	4293      	cmp	r3, r2
 800168e:	d0ee      	beq.n	800166e <__gedf2+0x5a>
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e2      	bne.n	800165a <__gedf2+0x46>
 8001694:	464c      	mov	r4, r9
 8001696:	4326      	orrs	r6, r4
 8001698:	d1df      	bne.n	800165a <__gedf2+0x46>
 800169a:	e7e0      	b.n	800165e <__gedf2+0x4a>
 800169c:	2000      	movs	r0, #0
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d0e1      	beq.n	8001666 <__gedf2+0x52>
 80016a2:	e7dc      	b.n	800165e <__gedf2+0x4a>
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dc0a      	bgt.n	80016be <__gedf2+0xaa>
 80016a8:	dbe8      	blt.n	800167c <__gedf2+0x68>
 80016aa:	454f      	cmp	r7, r9
 80016ac:	d8d7      	bhi.n	800165e <__gedf2+0x4a>
 80016ae:	d00e      	beq.n	80016ce <__gedf2+0xba>
 80016b0:	2000      	movs	r0, #0
 80016b2:	454f      	cmp	r7, r9
 80016b4:	d2d7      	bcs.n	8001666 <__gedf2+0x52>
 80016b6:	2900      	cmp	r1, #0
 80016b8:	d0e2      	beq.n	8001680 <__gedf2+0x6c>
 80016ba:	0008      	movs	r0, r1
 80016bc:	e7d3      	b.n	8001666 <__gedf2+0x52>
 80016be:	4243      	negs	r3, r0
 80016c0:	4158      	adcs	r0, r3
 80016c2:	0040      	lsls	r0, r0, #1
 80016c4:	3801      	subs	r0, #1
 80016c6:	e7ce      	b.n	8001666 <__gedf2+0x52>
 80016c8:	2002      	movs	r0, #2
 80016ca:	4240      	negs	r0, r0
 80016cc:	e7cb      	b.n	8001666 <__gedf2+0x52>
 80016ce:	45c4      	cmp	ip, r8
 80016d0:	d8c5      	bhi.n	800165e <__gedf2+0x4a>
 80016d2:	2000      	movs	r0, #0
 80016d4:	45c4      	cmp	ip, r8
 80016d6:	d2c6      	bcs.n	8001666 <__gedf2+0x52>
 80016d8:	e7ed      	b.n	80016b6 <__gedf2+0xa2>
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	000007ff 	.word	0x000007ff

080016e0 <__ledf2>:
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	4647      	mov	r7, r8
 80016e4:	46ce      	mov	lr, r9
 80016e6:	0004      	movs	r4, r0
 80016e8:	0018      	movs	r0, r3
 80016ea:	0016      	movs	r6, r2
 80016ec:	031b      	lsls	r3, r3, #12
 80016ee:	0b1b      	lsrs	r3, r3, #12
 80016f0:	4d2c      	ldr	r5, [pc, #176]	; (80017a4 <__ledf2+0xc4>)
 80016f2:	004a      	lsls	r2, r1, #1
 80016f4:	4699      	mov	r9, r3
 80016f6:	b580      	push	{r7, lr}
 80016f8:	0043      	lsls	r3, r0, #1
 80016fa:	030f      	lsls	r7, r1, #12
 80016fc:	46a4      	mov	ip, r4
 80016fe:	46b0      	mov	r8, r6
 8001700:	0b3f      	lsrs	r7, r7, #12
 8001702:	0d52      	lsrs	r2, r2, #21
 8001704:	0fc9      	lsrs	r1, r1, #31
 8001706:	0d5b      	lsrs	r3, r3, #21
 8001708:	0fc0      	lsrs	r0, r0, #31
 800170a:	42aa      	cmp	r2, r5
 800170c:	d00d      	beq.n	800172a <__ledf2+0x4a>
 800170e:	42ab      	cmp	r3, r5
 8001710:	d010      	beq.n	8001734 <__ledf2+0x54>
 8001712:	2a00      	cmp	r2, #0
 8001714:	d127      	bne.n	8001766 <__ledf2+0x86>
 8001716:	433c      	orrs	r4, r7
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <__ledf2+0x60>
 800171c:	464d      	mov	r5, r9
 800171e:	432e      	orrs	r6, r5
 8001720:	d10e      	bne.n	8001740 <__ledf2+0x60>
 8001722:	2000      	movs	r0, #0
 8001724:	2c00      	cmp	r4, #0
 8001726:	d015      	beq.n	8001754 <__ledf2+0x74>
 8001728:	e00e      	b.n	8001748 <__ledf2+0x68>
 800172a:	003d      	movs	r5, r7
 800172c:	4325      	orrs	r5, r4
 800172e:	d110      	bne.n	8001752 <__ledf2+0x72>
 8001730:	4293      	cmp	r3, r2
 8001732:	d118      	bne.n	8001766 <__ledf2+0x86>
 8001734:	464d      	mov	r5, r9
 8001736:	432e      	orrs	r6, r5
 8001738:	d10b      	bne.n	8001752 <__ledf2+0x72>
 800173a:	2a00      	cmp	r2, #0
 800173c:	d102      	bne.n	8001744 <__ledf2+0x64>
 800173e:	433c      	orrs	r4, r7
 8001740:	2c00      	cmp	r4, #0
 8001742:	d00b      	beq.n	800175c <__ledf2+0x7c>
 8001744:	4281      	cmp	r1, r0
 8001746:	d014      	beq.n	8001772 <__ledf2+0x92>
 8001748:	2002      	movs	r0, #2
 800174a:	3901      	subs	r1, #1
 800174c:	4008      	ands	r0, r1
 800174e:	3801      	subs	r0, #1
 8001750:	e000      	b.n	8001754 <__ledf2+0x74>
 8001752:	2002      	movs	r0, #2
 8001754:	bcc0      	pop	{r6, r7}
 8001756:	46b9      	mov	r9, r7
 8001758:	46b0      	mov	r8, r6
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175c:	2800      	cmp	r0, #0
 800175e:	d1f9      	bne.n	8001754 <__ledf2+0x74>
 8001760:	2001      	movs	r0, #1
 8001762:	4240      	negs	r0, r0
 8001764:	e7f6      	b.n	8001754 <__ledf2+0x74>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ec      	bne.n	8001744 <__ledf2+0x64>
 800176a:	464c      	mov	r4, r9
 800176c:	4326      	orrs	r6, r4
 800176e:	d1e9      	bne.n	8001744 <__ledf2+0x64>
 8001770:	e7ea      	b.n	8001748 <__ledf2+0x68>
 8001772:	429a      	cmp	r2, r3
 8001774:	dd04      	ble.n	8001780 <__ledf2+0xa0>
 8001776:	4243      	negs	r3, r0
 8001778:	4158      	adcs	r0, r3
 800177a:	0040      	lsls	r0, r0, #1
 800177c:	3801      	subs	r0, #1
 800177e:	e7e9      	b.n	8001754 <__ledf2+0x74>
 8001780:	429a      	cmp	r2, r3
 8001782:	dbeb      	blt.n	800175c <__ledf2+0x7c>
 8001784:	454f      	cmp	r7, r9
 8001786:	d8df      	bhi.n	8001748 <__ledf2+0x68>
 8001788:	d006      	beq.n	8001798 <__ledf2+0xb8>
 800178a:	2000      	movs	r0, #0
 800178c:	454f      	cmp	r7, r9
 800178e:	d2e1      	bcs.n	8001754 <__ledf2+0x74>
 8001790:	2900      	cmp	r1, #0
 8001792:	d0e5      	beq.n	8001760 <__ledf2+0x80>
 8001794:	0008      	movs	r0, r1
 8001796:	e7dd      	b.n	8001754 <__ledf2+0x74>
 8001798:	45c4      	cmp	ip, r8
 800179a:	d8d5      	bhi.n	8001748 <__ledf2+0x68>
 800179c:	2000      	movs	r0, #0
 800179e:	45c4      	cmp	ip, r8
 80017a0:	d2d8      	bcs.n	8001754 <__ledf2+0x74>
 80017a2:	e7f5      	b.n	8001790 <__ledf2+0xb0>
 80017a4:	000007ff 	.word	0x000007ff

080017a8 <__aeabi_dmul>:
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	4645      	mov	r5, r8
 80017ac:	46de      	mov	lr, fp
 80017ae:	4657      	mov	r7, sl
 80017b0:	464e      	mov	r6, r9
 80017b2:	b5e0      	push	{r5, r6, r7, lr}
 80017b4:	001f      	movs	r7, r3
 80017b6:	030b      	lsls	r3, r1, #12
 80017b8:	0b1b      	lsrs	r3, r3, #12
 80017ba:	469b      	mov	fp, r3
 80017bc:	004d      	lsls	r5, r1, #1
 80017be:	0fcb      	lsrs	r3, r1, #31
 80017c0:	0004      	movs	r4, r0
 80017c2:	4691      	mov	r9, r2
 80017c4:	4698      	mov	r8, r3
 80017c6:	b087      	sub	sp, #28
 80017c8:	0d6d      	lsrs	r5, r5, #21
 80017ca:	d100      	bne.n	80017ce <__aeabi_dmul+0x26>
 80017cc:	e1cd      	b.n	8001b6a <__aeabi_dmul+0x3c2>
 80017ce:	4bce      	ldr	r3, [pc, #824]	; (8001b08 <__aeabi_dmul+0x360>)
 80017d0:	429d      	cmp	r5, r3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x2e>
 80017d4:	e1e9      	b.n	8001baa <__aeabi_dmul+0x402>
 80017d6:	465a      	mov	r2, fp
 80017d8:	0f43      	lsrs	r3, r0, #29
 80017da:	00d2      	lsls	r2, r2, #3
 80017dc:	4313      	orrs	r3, r2
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	0412      	lsls	r2, r2, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	00c3      	lsls	r3, r0, #3
 80017e6:	469a      	mov	sl, r3
 80017e8:	4bc8      	ldr	r3, [pc, #800]	; (8001b0c <__aeabi_dmul+0x364>)
 80017ea:	4693      	mov	fp, r2
 80017ec:	469c      	mov	ip, r3
 80017ee:	2300      	movs	r3, #0
 80017f0:	2600      	movs	r6, #0
 80017f2:	4465      	add	r5, ip
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	033c      	lsls	r4, r7, #12
 80017f8:	007b      	lsls	r3, r7, #1
 80017fa:	4648      	mov	r0, r9
 80017fc:	0b24      	lsrs	r4, r4, #12
 80017fe:	0d5b      	lsrs	r3, r3, #21
 8001800:	0fff      	lsrs	r7, r7, #31
 8001802:	2b00      	cmp	r3, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dmul+0x60>
 8001806:	e189      	b.n	8001b1c <__aeabi_dmul+0x374>
 8001808:	4abf      	ldr	r2, [pc, #764]	; (8001b08 <__aeabi_dmul+0x360>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <__aeabi_dmul+0x9a>
 800180e:	0f42      	lsrs	r2, r0, #29
 8001810:	00e4      	lsls	r4, r4, #3
 8001812:	4322      	orrs	r2, r4
 8001814:	2480      	movs	r4, #128	; 0x80
 8001816:	0424      	lsls	r4, r4, #16
 8001818:	4314      	orrs	r4, r2
 800181a:	4abc      	ldr	r2, [pc, #752]	; (8001b0c <__aeabi_dmul+0x364>)
 800181c:	2100      	movs	r1, #0
 800181e:	4694      	mov	ip, r2
 8001820:	4642      	mov	r2, r8
 8001822:	4463      	add	r3, ip
 8001824:	195b      	adds	r3, r3, r5
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	407a      	eors	r2, r7
 800182c:	3301      	adds	r3, #1
 800182e:	00c0      	lsls	r0, r0, #3
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2e0a      	cmp	r6, #10
 8001836:	dd1c      	ble.n	8001872 <__aeabi_dmul+0xca>
 8001838:	003a      	movs	r2, r7
 800183a:	2e0b      	cmp	r6, #11
 800183c:	d05e      	beq.n	80018fc <__aeabi_dmul+0x154>
 800183e:	4647      	mov	r7, r8
 8001840:	e056      	b.n	80018f0 <__aeabi_dmul+0x148>
 8001842:	4649      	mov	r1, r9
 8001844:	4bb0      	ldr	r3, [pc, #704]	; (8001b08 <__aeabi_dmul+0x360>)
 8001846:	4321      	orrs	r1, r4
 8001848:	18eb      	adds	r3, r5, r3
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2900      	cmp	r1, #0
 800184e:	d12a      	bne.n	80018a6 <__aeabi_dmul+0xfe>
 8001850:	2080      	movs	r0, #128	; 0x80
 8001852:	2202      	movs	r2, #2
 8001854:	0100      	lsls	r0, r0, #4
 8001856:	002b      	movs	r3, r5
 8001858:	4684      	mov	ip, r0
 800185a:	4316      	orrs	r6, r2
 800185c:	4642      	mov	r2, r8
 800185e:	4463      	add	r3, ip
 8001860:	407a      	eors	r2, r7
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2e0a      	cmp	r6, #10
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0xc4>
 800186a:	e231      	b.n	8001cd0 <__aeabi_dmul+0x528>
 800186c:	2000      	movs	r0, #0
 800186e:	2400      	movs	r4, #0
 8001870:	2102      	movs	r1, #2
 8001872:	2e02      	cmp	r6, #2
 8001874:	dc26      	bgt.n	80018c4 <__aeabi_dmul+0x11c>
 8001876:	3e01      	subs	r6, #1
 8001878:	2e01      	cmp	r6, #1
 800187a:	d852      	bhi.n	8001922 <__aeabi_dmul+0x17a>
 800187c:	2902      	cmp	r1, #2
 800187e:	d04c      	beq.n	800191a <__aeabi_dmul+0x172>
 8001880:	2901      	cmp	r1, #1
 8001882:	d000      	beq.n	8001886 <__aeabi_dmul+0xde>
 8001884:	e118      	b.n	8001ab8 <__aeabi_dmul+0x310>
 8001886:	2300      	movs	r3, #0
 8001888:	2400      	movs	r4, #0
 800188a:	2500      	movs	r5, #0
 800188c:	051b      	lsls	r3, r3, #20
 800188e:	4323      	orrs	r3, r4
 8001890:	07d2      	lsls	r2, r2, #31
 8001892:	4313      	orrs	r3, r2
 8001894:	0028      	movs	r0, r5
 8001896:	0019      	movs	r1, r3
 8001898:	b007      	add	sp, #28
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
 800189c:	46bb      	mov	fp, r7
 800189e:	46b2      	mov	sl, r6
 80018a0:	46a9      	mov	r9, r5
 80018a2:	46a0      	mov	r8, r4
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	2203      	movs	r2, #3
 80018aa:	0109      	lsls	r1, r1, #4
 80018ac:	002b      	movs	r3, r5
 80018ae:	468c      	mov	ip, r1
 80018b0:	4316      	orrs	r6, r2
 80018b2:	4642      	mov	r2, r8
 80018b4:	4463      	add	r3, ip
 80018b6:	407a      	eors	r2, r7
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2e0a      	cmp	r6, #10
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dmul+0x11a>
 80018c0:	e228      	b.n	8001d14 <__aeabi_dmul+0x56c>
 80018c2:	2103      	movs	r1, #3
 80018c4:	2501      	movs	r5, #1
 80018c6:	40b5      	lsls	r5, r6
 80018c8:	46ac      	mov	ip, r5
 80018ca:	26a6      	movs	r6, #166	; 0xa6
 80018cc:	4663      	mov	r3, ip
 80018ce:	00f6      	lsls	r6, r6, #3
 80018d0:	4035      	ands	r5, r6
 80018d2:	4233      	tst	r3, r6
 80018d4:	d10b      	bne.n	80018ee <__aeabi_dmul+0x146>
 80018d6:	2690      	movs	r6, #144	; 0x90
 80018d8:	00b6      	lsls	r6, r6, #2
 80018da:	4233      	tst	r3, r6
 80018dc:	d118      	bne.n	8001910 <__aeabi_dmul+0x168>
 80018de:	3eb9      	subs	r6, #185	; 0xb9
 80018e0:	3eff      	subs	r6, #255	; 0xff
 80018e2:	421e      	tst	r6, r3
 80018e4:	d01d      	beq.n	8001922 <__aeabi_dmul+0x17a>
 80018e6:	46a3      	mov	fp, r4
 80018e8:	4682      	mov	sl, r0
 80018ea:	9100      	str	r1, [sp, #0]
 80018ec:	e000      	b.n	80018f0 <__aeabi_dmul+0x148>
 80018ee:	0017      	movs	r7, r2
 80018f0:	9900      	ldr	r1, [sp, #0]
 80018f2:	003a      	movs	r2, r7
 80018f4:	2902      	cmp	r1, #2
 80018f6:	d010      	beq.n	800191a <__aeabi_dmul+0x172>
 80018f8:	465c      	mov	r4, fp
 80018fa:	4650      	mov	r0, sl
 80018fc:	2903      	cmp	r1, #3
 80018fe:	d1bf      	bne.n	8001880 <__aeabi_dmul+0xd8>
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	031b      	lsls	r3, r3, #12
 8001904:	431c      	orrs	r4, r3
 8001906:	0324      	lsls	r4, r4, #12
 8001908:	0005      	movs	r5, r0
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <__aeabi_dmul+0x360>)
 800190c:	0b24      	lsrs	r4, r4, #12
 800190e:	e7bd      	b.n	800188c <__aeabi_dmul+0xe4>
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	2200      	movs	r2, #0
 8001914:	4b7c      	ldr	r3, [pc, #496]	; (8001b08 <__aeabi_dmul+0x360>)
 8001916:	0324      	lsls	r4, r4, #12
 8001918:	e7b8      	b.n	800188c <__aeabi_dmul+0xe4>
 800191a:	2400      	movs	r4, #0
 800191c:	2500      	movs	r5, #0
 800191e:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <__aeabi_dmul+0x360>)
 8001920:	e7b4      	b.n	800188c <__aeabi_dmul+0xe4>
 8001922:	4653      	mov	r3, sl
 8001924:	041e      	lsls	r6, r3, #16
 8001926:	0c36      	lsrs	r6, r6, #16
 8001928:	0c1f      	lsrs	r7, r3, #16
 800192a:	0033      	movs	r3, r6
 800192c:	0c01      	lsrs	r1, r0, #16
 800192e:	0400      	lsls	r0, r0, #16
 8001930:	0c00      	lsrs	r0, r0, #16
 8001932:	4343      	muls	r3, r0
 8001934:	4698      	mov	r8, r3
 8001936:	0003      	movs	r3, r0
 8001938:	437b      	muls	r3, r7
 800193a:	4699      	mov	r9, r3
 800193c:	0033      	movs	r3, r6
 800193e:	434b      	muls	r3, r1
 8001940:	469c      	mov	ip, r3
 8001942:	4643      	mov	r3, r8
 8001944:	000d      	movs	r5, r1
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	469a      	mov	sl, r3
 800194a:	437d      	muls	r5, r7
 800194c:	44cc      	add	ip, r9
 800194e:	44d4      	add	ip, sl
 8001950:	9500      	str	r5, [sp, #0]
 8001952:	45e1      	cmp	r9, ip
 8001954:	d904      	bls.n	8001960 <__aeabi_dmul+0x1b8>
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4699      	mov	r9, r3
 800195c:	444d      	add	r5, r9
 800195e:	9500      	str	r5, [sp, #0]
 8001960:	4663      	mov	r3, ip
 8001962:	0c1b      	lsrs	r3, r3, #16
 8001964:	001d      	movs	r5, r3
 8001966:	4663      	mov	r3, ip
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	469c      	mov	ip, r3
 800196c:	4643      	mov	r3, r8
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	4698      	mov	r8, r3
 8001974:	4663      	mov	r3, ip
 8001976:	4443      	add	r3, r8
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	0c23      	lsrs	r3, r4, #16
 800197c:	4698      	mov	r8, r3
 800197e:	0033      	movs	r3, r6
 8001980:	0424      	lsls	r4, r4, #16
 8001982:	0c24      	lsrs	r4, r4, #16
 8001984:	4363      	muls	r3, r4
 8001986:	469c      	mov	ip, r3
 8001988:	0023      	movs	r3, r4
 800198a:	437b      	muls	r3, r7
 800198c:	4699      	mov	r9, r3
 800198e:	4643      	mov	r3, r8
 8001990:	435e      	muls	r6, r3
 8001992:	435f      	muls	r7, r3
 8001994:	444e      	add	r6, r9
 8001996:	4663      	mov	r3, ip
 8001998:	46b2      	mov	sl, r6
 800199a:	0c1e      	lsrs	r6, r3, #16
 800199c:	4456      	add	r6, sl
 800199e:	45b1      	cmp	r9, r6
 80019a0:	d903      	bls.n	80019aa <__aeabi_dmul+0x202>
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4699      	mov	r9, r3
 80019a8:	444f      	add	r7, r9
 80019aa:	0c33      	lsrs	r3, r6, #16
 80019ac:	4699      	mov	r9, r3
 80019ae:	003b      	movs	r3, r7
 80019b0:	444b      	add	r3, r9
 80019b2:	9305      	str	r3, [sp, #20]
 80019b4:	4663      	mov	r3, ip
 80019b6:	46ac      	mov	ip, r5
 80019b8:	041f      	lsls	r7, r3, #16
 80019ba:	0c3f      	lsrs	r7, r7, #16
 80019bc:	0436      	lsls	r6, r6, #16
 80019be:	19f6      	adds	r6, r6, r7
 80019c0:	44b4      	add	ip, r6
 80019c2:	4663      	mov	r3, ip
 80019c4:	9304      	str	r3, [sp, #16]
 80019c6:	465b      	mov	r3, fp
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	469c      	mov	ip, r3
 80019cc:	465b      	mov	r3, fp
 80019ce:	041f      	lsls	r7, r3, #16
 80019d0:	0c3f      	lsrs	r7, r7, #16
 80019d2:	003b      	movs	r3, r7
 80019d4:	4343      	muls	r3, r0
 80019d6:	4699      	mov	r9, r3
 80019d8:	4663      	mov	r3, ip
 80019da:	4343      	muls	r3, r0
 80019dc:	469a      	mov	sl, r3
 80019de:	464b      	mov	r3, r9
 80019e0:	4660      	mov	r0, ip
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	469b      	mov	fp, r3
 80019e6:	4348      	muls	r0, r1
 80019e8:	4379      	muls	r1, r7
 80019ea:	4451      	add	r1, sl
 80019ec:	4459      	add	r1, fp
 80019ee:	458a      	cmp	sl, r1
 80019f0:	d903      	bls.n	80019fa <__aeabi_dmul+0x252>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	469a      	mov	sl, r3
 80019f8:	4450      	add	r0, sl
 80019fa:	0c0b      	lsrs	r3, r1, #16
 80019fc:	469a      	mov	sl, r3
 80019fe:	464b      	mov	r3, r9
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	4699      	mov	r9, r3
 8001a06:	003b      	movs	r3, r7
 8001a08:	4363      	muls	r3, r4
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4645      	mov	r5, r8
 8001a0e:	4449      	add	r1, r9
 8001a10:	4699      	mov	r9, r3
 8001a12:	4663      	mov	r3, ip
 8001a14:	435c      	muls	r4, r3
 8001a16:	436b      	muls	r3, r5
 8001a18:	469c      	mov	ip, r3
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	4698      	mov	r8, r3
 8001a20:	436f      	muls	r7, r5
 8001a22:	193f      	adds	r7, r7, r4
 8001a24:	4447      	add	r7, r8
 8001a26:	4450      	add	r0, sl
 8001a28:	42bc      	cmp	r4, r7
 8001a2a:	d903      	bls.n	8001a34 <__aeabi_dmul+0x28c>
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	025b      	lsls	r3, r3, #9
 8001a30:	4698      	mov	r8, r3
 8001a32:	44c4      	add	ip, r8
 8001a34:	9b04      	ldr	r3, [sp, #16]
 8001a36:	9d00      	ldr	r5, [sp, #0]
 8001a38:	4698      	mov	r8, r3
 8001a3a:	4445      	add	r5, r8
 8001a3c:	42b5      	cmp	r5, r6
 8001a3e:	41b6      	sbcs	r6, r6
 8001a40:	4273      	negs	r3, r6
 8001a42:	4698      	mov	r8, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	041e      	lsls	r6, r3, #16
 8001a48:	9b05      	ldr	r3, [sp, #20]
 8001a4a:	043c      	lsls	r4, r7, #16
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	0c36      	lsrs	r6, r6, #16
 8001a50:	19a4      	adds	r4, r4, r6
 8001a52:	444c      	add	r4, r9
 8001a54:	46a1      	mov	r9, r4
 8001a56:	4683      	mov	fp, r0
 8001a58:	186e      	adds	r6, r5, r1
 8001a5a:	44c1      	add	r9, r8
 8001a5c:	428e      	cmp	r6, r1
 8001a5e:	4189      	sbcs	r1, r1
 8001a60:	44cb      	add	fp, r9
 8001a62:	465d      	mov	r5, fp
 8001a64:	4249      	negs	r1, r1
 8001a66:	186d      	adds	r5, r5, r1
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	41a4      	sbcs	r4, r4
 8001a6c:	45c1      	cmp	r9, r8
 8001a6e:	419b      	sbcs	r3, r3
 8001a70:	4583      	cmp	fp, r0
 8001a72:	4180      	sbcs	r0, r0
 8001a74:	428d      	cmp	r5, r1
 8001a76:	4189      	sbcs	r1, r1
 8001a78:	425b      	negs	r3, r3
 8001a7a:	4264      	negs	r4, r4
 8001a7c:	431c      	orrs	r4, r3
 8001a7e:	4240      	negs	r0, r0
 8001a80:	9b03      	ldr	r3, [sp, #12]
 8001a82:	4249      	negs	r1, r1
 8001a84:	4301      	orrs	r1, r0
 8001a86:	0270      	lsls	r0, r6, #9
 8001a88:	0c3f      	lsrs	r7, r7, #16
 8001a8a:	4318      	orrs	r0, r3
 8001a8c:	19e4      	adds	r4, r4, r7
 8001a8e:	1e47      	subs	r7, r0, #1
 8001a90:	41b8      	sbcs	r0, r7
 8001a92:	1864      	adds	r4, r4, r1
 8001a94:	4464      	add	r4, ip
 8001a96:	0df6      	lsrs	r6, r6, #23
 8001a98:	0261      	lsls	r1, r4, #9
 8001a9a:	4330      	orrs	r0, r6
 8001a9c:	0dec      	lsrs	r4, r5, #23
 8001a9e:	026e      	lsls	r6, r5, #9
 8001aa0:	430c      	orrs	r4, r1
 8001aa2:	4330      	orrs	r0, r6
 8001aa4:	01c9      	lsls	r1, r1, #7
 8001aa6:	d400      	bmi.n	8001aaa <__aeabi_dmul+0x302>
 8001aa8:	e0f1      	b.n	8001c8e <__aeabi_dmul+0x4e6>
 8001aaa:	2101      	movs	r1, #1
 8001aac:	0843      	lsrs	r3, r0, #1
 8001aae:	4001      	ands	r1, r0
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	07e0      	lsls	r0, r4, #31
 8001ab4:	4318      	orrs	r0, r3
 8001ab6:	0864      	lsrs	r4, r4, #1
 8001ab8:	4915      	ldr	r1, [pc, #84]	; (8001b10 <__aeabi_dmul+0x368>)
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	468c      	mov	ip, r1
 8001abe:	4463      	add	r3, ip
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_dmul+0x31e>
 8001ac4:	e097      	b.n	8001bf6 <__aeabi_dmul+0x44e>
 8001ac6:	0741      	lsls	r1, r0, #29
 8001ac8:	d009      	beq.n	8001ade <__aeabi_dmul+0x336>
 8001aca:	210f      	movs	r1, #15
 8001acc:	4001      	ands	r1, r0
 8001ace:	2904      	cmp	r1, #4
 8001ad0:	d005      	beq.n	8001ade <__aeabi_dmul+0x336>
 8001ad2:	1d01      	adds	r1, r0, #4
 8001ad4:	4281      	cmp	r1, r0
 8001ad6:	4180      	sbcs	r0, r0
 8001ad8:	4240      	negs	r0, r0
 8001ada:	1824      	adds	r4, r4, r0
 8001adc:	0008      	movs	r0, r1
 8001ade:	01e1      	lsls	r1, r4, #7
 8001ae0:	d506      	bpl.n	8001af0 <__aeabi_dmul+0x348>
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	00c9      	lsls	r1, r1, #3
 8001ae6:	468c      	mov	ip, r1
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <__aeabi_dmul+0x36c>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	4463      	add	r3, ip
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <__aeabi_dmul+0x370>)
 8001af2:	428b      	cmp	r3, r1
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dmul+0x350>
 8001af6:	e710      	b.n	800191a <__aeabi_dmul+0x172>
 8001af8:	0761      	lsls	r1, r4, #29
 8001afa:	08c5      	lsrs	r5, r0, #3
 8001afc:	0264      	lsls	r4, r4, #9
 8001afe:	055b      	lsls	r3, r3, #21
 8001b00:	430d      	orrs	r5, r1
 8001b02:	0b24      	lsrs	r4, r4, #12
 8001b04:	0d5b      	lsrs	r3, r3, #21
 8001b06:	e6c1      	b.n	800188c <__aeabi_dmul+0xe4>
 8001b08:	000007ff 	.word	0x000007ff
 8001b0c:	fffffc01 	.word	0xfffffc01
 8001b10:	000003ff 	.word	0x000003ff
 8001b14:	feffffff 	.word	0xfeffffff
 8001b18:	000007fe 	.word	0x000007fe
 8001b1c:	464b      	mov	r3, r9
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	d059      	beq.n	8001bd6 <__aeabi_dmul+0x42e>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x380>
 8001b26:	e0a3      	b.n	8001c70 <__aeabi_dmul+0x4c8>
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f000 fd2b 	bl	8002584 <__clzsi2>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	0003      	movs	r3, r0
 8001b32:	390b      	subs	r1, #11
 8001b34:	221d      	movs	r2, #29
 8001b36:	1a52      	subs	r2, r2, r1
 8001b38:	4649      	mov	r1, r9
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	40d1      	lsrs	r1, r2
 8001b3e:	464a      	mov	r2, r9
 8001b40:	3808      	subs	r0, #8
 8001b42:	4082      	lsls	r2, r0
 8001b44:	4084      	lsls	r4, r0
 8001b46:	0010      	movs	r0, r2
 8001b48:	430c      	orrs	r4, r1
 8001b4a:	4a74      	ldr	r2, [pc, #464]	; (8001d1c <__aeabi_dmul+0x574>)
 8001b4c:	1aeb      	subs	r3, r5, r3
 8001b4e:	4694      	mov	ip, r2
 8001b50:	4642      	mov	r2, r8
 8001b52:	4463      	add	r3, ip
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	407a      	eors	r2, r7
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2e0a      	cmp	r6, #10
 8001b64:	dd00      	ble.n	8001b68 <__aeabi_dmul+0x3c0>
 8001b66:	e667      	b.n	8001838 <__aeabi_dmul+0x90>
 8001b68:	e683      	b.n	8001872 <__aeabi_dmul+0xca>
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	4303      	orrs	r3, r0
 8001b6e:	469a      	mov	sl, r3
 8001b70:	d02a      	beq.n	8001bc8 <__aeabi_dmul+0x420>
 8001b72:	465b      	mov	r3, fp
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d06d      	beq.n	8001c54 <__aeabi_dmul+0x4ac>
 8001b78:	4658      	mov	r0, fp
 8001b7a:	f000 fd03 	bl	8002584 <__clzsi2>
 8001b7e:	0001      	movs	r1, r0
 8001b80:	0003      	movs	r3, r0
 8001b82:	390b      	subs	r1, #11
 8001b84:	221d      	movs	r2, #29
 8001b86:	1a52      	subs	r2, r2, r1
 8001b88:	0021      	movs	r1, r4
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	465d      	mov	r5, fp
 8001b8e:	40d1      	lsrs	r1, r2
 8001b90:	3808      	subs	r0, #8
 8001b92:	4085      	lsls	r5, r0
 8001b94:	000a      	movs	r2, r1
 8001b96:	4084      	lsls	r4, r0
 8001b98:	432a      	orrs	r2, r5
 8001b9a:	4693      	mov	fp, r2
 8001b9c:	46a2      	mov	sl, r4
 8001b9e:	4d5f      	ldr	r5, [pc, #380]	; (8001d1c <__aeabi_dmul+0x574>)
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	1aed      	subs	r5, r5, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	e625      	b.n	80017f6 <__aeabi_dmul+0x4e>
 8001baa:	465b      	mov	r3, fp
 8001bac:	4303      	orrs	r3, r0
 8001bae:	469a      	mov	sl, r3
 8001bb0:	d105      	bne.n	8001bbe <__aeabi_dmul+0x416>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	469b      	mov	fp, r3
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	2608      	movs	r6, #8
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	e61b      	b.n	80017f6 <__aeabi_dmul+0x4e>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	4682      	mov	sl, r0
 8001bc2:	260c      	movs	r6, #12
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e616      	b.n	80017f6 <__aeabi_dmul+0x4e>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	469b      	mov	fp, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	2604      	movs	r6, #4
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	e60f      	b.n	80017f6 <__aeabi_dmul+0x4e>
 8001bd6:	4642      	mov	r2, r8
 8001bd8:	3301      	adds	r3, #1
 8001bda:	9501      	str	r5, [sp, #4]
 8001bdc:	431e      	orrs	r6, r3
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	407a      	eors	r2, r7
 8001be2:	3301      	adds	r3, #1
 8001be4:	2400      	movs	r4, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	2101      	movs	r1, #1
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2e0a      	cmp	r6, #10
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dmul+0x44c>
 8001bf2:	e621      	b.n	8001838 <__aeabi_dmul+0x90>
 8001bf4:	e63d      	b.n	8001872 <__aeabi_dmul+0xca>
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	1ac9      	subs	r1, r1, r3
 8001bfa:	2938      	cmp	r1, #56	; 0x38
 8001bfc:	dd00      	ble.n	8001c00 <__aeabi_dmul+0x458>
 8001bfe:	e642      	b.n	8001886 <__aeabi_dmul+0xde>
 8001c00:	291f      	cmp	r1, #31
 8001c02:	dd47      	ble.n	8001c94 <__aeabi_dmul+0x4ec>
 8001c04:	261f      	movs	r6, #31
 8001c06:	0025      	movs	r5, r4
 8001c08:	4276      	negs	r6, r6
 8001c0a:	1af3      	subs	r3, r6, r3
 8001c0c:	40dd      	lsrs	r5, r3
 8001c0e:	002b      	movs	r3, r5
 8001c10:	2920      	cmp	r1, #32
 8001c12:	d005      	beq.n	8001c20 <__aeabi_dmul+0x478>
 8001c14:	4942      	ldr	r1, [pc, #264]	; (8001d20 <__aeabi_dmul+0x578>)
 8001c16:	9d02      	ldr	r5, [sp, #8]
 8001c18:	468c      	mov	ip, r1
 8001c1a:	4465      	add	r5, ip
 8001c1c:	40ac      	lsls	r4, r5
 8001c1e:	4320      	orrs	r0, r4
 8001c20:	1e41      	subs	r1, r0, #1
 8001c22:	4188      	sbcs	r0, r1
 8001c24:	4318      	orrs	r0, r3
 8001c26:	2307      	movs	r3, #7
 8001c28:	001d      	movs	r5, r3
 8001c2a:	2400      	movs	r4, #0
 8001c2c:	4005      	ands	r5, r0
 8001c2e:	4203      	tst	r3, r0
 8001c30:	d04a      	beq.n	8001cc8 <__aeabi_dmul+0x520>
 8001c32:	230f      	movs	r3, #15
 8001c34:	2400      	movs	r4, #0
 8001c36:	4003      	ands	r3, r0
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d042      	beq.n	8001cc2 <__aeabi_dmul+0x51a>
 8001c3c:	1d03      	adds	r3, r0, #4
 8001c3e:	4283      	cmp	r3, r0
 8001c40:	4180      	sbcs	r0, r0
 8001c42:	4240      	negs	r0, r0
 8001c44:	1824      	adds	r4, r4, r0
 8001c46:	0018      	movs	r0, r3
 8001c48:	0223      	lsls	r3, r4, #8
 8001c4a:	d53a      	bpl.n	8001cc2 <__aeabi_dmul+0x51a>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2400      	movs	r4, #0
 8001c50:	2500      	movs	r5, #0
 8001c52:	e61b      	b.n	800188c <__aeabi_dmul+0xe4>
 8001c54:	f000 fc96 	bl	8002584 <__clzsi2>
 8001c58:	0001      	movs	r1, r0
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	3115      	adds	r1, #21
 8001c5e:	3320      	adds	r3, #32
 8001c60:	291c      	cmp	r1, #28
 8001c62:	dd8f      	ble.n	8001b84 <__aeabi_dmul+0x3dc>
 8001c64:	3808      	subs	r0, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	4084      	lsls	r4, r0
 8001c6a:	4692      	mov	sl, r2
 8001c6c:	46a3      	mov	fp, r4
 8001c6e:	e796      	b.n	8001b9e <__aeabi_dmul+0x3f6>
 8001c70:	f000 fc88 	bl	8002584 <__clzsi2>
 8001c74:	0001      	movs	r1, r0
 8001c76:	0003      	movs	r3, r0
 8001c78:	3115      	adds	r1, #21
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	291c      	cmp	r1, #28
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dmul+0x4da>
 8001c80:	e758      	b.n	8001b34 <__aeabi_dmul+0x38c>
 8001c82:	0002      	movs	r2, r0
 8001c84:	464c      	mov	r4, r9
 8001c86:	3a08      	subs	r2, #8
 8001c88:	2000      	movs	r0, #0
 8001c8a:	4094      	lsls	r4, r2
 8001c8c:	e75d      	b.n	8001b4a <__aeabi_dmul+0x3a2>
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	e711      	b.n	8001ab8 <__aeabi_dmul+0x310>
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <__aeabi_dmul+0x57c>)
 8001c96:	0026      	movs	r6, r4
 8001c98:	469c      	mov	ip, r3
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	9d02      	ldr	r5, [sp, #8]
 8001c9e:	40cb      	lsrs	r3, r1
 8001ca0:	4465      	add	r5, ip
 8001ca2:	40ae      	lsls	r6, r5
 8001ca4:	431e      	orrs	r6, r3
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	40ab      	lsls	r3, r5
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	4183      	sbcs	r3, r0
 8001cae:	0030      	movs	r0, r6
 8001cb0:	4318      	orrs	r0, r3
 8001cb2:	40cc      	lsrs	r4, r1
 8001cb4:	0743      	lsls	r3, r0, #29
 8001cb6:	d0c7      	beq.n	8001c48 <__aeabi_dmul+0x4a0>
 8001cb8:	230f      	movs	r3, #15
 8001cba:	4003      	ands	r3, r0
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d1bd      	bne.n	8001c3c <__aeabi_dmul+0x494>
 8001cc0:	e7c2      	b.n	8001c48 <__aeabi_dmul+0x4a0>
 8001cc2:	0765      	lsls	r5, r4, #29
 8001cc4:	0264      	lsls	r4, r4, #9
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	08c0      	lsrs	r0, r0, #3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4305      	orrs	r5, r0
 8001cce:	e5dd      	b.n	800188c <__aeabi_dmul+0xe4>
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	2e0f      	cmp	r6, #15
 8001cd6:	d10c      	bne.n	8001cf2 <__aeabi_dmul+0x54a>
 8001cd8:	2480      	movs	r4, #128	; 0x80
 8001cda:	465b      	mov	r3, fp
 8001cdc:	0324      	lsls	r4, r4, #12
 8001cde:	4223      	tst	r3, r4
 8001ce0:	d00e      	beq.n	8001d00 <__aeabi_dmul+0x558>
 8001ce2:	4221      	tst	r1, r4
 8001ce4:	d10c      	bne.n	8001d00 <__aeabi_dmul+0x558>
 8001ce6:	430c      	orrs	r4, r1
 8001ce8:	0324      	lsls	r4, r4, #12
 8001cea:	003a      	movs	r2, r7
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <__aeabi_dmul+0x580>)
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	e5cc      	b.n	800188c <__aeabi_dmul+0xe4>
 8001cf2:	2e0b      	cmp	r6, #11
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dmul+0x550>
 8001cf6:	e5a2      	b.n	800183e <__aeabi_dmul+0x96>
 8001cf8:	468b      	mov	fp, r1
 8001cfa:	46aa      	mov	sl, r5
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	e5f7      	b.n	80018f0 <__aeabi_dmul+0x148>
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	465b      	mov	r3, fp
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	431c      	orrs	r4, r3
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	4642      	mov	r2, r8
 8001d0c:	4655      	mov	r5, sl
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <__aeabi_dmul+0x580>)
 8001d10:	0b24      	lsrs	r4, r4, #12
 8001d12:	e5bb      	b.n	800188c <__aeabi_dmul+0xe4>
 8001d14:	464d      	mov	r5, r9
 8001d16:	0021      	movs	r1, r4
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e7db      	b.n	8001cd4 <__aeabi_dmul+0x52c>
 8001d1c:	fffffc0d 	.word	0xfffffc0d
 8001d20:	0000043e 	.word	0x0000043e
 8001d24:	0000041e 	.word	0x0000041e
 8001d28:	000007ff 	.word	0x000007ff

08001d2c <__aeabi_dsub>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	4657      	mov	r7, sl
 8001d30:	464e      	mov	r6, r9
 8001d32:	4645      	mov	r5, r8
 8001d34:	46de      	mov	lr, fp
 8001d36:	b5e0      	push	{r5, r6, r7, lr}
 8001d38:	000d      	movs	r5, r1
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	0010      	movs	r0, r2
 8001d40:	032b      	lsls	r3, r5, #12
 8001d42:	0a5b      	lsrs	r3, r3, #9
 8001d44:	0f62      	lsrs	r2, r4, #29
 8001d46:	431a      	orrs	r2, r3
 8001d48:	00e3      	lsls	r3, r4, #3
 8001d4a:	030c      	lsls	r4, r1, #12
 8001d4c:	0a64      	lsrs	r4, r4, #9
 8001d4e:	0f47      	lsrs	r7, r0, #29
 8001d50:	4327      	orrs	r7, r4
 8001d52:	4cd0      	ldr	r4, [pc, #832]	; (8002094 <__aeabi_dsub+0x368>)
 8001d54:	006e      	lsls	r6, r5, #1
 8001d56:	4691      	mov	r9, r2
 8001d58:	b083      	sub	sp, #12
 8001d5a:	004a      	lsls	r2, r1, #1
 8001d5c:	00c0      	lsls	r0, r0, #3
 8001d5e:	4698      	mov	r8, r3
 8001d60:	46a2      	mov	sl, r4
 8001d62:	0d76      	lsrs	r6, r6, #21
 8001d64:	0fed      	lsrs	r5, r5, #31
 8001d66:	0d52      	lsrs	r2, r2, #21
 8001d68:	0fc9      	lsrs	r1, r1, #31
 8001d6a:	9001      	str	r0, [sp, #4]
 8001d6c:	42a2      	cmp	r2, r4
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x46>
 8001d70:	e0b9      	b.n	8001ee6 <__aeabi_dsub+0x1ba>
 8001d72:	2401      	movs	r4, #1
 8001d74:	4061      	eors	r1, r4
 8001d76:	468b      	mov	fp, r1
 8001d78:	428d      	cmp	r5, r1
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x52>
 8001d7c:	e08d      	b.n	8001e9a <__aeabi_dsub+0x16e>
 8001d7e:	1ab4      	subs	r4, r6, r2
 8001d80:	46a4      	mov	ip, r4
 8001d82:	2c00      	cmp	r4, #0
 8001d84:	dc00      	bgt.n	8001d88 <__aeabi_dsub+0x5c>
 8001d86:	e0b7      	b.n	8001ef8 <__aeabi_dsub+0x1cc>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x62>
 8001d8c:	e0cb      	b.n	8001f26 <__aeabi_dsub+0x1fa>
 8001d8e:	4ac1      	ldr	r2, [pc, #772]	; (8002094 <__aeabi_dsub+0x368>)
 8001d90:	4296      	cmp	r6, r2
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x6a>
 8001d94:	e186      	b.n	80020a4 <__aeabi_dsub+0x378>
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	0412      	lsls	r2, r2, #16
 8001d9a:	4317      	orrs	r7, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	2a38      	cmp	r2, #56	; 0x38
 8001da0:	dd00      	ble.n	8001da4 <__aeabi_dsub+0x78>
 8001da2:	e1a4      	b.n	80020ee <__aeabi_dsub+0x3c2>
 8001da4:	2a1f      	cmp	r2, #31
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dsub+0x7e>
 8001da8:	e21d      	b.n	80021e6 <__aeabi_dsub+0x4ba>
 8001daa:	4661      	mov	r1, ip
 8001dac:	2220      	movs	r2, #32
 8001dae:	003c      	movs	r4, r7
 8001db0:	1a52      	subs	r2, r2, r1
 8001db2:	0001      	movs	r1, r0
 8001db4:	4090      	lsls	r0, r2
 8001db6:	4094      	lsls	r4, r2
 8001db8:	1e42      	subs	r2, r0, #1
 8001dba:	4190      	sbcs	r0, r2
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	46a0      	mov	r8, r4
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	40d7      	lsrs	r7, r2
 8001dc4:	464a      	mov	r2, r9
 8001dc6:	40e1      	lsrs	r1, r4
 8001dc8:	4644      	mov	r4, r8
 8001dca:	1bd2      	subs	r2, r2, r7
 8001dcc:	4691      	mov	r9, r2
 8001dce:	430c      	orrs	r4, r1
 8001dd0:	4304      	orrs	r4, r0
 8001dd2:	1b1c      	subs	r4, r3, r4
 8001dd4:	42a3      	cmp	r3, r4
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	464b      	mov	r3, r9
 8001dda:	4252      	negs	r2, r2
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	469a      	mov	sl, r3
 8001de0:	4653      	mov	r3, sl
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	d400      	bmi.n	8001de8 <__aeabi_dsub+0xbc>
 8001de6:	e12b      	b.n	8002040 <__aeabi_dsub+0x314>
 8001de8:	4653      	mov	r3, sl
 8001dea:	025a      	lsls	r2, r3, #9
 8001dec:	0a53      	lsrs	r3, r2, #9
 8001dee:	469a      	mov	sl, r3
 8001df0:	4653      	mov	r3, sl
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0xcc>
 8001df6:	e166      	b.n	80020c6 <__aeabi_dsub+0x39a>
 8001df8:	4650      	mov	r0, sl
 8001dfa:	f000 fbc3 	bl	8002584 <__clzsi2>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3b08      	subs	r3, #8
 8001e02:	2220      	movs	r2, #32
 8001e04:	0020      	movs	r0, r4
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	4651      	mov	r1, sl
 8001e0a:	40d0      	lsrs	r0, r2
 8001e0c:	4099      	lsls	r1, r3
 8001e0e:	0002      	movs	r2, r0
 8001e10:	409c      	lsls	r4, r3
 8001e12:	430a      	orrs	r2, r1
 8001e14:	429e      	cmp	r6, r3
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dsub+0xee>
 8001e18:	e164      	b.n	80020e4 <__aeabi_dsub+0x3b8>
 8001e1a:	1b9b      	subs	r3, r3, r6
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	291f      	cmp	r1, #31
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dsub+0xf8>
 8001e22:	e0fe      	b.n	8002022 <__aeabi_dsub+0x2f6>
 8001e24:	2320      	movs	r3, #32
 8001e26:	0010      	movs	r0, r2
 8001e28:	0026      	movs	r6, r4
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	409c      	lsls	r4, r3
 8001e2e:	4098      	lsls	r0, r3
 8001e30:	40ce      	lsrs	r6, r1
 8001e32:	40ca      	lsrs	r2, r1
 8001e34:	1e63      	subs	r3, r4, #1
 8001e36:	419c      	sbcs	r4, r3
 8001e38:	4330      	orrs	r0, r6
 8001e3a:	4692      	mov	sl, r2
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	4304      	orrs	r4, r0
 8001e40:	0763      	lsls	r3, r4, #29
 8001e42:	d009      	beq.n	8001e58 <__aeabi_dsub+0x12c>
 8001e44:	230f      	movs	r3, #15
 8001e46:	4023      	ands	r3, r4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d005      	beq.n	8001e58 <__aeabi_dsub+0x12c>
 8001e4c:	1d23      	adds	r3, r4, #4
 8001e4e:	42a3      	cmp	r3, r4
 8001e50:	41a4      	sbcs	r4, r4
 8001e52:	4264      	negs	r4, r4
 8001e54:	44a2      	add	sl, r4
 8001e56:	001c      	movs	r4, r3
 8001e58:	4653      	mov	r3, sl
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	d400      	bmi.n	8001e60 <__aeabi_dsub+0x134>
 8001e5e:	e0f2      	b.n	8002046 <__aeabi_dsub+0x31a>
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <__aeabi_dsub+0x368>)
 8001e62:	3601      	adds	r6, #1
 8001e64:	429e      	cmp	r6, r3
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x13e>
 8001e68:	e10f      	b.n	800208a <__aeabi_dsub+0x35e>
 8001e6a:	4653      	mov	r3, sl
 8001e6c:	498a      	ldr	r1, [pc, #552]	; (8002098 <__aeabi_dsub+0x36c>)
 8001e6e:	08e4      	lsrs	r4, r4, #3
 8001e70:	400b      	ands	r3, r1
 8001e72:	0019      	movs	r1, r3
 8001e74:	075b      	lsls	r3, r3, #29
 8001e76:	4323      	orrs	r3, r4
 8001e78:	0572      	lsls	r2, r6, #21
 8001e7a:	024c      	lsls	r4, r1, #9
 8001e7c:	0b24      	lsrs	r4, r4, #12
 8001e7e:	0d52      	lsrs	r2, r2, #21
 8001e80:	0512      	lsls	r2, r2, #20
 8001e82:	4322      	orrs	r2, r4
 8001e84:	07ed      	lsls	r5, r5, #31
 8001e86:	432a      	orrs	r2, r5
 8001e88:	0018      	movs	r0, r3
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e90:	46bb      	mov	fp, r7
 8001e92:	46b2      	mov	sl, r6
 8001e94:	46a9      	mov	r9, r5
 8001e96:	46a0      	mov	r8, r4
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9a:	1ab4      	subs	r4, r6, r2
 8001e9c:	46a4      	mov	ip, r4
 8001e9e:	2c00      	cmp	r4, #0
 8001ea0:	dd59      	ble.n	8001f56 <__aeabi_dsub+0x22a>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x17c>
 8001ea6:	e0b0      	b.n	800200a <__aeabi_dsub+0x2de>
 8001ea8:	4556      	cmp	r6, sl
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x182>
 8001eac:	e0fa      	b.n	80020a4 <__aeabi_dsub+0x378>
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	0412      	lsls	r2, r2, #16
 8001eb2:	4317      	orrs	r7, r2
 8001eb4:	4662      	mov	r2, ip
 8001eb6:	2a38      	cmp	r2, #56	; 0x38
 8001eb8:	dd00      	ble.n	8001ebc <__aeabi_dsub+0x190>
 8001eba:	e0d4      	b.n	8002066 <__aeabi_dsub+0x33a>
 8001ebc:	2a1f      	cmp	r2, #31
 8001ebe:	dc00      	bgt.n	8001ec2 <__aeabi_dsub+0x196>
 8001ec0:	e1c0      	b.n	8002244 <__aeabi_dsub+0x518>
 8001ec2:	0039      	movs	r1, r7
 8001ec4:	3a20      	subs	r2, #32
 8001ec6:	40d1      	lsrs	r1, r2
 8001ec8:	4662      	mov	r2, ip
 8001eca:	2a20      	cmp	r2, #32
 8001ecc:	d006      	beq.n	8001edc <__aeabi_dsub+0x1b0>
 8001ece:	4664      	mov	r4, ip
 8001ed0:	2240      	movs	r2, #64	; 0x40
 8001ed2:	1b12      	subs	r2, r2, r4
 8001ed4:	003c      	movs	r4, r7
 8001ed6:	4094      	lsls	r4, r2
 8001ed8:	4304      	orrs	r4, r0
 8001eda:	9401      	str	r4, [sp, #4]
 8001edc:	9c01      	ldr	r4, [sp, #4]
 8001ede:	1e62      	subs	r2, r4, #1
 8001ee0:	4194      	sbcs	r4, r2
 8001ee2:	430c      	orrs	r4, r1
 8001ee4:	e0c3      	b.n	800206e <__aeabi_dsub+0x342>
 8001ee6:	003c      	movs	r4, r7
 8001ee8:	4304      	orrs	r4, r0
 8001eea:	d02b      	beq.n	8001f44 <__aeabi_dsub+0x218>
 8001eec:	468b      	mov	fp, r1
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d02e      	beq.n	8001f50 <__aeabi_dsub+0x224>
 8001ef2:	4c6a      	ldr	r4, [pc, #424]	; (800209c <__aeabi_dsub+0x370>)
 8001ef4:	46a4      	mov	ip, r4
 8001ef6:	44b4      	add	ip, r6
 8001ef8:	4664      	mov	r4, ip
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	d05f      	beq.n	8001fbe <__aeabi_dsub+0x292>
 8001efe:	1b94      	subs	r4, r2, r6
 8001f00:	46a4      	mov	ip, r4
 8001f02:	2e00      	cmp	r6, #0
 8001f04:	d000      	beq.n	8001f08 <__aeabi_dsub+0x1dc>
 8001f06:	e120      	b.n	800214a <__aeabi_dsub+0x41e>
 8001f08:	464c      	mov	r4, r9
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x1e4>
 8001f0e:	e1c7      	b.n	80022a0 <__aeabi_dsub+0x574>
 8001f10:	4661      	mov	r1, ip
 8001f12:	1e4c      	subs	r4, r1, #1
 8001f14:	2901      	cmp	r1, #1
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x1ee>
 8001f18:	e223      	b.n	8002362 <__aeabi_dsub+0x636>
 8001f1a:	4d5e      	ldr	r5, [pc, #376]	; (8002094 <__aeabi_dsub+0x368>)
 8001f1c:	45ac      	cmp	ip, r5
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x1f6>
 8001f20:	e1d8      	b.n	80022d4 <__aeabi_dsub+0x5a8>
 8001f22:	46a4      	mov	ip, r4
 8001f24:	e11a      	b.n	800215c <__aeabi_dsub+0x430>
 8001f26:	003a      	movs	r2, r7
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x202>
 8001f2c:	e0e4      	b.n	80020f8 <__aeabi_dsub+0x3cc>
 8001f2e:	0022      	movs	r2, r4
 8001f30:	3a01      	subs	r2, #1
 8001f32:	2c01      	cmp	r4, #1
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x20c>
 8001f36:	e1c3      	b.n	80022c0 <__aeabi_dsub+0x594>
 8001f38:	4956      	ldr	r1, [pc, #344]	; (8002094 <__aeabi_dsub+0x368>)
 8001f3a:	428c      	cmp	r4, r1
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x214>
 8001f3e:	e0b1      	b.n	80020a4 <__aeabi_dsub+0x378>
 8001f40:	4694      	mov	ip, r2
 8001f42:	e72b      	b.n	8001d9c <__aeabi_dsub+0x70>
 8001f44:	2401      	movs	r4, #1
 8001f46:	4061      	eors	r1, r4
 8001f48:	468b      	mov	fp, r1
 8001f4a:	428d      	cmp	r5, r1
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dsub+0x224>
 8001f4e:	e716      	b.n	8001d7e <__aeabi_dsub+0x52>
 8001f50:	4952      	ldr	r1, [pc, #328]	; (800209c <__aeabi_dsub+0x370>)
 8001f52:	468c      	mov	ip, r1
 8001f54:	44b4      	add	ip, r6
 8001f56:	4664      	mov	r4, ip
 8001f58:	2c00      	cmp	r4, #0
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x232>
 8001f5c:	e0d3      	b.n	8002106 <__aeabi_dsub+0x3da>
 8001f5e:	1b91      	subs	r1, r2, r6
 8001f60:	468c      	mov	ip, r1
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x23c>
 8001f66:	e15e      	b.n	8002226 <__aeabi_dsub+0x4fa>
 8001f68:	494a      	ldr	r1, [pc, #296]	; (8002094 <__aeabi_dsub+0x368>)
 8001f6a:	428a      	cmp	r2, r1
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x244>
 8001f6e:	e1be      	b.n	80022ee <__aeabi_dsub+0x5c2>
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	464c      	mov	r4, r9
 8001f74:	0409      	lsls	r1, r1, #16
 8001f76:	430c      	orrs	r4, r1
 8001f78:	46a1      	mov	r9, r4
 8001f7a:	4661      	mov	r1, ip
 8001f7c:	2938      	cmp	r1, #56	; 0x38
 8001f7e:	dd00      	ble.n	8001f82 <__aeabi_dsub+0x256>
 8001f80:	e1ba      	b.n	80022f8 <__aeabi_dsub+0x5cc>
 8001f82:	291f      	cmp	r1, #31
 8001f84:	dd00      	ble.n	8001f88 <__aeabi_dsub+0x25c>
 8001f86:	e227      	b.n	80023d8 <__aeabi_dsub+0x6ac>
 8001f88:	2420      	movs	r4, #32
 8001f8a:	1a64      	subs	r4, r4, r1
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	40a1      	lsls	r1, r4
 8001f90:	001e      	movs	r6, r3
 8001f92:	4688      	mov	r8, r1
 8001f94:	4661      	mov	r1, ip
 8001f96:	40a3      	lsls	r3, r4
 8001f98:	40ce      	lsrs	r6, r1
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	1e5c      	subs	r4, r3, #1
 8001f9e:	41a3      	sbcs	r3, r4
 8001fa0:	4331      	orrs	r1, r6
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	000c      	movs	r4, r1
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	4649      	mov	r1, r9
 8001faa:	40d9      	lsrs	r1, r3
 8001fac:	187f      	adds	r7, r7, r1
 8001fae:	1824      	adds	r4, r4, r0
 8001fb0:	4284      	cmp	r4, r0
 8001fb2:	419b      	sbcs	r3, r3
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	469a      	mov	sl, r3
 8001fb8:	0016      	movs	r6, r2
 8001fba:	44ba      	add	sl, r7
 8001fbc:	e05d      	b.n	800207a <__aeabi_dsub+0x34e>
 8001fbe:	4c38      	ldr	r4, [pc, #224]	; (80020a0 <__aeabi_dsub+0x374>)
 8001fc0:	1c72      	adds	r2, r6, #1
 8001fc2:	4222      	tst	r2, r4
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dsub+0x29c>
 8001fc6:	e0df      	b.n	8002188 <__aeabi_dsub+0x45c>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	2e00      	cmp	r6, #0
 8001fce:	d000      	beq.n	8001fd2 <__aeabi_dsub+0x2a6>
 8001fd0:	e15c      	b.n	800228c <__aeabi_dsub+0x560>
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x2ac>
 8001fd6:	e1cf      	b.n	8002378 <__aeabi_dsub+0x64c>
 8001fd8:	003a      	movs	r2, r7
 8001fda:	4302      	orrs	r2, r0
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x2b4>
 8001fde:	e17f      	b.n	80022e0 <__aeabi_dsub+0x5b4>
 8001fe0:	1a1c      	subs	r4, r3, r0
 8001fe2:	464a      	mov	r2, r9
 8001fe4:	42a3      	cmp	r3, r4
 8001fe6:	4189      	sbcs	r1, r1
 8001fe8:	1bd2      	subs	r2, r2, r7
 8001fea:	4249      	negs	r1, r1
 8001fec:	1a52      	subs	r2, r2, r1
 8001fee:	4692      	mov	sl, r2
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	d400      	bmi.n	8001ff6 <__aeabi_dsub+0x2ca>
 8001ff4:	e20a      	b.n	800240c <__aeabi_dsub+0x6e0>
 8001ff6:	1ac4      	subs	r4, r0, r3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4180      	sbcs	r0, r0
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4240      	negs	r0, r0
 8002000:	1aff      	subs	r7, r7, r3
 8002002:	1a3b      	subs	r3, r7, r0
 8002004:	469a      	mov	sl, r3
 8002006:	465d      	mov	r5, fp
 8002008:	e71a      	b.n	8001e40 <__aeabi_dsub+0x114>
 800200a:	003a      	movs	r2, r7
 800200c:	4302      	orrs	r2, r0
 800200e:	d073      	beq.n	80020f8 <__aeabi_dsub+0x3cc>
 8002010:	0022      	movs	r2, r4
 8002012:	3a01      	subs	r2, #1
 8002014:	2c01      	cmp	r4, #1
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x2ee>
 8002018:	e0cb      	b.n	80021b2 <__aeabi_dsub+0x486>
 800201a:	4554      	cmp	r4, sl
 800201c:	d042      	beq.n	80020a4 <__aeabi_dsub+0x378>
 800201e:	4694      	mov	ip, r2
 8002020:	e748      	b.n	8001eb4 <__aeabi_dsub+0x188>
 8002022:	0010      	movs	r0, r2
 8002024:	3b1f      	subs	r3, #31
 8002026:	40d8      	lsrs	r0, r3
 8002028:	2920      	cmp	r1, #32
 800202a:	d003      	beq.n	8002034 <__aeabi_dsub+0x308>
 800202c:	2340      	movs	r3, #64	; 0x40
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	409a      	lsls	r2, r3
 8002032:	4314      	orrs	r4, r2
 8002034:	1e63      	subs	r3, r4, #1
 8002036:	419c      	sbcs	r4, r3
 8002038:	2300      	movs	r3, #0
 800203a:	2600      	movs	r6, #0
 800203c:	469a      	mov	sl, r3
 800203e:	4304      	orrs	r4, r0
 8002040:	0763      	lsls	r3, r4, #29
 8002042:	d000      	beq.n	8002046 <__aeabi_dsub+0x31a>
 8002044:	e6fe      	b.n	8001e44 <__aeabi_dsub+0x118>
 8002046:	4652      	mov	r2, sl
 8002048:	08e3      	lsrs	r3, r4, #3
 800204a:	0752      	lsls	r2, r2, #29
 800204c:	4313      	orrs	r3, r2
 800204e:	4652      	mov	r2, sl
 8002050:	46b4      	mov	ip, r6
 8002052:	08d2      	lsrs	r2, r2, #3
 8002054:	490f      	ldr	r1, [pc, #60]	; (8002094 <__aeabi_dsub+0x368>)
 8002056:	458c      	cmp	ip, r1
 8002058:	d02a      	beq.n	80020b0 <__aeabi_dsub+0x384>
 800205a:	0312      	lsls	r2, r2, #12
 800205c:	0b14      	lsrs	r4, r2, #12
 800205e:	4662      	mov	r2, ip
 8002060:	0552      	lsls	r2, r2, #21
 8002062:	0d52      	lsrs	r2, r2, #21
 8002064:	e70c      	b.n	8001e80 <__aeabi_dsub+0x154>
 8002066:	003c      	movs	r4, r7
 8002068:	4304      	orrs	r4, r0
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	18e4      	adds	r4, r4, r3
 8002070:	429c      	cmp	r4, r3
 8002072:	4192      	sbcs	r2, r2
 8002074:	4252      	negs	r2, r2
 8002076:	444a      	add	r2, r9
 8002078:	4692      	mov	sl, r2
 800207a:	4653      	mov	r3, sl
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	d5df      	bpl.n	8002040 <__aeabi_dsub+0x314>
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__aeabi_dsub+0x368>)
 8002082:	3601      	adds	r6, #1
 8002084:	429e      	cmp	r6, r3
 8002086:	d000      	beq.n	800208a <__aeabi_dsub+0x35e>
 8002088:	e0a0      	b.n	80021cc <__aeabi_dsub+0x4a0>
 800208a:	0032      	movs	r2, r6
 800208c:	2400      	movs	r4, #0
 800208e:	2300      	movs	r3, #0
 8002090:	e6f6      	b.n	8001e80 <__aeabi_dsub+0x154>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff
 8002098:	ff7fffff 	.word	0xff7fffff
 800209c:	fffff801 	.word	0xfffff801
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	464a      	mov	r2, r9
 80020a8:	0752      	lsls	r2, r2, #29
 80020aa:	4313      	orrs	r3, r2
 80020ac:	464a      	mov	r2, r9
 80020ae:	08d2      	lsrs	r2, r2, #3
 80020b0:	0019      	movs	r1, r3
 80020b2:	4311      	orrs	r1, r2
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x38c>
 80020b6:	e1b5      	b.n	8002424 <__aeabi_dsub+0x6f8>
 80020b8:	2480      	movs	r4, #128	; 0x80
 80020ba:	0324      	lsls	r4, r4, #12
 80020bc:	4314      	orrs	r4, r2
 80020be:	0324      	lsls	r4, r4, #12
 80020c0:	4ad5      	ldr	r2, [pc, #852]	; (8002418 <__aeabi_dsub+0x6ec>)
 80020c2:	0b24      	lsrs	r4, r4, #12
 80020c4:	e6dc      	b.n	8001e80 <__aeabi_dsub+0x154>
 80020c6:	0020      	movs	r0, r4
 80020c8:	f000 fa5c 	bl	8002584 <__clzsi2>
 80020cc:	0003      	movs	r3, r0
 80020ce:	3318      	adds	r3, #24
 80020d0:	2b1f      	cmp	r3, #31
 80020d2:	dc00      	bgt.n	80020d6 <__aeabi_dsub+0x3aa>
 80020d4:	e695      	b.n	8001e02 <__aeabi_dsub+0xd6>
 80020d6:	0022      	movs	r2, r4
 80020d8:	3808      	subs	r0, #8
 80020da:	4082      	lsls	r2, r0
 80020dc:	2400      	movs	r4, #0
 80020de:	429e      	cmp	r6, r3
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_dsub+0x3b8>
 80020e2:	e69a      	b.n	8001e1a <__aeabi_dsub+0xee>
 80020e4:	1af6      	subs	r6, r6, r3
 80020e6:	4bcd      	ldr	r3, [pc, #820]	; (800241c <__aeabi_dsub+0x6f0>)
 80020e8:	401a      	ands	r2, r3
 80020ea:	4692      	mov	sl, r2
 80020ec:	e6a8      	b.n	8001e40 <__aeabi_dsub+0x114>
 80020ee:	003c      	movs	r4, r7
 80020f0:	4304      	orrs	r4, r0
 80020f2:	1e62      	subs	r2, r4, #1
 80020f4:	4194      	sbcs	r4, r2
 80020f6:	e66c      	b.n	8001dd2 <__aeabi_dsub+0xa6>
 80020f8:	464a      	mov	r2, r9
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	0752      	lsls	r2, r2, #29
 80020fe:	4313      	orrs	r3, r2
 8002100:	464a      	mov	r2, r9
 8002102:	08d2      	lsrs	r2, r2, #3
 8002104:	e7a6      	b.n	8002054 <__aeabi_dsub+0x328>
 8002106:	4cc6      	ldr	r4, [pc, #792]	; (8002420 <__aeabi_dsub+0x6f4>)
 8002108:	1c72      	adds	r2, r6, #1
 800210a:	4222      	tst	r2, r4
 800210c:	d000      	beq.n	8002110 <__aeabi_dsub+0x3e4>
 800210e:	e0ac      	b.n	800226a <__aeabi_dsub+0x53e>
 8002110:	464a      	mov	r2, r9
 8002112:	431a      	orrs	r2, r3
 8002114:	2e00      	cmp	r6, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x3ee>
 8002118:	e105      	b.n	8002326 <__aeabi_dsub+0x5fa>
 800211a:	2a00      	cmp	r2, #0
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x3f4>
 800211e:	e156      	b.n	80023ce <__aeabi_dsub+0x6a2>
 8002120:	003a      	movs	r2, r7
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x3fc>
 8002126:	e0db      	b.n	80022e0 <__aeabi_dsub+0x5b4>
 8002128:	181c      	adds	r4, r3, r0
 800212a:	429c      	cmp	r4, r3
 800212c:	419b      	sbcs	r3, r3
 800212e:	444f      	add	r7, r9
 8002130:	46ba      	mov	sl, r7
 8002132:	425b      	negs	r3, r3
 8002134:	449a      	add	sl, r3
 8002136:	4653      	mov	r3, sl
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	d400      	bmi.n	800213e <__aeabi_dsub+0x412>
 800213c:	e780      	b.n	8002040 <__aeabi_dsub+0x314>
 800213e:	4652      	mov	r2, sl
 8002140:	4bb6      	ldr	r3, [pc, #728]	; (800241c <__aeabi_dsub+0x6f0>)
 8002142:	2601      	movs	r6, #1
 8002144:	401a      	ands	r2, r3
 8002146:	4692      	mov	sl, r2
 8002148:	e77a      	b.n	8002040 <__aeabi_dsub+0x314>
 800214a:	4cb3      	ldr	r4, [pc, #716]	; (8002418 <__aeabi_dsub+0x6ec>)
 800214c:	42a2      	cmp	r2, r4
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x426>
 8002150:	e0c0      	b.n	80022d4 <__aeabi_dsub+0x5a8>
 8002152:	2480      	movs	r4, #128	; 0x80
 8002154:	464d      	mov	r5, r9
 8002156:	0424      	lsls	r4, r4, #16
 8002158:	4325      	orrs	r5, r4
 800215a:	46a9      	mov	r9, r5
 800215c:	4664      	mov	r4, ip
 800215e:	2c38      	cmp	r4, #56	; 0x38
 8002160:	dc53      	bgt.n	800220a <__aeabi_dsub+0x4de>
 8002162:	4661      	mov	r1, ip
 8002164:	2c1f      	cmp	r4, #31
 8002166:	dd00      	ble.n	800216a <__aeabi_dsub+0x43e>
 8002168:	e0cd      	b.n	8002306 <__aeabi_dsub+0x5da>
 800216a:	2520      	movs	r5, #32
 800216c:	001e      	movs	r6, r3
 800216e:	1b2d      	subs	r5, r5, r4
 8002170:	464c      	mov	r4, r9
 8002172:	40ab      	lsls	r3, r5
 8002174:	40ac      	lsls	r4, r5
 8002176:	40ce      	lsrs	r6, r1
 8002178:	1e5d      	subs	r5, r3, #1
 800217a:	41ab      	sbcs	r3, r5
 800217c:	4334      	orrs	r4, r6
 800217e:	4323      	orrs	r3, r4
 8002180:	464c      	mov	r4, r9
 8002182:	40cc      	lsrs	r4, r1
 8002184:	1b3f      	subs	r7, r7, r4
 8002186:	e045      	b.n	8002214 <__aeabi_dsub+0x4e8>
 8002188:	464a      	mov	r2, r9
 800218a:	1a1c      	subs	r4, r3, r0
 800218c:	1bd1      	subs	r1, r2, r7
 800218e:	42a3      	cmp	r3, r4
 8002190:	4192      	sbcs	r2, r2
 8002192:	4252      	negs	r2, r2
 8002194:	4692      	mov	sl, r2
 8002196:	000a      	movs	r2, r1
 8002198:	4651      	mov	r1, sl
 800219a:	1a52      	subs	r2, r2, r1
 800219c:	4692      	mov	sl, r2
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	d500      	bpl.n	80021a4 <__aeabi_dsub+0x478>
 80021a2:	e083      	b.n	80022ac <__aeabi_dsub+0x580>
 80021a4:	4653      	mov	r3, sl
 80021a6:	4323      	orrs	r3, r4
 80021a8:	d000      	beq.n	80021ac <__aeabi_dsub+0x480>
 80021aa:	e621      	b.n	8001df0 <__aeabi_dsub+0xc4>
 80021ac:	2200      	movs	r2, #0
 80021ae:	2500      	movs	r5, #0
 80021b0:	e753      	b.n	800205a <__aeabi_dsub+0x32e>
 80021b2:	181c      	adds	r4, r3, r0
 80021b4:	429c      	cmp	r4, r3
 80021b6:	419b      	sbcs	r3, r3
 80021b8:	444f      	add	r7, r9
 80021ba:	46ba      	mov	sl, r7
 80021bc:	425b      	negs	r3, r3
 80021be:	449a      	add	sl, r3
 80021c0:	4653      	mov	r3, sl
 80021c2:	2601      	movs	r6, #1
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	d400      	bmi.n	80021ca <__aeabi_dsub+0x49e>
 80021c8:	e73a      	b.n	8002040 <__aeabi_dsub+0x314>
 80021ca:	2602      	movs	r6, #2
 80021cc:	4652      	mov	r2, sl
 80021ce:	4b93      	ldr	r3, [pc, #588]	; (800241c <__aeabi_dsub+0x6f0>)
 80021d0:	2101      	movs	r1, #1
 80021d2:	401a      	ands	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	4021      	ands	r1, r4
 80021d8:	0862      	lsrs	r2, r4, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	07dc      	lsls	r4, r3, #31
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	469a      	mov	sl, r3
 80021e2:	4314      	orrs	r4, r2
 80021e4:	e62c      	b.n	8001e40 <__aeabi_dsub+0x114>
 80021e6:	0039      	movs	r1, r7
 80021e8:	3a20      	subs	r2, #32
 80021ea:	40d1      	lsrs	r1, r2
 80021ec:	4662      	mov	r2, ip
 80021ee:	2a20      	cmp	r2, #32
 80021f0:	d006      	beq.n	8002200 <__aeabi_dsub+0x4d4>
 80021f2:	4664      	mov	r4, ip
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	1b12      	subs	r2, r2, r4
 80021f8:	003c      	movs	r4, r7
 80021fa:	4094      	lsls	r4, r2
 80021fc:	4304      	orrs	r4, r0
 80021fe:	9401      	str	r4, [sp, #4]
 8002200:	9c01      	ldr	r4, [sp, #4]
 8002202:	1e62      	subs	r2, r4, #1
 8002204:	4194      	sbcs	r4, r2
 8002206:	430c      	orrs	r4, r1
 8002208:	e5e3      	b.n	8001dd2 <__aeabi_dsub+0xa6>
 800220a:	4649      	mov	r1, r9
 800220c:	4319      	orrs	r1, r3
 800220e:	000b      	movs	r3, r1
 8002210:	1e5c      	subs	r4, r3, #1
 8002212:	41a3      	sbcs	r3, r4
 8002214:	1ac4      	subs	r4, r0, r3
 8002216:	42a0      	cmp	r0, r4
 8002218:	419b      	sbcs	r3, r3
 800221a:	425b      	negs	r3, r3
 800221c:	1afb      	subs	r3, r7, r3
 800221e:	469a      	mov	sl, r3
 8002220:	465d      	mov	r5, fp
 8002222:	0016      	movs	r6, r2
 8002224:	e5dc      	b.n	8001de0 <__aeabi_dsub+0xb4>
 8002226:	4649      	mov	r1, r9
 8002228:	4319      	orrs	r1, r3
 800222a:	d100      	bne.n	800222e <__aeabi_dsub+0x502>
 800222c:	e0ae      	b.n	800238c <__aeabi_dsub+0x660>
 800222e:	4661      	mov	r1, ip
 8002230:	4664      	mov	r4, ip
 8002232:	3901      	subs	r1, #1
 8002234:	2c01      	cmp	r4, #1
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x50e>
 8002238:	e0e0      	b.n	80023fc <__aeabi_dsub+0x6d0>
 800223a:	4c77      	ldr	r4, [pc, #476]	; (8002418 <__aeabi_dsub+0x6ec>)
 800223c:	45a4      	cmp	ip, r4
 800223e:	d056      	beq.n	80022ee <__aeabi_dsub+0x5c2>
 8002240:	468c      	mov	ip, r1
 8002242:	e69a      	b.n	8001f7a <__aeabi_dsub+0x24e>
 8002244:	4661      	mov	r1, ip
 8002246:	2220      	movs	r2, #32
 8002248:	003c      	movs	r4, r7
 800224a:	1a52      	subs	r2, r2, r1
 800224c:	4094      	lsls	r4, r2
 800224e:	0001      	movs	r1, r0
 8002250:	4090      	lsls	r0, r2
 8002252:	46a0      	mov	r8, r4
 8002254:	4664      	mov	r4, ip
 8002256:	1e42      	subs	r2, r0, #1
 8002258:	4190      	sbcs	r0, r2
 800225a:	4662      	mov	r2, ip
 800225c:	40e1      	lsrs	r1, r4
 800225e:	4644      	mov	r4, r8
 8002260:	40d7      	lsrs	r7, r2
 8002262:	430c      	orrs	r4, r1
 8002264:	4304      	orrs	r4, r0
 8002266:	44b9      	add	r9, r7
 8002268:	e701      	b.n	800206e <__aeabi_dsub+0x342>
 800226a:	496b      	ldr	r1, [pc, #428]	; (8002418 <__aeabi_dsub+0x6ec>)
 800226c:	428a      	cmp	r2, r1
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x546>
 8002270:	e70c      	b.n	800208c <__aeabi_dsub+0x360>
 8002272:	1818      	adds	r0, r3, r0
 8002274:	4298      	cmp	r0, r3
 8002276:	419b      	sbcs	r3, r3
 8002278:	444f      	add	r7, r9
 800227a:	425b      	negs	r3, r3
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	07dc      	lsls	r4, r3, #31
 8002280:	0840      	lsrs	r0, r0, #1
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	469a      	mov	sl, r3
 8002286:	0016      	movs	r6, r2
 8002288:	4304      	orrs	r4, r0
 800228a:	e6d9      	b.n	8002040 <__aeabi_dsub+0x314>
 800228c:	2a00      	cmp	r2, #0
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x566>
 8002290:	e081      	b.n	8002396 <__aeabi_dsub+0x66a>
 8002292:	003b      	movs	r3, r7
 8002294:	4303      	orrs	r3, r0
 8002296:	d11d      	bne.n	80022d4 <__aeabi_dsub+0x5a8>
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	2500      	movs	r5, #0
 800229c:	0312      	lsls	r2, r2, #12
 800229e:	e70b      	b.n	80020b8 <__aeabi_dsub+0x38c>
 80022a0:	08c0      	lsrs	r0, r0, #3
 80022a2:	077b      	lsls	r3, r7, #29
 80022a4:	465d      	mov	r5, fp
 80022a6:	4303      	orrs	r3, r0
 80022a8:	08fa      	lsrs	r2, r7, #3
 80022aa:	e6d3      	b.n	8002054 <__aeabi_dsub+0x328>
 80022ac:	1ac4      	subs	r4, r0, r3
 80022ae:	42a0      	cmp	r0, r4
 80022b0:	4180      	sbcs	r0, r0
 80022b2:	464b      	mov	r3, r9
 80022b4:	4240      	negs	r0, r0
 80022b6:	1aff      	subs	r7, r7, r3
 80022b8:	1a3b      	subs	r3, r7, r0
 80022ba:	469a      	mov	sl, r3
 80022bc:	465d      	mov	r5, fp
 80022be:	e597      	b.n	8001df0 <__aeabi_dsub+0xc4>
 80022c0:	1a1c      	subs	r4, r3, r0
 80022c2:	464a      	mov	r2, r9
 80022c4:	42a3      	cmp	r3, r4
 80022c6:	419b      	sbcs	r3, r3
 80022c8:	1bd7      	subs	r7, r2, r7
 80022ca:	425b      	negs	r3, r3
 80022cc:	1afb      	subs	r3, r7, r3
 80022ce:	469a      	mov	sl, r3
 80022d0:	2601      	movs	r6, #1
 80022d2:	e585      	b.n	8001de0 <__aeabi_dsub+0xb4>
 80022d4:	08c0      	lsrs	r0, r0, #3
 80022d6:	077b      	lsls	r3, r7, #29
 80022d8:	465d      	mov	r5, fp
 80022da:	4303      	orrs	r3, r0
 80022dc:	08fa      	lsrs	r2, r7, #3
 80022de:	e6e7      	b.n	80020b0 <__aeabi_dsub+0x384>
 80022e0:	464a      	mov	r2, r9
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	0752      	lsls	r2, r2, #29
 80022e6:	4313      	orrs	r3, r2
 80022e8:	464a      	mov	r2, r9
 80022ea:	08d2      	lsrs	r2, r2, #3
 80022ec:	e6b5      	b.n	800205a <__aeabi_dsub+0x32e>
 80022ee:	08c0      	lsrs	r0, r0, #3
 80022f0:	077b      	lsls	r3, r7, #29
 80022f2:	4303      	orrs	r3, r0
 80022f4:	08fa      	lsrs	r2, r7, #3
 80022f6:	e6db      	b.n	80020b0 <__aeabi_dsub+0x384>
 80022f8:	4649      	mov	r1, r9
 80022fa:	4319      	orrs	r1, r3
 80022fc:	000b      	movs	r3, r1
 80022fe:	1e59      	subs	r1, r3, #1
 8002300:	418b      	sbcs	r3, r1
 8002302:	001c      	movs	r4, r3
 8002304:	e653      	b.n	8001fae <__aeabi_dsub+0x282>
 8002306:	464d      	mov	r5, r9
 8002308:	3c20      	subs	r4, #32
 800230a:	40e5      	lsrs	r5, r4
 800230c:	2920      	cmp	r1, #32
 800230e:	d005      	beq.n	800231c <__aeabi_dsub+0x5f0>
 8002310:	2440      	movs	r4, #64	; 0x40
 8002312:	1a64      	subs	r4, r4, r1
 8002314:	4649      	mov	r1, r9
 8002316:	40a1      	lsls	r1, r4
 8002318:	430b      	orrs	r3, r1
 800231a:	4698      	mov	r8, r3
 800231c:	4643      	mov	r3, r8
 800231e:	1e5c      	subs	r4, r3, #1
 8002320:	41a3      	sbcs	r3, r4
 8002322:	432b      	orrs	r3, r5
 8002324:	e776      	b.n	8002214 <__aeabi_dsub+0x4e8>
 8002326:	2a00      	cmp	r2, #0
 8002328:	d0e1      	beq.n	80022ee <__aeabi_dsub+0x5c2>
 800232a:	003a      	movs	r2, r7
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	4302      	orrs	r2, r0
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x608>
 8002332:	e6b8      	b.n	80020a6 <__aeabi_dsub+0x37a>
 8002334:	464a      	mov	r2, r9
 8002336:	0752      	lsls	r2, r2, #29
 8002338:	2480      	movs	r4, #128	; 0x80
 800233a:	4313      	orrs	r3, r2
 800233c:	464a      	mov	r2, r9
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	4222      	tst	r2, r4
 8002344:	d007      	beq.n	8002356 <__aeabi_dsub+0x62a>
 8002346:	08fe      	lsrs	r6, r7, #3
 8002348:	4226      	tst	r6, r4
 800234a:	d104      	bne.n	8002356 <__aeabi_dsub+0x62a>
 800234c:	465d      	mov	r5, fp
 800234e:	0032      	movs	r2, r6
 8002350:	08c3      	lsrs	r3, r0, #3
 8002352:	077f      	lsls	r7, r7, #29
 8002354:	433b      	orrs	r3, r7
 8002356:	0f59      	lsrs	r1, r3, #29
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	0749      	lsls	r1, r1, #29
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	430b      	orrs	r3, r1
 8002360:	e6a6      	b.n	80020b0 <__aeabi_dsub+0x384>
 8002362:	1ac4      	subs	r4, r0, r3
 8002364:	42a0      	cmp	r0, r4
 8002366:	4180      	sbcs	r0, r0
 8002368:	464b      	mov	r3, r9
 800236a:	4240      	negs	r0, r0
 800236c:	1aff      	subs	r7, r7, r3
 800236e:	1a3b      	subs	r3, r7, r0
 8002370:	469a      	mov	sl, r3
 8002372:	465d      	mov	r5, fp
 8002374:	2601      	movs	r6, #1
 8002376:	e533      	b.n	8001de0 <__aeabi_dsub+0xb4>
 8002378:	003b      	movs	r3, r7
 800237a:	4303      	orrs	r3, r0
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x654>
 800237e:	e715      	b.n	80021ac <__aeabi_dsub+0x480>
 8002380:	08c0      	lsrs	r0, r0, #3
 8002382:	077b      	lsls	r3, r7, #29
 8002384:	465d      	mov	r5, fp
 8002386:	4303      	orrs	r3, r0
 8002388:	08fa      	lsrs	r2, r7, #3
 800238a:	e666      	b.n	800205a <__aeabi_dsub+0x32e>
 800238c:	08c0      	lsrs	r0, r0, #3
 800238e:	077b      	lsls	r3, r7, #29
 8002390:	4303      	orrs	r3, r0
 8002392:	08fa      	lsrs	r2, r7, #3
 8002394:	e65e      	b.n	8002054 <__aeabi_dsub+0x328>
 8002396:	003a      	movs	r2, r7
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	4302      	orrs	r2, r0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x674>
 800239e:	e682      	b.n	80020a6 <__aeabi_dsub+0x37a>
 80023a0:	464a      	mov	r2, r9
 80023a2:	0752      	lsls	r2, r2, #29
 80023a4:	2480      	movs	r4, #128	; 0x80
 80023a6:	4313      	orrs	r3, r2
 80023a8:	464a      	mov	r2, r9
 80023aa:	0324      	lsls	r4, r4, #12
 80023ac:	08d2      	lsrs	r2, r2, #3
 80023ae:	4222      	tst	r2, r4
 80023b0:	d007      	beq.n	80023c2 <__aeabi_dsub+0x696>
 80023b2:	08fe      	lsrs	r6, r7, #3
 80023b4:	4226      	tst	r6, r4
 80023b6:	d104      	bne.n	80023c2 <__aeabi_dsub+0x696>
 80023b8:	465d      	mov	r5, fp
 80023ba:	0032      	movs	r2, r6
 80023bc:	08c3      	lsrs	r3, r0, #3
 80023be:	077f      	lsls	r7, r7, #29
 80023c0:	433b      	orrs	r3, r7
 80023c2:	0f59      	lsrs	r1, r3, #29
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	0749      	lsls	r1, r1, #29
 80023ca:	430b      	orrs	r3, r1
 80023cc:	e670      	b.n	80020b0 <__aeabi_dsub+0x384>
 80023ce:	08c0      	lsrs	r0, r0, #3
 80023d0:	077b      	lsls	r3, r7, #29
 80023d2:	4303      	orrs	r3, r0
 80023d4:	08fa      	lsrs	r2, r7, #3
 80023d6:	e640      	b.n	800205a <__aeabi_dsub+0x32e>
 80023d8:	464c      	mov	r4, r9
 80023da:	3920      	subs	r1, #32
 80023dc:	40cc      	lsrs	r4, r1
 80023de:	4661      	mov	r1, ip
 80023e0:	2920      	cmp	r1, #32
 80023e2:	d006      	beq.n	80023f2 <__aeabi_dsub+0x6c6>
 80023e4:	4666      	mov	r6, ip
 80023e6:	2140      	movs	r1, #64	; 0x40
 80023e8:	1b89      	subs	r1, r1, r6
 80023ea:	464e      	mov	r6, r9
 80023ec:	408e      	lsls	r6, r1
 80023ee:	4333      	orrs	r3, r6
 80023f0:	4698      	mov	r8, r3
 80023f2:	4643      	mov	r3, r8
 80023f4:	1e59      	subs	r1, r3, #1
 80023f6:	418b      	sbcs	r3, r1
 80023f8:	431c      	orrs	r4, r3
 80023fa:	e5d8      	b.n	8001fae <__aeabi_dsub+0x282>
 80023fc:	181c      	adds	r4, r3, r0
 80023fe:	4284      	cmp	r4, r0
 8002400:	4180      	sbcs	r0, r0
 8002402:	444f      	add	r7, r9
 8002404:	46ba      	mov	sl, r7
 8002406:	4240      	negs	r0, r0
 8002408:	4482      	add	sl, r0
 800240a:	e6d9      	b.n	80021c0 <__aeabi_dsub+0x494>
 800240c:	4653      	mov	r3, sl
 800240e:	4323      	orrs	r3, r4
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x6e8>
 8002412:	e6cb      	b.n	80021ac <__aeabi_dsub+0x480>
 8002414:	e614      	b.n	8002040 <__aeabi_dsub+0x314>
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	000007ff 	.word	0x000007ff
 800241c:	ff7fffff 	.word	0xff7fffff
 8002420:	000007fe 	.word	0x000007fe
 8002424:	2300      	movs	r3, #0
 8002426:	4a01      	ldr	r2, [pc, #4]	; (800242c <__aeabi_dsub+0x700>)
 8002428:	001c      	movs	r4, r3
 800242a:	e529      	b.n	8001e80 <__aeabi_dsub+0x154>
 800242c:	000007ff 	.word	0x000007ff

08002430 <__aeabi_dcmpun>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	0005      	movs	r5, r0
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <__aeabi_dcmpun+0x38>)
 8002436:	031c      	lsls	r4, r3, #12
 8002438:	0016      	movs	r6, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	030a      	lsls	r2, r1, #12
 800243e:	0049      	lsls	r1, r1, #1
 8002440:	0b12      	lsrs	r2, r2, #12
 8002442:	0d49      	lsrs	r1, r1, #21
 8002444:	0b24      	lsrs	r4, r4, #12
 8002446:	0d5b      	lsrs	r3, r3, #21
 8002448:	4281      	cmp	r1, r0
 800244a:	d008      	beq.n	800245e <__aeabi_dcmpun+0x2e>
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <__aeabi_dcmpun+0x38>)
 800244e:	2000      	movs	r0, #0
 8002450:	4293      	cmp	r3, r2
 8002452:	d103      	bne.n	800245c <__aeabi_dcmpun+0x2c>
 8002454:	0020      	movs	r0, r4
 8002456:	4330      	orrs	r0, r6
 8002458:	1e43      	subs	r3, r0, #1
 800245a:	4198      	sbcs	r0, r3
 800245c:	bd70      	pop	{r4, r5, r6, pc}
 800245e:	2001      	movs	r0, #1
 8002460:	432a      	orrs	r2, r5
 8002462:	d1fb      	bne.n	800245c <__aeabi_dcmpun+0x2c>
 8002464:	e7f2      	b.n	800244c <__aeabi_dcmpun+0x1c>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	000007ff 	.word	0x000007ff

0800246c <__aeabi_d2iz>:
 800246c:	000a      	movs	r2, r1
 800246e:	b530      	push	{r4, r5, lr}
 8002470:	4c13      	ldr	r4, [pc, #76]	; (80024c0 <__aeabi_d2iz+0x54>)
 8002472:	0053      	lsls	r3, r2, #1
 8002474:	0309      	lsls	r1, r1, #12
 8002476:	0005      	movs	r5, r0
 8002478:	0b09      	lsrs	r1, r1, #12
 800247a:	2000      	movs	r0, #0
 800247c:	0d5b      	lsrs	r3, r3, #21
 800247e:	0fd2      	lsrs	r2, r2, #31
 8002480:	42a3      	cmp	r3, r4
 8002482:	dd04      	ble.n	800248e <__aeabi_d2iz+0x22>
 8002484:	480f      	ldr	r0, [pc, #60]	; (80024c4 <__aeabi_d2iz+0x58>)
 8002486:	4283      	cmp	r3, r0
 8002488:	dd02      	ble.n	8002490 <__aeabi_d2iz+0x24>
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <__aeabi_d2iz+0x5c>)
 800248c:	18d0      	adds	r0, r2, r3
 800248e:	bd30      	pop	{r4, r5, pc}
 8002490:	2080      	movs	r0, #128	; 0x80
 8002492:	0340      	lsls	r0, r0, #13
 8002494:	4301      	orrs	r1, r0
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <__aeabi_d2iz+0x60>)
 8002498:	1ac0      	subs	r0, r0, r3
 800249a:	281f      	cmp	r0, #31
 800249c:	dd08      	ble.n	80024b0 <__aeabi_d2iz+0x44>
 800249e:	480c      	ldr	r0, [pc, #48]	; (80024d0 <__aeabi_d2iz+0x64>)
 80024a0:	1ac3      	subs	r3, r0, r3
 80024a2:	40d9      	lsrs	r1, r3
 80024a4:	000b      	movs	r3, r1
 80024a6:	4258      	negs	r0, r3
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d1f0      	bne.n	800248e <__aeabi_d2iz+0x22>
 80024ac:	0018      	movs	r0, r3
 80024ae:	e7ee      	b.n	800248e <__aeabi_d2iz+0x22>
 80024b0:	4c08      	ldr	r4, [pc, #32]	; (80024d4 <__aeabi_d2iz+0x68>)
 80024b2:	40c5      	lsrs	r5, r0
 80024b4:	46a4      	mov	ip, r4
 80024b6:	4463      	add	r3, ip
 80024b8:	4099      	lsls	r1, r3
 80024ba:	000b      	movs	r3, r1
 80024bc:	432b      	orrs	r3, r5
 80024be:	e7f2      	b.n	80024a6 <__aeabi_d2iz+0x3a>
 80024c0:	000003fe 	.word	0x000003fe
 80024c4:	0000041d 	.word	0x0000041d
 80024c8:	7fffffff 	.word	0x7fffffff
 80024cc:	00000433 	.word	0x00000433
 80024d0:	00000413 	.word	0x00000413
 80024d4:	fffffbed 	.word	0xfffffbed

080024d8 <__aeabi_i2d>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	2800      	cmp	r0, #0
 80024dc:	d016      	beq.n	800250c <__aeabi_i2d+0x34>
 80024de:	17c3      	asrs	r3, r0, #31
 80024e0:	18c5      	adds	r5, r0, r3
 80024e2:	405d      	eors	r5, r3
 80024e4:	0fc4      	lsrs	r4, r0, #31
 80024e6:	0028      	movs	r0, r5
 80024e8:	f000 f84c 	bl	8002584 <__clzsi2>
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <__aeabi_i2d+0x5c>)
 80024ee:	1a1b      	subs	r3, r3, r0
 80024f0:	280a      	cmp	r0, #10
 80024f2:	dc16      	bgt.n	8002522 <__aeabi_i2d+0x4a>
 80024f4:	0002      	movs	r2, r0
 80024f6:	002e      	movs	r6, r5
 80024f8:	3215      	adds	r2, #21
 80024fa:	4096      	lsls	r6, r2
 80024fc:	220b      	movs	r2, #11
 80024fe:	1a12      	subs	r2, r2, r0
 8002500:	40d5      	lsrs	r5, r2
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	032d      	lsls	r5, r5, #12
 8002506:	0b2d      	lsrs	r5, r5, #12
 8002508:	0d5b      	lsrs	r3, r3, #21
 800250a:	e003      	b.n	8002514 <__aeabi_i2d+0x3c>
 800250c:	2400      	movs	r4, #0
 800250e:	2300      	movs	r3, #0
 8002510:	2500      	movs	r5, #0
 8002512:	2600      	movs	r6, #0
 8002514:	051b      	lsls	r3, r3, #20
 8002516:	432b      	orrs	r3, r5
 8002518:	07e4      	lsls	r4, r4, #31
 800251a:	4323      	orrs	r3, r4
 800251c:	0030      	movs	r0, r6
 800251e:	0019      	movs	r1, r3
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	380b      	subs	r0, #11
 8002524:	4085      	lsls	r5, r0
 8002526:	055b      	lsls	r3, r3, #21
 8002528:	032d      	lsls	r5, r5, #12
 800252a:	2600      	movs	r6, #0
 800252c:	0b2d      	lsrs	r5, r5, #12
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	e7f0      	b.n	8002514 <__aeabi_i2d+0x3c>
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	0000041e 	.word	0x0000041e

08002538 <__aeabi_ui2d>:
 8002538:	b510      	push	{r4, lr}
 800253a:	1e04      	subs	r4, r0, #0
 800253c:	d010      	beq.n	8002560 <__aeabi_ui2d+0x28>
 800253e:	f000 f821 	bl	8002584 <__clzsi2>
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <__aeabi_ui2d+0x48>)
 8002544:	1a1b      	subs	r3, r3, r0
 8002546:	280a      	cmp	r0, #10
 8002548:	dc11      	bgt.n	800256e <__aeabi_ui2d+0x36>
 800254a:	220b      	movs	r2, #11
 800254c:	0021      	movs	r1, r4
 800254e:	1a12      	subs	r2, r2, r0
 8002550:	40d1      	lsrs	r1, r2
 8002552:	3015      	adds	r0, #21
 8002554:	030a      	lsls	r2, r1, #12
 8002556:	055b      	lsls	r3, r3, #21
 8002558:	4084      	lsls	r4, r0
 800255a:	0b12      	lsrs	r2, r2, #12
 800255c:	0d5b      	lsrs	r3, r3, #21
 800255e:	e001      	b.n	8002564 <__aeabi_ui2d+0x2c>
 8002560:	2300      	movs	r3, #0
 8002562:	2200      	movs	r2, #0
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	4313      	orrs	r3, r2
 8002568:	0020      	movs	r0, r4
 800256a:	0019      	movs	r1, r3
 800256c:	bd10      	pop	{r4, pc}
 800256e:	0022      	movs	r2, r4
 8002570:	380b      	subs	r0, #11
 8002572:	4082      	lsls	r2, r0
 8002574:	055b      	lsls	r3, r3, #21
 8002576:	0312      	lsls	r2, r2, #12
 8002578:	2400      	movs	r4, #0
 800257a:	0b12      	lsrs	r2, r2, #12
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	e7f1      	b.n	8002564 <__aeabi_ui2d+0x2c>
 8002580:	0000041e 	.word	0x0000041e

08002584 <__clzsi2>:
 8002584:	211c      	movs	r1, #28
 8002586:	2301      	movs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	4298      	cmp	r0, r3
 800258c:	d301      	bcc.n	8002592 <__clzsi2+0xe>
 800258e:	0c00      	lsrs	r0, r0, #16
 8002590:	3910      	subs	r1, #16
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	4298      	cmp	r0, r3
 8002596:	d301      	bcc.n	800259c <__clzsi2+0x18>
 8002598:	0a00      	lsrs	r0, r0, #8
 800259a:	3908      	subs	r1, #8
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	4298      	cmp	r0, r3
 80025a0:	d301      	bcc.n	80025a6 <__clzsi2+0x22>
 80025a2:	0900      	lsrs	r0, r0, #4
 80025a4:	3904      	subs	r1, #4
 80025a6:	a202      	add	r2, pc, #8	; (adr r2, 80025b0 <__clzsi2+0x2c>)
 80025a8:	5c10      	ldrb	r0, [r2, r0]
 80025aa:	1840      	adds	r0, r0, r1
 80025ac:	4770      	bx	lr
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	02020304 	.word	0x02020304
 80025b4:	01010101 	.word	0x01010101
	...

080025c0 <__clzdi2>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	2900      	cmp	r1, #0
 80025c4:	d103      	bne.n	80025ce <__clzdi2+0xe>
 80025c6:	f7ff ffdd 	bl	8002584 <__clzsi2>
 80025ca:	3020      	adds	r0, #32
 80025cc:	e002      	b.n	80025d4 <__clzdi2+0x14>
 80025ce:	0008      	movs	r0, r1
 80025d0:	f7ff ffd8 	bl	8002584 <__clzsi2>
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)

080025d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025dc:	f000 fd8a 	bl	80030f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e0:	f000 f870 	bl	80026c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e4:	f000 f9d6 	bl	8002994 <MX_GPIO_Init>
  MX_I2C2_Init();
 80025e8:	f000 f8b4 	bl	8002754 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80025ec:	f000 f99e 	bl	800292c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80025f0:	f000 f972 	bl	80028d8 <MX_TIM17_Init>
  MX_TIM3_Init();
 80025f4:	f000 f8ee 	bl	80027d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim17);					// Starting Timer Interrupt for Sensor Readings
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <main+0xd0>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f002 fc74 	bl	8004ee8 <HAL_TIM_Base_Start_IT>


  //AutonomousLowPowerRangingTest();

  status = VL53L1_RdByte(dev, 0x010F, &byteData);
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <main+0xd4>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <main+0xd8>)
 8002606:	2110      	movs	r1, #16
 8002608:	31ff      	adds	r1, #255	; 0xff
 800260a:	0018      	movs	r0, r3
 800260c:	f004 fd18 	bl	8007040 <VL53L1_RdByte>
 8002610:	0003      	movs	r3, r0
 8002612:	001a      	movs	r2, r3
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <main+0xdc>)
 8002616:	601a      	str	r2, [r3, #0]
  status = VL53L1_RdByte(dev, 0x0110, &byteData);
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <main+0xd4>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <main+0xd8>)
 800261e:	2188      	movs	r1, #136	; 0x88
 8002620:	0049      	lsls	r1, r1, #1
 8002622:	0018      	movs	r0, r3
 8002624:	f004 fd0c 	bl	8007040 <VL53L1_RdByte>
 8002628:	0003      	movs	r3, r0
 800262a:	001a      	movs	r2, r3
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <main+0xdc>)
 800262e:	601a      	str	r2, [r3, #0]
  status = VL53L1_RdWord(dev, 0x010F, &wordData);
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <main+0xd4>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <main+0xe0>)
 8002636:	2110      	movs	r1, #16
 8002638:	31ff      	adds	r1, #255	; 0xff
 800263a:	0018      	movs	r0, r3
 800263c:	f004 fd24 	bl	8007088 <VL53L1_RdWord>
 8002640:	0003      	movs	r3, r0
 8002642:	001a      	movs	r2, r3
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <main+0xdc>)
 8002646:	601a      	str	r2, [r3, #0]

  while(sensorState==0){
 8002648:	e00d      	b.n	8002666 <main+0x8e>

	 status = VL53L1X_BootState(dev, &sensorState);
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <main+0xd4>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <main+0xe4>)
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f004 fc7c 	bl	8006f50 <VL53L1X_BootState>
 8002658:	0003      	movs	r3, r0
 800265a:	001a      	movs	r2, r3
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <main+0xdc>)
 800265e:	601a      	str	r2, [r3, #0]
	 HAL_Delay(2);
 8002660:	2002      	movs	r0, #2
 8002662:	f000 fdcd 	bl	8003200 <HAL_Delay>
  while(sensorState==0){
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <main+0xe4>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ed      	beq.n	800264a <main+0x72>

  }

  status = VL53L1X_SensorInit(dev);
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <main+0xd4>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f004 fafe 	bl	8006c74 <VL53L1X_SensorInit>
 8002678:	0003      	movs	r3, r0
 800267a:	001a      	movs	r2, r3
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <main+0xdc>)
 800267e:	601a      	str	r2, [r3, #0]
  status = VL53L1X_StartRanging(dev);   /* This function has to be called to enable the ranging */
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <main+0xd4>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f004 fbdf 	bl	8006e48 <VL53L1X_StartRanging>
 800268a:	0003      	movs	r3, r0
 800268c:	001a      	movs	r2, r3
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <main+0xdc>)
 8002690:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR.
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <main+0xe8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	22fa      	movs	r2, #250	; 0xfa
 8002698:	0052      	lsls	r2, r2, #1
 800269a:	635a      	str	r2, [r3, #52]	; 0x34

	 ModeSelect();
 800269c:	f000 fa2c 	bl	8002af8 <ModeSelect>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

   AutonomousLowPowerRangingTest();
 80026a0:	f000 f9da 	bl	8002a58 <AutonomousLowPowerRangingTest>
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR.
 80026a4:	e7f5      	b.n	8002692 <main+0xba>
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	200002e4 	.word	0x200002e4
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000208 	.word	0x20000208
 80026b4:	20000204 	.word	0x20000204
 80026b8:	2000020a 	.word	0x2000020a
 80026bc:	20000209 	.word	0x20000209
 80026c0:	20000298 	.word	0x20000298

080026c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b093      	sub	sp, #76	; 0x4c
 80026c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ca:	2410      	movs	r4, #16
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	0018      	movs	r0, r3
 80026d0:	2338      	movs	r3, #56	; 0x38
 80026d2:	001a      	movs	r2, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	f005 fab7 	bl	8007c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026da:	003b      	movs	r3, r7
 80026dc:	0018      	movs	r0, r3
 80026de:	2310      	movs	r3, #16
 80026e0:	001a      	movs	r2, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	f005 fab0 	bl	8007c48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f001 fe93 	bl	8004418 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0052      	lsls	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002700:	193b      	adds	r3, r7, r4
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002706:	193b      	adds	r3, r7, r4
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800270c:	193b      	adds	r3, r7, r4
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002712:	193b      	adds	r3, r7, r4
 8002714:	0018      	movs	r0, r3
 8002716:	f001 fecb 	bl	80044b0 <HAL_RCC_OscConfig>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800271e:	f000 fa9d 	bl	8002c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002722:	003b      	movs	r3, r7
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002728:	003b      	movs	r3, r7
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272e:	003b      	movs	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002734:	003b      	movs	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800273a:	003b      	movs	r3, r7
 800273c:	2100      	movs	r1, #0
 800273e:	0018      	movs	r0, r3
 8002740:	f002 f9d0 	bl	8004ae4 <HAL_RCC_ClockConfig>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002748:	f000 fa88 	bl	8002c5c <Error_Handler>
  }
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b013      	add	sp, #76	; 0x4c
 8002752:	bd90      	pop	{r4, r7, pc}

08002754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_I2C2_Init+0x74>)
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <MX_I2C2_Init+0x78>)
 800275c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <MX_I2C2_Init+0x7c>)
 8002762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_I2C2_Init+0x74>)
 800276c:	2201      	movs	r2, #1
 800276e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_I2C2_Init+0x74>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002784:	2200      	movs	r2, #0
 8002786:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_I2C2_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_I2C2_Init+0x74>)
 8002790:	0018      	movs	r0, r3
 8002792:	f000 ffd5 	bl	8003740 <HAL_I2C_Init>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800279a:	f000 fa5f 	bl	8002c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <MX_I2C2_Init+0x74>)
 80027a0:	2100      	movs	r1, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f001 fda0 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027ac:	f000 fa56 	bl	8002c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <MX_I2C2_Init+0x74>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 fde3 	bl	8004380 <HAL_I2CEx_ConfigDigitalFilter>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80027be:	f000 fa4d 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000244 	.word	0x20000244
 80027cc:	40005800 	.word	0x40005800
 80027d0:	00303d5b 	.word	0x00303d5b

080027d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	2328      	movs	r3, #40	; 0x28
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	0018      	movs	r0, r3
 80027e0:	2310      	movs	r3, #16
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f005 fa2f 	bl	8007c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ea:	231c      	movs	r3, #28
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	0018      	movs	r0, r3
 80027f0:	230c      	movs	r3, #12
 80027f2:	001a      	movs	r2, r3
 80027f4:	2100      	movs	r1, #0
 80027f6:	f005 fa27 	bl	8007c48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027fa:	003b      	movs	r3, r7
 80027fc:	0018      	movs	r0, r3
 80027fe:	231c      	movs	r3, #28
 8002800:	001a      	movs	r2, r3
 8002802:	2100      	movs	r1, #0
 8002804:	f005 fa20 	bl	8007c48 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <MX_TIM3_Init+0xf8>)
 800280c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <MX_TIM3_Init+0xf4>)
 8002810:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <MX_TIM3_Init+0xfc>)
 8002812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <MX_TIM3_Init+0xf4>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800281a:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <MX_TIM3_Init+0x100>)
 800281e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <MX_TIM3_Init+0xf4>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <MX_TIM3_Init+0xf4>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800282e:	0018      	movs	r0, r3
 8002830:	f002 fb02 	bl	8004e38 <HAL_TIM_Base_Init>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002838:	f000 fa10 	bl	8002c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800283c:	2128      	movs	r1, #40	; 0x28
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	0152      	lsls	r2, r2, #5
 8002844:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002846:	187a      	adds	r2, r7, r1
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f002 ff95 	bl	800577c <HAL_TIM_ConfigClockSource>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d001      	beq.n	800285a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002856:	f000 fa01 	bl	8002c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800285c:	0018      	movs	r0, r3
 800285e:	f002 fb97 	bl	8004f90 <HAL_TIM_PWM_Init>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d001      	beq.n	800286a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002866:	f000 f9f9 	bl	8002c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800286a:	211c      	movs	r1, #28
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002878:	187a      	adds	r2, r7, r1
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MX_TIM3_Init+0xf4>)
 800287c:	0011      	movs	r1, r2
 800287e:	0018      	movs	r0, r3
 8002880:	f003 fc44 	bl	800610c <HAL_TIMEx_MasterConfigSynchronization>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002888:	f000 f9e8 	bl	8002c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800288c:	003b      	movs	r3, r7
 800288e:	2260      	movs	r2, #96	; 0x60
 8002890:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002892:	003b      	movs	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002898:	003b      	movs	r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289e:	003b      	movs	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a4:	0039      	movs	r1, r7
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_TIM3_Init+0xf4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 fe66 	bl	800557c <HAL_TIM_PWM_ConfigChannel>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80028b4:	f000 f9d2 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <MX_TIM3_Init+0xf4>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 fa80 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b00e      	add	sp, #56	; 0x38
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000298 	.word	0x20000298
 80028cc:	40000400 	.word	0x40000400
 80028d0:	00000f9f 	.word	0x00000f9f
 80028d4:	000003e7 	.word	0x000003e7

080028d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <MX_TIM17_Init+0x44>)
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <MX_TIM17_Init+0x48>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <MX_TIM17_Init+0x44>)
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <MX_TIM17_Init+0x4c>)
 80028e6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <MX_TIM17_Init+0x44>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 60000-1;
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <MX_TIM17_Init+0x44>)
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <MX_TIM17_Init+0x50>)
 80028f2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <MX_TIM17_Init+0x44>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <MX_TIM17_Init+0x44>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <MX_TIM17_Init+0x44>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <MX_TIM17_Init+0x44>)
 8002908:	0018      	movs	r0, r3
 800290a:	f002 fa95 	bl	8004e38 <HAL_TIM_Base_Init>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002912:	f000 f9a3 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200002e4 	.word	0x200002e4
 8002920:	40014800 	.word	0x40014800
 8002924:	00001f3f 	.word	0x00001f3f
 8002928:	0000ea5f 	.word	0x0000ea5f

0800292c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002932:	4a17      	ldr	r2, [pc, #92]	; (8002990 <MX_USART2_UART_Init+0x64>)
 8002934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002938:	22e1      	movs	r2, #225	; 0xe1
 800293a:	0252      	lsls	r2, r2, #9
 800293c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <MX_USART2_UART_Init+0x60>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002952:	220c      	movs	r2, #12
 8002954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_USART2_UART_Init+0x60>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_USART2_UART_Init+0x60>)
 800296a:	2200      	movs	r2, #0
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002970:	2200      	movs	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <MX_USART2_UART_Init+0x60>)
 8002976:	0018      	movs	r0, r3
 8002978:	f003 fc48 	bl	800620c <HAL_UART_Init>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002980:	f000 f96c 	bl	8002c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000330 	.word	0x20000330
 8002990:	40004400 	.word	0x40004400

08002994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	240c      	movs	r4, #12
 800299c:	193b      	adds	r3, r7, r4
 800299e:	0018      	movs	r0, r3
 80029a0:	2314      	movs	r3, #20
 80029a2:	001a      	movs	r2, r3
 80029a4:	2100      	movs	r1, #0
 80029a6:	f005 f94f 	bl	8007c48 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029b0:	2104      	movs	r1, #4
 80029b2:	430a      	orrs	r2, r1
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	2204      	movs	r2, #4
 80029bc:	4013      	ands	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029e0:	2102      	movs	r1, #2
 80029e2:	430a      	orrs	r2, r1
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <MX_GPIO_Init+0xb8>)
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTR_RELAY_GPIO_Port, MTR_RELAY_Pin, GPIO_PIN_RESET);
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_GPIO_Init+0xbc>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	2108      	movs	r1, #8
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 fe84 	bl	8003706 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B_INPUT_Pin A_INPUT_Pin TRIGGER_INPUT_Pin */
  GPIO_InitStruct.Pin = B_INPUT_Pin|A_INPUT_Pin|TRIGGER_INPUT_Pin;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <MX_GPIO_Init+0xc0>)
 8002a02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	193a      	adds	r2, r7, r4
 8002a12:	23a0      	movs	r3, #160	; 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	0011      	movs	r1, r2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fcf3 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pin : MTR_RELAY_Pin */
  GPIO_InitStruct.Pin = MTR_RELAY_Pin;
 8002a1e:	0021      	movs	r1, r4
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	2208      	movs	r2, #8
 8002a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2201      	movs	r2, #1
 8002a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MTR_RELAY_GPIO_Port, &GPIO_InitStruct);
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <MX_GPIO_Init+0xbc>)
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	0010      	movs	r0, r2
 8002a40:	f000 fce0 	bl	8003404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b009      	add	sp, #36	; 0x24
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	50000400 	.word	0x50000400
 8002a54:	00000403 	.word	0x00000403

08002a58 <AutonomousLowPowerRangingTest>:

/* USER CODE BEGIN 4 */

void AutonomousLowPowerRangingTest(void)
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0

	  while (dataReady == 0){
 8002a5c:	e00d      	b.n	8002a7a <AutonomousLowPowerRangingTest+0x22>

		  status = VL53L1X_CheckForDataReady(dev, &dataReady);
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <AutonomousLowPowerRangingTest+0x84>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <AutonomousLowPowerRangingTest+0x88>)
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f004 fa2c 	bl	8006ec4 <VL53L1X_CheckForDataReady>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	001a      	movs	r2, r3
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <AutonomousLowPowerRangingTest+0x8c>)
 8002a72:	601a      	str	r2, [r3, #0]
		  HAL_Delay(2);
 8002a74:	2002      	movs	r0, #2
 8002a76:	f000 fbc3 	bl	8003200 <HAL_Delay>
	  while (dataReady == 0){
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <AutonomousLowPowerRangingTest+0x88>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ed      	beq.n	8002a5e <AutonomousLowPowerRangingTest+0x6>

	  }
	  dataReady = 0;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <AutonomousLowPowerRangingTest+0x88>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

	  status = VL53L1X_GetDistance(dev, &Distance);
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <AutonomousLowPowerRangingTest+0x84>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <AutonomousLowPowerRangingTest+0x90>)
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f004 fa85 	bl	8006fa0 <VL53L1X_GetDistance>
 8002a96:	0003      	movs	r3, r0
 8002a98:	001a      	movs	r2, r3
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <AutonomousLowPowerRangingTest+0x8c>)
 8002a9c:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <AutonomousLowPowerRangingTest+0x84>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f004 f97e 	bl	8006da4 <VL53L1X_ClearInterrupt>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	001a      	movs	r2, r3
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <AutonomousLowPowerRangingTest+0x8c>)
 8002aae:	601a      	str	r2, [r3, #0]

	  sprintf(buff,"%d \n\r",Distance);
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <AutonomousLowPowerRangingTest+0x90>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <AutonomousLowPowerRangingTest+0x94>)
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <AutonomousLowPowerRangingTest+0x98>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f005 f858 	bl	8007b70 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, sizeof(buff), 200);
 8002ac0:	490b      	ldr	r1, [pc, #44]	; (8002af0 <AutonomousLowPowerRangingTest+0x98>)
 8002ac2:	480c      	ldr	r0, [pc, #48]	; (8002af4 <AutonomousLowPowerRangingTest+0x9c>)
 8002ac4:	23c8      	movs	r3, #200	; 0xc8
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	f003 fbf6 	bl	80062b8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8002acc:	23fa      	movs	r3, #250	; 0xfa
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fb95 	bl	8003200 <HAL_Delay>

	}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	2000020e 	.word	0x2000020e
 8002ae4:	20000204 	.word	0x20000204
 8002ae8:	2000020c 	.word	0x2000020c
 8002aec:	08009f80 	.word	0x08009f80
 8002af0:	200001f4 	.word	0x200001f4
 8002af4:	20000330 	.word	0x20000330

08002af8 <ModeSelect>:


void ModeSelect()
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	af00      	add	r7, sp, #0
		a = HAL_GPIO_ReadPin(GPIOA, A_INPUT_Pin);		// Reads Input for Auto/Manual
 8002afc:	23a0      	movs	r3, #160	; 0xa0
 8002afe:	05db      	lsls	r3, r3, #23
 8002b00:	2102      	movs	r1, #2
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fde2 	bl	80036cc <HAL_GPIO_ReadPin>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <ModeSelect+0x130>)
 8002b0e:	701a      	strb	r2, [r3, #0]
		b = HAL_GPIO_ReadPin(GPIOA, B_INPUT_Pin);		// Reads Input for Auto/Manual
 8002b10:	23a0      	movs	r3, #160	; 0xa0
 8002b12:	05db      	lsls	r3, r3, #23
 8002b14:	2101      	movs	r1, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 fdd8 	bl	80036cc <HAL_GPIO_ReadPin>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	001a      	movs	r2, r3
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <ModeSelect+0x134>)
 8002b22:	701a      	strb	r2, [r3, #0]

		newTrigState = HAL_GPIO_ReadPin(GPIOA, TRIGGER_INPUT_Pin);		// Reads Input from the Trigger Pin
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	00da      	lsls	r2, r3, #3
 8002b28:	23a0      	movs	r3, #160	; 0xa0
 8002b2a:	05db      	lsls	r3, r3, #23
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fdcc 	bl	80036cc <HAL_GPIO_ReadPin>
 8002b34:	0003      	movs	r3, r0
 8002b36:	001a      	movs	r2, r3
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <ModeSelect+0x138>)
 8002b3a:	701a      	strb	r2, [r3, #0]



		if((a==0) && (b==1)){						// The switch is in Manual Mode
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <ModeSelect+0x130>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d134      	bne.n	8002bae <ModeSelect+0xb6>
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <ModeSelect+0x134>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d130      	bne.n	8002bae <ModeSelect+0xb6>

			if(newTrigState==0 && prevTrigBtnState==1){    //If the state has changed, increment the counter
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <ModeSelect+0x138>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d127      	bne.n	8002ba4 <ModeSelect+0xac>
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <ModeSelect+0x13c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d123      	bne.n	8002ba4 <ModeSelect+0xac>

			    	if(MotorState == 0){        //If the current state is LOW, then the button went from off to on
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <ModeSelect+0x140>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10e      	bne.n	8002b82 <ModeSelect+0x8a>

			    		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);			//  Motor_On Blinky Status
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <ModeSelect+0x144>)
 8002b66:	2100      	movs	r1, #0
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f002 fa71 	bl	8005050 <HAL_TIM_PWM_Start>
			    		HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <ModeSelect+0x148>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	2108      	movs	r1, #8
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fdc6 	bl	8003706 <HAL_GPIO_WritePin>
			    		MotorState=1;
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <ModeSelect+0x140>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e00d      	b.n	8002b9e <ModeSelect+0xa6>

				    	}else{

				    	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <ModeSelect+0x144>)
 8002b84:	2100      	movs	r1, #0
 8002b86:	0018      	movs	r0, r3
 8002b88:	f002 fb40 	bl	800520c <HAL_TIM_PWM_Stop>
				    	HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <ModeSelect+0x148>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2108      	movs	r1, #8
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 fdb7 	bl	8003706 <HAL_GPIO_WritePin>
				    	MotorState=0;
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <ModeSelect+0x140>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
				    	}
			    	HAL_Delay(20);
 8002b9e:	2014      	movs	r0, #20
 8002ba0:	f000 fb2e 	bl	8003200 <HAL_Delay>

				    }
			prevTrigBtnState = newTrigState;
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <ModeSelect+0x138>)
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <ModeSelect+0x13c>)
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e038      	b.n	8002c20 <ModeSelect+0x128>



		   }else if((a==1) && (b==0)){						// The switch is in Auto Mode
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <ModeSelect+0x130>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d12d      	bne.n	8002c12 <ModeSelect+0x11a>
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <ModeSelect+0x134>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d129      	bne.n	8002c12 <ModeSelect+0x11a>

					if((newTrigState == 1) && ((sensor_Read.out) <= Threshold_max)){
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <ModeSelect+0x138>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d119      	bne.n	8002bfa <ModeSelect+0x102>
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <ModeSelect+0x14c>)
 8002bc8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <ModeSelect+0x150>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd fe3e 	bl	8000850 <__aeabi_i2f>
 8002bd4:	1c03      	adds	r3, r0, #0
 8002bd6:	1c19      	adds	r1, r3, #0
 8002bd8:	1c20      	adds	r0, r4, #0
 8002bda:	f7fd fc7f 	bl	80004dc <__aeabi_fcmple>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d00b      	beq.n	8002bfa <ModeSelect+0x102>

						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <ModeSelect+0x144>)
 8002be4:	2100      	movs	r1, #0
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 fa32 	bl	8005050 <HAL_TIM_PWM_Start>
						HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <ModeSelect+0x148>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2108      	movs	r1, #8
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fd87 	bl	8003706 <HAL_GPIO_WritePin>
					if((newTrigState == 1) && ((sensor_Read.out) <= Threshold_max)){
 8002bf8:	e012      	b.n	8002c20 <ModeSelect+0x128>

					}else{

						HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <ModeSelect+0x144>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 fb04 	bl	800520c <HAL_TIM_PWM_Stop>
					    HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <ModeSelect+0x148>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2108      	movs	r1, #8
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fd7b 	bl	8003706 <HAL_GPIO_WritePin>
					if((newTrigState == 1) && ((sensor_Read.out) <= Threshold_max)){
 8002c10:	e006      	b.n	8002c20 <ModeSelect+0x128>
					}

		   }else {						// The switch is in Off/Center Mode

						HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <ModeSelect+0x148>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	2108      	movs	r1, #8
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fd74 	bl	8003706 <HAL_GPIO_WritePin>
		         }

}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bdb0      	pop	{r4, r5, r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	2000020f 	.word	0x2000020f
 8002c2c:	20000210 	.word	0x20000210
 8002c30:	20000211 	.word	0x20000211
 8002c34:	20000002 	.word	0x20000002
 8002c38:	20000213 	.word	0x20000213
 8002c3c:	20000298 	.word	0x20000298
 8002c40:	50000400 	.word	0x50000400
 8002c44:	20000214 	.word	0x20000214
 8002c48:	20000212 	.word	0x20000212

08002c4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)

{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if(htim == &htim17){

 //  AutonomousLowPowerRangingTest();				//This function or API triggers after every 30s. Update Event handler.
  }

}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <Error_Handler+0x8>
	...

08002c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_MspInit+0x44>)
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_MspInit+0x44>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_MspInit+0x44>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_MspInit+0x44>)
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_MspInit+0x44>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0549      	lsls	r1, r1, #21
 8002c90:	430a      	orrs	r2, r1
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_MspInit+0x44>)
 8002c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	055b      	lsls	r3, r3, #21
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08b      	sub	sp, #44	; 0x2c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	2414      	movs	r4, #20
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	2314      	movs	r3, #20
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f004 ffc0 	bl	8007c48 <memset>
  if(hi2c->Instance==I2C2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_I2C_MspInit+0x90>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d131      	bne.n	8002d36 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	22c0      	movs	r2, #192	; 0xc0
 8002cee:	0152      	lsls	r2, r2, #5
 8002cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf2:	0021      	movs	r1, r4
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2212      	movs	r2, #18
 8002cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2206      	movs	r2, #6
 8002d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	187a      	adds	r2, r7, r1
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fb75 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	03c9      	lsls	r1, r1, #15
 8002d24:	430a      	orrs	r2, r1
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_I2C_MspInit+0x94>)
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	03db      	lsls	r3, r3, #15
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b00b      	add	sp, #44	; 0x2c
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40005800 	.word	0x40005800
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_TIM_Base_MspInit+0x6c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d60:	2102      	movs	r1, #2
 8002d62:	430a      	orrs	r2, r1
 8002d64:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d72:	e01a      	b.n	8002daa <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_TIM_Base_MspInit+0x74>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d115      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	02c9      	lsls	r1, r1, #11
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_TIM_Base_MspInit+0x70>)
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	02db      	lsls	r3, r3, #11
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2016      	movs	r0, #22
 8002da0:	f000 fafe 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002da4:	2016      	movs	r0, #22
 8002da6:	f000 fb10 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40014800 	.word	0x40014800

08002dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	240c      	movs	r4, #12
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	0018      	movs	r0, r3
 8002dce:	2314      	movs	r3, #20
 8002dd0:	001a      	movs	r2, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f004 ff38 	bl	8007c48 <memset>
  if(htim->Instance==TIM3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_TIM_MspPostInit+0x70>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d121      	bne.n	8002e26 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_TIM_MspPostInit+0x74>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_TIM_MspPostInit+0x74>)
 8002de8:	2102      	movs	r1, #2
 8002dea:	430a      	orrs	r2, r1
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_TIM_MspPostInit+0x74>)
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MTR_LED_STATS_Pin;
 8002dfa:	0021      	movs	r1, r4
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2210      	movs	r2, #16
 8002e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	2202      	movs	r2, #2
 8002e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	2201      	movs	r2, #1
 8002e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MTR_LED_STATS_GPIO_Port, &GPIO_InitStruct);
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <HAL_TIM_MspPostInit+0x78>)
 8002e1e:	0019      	movs	r1, r3
 8002e20:	0010      	movs	r0, r2
 8002e22:	f000 faef 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b009      	add	sp, #36	; 0x24
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40021000 	.word	0x40021000
 8002e38:	50000400 	.word	0x50000400

08002e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b08b      	sub	sp, #44	; 0x2c
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	2414      	movs	r4, #20
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	0018      	movs	r0, r3
 8002e4a:	2314      	movs	r3, #20
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f004 fefa 	bl	8007c48 <memset>
  if(huart->Instance==USART2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0x8c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0289      	lsls	r1, r1, #10
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	029b      	lsls	r3, r3, #10
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_UART_MspInit+0x90>)
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e92:	0021      	movs	r1, r4
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	220c      	movs	r2, #12
 8002e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2201      	movs	r2, #1
 8002eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	187a      	adds	r2, r7, r1
 8002eb4:	23a0      	movs	r3, #160	; 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 faa2 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b00b      	add	sp, #44	; 0x2c
 8002ec6:	bd90      	pop	{r4, r7, pc}
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef4:	f000 f968 	bl	80031c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <TIM17_IRQHandler+0x14>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f002 fa06 	bl	8005318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	200002e4 	.word	0x200002e4

08002f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  return 1;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_kill>:

int _kill(int pid, int sig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f2e:	f004 fee5 	bl	8007cfc <__errno>
 8002f32:	0003      	movs	r3, r0
 8002f34:	2216      	movs	r2, #22
 8002f36:	601a      	str	r2, [r3, #0]
  return -1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	425b      	negs	r3, r3
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_exit>:

void _exit (int status)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	425a      	negs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff ffe5 	bl	8002f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f5a:	e7fe      	b.n	8002f5a <_exit+0x16>

08002f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e00a      	b.n	8002f84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f6e:	e000      	b.n	8002f72 <_read+0x16>
 8002f70:	bf00      	nop
 8002f72:	0001      	movs	r1, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	b2ca      	uxtb	r2, r1
 8002f7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbf0      	blt.n	8002f6e <_read+0x12>
  }

  return len;
 8002f8c:	687b      	ldr	r3, [r7, #4]
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b006      	add	sp, #24
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e009      	b.n	8002fbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	e000      	b.n	8002fb6 <_write+0x20>
 8002fb4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	dbf1      	blt.n	8002fa8 <_write+0x12>
  }
  return len;
 8002fc4:	687b      	ldr	r3, [r7, #4]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b006      	add	sp, #24
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_close>:

int _close(int file)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	425b      	negs	r3, r3
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	0192      	lsls	r2, r2, #6
 8002ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <_isatty>:

int _isatty(int file)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003006:	2301      	movs	r3, #1
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <_sbrk+0x5c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <_sbrk+0x60>)
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <_sbrk+0x64>)
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <_sbrk+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	18d3      	adds	r3, r2, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003058:	f004 fe50 	bl	8007cfc <__errno>
 800305c:	0003      	movs	r3, r0
 800305e:	220c      	movs	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003062:	2301      	movs	r3, #1
 8003064:	425b      	negs	r3, r3
 8003066:	e009      	b.n	800307c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	18d2      	adds	r2, r2, r3
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <_sbrk+0x64>)
 8003078:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20002000 	.word	0x20002000
 8003088:	00000400 	.word	0x00000400
 800308c:	200003c4 	.word	0x200003c4
 8003090:	20000518 	.word	0x20000518

08003094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030a0:	480d      	ldr	r0, [pc, #52]	; (80030d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030a4:	f7ff fff6 	bl	8003094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <LoopForever+0x6>)
  ldr r1, =_edata
 80030aa:	490d      	ldr	r1, [pc, #52]	; (80030e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <LoopForever+0xe>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b0:	e002      	b.n	80030b8 <LoopCopyDataInit>

080030b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b6:	3304      	adds	r3, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030bc:	d3f9      	bcc.n	80030b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030c0:	4c0a      	ldr	r4, [pc, #40]	; (80030ec <LoopForever+0x16>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c4:	e001      	b.n	80030ca <LoopFillZerobss>

080030c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c8:	3204      	adds	r2, #4

080030ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030cc:	d3fb      	bcc.n	80030c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030ce:	f004 fe1b 	bl	8007d08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030d2:	f7ff fa81 	bl	80025d8 <main>

080030d6 <LoopForever>:

LoopForever:
  b LoopForever
 80030d6:	e7fe      	b.n	80030d6 <LoopForever>
  ldr   r0, =_estack
 80030d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030e4:	0800a474 	.word	0x0800a474
  ldr r2, =_sbss
 80030e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030ec:	20000518 	.word	0x20000518

080030f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f0:	e7fe      	b.n	80030f0 <ADC1_IRQHandler>
	...

080030f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_Init+0x3c>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_Init+0x3c>)
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	0049      	lsls	r1, r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800310e:	2003      	movs	r0, #3
 8003110:	f000 f810 	bl	8003134 <HAL_InitTick>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d003      	beq.n	8003120 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e001      	b.n	8003124 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003120:	f7ff fda2 	bl	8002c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003124:	1dfb      	adds	r3, r7, #7
 8003126:	781b      	ldrb	r3, [r3, #0]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40022000 	.word	0x40022000

08003134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800313c:	230f      	movs	r3, #15
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_InitTick+0x88>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02b      	beq.n	80031a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_InitTick+0x8c>)
 800314e:	681c      	ldr	r4, [r3, #0]
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_InitTick+0x88>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	0019      	movs	r1, r3
 8003156:	23fa      	movs	r3, #250	; 0xfa
 8003158:	0098      	lsls	r0, r3, #2
 800315a:	f7fc ffef 	bl	800013c <__udivsi3>
 800315e:	0003      	movs	r3, r0
 8003160:	0019      	movs	r1, r3
 8003162:	0020      	movs	r0, r4
 8003164:	f7fc ffea 	bl	800013c <__udivsi3>
 8003168:	0003      	movs	r3, r0
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f93d 	bl	80033ea <HAL_SYSTICK_Config>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d112      	bne.n	800319a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d80a      	bhi.n	8003190 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	2301      	movs	r3, #1
 800317e:	425b      	negs	r3, r3
 8003180:	2200      	movs	r2, #0
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f90c 	bl	80033a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_InitTick+0x90>)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00d      	b.n	80031ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003190:	230f      	movs	r3, #15
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e008      	b.n	80031ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800319a:	230f      	movs	r3, #15
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e003      	b.n	80031ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b005      	add	sp, #20
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	2000000c 	.word	0x2000000c
 80031c0:	20000004 	.word	0x20000004
 80031c4:	20000008 	.word	0x20000008

080031c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_IncTick+0x1c>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	001a      	movs	r2, r3
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_IncTick+0x20>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	18d2      	adds	r2, r2, r3
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_IncTick+0x20>)
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	200003c8 	.word	0x200003c8

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b02      	ldr	r3, [pc, #8]	; (80031fc <HAL_GetTick+0x10>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	200003c8 	.word	0x200003c8

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff fff0 	bl	80031ec <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3301      	adds	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	001a      	movs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	189b      	adds	r3, r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	f7ff ffe0 	bl	80031ec <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b004      	add	sp, #16
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	2000000c 	.word	0x2000000c

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	0002      	movs	r2, r0
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003254:	1dfb      	adds	r3, r7, #7
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b7f      	cmp	r3, #127	; 0x7f
 800325a:	d809      	bhi.n	8003270 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	231f      	movs	r3, #31
 8003264:	401a      	ands	r2, r3
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_EnableIRQ+0x30>)
 8003268:	2101      	movs	r1, #1
 800326a:	4091      	lsls	r1, r2
 800326c:	000a      	movs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	0002      	movs	r2, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800328a:	1dfb      	adds	r3, r7, #7
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b7f      	cmp	r3, #127	; 0x7f
 8003290:	d828      	bhi.n	80032e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <__NVIC_SetPriority+0xd4>)
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b25b      	sxtb	r3, r3
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	33c0      	adds	r3, #192	; 0xc0
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	589b      	ldr	r3, [r3, r2]
 80032a2:	1dfa      	adds	r2, r7, #7
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	0011      	movs	r1, r2
 80032a8:	2203      	movs	r2, #3
 80032aa:	400a      	ands	r2, r1
 80032ac:	00d2      	lsls	r2, r2, #3
 80032ae:	21ff      	movs	r1, #255	; 0xff
 80032b0:	4091      	lsls	r1, r2
 80032b2:	000a      	movs	r2, r1
 80032b4:	43d2      	mvns	r2, r2
 80032b6:	401a      	ands	r2, r3
 80032b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	401a      	ands	r2, r3
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0018      	movs	r0, r3
 80032c8:	2303      	movs	r3, #3
 80032ca:	4003      	ands	r3, r0
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d0:	481f      	ldr	r0, [pc, #124]	; (8003350 <__NVIC_SetPriority+0xd4>)
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	430a      	orrs	r2, r1
 80032dc:	33c0      	adds	r3, #192	; 0xc0
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032e2:	e031      	b.n	8003348 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <__NVIC_SetPriority+0xd8>)
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	0019      	movs	r1, r3
 80032ec:	230f      	movs	r3, #15
 80032ee:	400b      	ands	r3, r1
 80032f0:	3b08      	subs	r3, #8
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3306      	adds	r3, #6
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	3304      	adds	r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1dfa      	adds	r2, r7, #7
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	0011      	movs	r1, r2
 8003304:	2203      	movs	r2, #3
 8003306:	400a      	ands	r2, r1
 8003308:	00d2      	lsls	r2, r2, #3
 800330a:	21ff      	movs	r1, #255	; 0xff
 800330c:	4091      	lsls	r1, r2
 800330e:	000a      	movs	r2, r1
 8003310:	43d2      	mvns	r2, r2
 8003312:	401a      	ands	r2, r3
 8003314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	401a      	ands	r2, r3
 800331e:	1dfb      	adds	r3, r7, #7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	0018      	movs	r0, r3
 8003324:	2303      	movs	r3, #3
 8003326:	4003      	ands	r3, r0
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <__NVIC_SetPriority+0xd8>)
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	001c      	movs	r4, r3
 8003334:	230f      	movs	r3, #15
 8003336:	4023      	ands	r3, r4
 8003338:	3b08      	subs	r3, #8
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	430a      	orrs	r2, r1
 800333e:	3306      	adds	r3, #6
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	18c3      	adds	r3, r0, r3
 8003344:	3304      	adds	r3, #4
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b003      	add	sp, #12
 800334e:	bd90      	pop	{r4, r7, pc}
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	045b      	lsls	r3, r3, #17
 8003368:	429a      	cmp	r2, r3
 800336a:	d301      	bcc.n	8003370 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336c:	2301      	movs	r3, #1
 800336e:	e010      	b.n	8003392 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <SysTick_Config+0x44>)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	3a01      	subs	r2, #1
 8003376:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003378:	2301      	movs	r3, #1
 800337a:	425b      	negs	r3, r3
 800337c:	2103      	movs	r1, #3
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff ff7c 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <SysTick_Config+0x44>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <SysTick_Config+0x44>)
 800338c:	2207      	movs	r2, #7
 800338e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	e000e010 	.word	0xe000e010

080033a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	210f      	movs	r1, #15
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	1c02      	adds	r2, r0, #0
 80033b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	0011      	movs	r1, r2
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	0002      	movs	r2, r0
 80033d2:	1dfb      	adds	r3, r7, #7
 80033d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff ff33 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff ffaf 	bl	8003358 <SysTick_Config>
 80033fa:	0003      	movs	r3, r0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003412:	e147      	b.n	80036a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4091      	lsls	r1, r2
 800341e:	000a      	movs	r2, r1
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d100      	bne.n	800342c <HAL_GPIO_Init+0x28>
 800342a:	e138      	b.n	800369e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2203      	movs	r2, #3
 8003432:	4013      	ands	r3, r2
 8003434:	2b01      	cmp	r3, #1
 8003436:	d005      	beq.n	8003444 <HAL_GPIO_Init+0x40>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2203      	movs	r2, #3
 800343e:	4013      	ands	r3, r2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d130      	bne.n	80034a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	409a      	lsls	r2, r3
 8003452:	0013      	movs	r3, r2
 8003454:	43da      	mvns	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	409a      	lsls	r2, r3
 8003466:	0013      	movs	r3, r2
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800347a:	2201      	movs	r2, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	2201      	movs	r2, #1
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2203      	movs	r2, #3
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d017      	beq.n	80034e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	409a      	lsls	r2, r3
 80034c0:	0013      	movs	r3, r2
 80034c2:	43da      	mvns	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	0013      	movs	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d123      	bne.n	8003536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	58d3      	ldr	r3, [r2, r3]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2207      	movs	r2, #7
 8003500:	4013      	ands	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	409a      	lsls	r2, r3
 8003508:	0013      	movs	r3, r2
 800350a:	43da      	mvns	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2107      	movs	r1, #7
 800351a:	400b      	ands	r3, r1
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	409a      	lsls	r2, r3
 8003520:	0013      	movs	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	08da      	lsrs	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3208      	adds	r2, #8
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	6939      	ldr	r1, [r7, #16]
 8003534:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	409a      	lsls	r2, r3
 8003544:	0013      	movs	r3, r2
 8003546:	43da      	mvns	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	401a      	ands	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	23c0      	movs	r3, #192	; 0xc0
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	4013      	ands	r3, r2
 8003574:	d100      	bne.n	8003578 <HAL_GPIO_Init+0x174>
 8003576:	e092      	b.n	800369e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003578:	4a50      	ldr	r2, [pc, #320]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	3318      	adds	r3, #24
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	589b      	ldr	r3, [r3, r2]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2203      	movs	r2, #3
 800358a:	4013      	ands	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	220f      	movs	r2, #15
 8003590:	409a      	lsls	r2, r3
 8003592:	0013      	movs	r3, r2
 8003594:	43da      	mvns	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	23a0      	movs	r3, #160	; 0xa0
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x1ca>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a45      	ldr	r2, [pc, #276]	; (80036c0 <HAL_GPIO_Init+0x2bc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x1c6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a44      	ldr	r2, [pc, #272]	; (80036c4 <HAL_GPIO_Init+0x2c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x1c2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <HAL_GPIO_Init+0x2c4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x1be>
 80035be:	2303      	movs	r3, #3
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x1cc>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e004      	b.n	80035d0 <HAL_GPIO_Init+0x1cc>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e002      	b.n	80035d0 <HAL_GPIO_Init+0x1cc>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_GPIO_Init+0x1cc>
 80035ce:	2300      	movs	r3, #0
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	2103      	movs	r1, #3
 80035d4:	400a      	ands	r2, r1
 80035d6:	00d2      	lsls	r2, r2, #3
 80035d8:	4093      	lsls	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80035e0:	4936      	ldr	r1, [pc, #216]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3318      	adds	r3, #24
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ee:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	035b      	lsls	r3, r3, #13
 8003606:	4013      	ands	r3, r2
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43da      	mvns	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	039b      	lsls	r3, r3, #14
 8003630:	4013      	ands	r3, r2
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800363c:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003644:	2384      	movs	r3, #132	; 0x84
 8003646:	58d3      	ldr	r3, [r2, r3]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43da      	mvns	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003668:	4914      	ldr	r1, [pc, #80]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 800366a:	2284      	movs	r2, #132	; 0x84
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	58d3      	ldr	r3, [r2, r3]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43da      	mvns	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	025b      	lsls	r3, r3, #9
 800368a:	4013      	ands	r3, r2
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003696:	4909      	ldr	r1, [pc, #36]	; (80036bc <HAL_GPIO_Init+0x2b8>)
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	40da      	lsrs	r2, r3
 80036ac:	1e13      	subs	r3, r2, #0
 80036ae:	d000      	beq.n	80036b2 <HAL_GPIO_Init+0x2ae>
 80036b0:	e6b0      	b.n	8003414 <HAL_GPIO_Init+0x10>
  }
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b006      	add	sp, #24
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021800 	.word	0x40021800
 80036c0:	50000400 	.word	0x50000400
 80036c4:	50000800 	.word	0x50000800
 80036c8:	50000c00 	.word	0x50000c00

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	000a      	movs	r2, r1
 80036d6:	1cbb      	adds	r3, r7, #2
 80036d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	1cba      	adds	r2, r7, #2
 80036e0:	8812      	ldrh	r2, [r2, #0]
 80036e2:	4013      	ands	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80036e6:	230f      	movs	r3, #15
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e003      	b.n	80036f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036f0:	230f      	movs	r3, #15
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80036f8:	230f      	movs	r3, #15
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	0008      	movs	r0, r1
 8003710:	0011      	movs	r1, r2
 8003712:	1cbb      	adds	r3, r7, #2
 8003714:	1c02      	adds	r2, r0, #0
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	1c7b      	adds	r3, r7, #1
 800371a:	1c0a      	adds	r2, r1, #0
 800371c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800371e:	1c7b      	adds	r3, r7, #1
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003726:	1cbb      	adds	r3, r7, #2
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800372e:	e003      	b.n	8003738 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003730:	1cbb      	adds	r3, r7, #2
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e082      	b.n	8003858 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2241      	movs	r2, #65	; 0x41
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2240      	movs	r2, #64	; 0x40
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff faa1 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2241      	movs	r2, #65	; 0x41
 8003772:	2124      	movs	r1, #36	; 0x24
 8003774:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	438a      	bics	r2, r1
 8003784:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_I2C_Init+0x120>)
 8003790:	400a      	ands	r2, r1
 8003792:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4931      	ldr	r1, [pc, #196]	; (8003864 <HAL_I2C_Init+0x124>)
 80037a0:	400a      	ands	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	0209      	lsls	r1, r1, #8
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	e007      	b.n	80037ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2184      	movs	r1, #132	; 0x84
 80037c8:	0209      	lsls	r1, r1, #8
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d104      	bne.n	80037e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	491f      	ldr	r1, [pc, #124]	; (8003868 <HAL_I2C_Init+0x128>)
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	491a      	ldr	r1, [pc, #104]	; (8003864 <HAL_I2C_Init+0x124>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	431a      	orrs	r2, r3
 800380a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69d9      	ldr	r1, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2101      	movs	r1, #1
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2241      	movs	r2, #65	; 0x41
 8003844:	2120      	movs	r1, #32
 8003846:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2242      	movs	r2, #66	; 0x42
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	f0ffffff 	.word	0xf0ffffff
 8003864:	ffff7fff 	.word	0xffff7fff
 8003868:	02008000 	.word	0x02008000

0800386c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	000c      	movs	r4, r1
 8003876:	0010      	movs	r0, r2
 8003878:	0019      	movs	r1, r3
 800387a:	230a      	movs	r3, #10
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	1c22      	adds	r2, r4, #0
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	2308      	movs	r3, #8
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	1c02      	adds	r2, r0, #0
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	1dbb      	adds	r3, r7, #6
 800388c:	1c0a      	adds	r2, r1, #0
 800388e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d000      	beq.n	800389e <HAL_I2C_Mem_Write+0x32>
 800389c:	e10c      	b.n	8003ab8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_I2C_Mem_Write+0x42>
 80038a4:	232c      	movs	r3, #44	; 0x2c
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0ff      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x5c>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0f8      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038d0:	f7ff fc8c 	bl	80031ec <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	0219      	lsls	r1, r3, #8
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2319      	movs	r3, #25
 80038e4:	2201      	movs	r2, #1
 80038e6:	f000 fb0b 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0e3      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2241      	movs	r2, #65	; 0x41
 80038f6:	2121      	movs	r1, #33	; 0x21
 80038f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2242      	movs	r2, #66	; 0x42
 80038fe:	2140      	movs	r1, #64	; 0x40
 8003900:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	222c      	movs	r2, #44	; 0x2c
 8003912:	18ba      	adds	r2, r7, r2
 8003914:	8812      	ldrh	r2, [r2, #0]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	881c      	ldrh	r4, [r3, #0]
 8003922:	2308      	movs	r3, #8
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	881a      	ldrh	r2, [r3, #0]
 8003928:	230a      	movs	r3, #10
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	8819      	ldrh	r1, [r3, #0]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0023      	movs	r3, r4
 800393a:	f000 f9f9 	bl	8003d30 <I2C_RequestMemoryWrite>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d005      	beq.n	800394e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0b5      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	d911      	bls.n	800397c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	b2da      	uxtb	r2, r3
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	045c      	lsls	r4, r3, #17
 8003968:	230a      	movs	r3, #10
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	8819      	ldrh	r1, [r3, #0]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	2300      	movs	r3, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	0023      	movs	r3, r4
 8003976:	f000 fc7d 	bl	8004274 <I2C_TransferConfig>
 800397a:	e012      	b.n	80039a2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	049c      	lsls	r4, r3, #18
 8003990:	230a      	movs	r3, #10
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	8819      	ldrh	r1, [r3, #0]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	0023      	movs	r3, r4
 800399e:	f000 fc69 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fae8 	bl	8003f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e081      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d03a      	beq.n	8003a66 <HAL_I2C_Mem_Write+0x1fa>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d136      	bne.n	8003a66 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	0013      	movs	r3, r2
 8003a02:	2200      	movs	r2, #0
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	f000 fa7b 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e053      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2bff      	cmp	r3, #255	; 0xff
 8003a1a:	d911      	bls.n	8003a40 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	22ff      	movs	r2, #255	; 0xff
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	045c      	lsls	r4, r3, #17
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	8819      	ldrh	r1, [r3, #0]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	0023      	movs	r3, r4
 8003a3a:	f000 fc1b 	bl	8004274 <I2C_TransferConfig>
 8003a3e:	e012      	b.n	8003a66 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	049c      	lsls	r4, r3, #18
 8003a54:	230a      	movs	r3, #10
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	8819      	ldrh	r1, [r3, #0]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	0023      	movs	r3, r4
 8003a62:	f000 fc07 	bl	8004274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d198      	bne.n	80039a2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fac0 	bl	8003ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01a      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	490b      	ldr	r1, [pc, #44]	; (8003ac4 <HAL_I2C_Mem_Write+0x258>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2241      	movs	r2, #65	; 0x41
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2242      	movs	r2, #66	; 0x42
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b007      	add	sp, #28
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	fe00e800 	.word	0xfe00e800

08003ac8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	000c      	movs	r4, r1
 8003ad2:	0010      	movs	r0, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	1c22      	adds	r2, r4, #0
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	2308      	movs	r3, #8
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	1c02      	adds	r2, r0, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	1dbb      	adds	r3, r7, #6
 8003ae8:	1c0a      	adds	r2, r1, #0
 8003aea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2241      	movs	r2, #65	; 0x41
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d000      	beq.n	8003afa <HAL_I2C_Mem_Read+0x32>
 8003af8:	e110      	b.n	8003d1c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <HAL_I2C_Mem_Read+0x42>
 8003b00:	232c      	movs	r3, #44	; 0x2c
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	0092      	lsls	r2, r2, #2
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e103      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2C_Mem_Read+0x5c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0fc      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b2c:	f7ff fb5e 	bl	80031ec <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	0219      	lsls	r1, r3, #8
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2319      	movs	r3, #25
 8003b40:	2201      	movs	r2, #1
 8003b42:	f000 f9dd 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0e7      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2241      	movs	r2, #65	; 0x41
 8003b52:	2122      	movs	r1, #34	; 0x22
 8003b54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2242      	movs	r2, #66	; 0x42
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	222c      	movs	r2, #44	; 0x2c
 8003b6e:	18ba      	adds	r2, r7, r2
 8003b70:	8812      	ldrh	r2, [r2, #0]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7a:	1dbb      	adds	r3, r7, #6
 8003b7c:	881c      	ldrh	r4, [r3, #0]
 8003b7e:	2308      	movs	r3, #8
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	230a      	movs	r3, #10
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	8819      	ldrh	r1, [r3, #0]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	0023      	movs	r3, r4
 8003b96:	f000 f92f 	bl	8003df8 <I2C_RequestMemoryRead>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0b9      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2bff      	cmp	r3, #255	; 0xff
 8003bb2:	d911      	bls.n	8003bd8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	22ff      	movs	r2, #255	; 0xff
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	045c      	lsls	r4, r3, #17
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	8819      	ldrh	r1, [r3, #0]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_I2C_Mem_Read+0x260>)
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	f000 fb4f 	bl	8004274 <I2C_TransferConfig>
 8003bd6:	e012      	b.n	8003bfe <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	049c      	lsls	r4, r3, #18
 8003bec:	230a      	movs	r3, #10
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	8819      	ldrh	r1, [r3, #0]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_I2C_Mem_Read+0x260>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	0023      	movs	r3, r4
 8003bfa:	f000 fb3b 	bl	8004274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	0013      	movs	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	f000 f978 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e082      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03a      	beq.n	8003cca <HAL_I2C_Mem_Read+0x202>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d136      	bne.n	8003cca <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	0013      	movs	r3, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	f000 f949 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e053      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2bff      	cmp	r3, #255	; 0xff
 8003c7e:	d911      	bls.n	8003ca4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	045c      	lsls	r4, r3, #17
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	8819      	ldrh	r1, [r3, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f000 fae9 	bl	8004274 <I2C_TransferConfig>
 8003ca2:	e012      	b.n	8003cca <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	049c      	lsls	r4, r3, #18
 8003cb8:	230a      	movs	r3, #10
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	8819      	ldrh	r1, [r3, #0]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 fad5 	bl	8004274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d194      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f98e 	bl	8003ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e01a      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2220      	movs	r2, #32
 8003cee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	490c      	ldr	r1, [pc, #48]	; (8003d2c <HAL_I2C_Mem_Read+0x264>)
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2241      	movs	r2, #65	; 0x41
 8003d04:	2120      	movs	r1, #32
 8003d06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2242      	movs	r2, #66	; 0x42
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b007      	add	sp, #28
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	80002400 	.word	0x80002400
 8003d2c:	fe00e800 	.word	0xfe00e800

08003d30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	000c      	movs	r4, r1
 8003d3a:	0010      	movs	r0, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	250a      	movs	r5, #10
 8003d40:	197b      	adds	r3, r7, r5
 8003d42:	1c22      	adds	r2, r4, #0
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	2308      	movs	r3, #8
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	1c02      	adds	r2, r0, #0
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	1c0a      	adds	r2, r1, #0
 8003d52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d54:	1dbb      	adds	r3, r7, #6
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	045c      	lsls	r4, r3, #17
 8003d5e:	197b      	adds	r3, r7, r5
 8003d60:	8819      	ldrh	r1, [r3, #0]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <I2C_RequestMemoryWrite+0xc4>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	0023      	movs	r3, r4
 8003d6a:	f000 fa83 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	6a39      	ldr	r1, [r7, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f902 	bl	8003f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e033      	b.n	8003dea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d82:	1dbb      	adds	r3, r7, #6
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e019      	b.n	8003dce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	0a1b      	lsrs	r3, r3, #8
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	6a39      	ldr	r1, [r7, #32]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 f8e3 	bl	8003f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e014      	b.n	8003dea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	f000 f890 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bdb0      	pop	{r4, r5, r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	80002000 	.word	0x80002000

08003df8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	000c      	movs	r4, r1
 8003e02:	0010      	movs	r0, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	250a      	movs	r5, #10
 8003e08:	197b      	adds	r3, r7, r5
 8003e0a:	1c22      	adds	r2, r4, #0
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	2308      	movs	r3, #8
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	1c02      	adds	r2, r0, #0
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	1dbb      	adds	r3, r7, #6
 8003e18:	1c0a      	adds	r2, r1, #0
 8003e1a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	197b      	adds	r3, r7, r5
 8003e24:	8819      	ldrh	r1, [r3, #0]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <I2C_RequestMemoryRead+0xc0>)
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f000 fa21 	bl	8004274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f8a0 	bl	8003f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e033      	b.n	8003eae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e46:	1dbb      	adds	r3, r7, #6
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4e:	2308      	movs	r3, #8
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5c:	e019      	b.n	8003e92 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e5e:	2308      	movs	r3, #8
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	6a39      	ldr	r1, [r7, #32]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f000 f881 	bl	8003f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d001      	beq.n	8003e84 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e014      	b.n	8003eae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e84:	2308      	movs	r3, #8
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a3a      	ldr	r2, [r7, #32]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	f000 f82e 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	80002000 	.word	0x80002000

08003ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d103      	bne.n	8003eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d007      	beq.n	8003ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	619a      	str	r2, [r3, #24]
  }
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b002      	add	sp, #8
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f10:	e021      	b.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	d01e      	beq.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7ff f968 	bl	80031ec <HAL_GetTick>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d113      	bne.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	2220      	movs	r2, #32
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2241      	movs	r2, #65	; 0x41
 8003f3e:	2120      	movs	r1, #32
 8003f40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2242      	movs	r2, #66	; 0x42
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00f      	b.n	8003f76 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	425a      	negs	r2, r3
 8003f66:	4153      	adcs	r3, r2
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	1dfb      	adds	r3, r7, #7
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d0ce      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f8a:	e02b      	b.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 f86e 	bl	8004074 <I2C_IsErrorOccurred>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e029      	b.n	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	d01e      	beq.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7ff f921 	bl	80031ec <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2241      	movs	r2, #65	; 0x41
 8003fcc:	2120      	movs	r1, #32
 8003fce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2242      	movs	r2, #66	; 0x42
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e007      	b.n	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d1cc      	bne.n	8003f8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b004      	add	sp, #16
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004008:	e028      	b.n	800405c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0018      	movs	r0, r3
 8004012:	f000 f82f 	bl	8004074 <I2C_IsErrorOccurred>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d001      	beq.n	800401e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e026      	b.n	800406c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7ff f8e5 	bl	80031ec <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d113      	bne.n	800405c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	2220      	movs	r2, #32
 800403a:	431a      	orrs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2241      	movs	r2, #65	; 0x41
 8004044:	2120      	movs	r1, #32
 8004046:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2242      	movs	r2, #66	; 0x42
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2240      	movs	r2, #64	; 0x40
 8004054:	2100      	movs	r1, #0
 8004056:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e007      	b.n	800406c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2220      	movs	r2, #32
 8004064:	4013      	ands	r3, r2
 8004066:	2b20      	cmp	r3, #32
 8004068:	d1cf      	bne.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2327      	movs	r3, #39	; 0x27
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2210      	movs	r2, #16
 800409c:	4013      	ands	r3, r2
 800409e:	d100      	bne.n	80040a2 <I2C_IsErrorOccurred+0x2e>
 80040a0:	e082      	b.n	80041a8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040aa:	e060      	b.n	800416e <I2C_IsErrorOccurred+0xfa>
 80040ac:	2427      	movs	r4, #39	; 0x27
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	193a      	adds	r2, r7, r4
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	d058      	beq.n	800416e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7ff f896 	bl	80031ec <HAL_GetTick>
 80040c0:	0002      	movs	r2, r0
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d306      	bcc.n	80040da <I2C_IsErrorOccurred+0x66>
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	193a      	adds	r2, r7, r4
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d149      	bne.n	800416e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	01db      	lsls	r3, r3, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040e8:	2013      	movs	r0, #19
 80040ea:	183b      	adds	r3, r7, r0
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	2142      	movs	r1, #66	; 0x42
 80040f0:	5c52      	ldrb	r2, [r2, r1]
 80040f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	401a      	ands	r2, r3
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	429a      	cmp	r2, r3
 8004106:	d126      	bne.n	8004156 <I2C_IsErrorOccurred+0xe2>
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	01db      	lsls	r3, r3, #7
 800410e:	429a      	cmp	r2, r3
 8004110:	d021      	beq.n	8004156 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004112:	183b      	adds	r3, r7, r0
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b20      	cmp	r3, #32
 8004118:	d01d      	beq.n	8004156 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	01c9      	lsls	r1, r1, #7
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800412c:	f7ff f85e 	bl	80031ec <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004134:	e00f      	b.n	8004156 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004136:	f7ff f859 	bl	80031ec <HAL_GetTick>
 800413a:	0002      	movs	r2, r0
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b19      	cmp	r3, #25
 8004142:	d908      	bls.n	8004156 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2220      	movs	r2, #32
 8004148:	4313      	orrs	r3, r2
 800414a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800414c:	2327      	movs	r3, #39	; 0x27
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]

              break;
 8004154:	e00b      	b.n	800416e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2220      	movs	r2, #32
 800415e:	4013      	ands	r3, r2
 8004160:	2127      	movs	r1, #39	; 0x27
 8004162:	187a      	adds	r2, r7, r1
 8004164:	1879      	adds	r1, r7, r1
 8004166:	7809      	ldrb	r1, [r1, #0]
 8004168:	7011      	strb	r1, [r2, #0]
 800416a:	2b20      	cmp	r3, #32
 800416c:	d1e3      	bne.n	8004136 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2220      	movs	r2, #32
 8004176:	4013      	ands	r3, r2
 8004178:	2b20      	cmp	r3, #32
 800417a:	d004      	beq.n	8004186 <I2C_IsErrorOccurred+0x112>
 800417c:	2327      	movs	r3, #39	; 0x27
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d092      	beq.n	80040ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004186:	2327      	movs	r3, #39	; 0x27
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2204      	movs	r2, #4
 800419c:	4313      	orrs	r3, r2
 800419e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a0:	2327      	movs	r3, #39	; 0x27
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d00c      	beq.n	80041d4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2201      	movs	r2, #1
 80041be:	4313      	orrs	r3, r2
 80041c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	0052      	lsls	r2, r2, #1
 80041ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041cc:	2327      	movs	r3, #39	; 0x27
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4013      	ands	r3, r2
 80041dc:	d00c      	beq.n	80041f8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2208      	movs	r2, #8
 80041e2:	4313      	orrs	r3, r2
 80041e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	00d2      	lsls	r2, r2, #3
 80041ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f0:	2327      	movs	r3, #39	; 0x27
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	d00c      	beq.n	800421c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2202      	movs	r2, #2
 8004206:	4313      	orrs	r3, r2
 8004208:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004214:	2327      	movs	r3, #39	; 0x27
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800421c:	2327      	movs	r3, #39	; 0x27
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01d      	beq.n	8004262 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff fe47 	bl	8003ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	490d      	ldr	r1, [pc, #52]	; (8004270 <I2C_IsErrorOccurred+0x1fc>)
 800423a:	400a      	ands	r2, r1
 800423c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2241      	movs	r2, #65	; 0x41
 800424e:	2120      	movs	r1, #32
 8004250:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2242      	movs	r2, #66	; 0x42
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004262:	2327      	movs	r3, #39	; 0x27
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b00b      	add	sp, #44	; 0x2c
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	fe00e800 	.word	0xfe00e800

08004274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	0008      	movs	r0, r1
 800427e:	0011      	movs	r1, r2
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	240a      	movs	r4, #10
 8004284:	193b      	adds	r3, r7, r4
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	2009      	movs	r0, #9
 800428c:	183b      	adds	r3, r7, r0
 800428e:	1c0a      	adds	r2, r1, #0
 8004290:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004292:	193b      	adds	r3, r7, r4
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	059b      	lsls	r3, r3, #22
 8004298:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800429a:	183b      	adds	r3, r7, r0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	0419      	lsls	r1, r3, #16
 80042a0:	23ff      	movs	r3, #255	; 0xff
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	4313      	orrs	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042be:	0d51      	lsrs	r1, r2, #21
 80042c0:	2280      	movs	r2, #128	; 0x80
 80042c2:	00d2      	lsls	r2, r2, #3
 80042c4:	400a      	ands	r2, r1
 80042c6:	4907      	ldr	r1, [pc, #28]	; (80042e4 <I2C_TransferConfig+0x70>)
 80042c8:	430a      	orrs	r2, r1
 80042ca:	43d2      	mvns	r2, r2
 80042cc:	401a      	ands	r2, r3
 80042ce:	0011      	movs	r1, r2
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b007      	add	sp, #28
 80042e0:	bd90      	pop	{r4, r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	03ff63ff 	.word	0x03ff63ff

080042e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2241      	movs	r2, #65	; 0x41
 80042f6:	5c9b      	ldrb	r3, [r3, r2]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d138      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e032      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2240      	movs	r2, #64	; 0x40
 8004310:	2101      	movs	r1, #1
 8004312:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2241      	movs	r2, #65	; 0x41
 8004318:	2124      	movs	r1, #36	; 0x24
 800431a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4911      	ldr	r1, [pc, #68]	; (800437c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004338:	400a      	ands	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2101      	movs	r1, #1
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2241      	movs	r2, #65	; 0x41
 8004360:	2120      	movs	r1, #32
 8004362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	0018      	movs	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	b002      	add	sp, #8
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	ffffefff 	.word	0xffffefff

08004380 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2241      	movs	r2, #65	; 0x41
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	d139      	bne.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2240      	movs	r2, #64	; 0x40
 800439a:	5c9b      	ldrb	r3, [r3, r2]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e033      	b.n	800440c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	2101      	movs	r1, #1
 80043aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2241      	movs	r2, #65	; 0x41
 80043b0:	2124      	movs	r1, #36	; 0x24
 80043b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2101      	movs	r1, #1
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	2120      	movs	r1, #32
 80043fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2240      	movs	r2, #64	; 0x40
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b004      	add	sp, #16
 8004412:	bd80      	pop	{r7, pc}
 8004414:	fffff0ff 	.word	0xfffff0ff

08004418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	429a      	cmp	r2, r3
 800443a:	d11f      	bne.n	800447c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	0013      	movs	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	189b      	adds	r3, r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800444a:	0018      	movs	r0, r3
 800444c:	f7fb fe76 	bl	800013c <__udivsi3>
 8004450:	0003      	movs	r3, r0
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004456:	e008      	b.n	800446a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e001      	b.n	800446a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e009      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	401a      	ands	r2, r3
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	429a      	cmp	r2, r3
 800447a:	d0ed      	beq.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	40007000 	.word	0x40007000
 800448c:	fffff9ff 	.word	0xfffff9ff
 8004490:	20000004 	.word	0x20000004
 8004494:	000f4240 	.word	0x000f4240

08004498 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	23e0      	movs	r3, #224	; 0xe0
 80044a2:	01db      	lsls	r3, r3, #7
 80044a4:	4013      	ands	r3, r2
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e2fe      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d100      	bne.n	80044ce <HAL_RCC_OscConfig+0x1e>
 80044cc:	e07c      	b.n	80045c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ce:	4bc3      	ldr	r3, [pc, #780]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2238      	movs	r2, #56	; 0x38
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d8:	4bc0      	ldr	r3, [pc, #768]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2203      	movs	r2, #3
 80044de:	4013      	ands	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d102      	bne.n	80044ee <HAL_RCC_OscConfig+0x3e>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d10b      	bne.n	800450c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	4bb9      	ldr	r3, [pc, #740]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	4013      	ands	r3, r2
 80044fe:	d062      	beq.n	80045c6 <HAL_RCC_OscConfig+0x116>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d15e      	bne.n	80045c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e2d9      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	025b      	lsls	r3, r3, #9
 8004514:	429a      	cmp	r2, r3
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x78>
 8004518:	4bb0      	ldr	r3, [pc, #704]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4baf      	ldr	r3, [pc, #700]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	0249      	lsls	r1, r1, #9
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e020      	b.n	800456a <HAL_RCC_OscConfig+0xba>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	23a0      	movs	r3, #160	; 0xa0
 800452e:	02db      	lsls	r3, r3, #11
 8004530:	429a      	cmp	r2, r3
 8004532:	d10e      	bne.n	8004552 <HAL_RCC_OscConfig+0xa2>
 8004534:	4ba9      	ldr	r3, [pc, #676]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4ba8      	ldr	r3, [pc, #672]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	02c9      	lsls	r1, r1, #11
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	4ba6      	ldr	r3, [pc, #664]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4ba5      	ldr	r3, [pc, #660]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0249      	lsls	r1, r1, #9
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0xba>
 8004552:	4ba2      	ldr	r3, [pc, #648]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4ba1      	ldr	r3, [pc, #644]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004558:	49a1      	ldr	r1, [pc, #644]	; (80047e0 <HAL_RCC_OscConfig+0x330>)
 800455a:	400a      	ands	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	4b9f      	ldr	r3, [pc, #636]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b9e      	ldr	r3, [pc, #632]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004564:	499f      	ldr	r1, [pc, #636]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004566:	400a      	ands	r2, r1
 8004568:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d014      	beq.n	800459c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe fe3b 	bl	80031ec <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fe fe36 	bl	80031ec <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e298      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	4b93      	ldr	r3, [pc, #588]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	4013      	ands	r3, r2
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xcc>
 800459a:	e015      	b.n	80045c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fe26 	bl	80031ec <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a6:	f7fe fe21 	bl	80031ec <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e283      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b8:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	029b      	lsls	r3, r3, #10
 80045c0:	4013      	ands	r3, r2
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0xf6>
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	4013      	ands	r3, r2
 80045d0:	d100      	bne.n	80045d4 <HAL_RCC_OscConfig+0x124>
 80045d2:	e099      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2238      	movs	r2, #56	; 0x38
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045de:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2203      	movs	r2, #3
 80045e4:	4013      	ands	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_OscConfig+0x144>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d002      	beq.n	80045fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d135      	bne.n	8004666 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045fa:	4b78      	ldr	r3, [pc, #480]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4013      	ands	r3, r2
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x162>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e256      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4a74      	ldr	r2, [pc, #464]	; (80047e8 <HAL_RCC_OscConfig+0x338>)
 8004618:	4013      	ands	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800462e:	4b6b      	ldr	r3, [pc, #428]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x33c>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	4b67      	ldr	r3, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004642:	4b66      	ldr	r3, [pc, #408]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0adb      	lsrs	r3, r3, #11
 8004648:	2207      	movs	r2, #7
 800464a:	4013      	ands	r3, r2
 800464c:	4a68      	ldr	r2, [pc, #416]	; (80047f0 <HAL_RCC_OscConfig+0x340>)
 800464e:	40da      	lsrs	r2, r3
 8004650:	4b68      	ldr	r3, [pc, #416]	; (80047f4 <HAL_RCC_OscConfig+0x344>)
 8004652:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004654:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <HAL_RCC_OscConfig+0x348>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fe fd6b 	bl	8003134 <HAL_InitTick>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d051      	beq.n	8004706 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e22c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d030      	beq.n	80046d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800466e:	4b5b      	ldr	r3, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5e      	ldr	r2, [pc, #376]	; (80047ec <HAL_RCC_OscConfig+0x33c>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	4b57      	ldr	r3, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b55      	ldr	r3, [pc, #340]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	0049      	lsls	r1, r1, #1
 800468c:	430a      	orrs	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fdac 	bl	80031ec <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469a:	f7fe fda7 	bl	80031ec <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e209      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ac:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4013      	ands	r3, r2
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a4a      	ldr	r2, [pc, #296]	; (80047e8 <HAL_RCC_OscConfig+0x338>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	021a      	lsls	r2, r3, #8
 80046c8:	4b44      	ldr	r3, [pc, #272]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	e01b      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046d6:	4949      	ldr	r1, [pc, #292]	; (80047fc <HAL_RCC_OscConfig+0x34c>)
 80046d8:	400a      	ands	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fe fd86 	bl	80031ec <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e6:	f7fe fd81 	bl	80031ec <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e1e3      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f8:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4013      	ands	r3, r2
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x236>
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004706:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	4013      	ands	r3, r2
 8004710:	d047      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004712:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2238      	movs	r2, #56	; 0x38
 8004718:	4013      	ands	r3, r2
 800471a:	2b18      	cmp	r3, #24
 800471c:	d10a      	bne.n	8004734 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d03c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d138      	bne.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e1c5      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d019      	beq.n	8004770 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800473e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004742:	2101      	movs	r1, #1
 8004744:	430a      	orrs	r2, r1
 8004746:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe fd50 	bl	80031ec <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004752:	f7fe fd4b 	bl	80031ec <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1ad      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d0f1      	beq.n	8004752 <HAL_RCC_OscConfig+0x2a2>
 800476e:	e018      	b.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fe fd36 	bl	80031ec <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004786:	f7fe fd31 	bl	80031ec <HAL_GetTick>
 800478a:	0002      	movs	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e193      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004798:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	2202      	movs	r2, #2
 800479e:	4013      	ands	r3, r2
 80047a0:	d1f1      	bne.n	8004786 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	4013      	ands	r3, r2
 80047aa:	d100      	bne.n	80047ae <HAL_RCC_OscConfig+0x2fe>
 80047ac:	e0c6      	b.n	800493c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ae:	231f      	movs	r3, #31
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2238      	movs	r2, #56	; 0x38
 80047bc:	4013      	ands	r3, r2
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d11e      	bne.n	8004800 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x32c>)
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2202      	movs	r2, #2
 80047c8:	4013      	ands	r3, r2
 80047ca:	d100      	bne.n	80047ce <HAL_RCC_OscConfig+0x31e>
 80047cc:	e0b6      	b.n	800493c <HAL_RCC_OscConfig+0x48c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d000      	beq.n	80047d8 <HAL_RCC_OscConfig+0x328>
 80047d6:	e0b1      	b.n	800493c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e171      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
 80047dc:	40021000 	.word	0x40021000
 80047e0:	fffeffff 	.word	0xfffeffff
 80047e4:	fffbffff 	.word	0xfffbffff
 80047e8:	ffff80ff 	.word	0xffff80ff
 80047ec:	ffffc7ff 	.word	0xffffc7ff
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	20000004 	.word	0x20000004
 80047f8:	20000008 	.word	0x20000008
 80047fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004800:	4bb1      	ldr	r3, [pc, #708]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	055b      	lsls	r3, r3, #21
 8004808:	4013      	ands	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_RCC_OscConfig+0x360>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x362>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d011      	beq.n	800483a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4bac      	ldr	r3, [pc, #688]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481a:	4bab      	ldr	r3, [pc, #684]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	0549      	lsls	r1, r1, #21
 8004820:	430a      	orrs	r2, r1
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
 8004824:	4ba8      	ldr	r3, [pc, #672]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	055b      	lsls	r3, r3, #21
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004832:	231f      	movs	r3, #31
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4ba4      	ldr	r3, [pc, #656]	; (8004acc <HAL_RCC_OscConfig+0x61c>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4013      	ands	r3, r2
 8004844:	d11a      	bne.n	800487c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4ba1      	ldr	r3, [pc, #644]	; (8004acc <HAL_RCC_OscConfig+0x61c>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4ba0      	ldr	r3, [pc, #640]	; (8004acc <HAL_RCC_OscConfig+0x61c>)
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0049      	lsls	r1, r1, #1
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004854:	f7fe fcca 	bl	80031ec <HAL_GetTick>
 8004858:	0003      	movs	r3, r0
 800485a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485e:	f7fe fcc5 	bl	80031ec <HAL_GetTick>
 8004862:	0002      	movs	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e127      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004870:	4b96      	ldr	r3, [pc, #600]	; (8004acc <HAL_RCC_OscConfig+0x61c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4013      	ands	r3, r2
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x3e2>
 8004884:	4b90      	ldr	r3, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004888:	4b8f      	ldr	r3, [pc, #572]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 800488a:	2101      	movs	r1, #1
 800488c:	430a      	orrs	r2, r1
 800488e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004890:	e01c      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b05      	cmp	r3, #5
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x404>
 800489a:	4b8b      	ldr	r3, [pc, #556]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 800489c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800489e:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048a0:	2104      	movs	r1, #4
 80048a2:	430a      	orrs	r2, r1
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80048a6:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048ac:	2101      	movs	r1, #1
 80048ae:	430a      	orrs	r2, r1
 80048b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
 80048b4:	4b84      	ldr	r3, [pc, #528]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b8:	4b83      	ldr	r3, [pc, #524]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048ba:	2101      	movs	r1, #1
 80048bc:	438a      	bics	r2, r1
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c
 80048c0:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c4:	4b80      	ldr	r3, [pc, #512]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048c6:	2104      	movs	r1, #4
 80048c8:	438a      	bics	r2, r1
 80048ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d014      	beq.n	80048fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe fc8a 	bl	80031ec <HAL_GetTick>
 80048d8:	0003      	movs	r3, r0
 80048da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048dc:	e009      	b.n	80048f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fe fc85 	bl	80031ec <HAL_GetTick>
 80048e2:	0002      	movs	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	4a79      	ldr	r2, [pc, #484]	; (8004ad0 <HAL_RCC_OscConfig+0x620>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0e6      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f2:	4b75      	ldr	r3, [pc, #468]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	2202      	movs	r2, #2
 80048f8:	4013      	ands	r3, r2
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x42e>
 80048fc:	e013      	b.n	8004926 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe fc75 	bl	80031ec <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004906:	e009      	b.n	800491c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fe fc70 	bl	80031ec <HAL_GetTick>
 800490c:	0002      	movs	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	4a6f      	ldr	r2, [pc, #444]	; (8004ad0 <HAL_RCC_OscConfig+0x620>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0d1      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800491c:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	2202      	movs	r2, #2
 8004922:	4013      	ands	r3, r2
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004926:	231f      	movs	r3, #31
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004930:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004934:	4b64      	ldr	r3, [pc, #400]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004936:	4967      	ldr	r1, [pc, #412]	; (8004ad4 <HAL_RCC_OscConfig+0x624>)
 8004938:	400a      	ands	r2, r1
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d100      	bne.n	8004946 <HAL_RCC_OscConfig+0x496>
 8004944:	e0bb      	b.n	8004abe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004946:	4b60      	ldr	r3, [pc, #384]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2238      	movs	r2, #56	; 0x38
 800494c:	4013      	ands	r3, r2
 800494e:	2b10      	cmp	r3, #16
 8004950:	d100      	bne.n	8004954 <HAL_RCC_OscConfig+0x4a4>
 8004952:	e07b      	b.n	8004a4c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d156      	bne.n	8004a0a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b5a      	ldr	r3, [pc, #360]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004962:	495d      	ldr	r1, [pc, #372]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fc40 	bl	80031ec <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fe fc3b 	bl	80031ec <HAL_GetTick>
 8004976:	0002      	movs	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e09d      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	049b      	lsls	r3, r3, #18
 800498c:	4013      	ands	r3, r2
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004990:	4b4d      	ldr	r3, [pc, #308]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a51      	ldr	r2, [pc, #324]	; (8004adc <HAL_RCC_OscConfig+0x62c>)
 8004996:	4013      	ands	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	431a      	orrs	r2, r3
 80049be:	4b42      	ldr	r3, [pc, #264]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c4:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	0449      	lsls	r1, r1, #17
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80049d2:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	4b3c      	ldr	r3, [pc, #240]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	0549      	lsls	r1, r1, #21
 80049dc:	430a      	orrs	r2, r1
 80049de:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fe fc04 	bl	80031ec <HAL_GetTick>
 80049e4:	0003      	movs	r3, r0
 80049e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fe fbff 	bl	80031ec <HAL_GetTick>
 80049ee:	0002      	movs	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e061      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	049b      	lsls	r3, r3, #18
 8004a04:	4013      	ands	r3, r2
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x53a>
 8004a08:	e059      	b.n	8004abe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a10:	4931      	ldr	r1, [pc, #196]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a12:	400a      	ands	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fe fbe9 	bl	80031ec <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fe fbe4 	bl	80031ec <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e046      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a3e:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a44:	4926      	ldr	r1, [pc, #152]	; (8004ae0 <HAL_RCC_OscConfig+0x630>)
 8004a46:	400a      	ands	r2, r1
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e038      	b.n	8004abe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e033      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <HAL_RCC_OscConfig+0x618>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2203      	movs	r2, #3
 8004a62:	401a      	ands	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d126      	bne.n	8004aba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2270      	movs	r2, #112	; 0x70
 8004a70:	401a      	ands	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11f      	bne.n	8004aba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	23fe      	movs	r3, #254	; 0xfe
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	401a      	ands	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	23f8      	movs	r3, #248	; 0xf8
 8004a90:	039b      	lsls	r3, r3, #14
 8004a92:	401a      	ands	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d10e      	bne.n	8004aba <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	23e0      	movs	r3, #224	; 0xe0
 8004aa0:	051b      	lsls	r3, r3, #20
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	0f5b      	lsrs	r3, r3, #29
 8004ab0:	075a      	lsls	r2, r3, #29
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d001      	beq.n	8004abe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b008      	add	sp, #32
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	00001388 	.word	0x00001388
 8004ad4:	efffffff 	.word	0xefffffff
 8004ad8:	feffffff 	.word	0xfeffffff
 8004adc:	11c1808c 	.word	0x11c1808c
 8004ae0:	eefefffc 	.word	0xeefefffc

08004ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0e9      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2207      	movs	r2, #7
 8004afe:	4013      	ands	r3, r2
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d91e      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b73      	ldr	r3, [pc, #460]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	4393      	bics	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	4b70      	ldr	r3, [pc, #448]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b18:	f7fe fb68 	bl	80031ec <HAL_GetTick>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b20:	e009      	b.n	8004b36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b22:	f7fe fb63 	bl	80031ec <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	4a6a      	ldr	r2, [pc, #424]	; (8004cd8 <HAL_RCC_ClockConfig+0x1f4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0ca      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2207      	movs	r2, #7
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d1ee      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d015      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2204      	movs	r2, #4
 8004b54:	4013      	ands	r3, r2
 8004b56:	d006      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b58:	4b60      	ldr	r3, [pc, #384]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004b5e:	21e0      	movs	r1, #224	; 0xe0
 8004b60:	01c9      	lsls	r1, r1, #7
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b66:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_RCC_ClockConfig+0x1fc>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004b76:	430a      	orrs	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d057      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	029b      	lsls	r3, r3, #10
 8004b94:	4013      	ands	r3, r2
 8004b96:	d12b      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e097      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba4:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	049b      	lsls	r3, r3, #18
 8004bac:	4013      	ands	r3, r2
 8004bae:	d11f      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e08b      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bbc:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d113      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e07f      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e074      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e06d      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bf0:	4b3a      	ldr	r3, [pc, #232]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	4393      	bics	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c04:	f7fe faf2 	bl	80031ec <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0c:	e009      	b.n	8004c22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0e:	f7fe faed 	bl	80031ec <HAL_GetTick>
 8004c12:	0002      	movs	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <HAL_RCC_ClockConfig+0x1f4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e054      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2238      	movs	r2, #56	; 0x38
 8004c28:	401a      	ands	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1ec      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2207      	movs	r2, #7
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d21e      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2207      	movs	r2, #7
 8004c48:	4393      	bics	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c54:	f7fe faca 	bl	80031ec <HAL_GetTick>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c5c:	e009      	b.n	8004c72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5e:	f7fe fac5 	bl	80031ec <HAL_GetTick>
 8004c62:	0002      	movs	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_RCC_ClockConfig+0x1f4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e02c      	b.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c72:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2207      	movs	r2, #7
 8004c78:	4013      	ands	r3, r2
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2204      	movs	r2, #4
 8004c86:	4013      	ands	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <HAL_RCC_ClockConfig+0x200>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c9e:	f000 f829 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004ca2:	0001      	movs	r1, r0
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCC_ClockConfig+0x1f8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	220f      	movs	r2, #15
 8004cac:	401a      	ands	r2, r3
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_RCC_ClockConfig+0x204>)
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	58d3      	ldr	r3, [r2, r3]
 8004cb4:	221f      	movs	r2, #31
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	000a      	movs	r2, r1
 8004cba:	40da      	lsrs	r2, r3
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x208>)
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x20c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fe fa35 	bl	8003134 <HAL_InitTick>
 8004cca:	0003      	movs	r3, r0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b004      	add	sp, #16
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	00001388 	.word	0x00001388
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	fffff0ff 	.word	0xfffff0ff
 8004ce4:	ffff8fff 	.word	0xffff8fff
 8004ce8:	08009fc8 	.word	0x08009fc8
 8004cec:	20000004 	.word	0x20000004
 8004cf0:	20000008 	.word	0x20000008

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfa:	4b3c      	ldr	r3, [pc, #240]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2238      	movs	r2, #56	; 0x38
 8004d00:	4013      	ands	r3, r2
 8004d02:	d10f      	bne.n	8004d24 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	0adb      	lsrs	r3, r3, #11
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2201      	movs	r2, #1
 8004d10:	409a      	lsls	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	4835      	ldr	r0, [pc, #212]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d1a:	f7fb fa0f 	bl	800013c <__udivsi3>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e05d      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d24:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2238      	movs	r2, #56	; 0x38
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	e054      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2238      	movs	r2, #56	; 0x38
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d138      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d42:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2203      	movs	r2, #3
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	2207      	movs	r2, #7
 8004d54:	4013      	ands	r3, r2
 8004d56:	3301      	adds	r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	4824      	ldr	r0, [pc, #144]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d64:	f7fb f9ea 	bl	800013c <__udivsi3>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	227f      	movs	r2, #127	; 0x7f
 8004d74:	4013      	ands	r3, r2
 8004d76:	434b      	muls	r3, r1
 8004d78:	617b      	str	r3, [r7, #20]
        break;
 8004d7a:	e00d      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	481c      	ldr	r0, [pc, #112]	; (8004df0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d80:	f7fb f9dc 	bl	800013c <__udivsi3>
 8004d84:	0003      	movs	r3, r0
 8004d86:	0019      	movs	r1, r3
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	227f      	movs	r2, #127	; 0x7f
 8004d90:	4013      	ands	r3, r2
 8004d92:	434b      	muls	r3, r1
 8004d94:	617b      	str	r3, [r7, #20]
        break;
 8004d96:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d98:	4b14      	ldr	r3, [pc, #80]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0f5b      	lsrs	r3, r3, #29
 8004d9e:	2207      	movs	r2, #7
 8004da0:	4013      	ands	r3, r2
 8004da2:	3301      	adds	r3, #1
 8004da4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	6978      	ldr	r0, [r7, #20]
 8004daa:	f7fb f9c7 	bl	800013c <__udivsi3>
 8004dae:	0003      	movs	r3, r0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e015      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2238      	movs	r2, #56	; 0x38
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d103      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2238      	movs	r2, #56	; 0x38
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b18      	cmp	r3, #24
 8004dd2:	d103      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004dd4:	23fa      	movs	r3, #250	; 0xfa
 8004dd6:	01db      	lsls	r3, r3, #7
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e001      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004de0:	693b      	ldr	r3, [r7, #16]
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b006      	add	sp, #24
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	007a1200 	.word	0x007a1200

08004df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e10:	f7ff fff2 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e14:	0004      	movs	r4, r0
 8004e16:	f7ff fb3f 	bl	8004498 <LL_RCC_GetAPB1Prescaler>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	0b1a      	lsrs	r2, r3, #12
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e20:	0092      	lsls	r2, r2, #2
 8004e22:	58d3      	ldr	r3, [r2, r3]
 8004e24:	221f      	movs	r2, #31
 8004e26:	4013      	ands	r3, r2
 8004e28:	40dc      	lsrs	r4, r3
 8004e2a:	0023      	movs	r3, r4
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bdb0      	pop	{r4, r5, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	0800a008 	.word	0x0800a008

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04a      	b.n	8004ee0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	223d      	movs	r2, #61	; 0x3d
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	223c      	movs	r2, #60	; 0x3c
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7fd ff71 	bl	8002d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	223d      	movs	r2, #61	; 0x3d
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	0019      	movs	r1, r3
 8004e78:	0010      	movs	r0, r2
 8004e7a:	f000 fd75 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2248      	movs	r2, #72	; 0x48
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	223e      	movs	r2, #62	; 0x3e
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223f      	movs	r2, #63	; 0x3f
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	; 0x41
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2242      	movs	r2, #66	; 0x42
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2243      	movs	r2, #67	; 0x43
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2244      	movs	r2, #68	; 0x44
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2245      	movs	r2, #69	; 0x45
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2246      	movs	r2, #70	; 0x46
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2247      	movs	r2, #71	; 0x47
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	223d      	movs	r2, #61	; 0x3d
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	223d      	movs	r2, #61	; 0x3d
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e03d      	b.n	8004f7c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223d      	movs	r2, #61	; 0x3d
 8004f04:	2102      	movs	r1, #2
 8004f06:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2101      	movs	r1, #1
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00a      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x50>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	05db      	lsls	r3, r3, #23
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x50>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d116      	bne.n	8004f66 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <HAL_TIM_Base_Start_IT+0xa4>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d016      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x90>
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	025b      	lsls	r3, r3, #9
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d011      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f64:	e008      	b.n	8004f78 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2101      	movs	r1, #1
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e000      	b.n	8004f7a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b004      	add	sp, #16
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	00010007 	.word	0x00010007

08004f90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e04a      	b.n	8005038 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	; 0x3d
 8004fa6:	5c9b      	ldrb	r3, [r3, r2]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	223c      	movs	r2, #60	; 0x3c
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 f841 	bl	8005040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223d      	movs	r2, #61	; 0x3d
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	0019      	movs	r1, r3
 8004fd0:	0010      	movs	r0, r2
 8004fd2:	f000 fcc9 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2248      	movs	r2, #72	; 0x48
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	223e      	movs	r2, #62	; 0x3e
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	223f      	movs	r2, #63	; 0x3f
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2240      	movs	r2, #64	; 0x40
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	5499      	strb	r1, [r3, r2]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2241      	movs	r2, #65	; 0x41
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2242      	movs	r2, #66	; 0x42
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2243      	movs	r2, #67	; 0x43
 800500a:	2101      	movs	r1, #1
 800500c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2244      	movs	r2, #68	; 0x44
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2245      	movs	r2, #69	; 0x45
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2246      	movs	r2, #70	; 0x46
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2247      	movs	r2, #71	; 0x47
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	223d      	movs	r2, #61	; 0x3d
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	b002      	add	sp, #8
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <HAL_TIM_PWM_Start+0x22>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	223e      	movs	r2, #62	; 0x3e
 8005064:	5c9b      	ldrb	r3, [r3, r2]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	4193      	sbcs	r3, r2
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e037      	b.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d108      	bne.n	800508a <HAL_TIM_PWM_Start+0x3a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	223f      	movs	r2, #63	; 0x3f
 800507c:	5c9b      	ldrb	r3, [r3, r2]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	4193      	sbcs	r3, r2
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e02b      	b.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d108      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x52>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	5c9b      	ldrb	r3, [r3, r2]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	1e5a      	subs	r2, r3, #1
 800509c:	4193      	sbcs	r3, r2
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e01f      	b.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d108      	bne.n	80050ba <HAL_TIM_PWM_Start+0x6a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2241      	movs	r2, #65	; 0x41
 80050ac:	5c9b      	ldrb	r3, [r3, r2]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	4193      	sbcs	r3, r2
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d108      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x82>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2242      	movs	r2, #66	; 0x42
 80050c4:	5c9b      	ldrb	r3, [r3, r2]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	4193      	sbcs	r3, r2
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e007      	b.n	80050e2 <HAL_TIM_PWM_Start+0x92>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2243      	movs	r2, #67	; 0x43
 80050d6:	5c9b      	ldrb	r3, [r3, r2]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	4193      	sbcs	r3, r2
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e081      	b.n	80051ee <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0xaa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	223e      	movs	r2, #62	; 0x3e
 80050f4:	2102      	movs	r1, #2
 80050f6:	5499      	strb	r1, [r3, r2]
 80050f8:	e023      	b.n	8005142 <HAL_TIM_PWM_Start+0xf2>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0xba>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	223f      	movs	r2, #63	; 0x3f
 8005104:	2102      	movs	r1, #2
 8005106:	5499      	strb	r1, [r3, r2]
 8005108:	e01b      	b.n	8005142 <HAL_TIM_PWM_Start+0xf2>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start+0xca>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2240      	movs	r2, #64	; 0x40
 8005114:	2102      	movs	r1, #2
 8005116:	5499      	strb	r1, [r3, r2]
 8005118:	e013      	b.n	8005142 <HAL_TIM_PWM_Start+0xf2>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d104      	bne.n	800512a <HAL_TIM_PWM_Start+0xda>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2241      	movs	r2, #65	; 0x41
 8005124:	2102      	movs	r1, #2
 8005126:	5499      	strb	r1, [r3, r2]
 8005128:	e00b      	b.n	8005142 <HAL_TIM_PWM_Start+0xf2>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b10      	cmp	r3, #16
 800512e:	d104      	bne.n	800513a <HAL_TIM_PWM_Start+0xea>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2242      	movs	r2, #66	; 0x42
 8005134:	2102      	movs	r1, #2
 8005136:	5499      	strb	r1, [r3, r2]
 8005138:	e003      	b.n	8005142 <HAL_TIM_PWM_Start+0xf2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2243      	movs	r2, #67	; 0x43
 800513e:	2102      	movs	r1, #2
 8005140:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	0018      	movs	r0, r3
 800514c:	f000 ffba 	bl	80060c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a28      	ldr	r2, [pc, #160]	; (80051f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_TIM_PWM_Start+0x11e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a27      	ldr	r2, [pc, #156]	; (80051fc <HAL_TIM_PWM_Start+0x1ac>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_TIM_PWM_Start+0x11e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a25      	ldr	r2, [pc, #148]	; (8005200 <HAL_TIM_PWM_Start+0x1b0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <HAL_TIM_PWM_Start+0x122>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_TIM_PWM_Start+0x124>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	0209      	lsls	r1, r1, #8
 8005186:	430a      	orrs	r2, r1
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <HAL_TIM_PWM_Start+0x1a8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00a      	beq.n	80051aa <HAL_TIM_PWM_Start+0x15a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	429a      	cmp	r2, r3
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Start+0x15a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIM_PWM_Start+0x1b4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d116      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_TIM_PWM_Start+0x1b8>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d016      	beq.n	80051ea <HAL_TIM_PWM_Start+0x19a>
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	025b      	lsls	r3, r3, #9
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d011      	beq.n	80051ea <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e008      	b.n	80051ea <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2101      	movs	r1, #1
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e000      	b.n	80051ec <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800
 8005204:	40000400 	.word	0x40000400
 8005208:	00010007 	.word	0x00010007

0800520c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	0018      	movs	r0, r3
 8005220:	f000 ff50 	bl	80060c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a35      	ldr	r2, [pc, #212]	; (8005300 <HAL_TIM_PWM_Stop+0xf4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIM_PWM_Stop+0x36>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a34      	ldr	r2, [pc, #208]	; (8005304 <HAL_TIM_PWM_Stop+0xf8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIM_PWM_Stop+0x36>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a32      	ldr	r2, [pc, #200]	; (8005308 <HAL_TIM_PWM_Stop+0xfc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_Stop+0x3a>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_TIM_PWM_Stop+0x3c>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	4a2e      	ldr	r2, [pc, #184]	; (800530c <HAL_TIM_PWM_Stop+0x100>)
 8005254:	4013      	ands	r3, r2
 8005256:	d10d      	bne.n	8005274 <HAL_TIM_PWM_Stop+0x68>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <HAL_TIM_PWM_Stop+0x104>)
 8005260:	4013      	ands	r3, r2
 8005262:	d107      	bne.n	8005274 <HAL_TIM_PWM_Stop+0x68>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4929      	ldr	r1, [pc, #164]	; (8005314 <HAL_TIM_PWM_Stop+0x108>)
 8005270:	400a      	ands	r2, r1
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_TIM_PWM_Stop+0x100>)
 800527c:	4013      	ands	r3, r2
 800527e:	d10d      	bne.n	800529c <HAL_TIM_PWM_Stop+0x90>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_TIM_PWM_Stop+0x104>)
 8005288:	4013      	ands	r3, r2
 800528a:	d107      	bne.n	800529c <HAL_TIM_PWM_Stop+0x90>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	438a      	bics	r2, r1
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_TIM_PWM_Stop+0xa0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	223e      	movs	r2, #62	; 0x3e
 80052a6:	2101      	movs	r1, #1
 80052a8:	5499      	strb	r1, [r3, r2]
 80052aa:	e023      	b.n	80052f4 <HAL_TIM_PWM_Stop+0xe8>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_PWM_Stop+0xb0>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	223f      	movs	r2, #63	; 0x3f
 80052b6:	2101      	movs	r1, #1
 80052b8:	5499      	strb	r1, [r3, r2]
 80052ba:	e01b      	b.n	80052f4 <HAL_TIM_PWM_Stop+0xe8>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_PWM_Stop+0xc0>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2240      	movs	r2, #64	; 0x40
 80052c6:	2101      	movs	r1, #1
 80052c8:	5499      	strb	r1, [r3, r2]
 80052ca:	e013      	b.n	80052f4 <HAL_TIM_PWM_Stop+0xe8>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_PWM_Stop+0xd0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2241      	movs	r2, #65	; 0x41
 80052d6:	2101      	movs	r1, #1
 80052d8:	5499      	strb	r1, [r3, r2]
 80052da:	e00b      	b.n	80052f4 <HAL_TIM_PWM_Stop+0xe8>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d104      	bne.n	80052ec <HAL_TIM_PWM_Stop+0xe0>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2242      	movs	r2, #66	; 0x42
 80052e6:	2101      	movs	r1, #1
 80052e8:	5499      	strb	r1, [r3, r2]
 80052ea:	e003      	b.n	80052f4 <HAL_TIM_PWM_Stop+0xe8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2243      	movs	r2, #67	; 0x43
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b002      	add	sp, #8
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800
 800530c:	00001111 	.word	0x00001111
 8005310:	00000444 	.word	0x00000444
 8005314:	ffff7fff 	.word	0xffff7fff

08005318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2202      	movs	r2, #2
 8005328:	4013      	ands	r3, r2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d124      	bne.n	8005378 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2202      	movs	r2, #2
 8005336:	4013      	ands	r3, r2
 8005338:	2b02      	cmp	r3, #2
 800533a:	d11d      	bne.n	8005378 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2203      	movs	r2, #3
 8005342:	4252      	negs	r2, r2
 8005344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2203      	movs	r2, #3
 8005354:	4013      	ands	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 faec 	bl	8005938 <HAL_TIM_IC_CaptureCallback>
 8005360:	e007      	b.n	8005372 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	0018      	movs	r0, r3
 8005366:	f000 fadf 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 faeb 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2204      	movs	r2, #4
 8005380:	4013      	ands	r3, r2
 8005382:	2b04      	cmp	r3, #4
 8005384:	d125      	bne.n	80053d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2204      	movs	r2, #4
 800538e:	4013      	ands	r3, r2
 8005390:	2b04      	cmp	r3, #4
 8005392:	d11e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2205      	movs	r2, #5
 800539a:	4252      	negs	r2, r2
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	23c0      	movs	r3, #192	; 0xc0
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 fabf 	bl	8005938 <HAL_TIM_IC_CaptureCallback>
 80053ba:	e007      	b.n	80053cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 fab2 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 fabe 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2208      	movs	r2, #8
 80053da:	4013      	ands	r3, r2
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d124      	bne.n	800542a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2208      	movs	r2, #8
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d11d      	bne.n	800542a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2209      	movs	r2, #9
 80053f4:	4252      	negs	r2, r2
 80053f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	2203      	movs	r2, #3
 8005406:	4013      	ands	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fa93 	bl	8005938 <HAL_TIM_IC_CaptureCallback>
 8005412:	e007      	b.n	8005424 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fa86 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	0018      	movs	r0, r3
 8005420:	f000 fa92 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2210      	movs	r2, #16
 8005432:	4013      	ands	r3, r2
 8005434:	2b10      	cmp	r3, #16
 8005436:	d125      	bne.n	8005484 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2210      	movs	r2, #16
 8005440:	4013      	ands	r3, r2
 8005442:	2b10      	cmp	r3, #16
 8005444:	d11e      	bne.n	8005484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2211      	movs	r2, #17
 800544c:	4252      	negs	r2, r2
 800544e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2208      	movs	r2, #8
 8005454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	23c0      	movs	r3, #192	; 0xc0
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4013      	ands	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fa66 	bl	8005938 <HAL_TIM_IC_CaptureCallback>
 800546c:	e007      	b.n	800547e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 fa59 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f000 fa65 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2201      	movs	r2, #1
 800548c:	4013      	ands	r3, r2
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10f      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	4013      	ands	r3, r2
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2202      	movs	r2, #2
 80054a6:	4252      	negs	r2, r2
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fd fbcd 	bl	8002c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d10f      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d108      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2281      	movs	r2, #129	; 0x81
 80054d4:	4252      	negs	r2, r2
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fe86 	bl	80061ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	401a      	ands	r2, r3
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <HAL_TIM_IRQHandler+0x260>)
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0018      	movs	r0, r3
 800550e:	f000 fe75 	bl	80061fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2240      	movs	r2, #64	; 0x40
 800551a:	4013      	ands	r3, r2
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10f      	bne.n	8005540 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d108      	bne.n	8005540 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2241      	movs	r2, #65	; 0x41
 8005534:	4252      	negs	r2, r2
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 fa0c 	bl	8005958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2220      	movs	r2, #32
 8005548:	4013      	ands	r3, r2
 800554a:	2b20      	cmp	r3, #32
 800554c:	d10f      	bne.n	800556e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	4013      	ands	r3, r2
 8005558:	2b20      	cmp	r3, #32
 800555a:	d108      	bne.n	800556e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2221      	movs	r2, #33	; 0x21
 8005562:	4252      	negs	r2, r2
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0018      	movs	r0, r3
 800556a:	f000 fe37 	bl	80061dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b002      	add	sp, #8
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	fffffeff 	.word	0xfffffeff

0800557c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2317      	movs	r3, #23
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	223c      	movs	r2, #60	; 0x3c
 8005594:	5c9b      	ldrb	r3, [r3, r2]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_TIM_PWM_ConfigChannel+0x22>
 800559a:	2302      	movs	r3, #2
 800559c:	e0e5      	b.n	800576a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	223c      	movs	r2, #60	; 0x3c
 80055a2:	2101      	movs	r1, #1
 80055a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b14      	cmp	r3, #20
 80055aa:	d900      	bls.n	80055ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80055ac:	e0d1      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	009a      	lsls	r2, r3, #2
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0011      	movs	r1, r2
 80055c2:	0018      	movs	r0, r3
 80055c4:	f000 fa46 	bl	8005a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2108      	movs	r1, #8
 80055d4:	430a      	orrs	r2, r1
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2104      	movs	r1, #4
 80055e4:	438a      	bics	r2, r1
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
      break;
 80055fa:	e0af      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f000 faa5 	bl	8005b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	0109      	lsls	r1, r1, #4
 8005618:	430a      	orrs	r2, r1
 800561a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4954      	ldr	r1, [pc, #336]	; (8005778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005628:	400a      	ands	r2, r1
 800562a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6999      	ldr	r1, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]
      break;
 8005640:	e08c      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0011      	movs	r1, r2
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fb00 	bl	8005c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69da      	ldr	r2, [r3, #28]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2108      	movs	r1, #8
 800565c:	430a      	orrs	r2, r1
 800565e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2104      	movs	r1, #4
 800566c:	438a      	bics	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69d9      	ldr	r1, [r3, #28]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
      break;
 8005682:	e06b      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	0011      	movs	r1, r2
 800568c:	0018      	movs	r0, r3
 800568e:	f000 fb61 	bl	8005d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	0109      	lsls	r1, r1, #4
 80056a0:	430a      	orrs	r2, r1
 80056a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4932      	ldr	r1, [pc, #200]	; (8005778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69d9      	ldr	r1, [r3, #28]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	61da      	str	r2, [r3, #28]
      break;
 80056c8:	e048      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 fba2 	bl	8005e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2108      	movs	r1, #8
 80056e4:	430a      	orrs	r2, r1
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2104      	movs	r1, #4
 80056f4:	438a      	bics	r2, r1
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800570a:	e027      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fbdb 	bl	8005ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0109      	lsls	r1, r1, #4
 8005728:	430a      	orrs	r2, r1
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4910      	ldr	r1, [pc, #64]	; (8005778 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005738:	400a      	ands	r2, r1
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005750:	e004      	b.n	800575c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005752:	2317      	movs	r3, #23
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
      break;
 800575a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	223c      	movs	r2, #60	; 0x3c
 8005760:	2100      	movs	r1, #0
 8005762:	5499      	strb	r1, [r3, r2]

  return status;
 8005764:	2317      	movs	r3, #23
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	781b      	ldrb	r3, [r3, #0]
}
 800576a:	0018      	movs	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	b006      	add	sp, #24
 8005770:	bd80      	pop	{r7, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	0800a028 	.word	0x0800a028
 8005778:	fffffbff 	.word	0xfffffbff

0800577c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005786:	230f      	movs	r3, #15
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	223c      	movs	r2, #60	; 0x3c
 8005792:	5c9b      	ldrb	r3, [r3, r2]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIM_ConfigClockSource+0x20>
 8005798:	2302      	movs	r3, #2
 800579a:	e0bc      	b.n	8005916 <HAL_TIM_ConfigClockSource+0x19a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223c      	movs	r2, #60	; 0x3c
 80057a0:	2101      	movs	r1, #1
 80057a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	223d      	movs	r2, #61	; 0x3d
 80057a8:	2102      	movs	r1, #2
 80057aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a5a      	ldr	r2, [pc, #360]	; (8005920 <HAL_TIM_ConfigClockSource+0x1a4>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a59      	ldr	r2, [pc, #356]	; (8005924 <HAL_TIM_ConfigClockSource+0x1a8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	0192      	lsls	r2, r2, #6
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xde>
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	0192      	lsls	r2, r2, #6
 80057dc:	4293      	cmp	r3, r2
 80057de:	d900      	bls.n	80057e2 <HAL_TIM_ConfigClockSource+0x66>
 80057e0:	e088      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	0152      	lsls	r2, r2, #5
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d100      	bne.n	80057ec <HAL_TIM_ConfigClockSource+0x70>
 80057ea:	e088      	b.n	80058fe <HAL_TIM_ConfigClockSource+0x182>
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	0152      	lsls	r2, r2, #5
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d900      	bls.n	80057f6 <HAL_TIM_ConfigClockSource+0x7a>
 80057f4:	e07e      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 80057f6:	2b70      	cmp	r3, #112	; 0x70
 80057f8:	d018      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xb0>
 80057fa:	d900      	bls.n	80057fe <HAL_TIM_ConfigClockSource+0x82>
 80057fc:	e07a      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 80057fe:	2b60      	cmp	r3, #96	; 0x60
 8005800:	d04f      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x126>
 8005802:	d900      	bls.n	8005806 <HAL_TIM_ConfigClockSource+0x8a>
 8005804:	e076      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 8005806:	2b50      	cmp	r3, #80	; 0x50
 8005808:	d03b      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x106>
 800580a:	d900      	bls.n	800580e <HAL_TIM_ConfigClockSource+0x92>
 800580c:	e072      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d057      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x146>
 8005812:	d900      	bls.n	8005816 <HAL_TIM_ConfigClockSource+0x9a>
 8005814:	e06e      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 8005816:	2b30      	cmp	r3, #48	; 0x30
 8005818:	d063      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x166>
 800581a:	d86b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d060      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x166>
 8005820:	d868      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d05d      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x166>
 8005826:	2b10      	cmp	r3, #16
 8005828:	d05b      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x166>
 800582a:	e063      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800583c:	f000 fc22 	bl	8006084 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2277      	movs	r2, #119	; 0x77
 800584c:	4313      	orrs	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]
      break;
 8005858:	e052      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800586a:	f000 fc0b 	bl	8006084 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	01c9      	lsls	r1, r1, #7
 800587c:	430a      	orrs	r2, r1
 800587e:	609a      	str	r2, [r3, #8]
      break;
 8005880:	e03e      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	001a      	movs	r2, r3
 8005890:	f000 fb7c 	bl	8005f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2150      	movs	r1, #80	; 0x50
 800589a:	0018      	movs	r0, r3
 800589c:	f000 fbd6 	bl	800604c <TIM_ITRx_SetConfig>
      break;
 80058a0:	e02e      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ae:	001a      	movs	r2, r3
 80058b0:	f000 fb9a 	bl	8005fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2160      	movs	r1, #96	; 0x60
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 fbc6 	bl	800604c <TIM_ITRx_SetConfig>
      break;
 80058c0:	e01e      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	001a      	movs	r2, r3
 80058d0:	f000 fb5c 	bl	8005f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2140      	movs	r1, #64	; 0x40
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fbb6 	bl	800604c <TIM_ITRx_SetConfig>
      break;
 80058e0:	e00e      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	0019      	movs	r1, r3
 80058ec:	0010      	movs	r0, r2
 80058ee:	f000 fbad 	bl	800604c <TIM_ITRx_SetConfig>
      break;
 80058f2:	e005      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058f4:	230f      	movs	r3, #15
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
      break;
 80058fc:	e000      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	223d      	movs	r2, #61	; 0x3d
 8005904:	2101      	movs	r1, #1
 8005906:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	223c      	movs	r2, #60	; 0x3c
 800590c:	2100      	movs	r1, #0
 800590e:	5499      	strb	r1, [r3, r2]

  return status;
 8005910:	230f      	movs	r3, #15
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	781b      	ldrb	r3, [r3, #0]
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	ffceff88 	.word	0xffceff88
 8005924:	ffff00ff 	.word	0xffff00ff

08005928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b002      	add	sp, #8
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <TIM_Base_SetConfig+0xd4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d008      	beq.n	8005992 <TIM_Base_SetConfig+0x2a>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	05db      	lsls	r3, r3, #23
 8005986:	429a      	cmp	r2, r3
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0x2a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2c      	ldr	r2, [pc, #176]	; (8005a40 <TIM_Base_SetConfig+0xd8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2270      	movs	r2, #112	; 0x70
 8005996:	4393      	bics	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0xd4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d014      	beq.n	80059d6 <TIM_Base_SetConfig+0x6e>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	05db      	lsls	r3, r3, #23
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0x6e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <TIM_Base_SetConfig+0xd8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x6e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a20      	ldr	r2, [pc, #128]	; (8005a44 <TIM_Base_SetConfig+0xdc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x6e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <TIM_Base_SetConfig+0xe0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x6e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <TIM_Base_SetConfig+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <TIM_Base_SetConfig+0xe8>)
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	4393      	bics	r3, r2
 80059ee:	001a      	movs	r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <TIM_Base_SetConfig+0xd4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0xbe>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <TIM_Base_SetConfig+0xe0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0xbe>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d103      	bne.n	8005a2e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	615a      	str	r2, [r3, #20]
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40002000 	.word	0x40002000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	fffffcff 	.word	0xfffffcff

08005a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	2201      	movs	r2, #1
 8005a64:	4393      	bics	r3, r2
 8005a66:	001a      	movs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a2e      	ldr	r2, [pc, #184]	; (8005b3c <TIM_OC1_SetConfig+0xe8>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2203      	movs	r2, #3
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	4393      	bics	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <TIM_OC1_SetConfig+0xec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_OC1_SetConfig+0x6e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a23      	ldr	r2, [pc, #140]	; (8005b44 <TIM_OC1_SetConfig+0xf0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC1_SetConfig+0x6e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <TIM_OC1_SetConfig+0xf4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10c      	bne.n	8005adc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	4393      	bics	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	4393      	bics	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <TIM_OC1_SetConfig+0xec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_OC1_SetConfig+0xa0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <TIM_OC1_SetConfig+0xf0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC1_SetConfig+0xa0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <TIM_OC1_SetConfig+0xf4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d111      	bne.n	8005b18 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <TIM_OC1_SetConfig+0xf8>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4a14      	ldr	r2, [pc, #80]	; (8005b50 <TIM_OC1_SetConfig+0xfc>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b006      	add	sp, #24
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	fffeff8f 	.word	0xfffeff8f
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800
 8005b4c:	fffffeff 	.word	0xfffffeff
 8005b50:	fffffdff 	.word	0xfffffdff

08005b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	2210      	movs	r2, #16
 8005b64:	4393      	bics	r3, r2
 8005b66:	001a      	movs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a2c      	ldr	r2, [pc, #176]	; (8005c34 <TIM_OC2_SetConfig+0xe0>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a2b      	ldr	r2, [pc, #172]	; (8005c38 <TIM_OC2_SetConfig+0xe4>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a22      	ldr	r2, [pc, #136]	; (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10d      	bne.n	8005bd2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	4393      	bics	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	4393      	bics	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_OC2_SetConfig+0x96>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <TIM_OC2_SetConfig+0xec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC2_SetConfig+0x96>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC2_SetConfig+0xf0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d113      	bne.n	8005c12 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <TIM_OC2_SetConfig+0xf4>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <TIM_OC2_SetConfig+0xf8>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	621a      	str	r2, [r3, #32]
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b006      	add	sp, #24
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	feff8fff 	.word	0xfeff8fff
 8005c38:	fffffcff 	.word	0xfffffcff
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800
 8005c48:	fffffbff 	.word	0xfffffbff
 8005c4c:	fffff7ff 	.word	0xfffff7ff

08005c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	4a33      	ldr	r2, [pc, #204]	; (8005d2c <TIM_OC3_SetConfig+0xdc>)
 8005c60:	401a      	ands	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <TIM_OC3_SetConfig+0xe0>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2203      	movs	r2, #3
 8005c84:	4393      	bics	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <TIM_OC3_SetConfig+0xe4>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <TIM_OC3_SetConfig+0xe8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10d      	bne.n	8005cca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <TIM_OC3_SetConfig+0xec>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <TIM_OC3_SetConfig+0xf0>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <TIM_OC3_SetConfig+0xe8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x92>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <TIM_OC3_SetConfig+0xf4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x92>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <TIM_OC3_SetConfig+0xf8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d113      	bne.n	8005d0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <TIM_OC3_SetConfig+0xfc>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <TIM_OC3_SetConfig+0x100>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b006      	add	sp, #24
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	fffffeff 	.word	0xfffffeff
 8005d30:	fffeff8f 	.word	0xfffeff8f
 8005d34:	fffffdff 	.word	0xfffffdff
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	fffff7ff 	.word	0xfffff7ff
 8005d40:	fffffbff 	.word	0xfffffbff
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800
 8005d4c:	ffffefff 	.word	0xffffefff
 8005d50:	ffffdfff 	.word	0xffffdfff

08005d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_OC4_SetConfig+0xa8>)
 8005d64:	401a      	ands	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <TIM_OC4_SetConfig+0xac>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <TIM_OC4_SetConfig+0xb0>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <TIM_OC4_SetConfig+0xb4>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_OC4_SetConfig+0xb8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x70>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_OC4_SetConfig+0xbc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x70>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_OC4_SetConfig+0xc0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_OC4_SetConfig+0xc4>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b006      	add	sp, #24
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	ffffefff 	.word	0xffffefff
 8005e00:	feff8fff 	.word	0xfeff8fff
 8005e04:	fffffcff 	.word	0xfffffcff
 8005e08:	ffffdfff 	.word	0xffffdfff
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800
 8005e18:	ffffbfff 	.word	0xffffbfff

08005e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <TIM_OC5_SetConfig+0x9c>)
 8005e2c:	401a      	ands	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <TIM_OC5_SetConfig+0xa0>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <TIM_OC5_SetConfig+0xa4>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <TIM_OC5_SetConfig+0xa8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_OC5_SetConfig+0x66>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_OC5_SetConfig+0xac>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC5_SetConfig+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <TIM_OC5_SetConfig+0xb0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d109      	bne.n	8005e96 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <TIM_OC5_SetConfig+0x9c>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b006      	add	sp, #24
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	fffeffff 	.word	0xfffeffff
 8005ebc:	fffeff8f 	.word	0xfffeff8f
 8005ec0:	fffdffff 	.word	0xfffdffff
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800

08005ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <TIM_OC6_SetConfig+0xa0>)
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <TIM_OC6_SetConfig+0xa4>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <TIM_OC6_SetConfig+0xa8>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	051b      	lsls	r3, r3, #20
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC6_SetConfig+0xac>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC6_SetConfig+0x68>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC6_SetConfig+0xb0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC6_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC6_SetConfig+0xb4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <TIM_OC6_SetConfig+0xb8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	ffefffff 	.word	0xffefffff
 8005f74:	feff8fff 	.word	0xfeff8fff
 8005f78:	ffdfffff 	.word	0xffdfffff
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800
 8005f88:	fffbffff 	.word	0xfffbffff

08005f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4393      	bics	r3, r2
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	22f0      	movs	r2, #240	; 0xf0
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	4393      	bics	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b006      	add	sp, #24
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	4393      	bics	r3, r2
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <TIM_TI2_ConfigInputStage+0x60>)
 8006012:	4013      	ands	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	22a0      	movs	r2, #160	; 0xa0
 8006024:	4393      	bics	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	46bd      	mov	sp, r7
 8006042:	b006      	add	sp, #24
 8006044:	bd80      	pop	{r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	ffff0fff 	.word	0xffff0fff

0800604c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <TIM_ITRx_SetConfig+0x34>)
 8006060:	4013      	ands	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	2207      	movs	r2, #7
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	609a      	str	r2, [r3, #8]
}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	46bd      	mov	sp, r7
 800607a:	b004      	add	sp, #16
 800607c:	bd80      	pop	{r7, pc}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	ffcfff8f 	.word	0xffcfff8f

08006084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <TIM_ETR_SetConfig+0x3c>)
 800609c:	4013      	ands	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	021a      	lsls	r2, r3, #8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	46c0      	nop			; (mov r8, r8)
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b006      	add	sp, #24
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	ffff00ff 	.word	0xffff00ff

080060c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	221f      	movs	r2, #31
 80060d4:	4013      	ands	r3, r2
 80060d6:	2201      	movs	r2, #1
 80060d8:	409a      	lsls	r2, r3
 80060da:	0013      	movs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	43d2      	mvns	r2, r2
 80060e6:	401a      	ands	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	211f      	movs	r1, #31
 80060f4:	400b      	ands	r3, r1
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4099      	lsls	r1, r3
 80060fa:	000b      	movs	r3, r1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b006      	add	sp, #24
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	223c      	movs	r2, #60	; 0x3c
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006120:	2302      	movs	r3, #2
 8006122:	e050      	b.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	223c      	movs	r2, #60	; 0x3c
 8006128:	2101      	movs	r1, #1
 800612a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	223d      	movs	r2, #61	; 0x3d
 8006130:	2102      	movs	r1, #2
 8006132:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006152:	4013      	ands	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2270      	movs	r2, #112	; 0x70
 8006164:	4393      	bics	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00a      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	429a      	cmp	r2, r3
 800618e:	d004      	beq.n	800619a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10c      	bne.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2280      	movs	r2, #128	; 0x80
 800619e:	4393      	bics	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	223d      	movs	r2, #61	; 0x3d
 80061b8:	2101      	movs	r1, #1
 80061ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	223c      	movs	r2, #60	; 0x3c
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b004      	add	sp, #16
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	ff0fffff 	.word	0xff0fffff
 80061d8:	40000400 	.word	0x40000400

080061dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b002      	add	sp, #8
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e046      	b.n	80062ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2288      	movs	r2, #136	; 0x88
 8006222:	589b      	ldr	r3, [r3, r2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d107      	bne.n	8006238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2284      	movs	r2, #132	; 0x84
 800622c:	2100      	movs	r1, #0
 800622e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	0018      	movs	r0, r3
 8006234:	f7fc fe02 	bl	8002e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2288      	movs	r2, #136	; 0x88
 800623c:	2124      	movs	r1, #36	; 0x24
 800623e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2101      	movs	r1, #1
 800624c:	438a      	bics	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	0018      	movs	r0, r3
 8006254:	f000 f8cc 	bl	80063f0 <UART_SetConfig>
 8006258:	0003      	movs	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e024      	b.n	80062ac <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 fb37 	bl	80068e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	490d      	ldr	r1, [pc, #52]	; (80062b4 <HAL_UART_Init+0xa8>)
 800627e:	400a      	ands	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	212a      	movs	r1, #42	; 0x2a
 800628e:	438a      	bics	r2, r1
 8006290:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2101      	movs	r1, #1
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 fbcf 	bl	8006a48 <UART_CheckIdleState>
 80062aa:	0003      	movs	r3, r0
}
 80062ac:	0018      	movs	r0, r3
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	ffffb7ff 	.word	0xffffb7ff

080062b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	1dbb      	adds	r3, r7, #6
 80062c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2288      	movs	r2, #136	; 0x88
 80062cc:	589b      	ldr	r3, [r3, r2]
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d000      	beq.n	80062d4 <HAL_UART_Transmit+0x1c>
 80062d2:	e088      	b.n	80063e6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_UART_Transmit+0x2a>
 80062da:	1dbb      	adds	r3, r7, #6
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e080      	b.n	80063e8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	015b      	lsls	r3, r3, #5
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d109      	bne.n	8006306 <HAL_UART_Transmit+0x4e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2201      	movs	r2, #1
 80062fe:	4013      	ands	r3, r2
 8006300:	d001      	beq.n	8006306 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e070      	b.n	80063e8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2290      	movs	r2, #144	; 0x90
 800630a:	2100      	movs	r1, #0
 800630c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2288      	movs	r2, #136	; 0x88
 8006312:	2121      	movs	r1, #33	; 0x21
 8006314:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006316:	f7fc ff69 	bl	80031ec <HAL_GetTick>
 800631a:	0003      	movs	r3, r0
 800631c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1dba      	adds	r2, r7, #6
 8006322:	2154      	movs	r1, #84	; 0x54
 8006324:	8812      	ldrh	r2, [r2, #0]
 8006326:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1dba      	adds	r2, r7, #6
 800632c:	2156      	movs	r1, #86	; 0x56
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	015b      	lsls	r3, r3, #5
 800633a:	429a      	cmp	r2, r3
 800633c:	d108      	bne.n	8006350 <HAL_UART_Transmit+0x98>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e003      	b.n	8006358 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006358:	e02c      	b.n	80063b4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	0013      	movs	r3, r2
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	f000 fbbc 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 800636c:	1e03      	subs	r3, r0, #0
 800636e:	d001      	beq.n	8006374 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e039      	b.n	80063e8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	001a      	movs	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	05d2      	lsls	r2, r2, #23
 8006386:	0dd2      	lsrs	r2, r2, #23
 8006388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	3302      	adds	r3, #2
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	e007      	b.n	80063a2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3301      	adds	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2256      	movs	r2, #86	; 0x56
 80063a6:	5a9b      	ldrh	r3, [r3, r2]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b299      	uxth	r1, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2256      	movs	r2, #86	; 0x56
 80063b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2256      	movs	r2, #86	; 0x56
 80063b8:	5a9b      	ldrh	r3, [r3, r2]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1cc      	bne.n	800635a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	0013      	movs	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	2140      	movs	r1, #64	; 0x40
 80063ce:	f000 fb89 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d001      	beq.n	80063da <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e006      	b.n	80063e8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2288      	movs	r2, #136	; 0x88
 80063de:	2120      	movs	r1, #32
 80063e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e000      	b.n	80063e8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	0018      	movs	r0, r3
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b008      	add	sp, #32
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b090      	sub	sp, #64	; 0x40
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f8:	231a      	movs	r3, #26
 80063fa:	2220      	movs	r2, #32
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	431a      	orrs	r2, r3
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4313      	orrs	r3, r2
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4ac4      	ldr	r2, [pc, #784]	; (8006734 <UART_SetConfig+0x344>)
 8006424:	4013      	ands	r3, r2
 8006426:	0019      	movs	r1, r3
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642e:	430b      	orrs	r3, r1
 8006430:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4abf      	ldr	r2, [pc, #764]	; (8006738 <UART_SetConfig+0x348>)
 800643a:	4013      	ands	r3, r2
 800643c:	0018      	movs	r0, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	68d9      	ldr	r1, [r3, #12]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	0003      	movs	r3, r0
 8006448:	430b      	orrs	r3, r1
 800644a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4ab9      	ldr	r2, [pc, #740]	; (800673c <UART_SetConfig+0x34c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006462:	4313      	orrs	r3, r2
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4ab4      	ldr	r2, [pc, #720]	; (8006740 <UART_SetConfig+0x350>)
 800646e:	4013      	ands	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	430b      	orrs	r3, r1
 800647a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	220f      	movs	r2, #15
 8006484:	4393      	bics	r3, r2
 8006486:	0018      	movs	r0, r3
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	0003      	movs	r3, r0
 8006492:	430b      	orrs	r3, r1
 8006494:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4aaa      	ldr	r2, [pc, #680]	; (8006744 <UART_SetConfig+0x354>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d131      	bne.n	8006504 <UART_SetConfig+0x114>
 80064a0:	4ba9      	ldr	r3, [pc, #676]	; (8006748 <UART_SetConfig+0x358>)
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	2203      	movs	r2, #3
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d01d      	beq.n	80064e8 <UART_SetConfig+0xf8>
 80064ac:	d823      	bhi.n	80064f6 <UART_SetConfig+0x106>
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d00c      	beq.n	80064cc <UART_SetConfig+0xdc>
 80064b2:	d820      	bhi.n	80064f6 <UART_SetConfig+0x106>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <UART_SetConfig+0xce>
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d00e      	beq.n	80064da <UART_SetConfig+0xea>
 80064bc:	e01b      	b.n	80064f6 <UART_SetConfig+0x106>
 80064be:	231b      	movs	r3, #27
 80064c0:	2220      	movs	r2, #32
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e071      	b.n	80065b0 <UART_SetConfig+0x1c0>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2202      	movs	r2, #2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e06a      	b.n	80065b0 <UART_SetConfig+0x1c0>
 80064da:	231b      	movs	r3, #27
 80064dc:	2220      	movs	r2, #32
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2204      	movs	r2, #4
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e063      	b.n	80065b0 <UART_SetConfig+0x1c0>
 80064e8:	231b      	movs	r3, #27
 80064ea:	2220      	movs	r2, #32
 80064ec:	189b      	adds	r3, r3, r2
 80064ee:	19db      	adds	r3, r3, r7
 80064f0:	2208      	movs	r2, #8
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e05c      	b.n	80065b0 <UART_SetConfig+0x1c0>
 80064f6:	231b      	movs	r3, #27
 80064f8:	2220      	movs	r2, #32
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	2210      	movs	r2, #16
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e055      	b.n	80065b0 <UART_SetConfig+0x1c0>
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a90      	ldr	r2, [pc, #576]	; (800674c <UART_SetConfig+0x35c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d106      	bne.n	800651c <UART_SetConfig+0x12c>
 800650e:	231b      	movs	r3, #27
 8006510:	2220      	movs	r2, #32
 8006512:	189b      	adds	r3, r3, r2
 8006514:	19db      	adds	r3, r3, r7
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e049      	b.n	80065b0 <UART_SetConfig+0x1c0>
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a86      	ldr	r2, [pc, #536]	; (800673c <UART_SetConfig+0x34c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d13e      	bne.n	80065a4 <UART_SetConfig+0x1b4>
 8006526:	4b88      	ldr	r3, [pc, #544]	; (8006748 <UART_SetConfig+0x358>)
 8006528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652a:	23c0      	movs	r3, #192	; 0xc0
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4013      	ands	r3, r2
 8006530:	22c0      	movs	r2, #192	; 0xc0
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	4293      	cmp	r3, r2
 8006536:	d027      	beq.n	8006588 <UART_SetConfig+0x198>
 8006538:	22c0      	movs	r2, #192	; 0xc0
 800653a:	0112      	lsls	r2, r2, #4
 800653c:	4293      	cmp	r3, r2
 800653e:	d82a      	bhi.n	8006596 <UART_SetConfig+0x1a6>
 8006540:	2280      	movs	r2, #128	; 0x80
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	4293      	cmp	r3, r2
 8006546:	d011      	beq.n	800656c <UART_SetConfig+0x17c>
 8006548:	2280      	movs	r2, #128	; 0x80
 800654a:	0112      	lsls	r2, r2, #4
 800654c:	4293      	cmp	r3, r2
 800654e:	d822      	bhi.n	8006596 <UART_SetConfig+0x1a6>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <UART_SetConfig+0x16e>
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	00d2      	lsls	r2, r2, #3
 8006558:	4293      	cmp	r3, r2
 800655a:	d00e      	beq.n	800657a <UART_SetConfig+0x18a>
 800655c:	e01b      	b.n	8006596 <UART_SetConfig+0x1a6>
 800655e:	231b      	movs	r3, #27
 8006560:	2220      	movs	r2, #32
 8006562:	189b      	adds	r3, r3, r2
 8006564:	19db      	adds	r3, r3, r7
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e021      	b.n	80065b0 <UART_SetConfig+0x1c0>
 800656c:	231b      	movs	r3, #27
 800656e:	2220      	movs	r2, #32
 8006570:	189b      	adds	r3, r3, r2
 8006572:	19db      	adds	r3, r3, r7
 8006574:	2202      	movs	r2, #2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e01a      	b.n	80065b0 <UART_SetConfig+0x1c0>
 800657a:	231b      	movs	r3, #27
 800657c:	2220      	movs	r2, #32
 800657e:	189b      	adds	r3, r3, r2
 8006580:	19db      	adds	r3, r3, r7
 8006582:	2204      	movs	r2, #4
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e013      	b.n	80065b0 <UART_SetConfig+0x1c0>
 8006588:	231b      	movs	r3, #27
 800658a:	2220      	movs	r2, #32
 800658c:	189b      	adds	r3, r3, r2
 800658e:	19db      	adds	r3, r3, r7
 8006590:	2208      	movs	r2, #8
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	e00c      	b.n	80065b0 <UART_SetConfig+0x1c0>
 8006596:	231b      	movs	r3, #27
 8006598:	2220      	movs	r2, #32
 800659a:	189b      	adds	r3, r3, r2
 800659c:	19db      	adds	r3, r3, r7
 800659e:	2210      	movs	r2, #16
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e005      	b.n	80065b0 <UART_SetConfig+0x1c0>
 80065a4:	231b      	movs	r3, #27
 80065a6:	2220      	movs	r2, #32
 80065a8:	189b      	adds	r3, r3, r2
 80065aa:	19db      	adds	r3, r3, r7
 80065ac:	2210      	movs	r2, #16
 80065ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a61      	ldr	r2, [pc, #388]	; (800673c <UART_SetConfig+0x34c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d000      	beq.n	80065bc <UART_SetConfig+0x1cc>
 80065ba:	e092      	b.n	80066e2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065bc:	231b      	movs	r3, #27
 80065be:	2220      	movs	r2, #32
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d015      	beq.n	80065f6 <UART_SetConfig+0x206>
 80065ca:	dc18      	bgt.n	80065fe <UART_SetConfig+0x20e>
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d00d      	beq.n	80065ec <UART_SetConfig+0x1fc>
 80065d0:	dc15      	bgt.n	80065fe <UART_SetConfig+0x20e>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <UART_SetConfig+0x1ec>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d005      	beq.n	80065e6 <UART_SetConfig+0x1f6>
 80065da:	e010      	b.n	80065fe <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065dc:	f7fe fc16 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80065e0:	0003      	movs	r3, r0
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e4:	e014      	b.n	8006610 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e6:	4b5a      	ldr	r3, [pc, #360]	; (8006750 <UART_SetConfig+0x360>)
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ea:	e011      	b.n	8006610 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ec:	f7fe fb82 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 80065f0:	0003      	movs	r3, r0
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f4:	e00c      	b.n	8006610 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065fc:	e008      	b.n	8006610 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006602:	231a      	movs	r3, #26
 8006604:	2220      	movs	r2, #32
 8006606:	189b      	adds	r3, r3, r2
 8006608:	19db      	adds	r3, r3, r7
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
        break;
 800660e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d100      	bne.n	8006618 <UART_SetConfig+0x228>
 8006616:	e147      	b.n	80068a8 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661c:	4b4d      	ldr	r3, [pc, #308]	; (8006754 <UART_SetConfig+0x364>)
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	5ad3      	ldrh	r3, [r2, r3]
 8006622:	0019      	movs	r1, r3
 8006624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006626:	f7f9 fd89 	bl	800013c <__udivsi3>
 800662a:	0003      	movs	r3, r0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	0013      	movs	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	189b      	adds	r3, r3, r2
 8006638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663a:	429a      	cmp	r2, r3
 800663c:	d305      	bcc.n	800664a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006646:	429a      	cmp	r2, r3
 8006648:	d906      	bls.n	8006658 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800664a:	231a      	movs	r3, #26
 800664c:	2220      	movs	r2, #32
 800664e:	189b      	adds	r3, r3, r2
 8006650:	19db      	adds	r3, r3, r7
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	e127      	b.n	80068a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006664:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <UART_SetConfig+0x364>)
 8006666:	0052      	lsls	r2, r2, #1
 8006668:	5ad3      	ldrh	r3, [r2, r3]
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	69b8      	ldr	r0, [r7, #24]
 8006676:	69f9      	ldr	r1, [r7, #28]
 8006678:	f7f9 ff4e 	bl	8000518 <__aeabi_uldivmod>
 800667c:	0002      	movs	r2, r0
 800667e:	000b      	movs	r3, r1
 8006680:	0e11      	lsrs	r1, r2, #24
 8006682:	021d      	lsls	r5, r3, #8
 8006684:	430d      	orrs	r5, r1
 8006686:	0214      	lsls	r4, r2, #8
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	1900      	adds	r0, r0, r4
 800669a:	4169      	adcs	r1, r5
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f7f9 ff35 	bl	8000518 <__aeabi_uldivmod>
 80066ae:	0002      	movs	r2, r0
 80066b0:	000b      	movs	r3, r1
 80066b2:	0013      	movs	r3, r2
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b8:	23c0      	movs	r3, #192	; 0xc0
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	429a      	cmp	r2, r3
 80066be:	d309      	bcc.n	80066d4 <UART_SetConfig+0x2e4>
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	035b      	lsls	r3, r3, #13
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d204      	bcs.n	80066d4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d0:	60da      	str	r2, [r3, #12]
 80066d2:	e0e9      	b.n	80068a8 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80066d4:	231a      	movs	r3, #26
 80066d6:	2220      	movs	r2, #32
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	19db      	adds	r3, r3, r7
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e0e2      	b.n	80068a8 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d000      	beq.n	80066f0 <UART_SetConfig+0x300>
 80066ee:	e083      	b.n	80067f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80066f0:	231b      	movs	r3, #27
 80066f2:	2220      	movs	r2, #32
 80066f4:	189b      	adds	r3, r3, r2
 80066f6:	19db      	adds	r3, r3, r7
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d015      	beq.n	800672a <UART_SetConfig+0x33a>
 80066fe:	dc2b      	bgt.n	8006758 <UART_SetConfig+0x368>
 8006700:	2b04      	cmp	r3, #4
 8006702:	d00d      	beq.n	8006720 <UART_SetConfig+0x330>
 8006704:	dc28      	bgt.n	8006758 <UART_SetConfig+0x368>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <UART_SetConfig+0x320>
 800670a:	2b02      	cmp	r3, #2
 800670c:	d005      	beq.n	800671a <UART_SetConfig+0x32a>
 800670e:	e023      	b.n	8006758 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe fb7c 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006714:	0003      	movs	r3, r0
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006718:	e027      	b.n	800676a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800671a:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <UART_SetConfig+0x360>)
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800671e:	e024      	b.n	800676a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006720:	f7fe fae8 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8006724:	0003      	movs	r3, r0
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006728:	e01f      	b.n	800676a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672a:	2380      	movs	r3, #128	; 0x80
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006730:	e01b      	b.n	800676a <UART_SetConfig+0x37a>
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	cfff69f3 	.word	0xcfff69f3
 8006738:	ffffcfff 	.word	0xffffcfff
 800673c:	40008000 	.word	0x40008000
 8006740:	11fff4ff 	.word	0x11fff4ff
 8006744:	40013800 	.word	0x40013800
 8006748:	40021000 	.word	0x40021000
 800674c:	40004400 	.word	0x40004400
 8006750:	00f42400 	.word	0x00f42400
 8006754:	0800a07c 	.word	0x0800a07c
      default:
        pclk = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800675c:	231a      	movs	r3, #26
 800675e:	2220      	movs	r2, #32
 8006760:	189b      	adds	r3, r3, r2
 8006762:	19db      	adds	r3, r3, r7
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
        break;
 8006768:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d100      	bne.n	8006772 <UART_SetConfig+0x382>
 8006770:	e09a      	b.n	80068a8 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006776:	4b58      	ldr	r3, [pc, #352]	; (80068d8 <UART_SetConfig+0x4e8>)
 8006778:	0052      	lsls	r2, r2, #1
 800677a:	5ad3      	ldrh	r3, [r2, r3]
 800677c:	0019      	movs	r1, r3
 800677e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006780:	f7f9 fcdc 	bl	800013c <__udivsi3>
 8006784:	0003      	movs	r3, r0
 8006786:	005a      	lsls	r2, r3, #1
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	18d2      	adds	r2, r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	0019      	movs	r1, r3
 8006796:	0010      	movs	r0, r2
 8006798:	f7f9 fcd0 	bl	800013c <__udivsi3>
 800679c:	0003      	movs	r3, r0
 800679e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d921      	bls.n	80067ea <UART_SetConfig+0x3fa>
 80067a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	025b      	lsls	r3, r3, #9
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d21c      	bcs.n	80067ea <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	200e      	movs	r0, #14
 80067b6:	2420      	movs	r4, #32
 80067b8:	1903      	adds	r3, r0, r4
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	210f      	movs	r1, #15
 80067be:	438a      	bics	r2, r1
 80067c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2207      	movs	r2, #7
 80067ca:	4013      	ands	r3, r2
 80067cc:	b299      	uxth	r1, r3
 80067ce:	1903      	adds	r3, r0, r4
 80067d0:	19db      	adds	r3, r3, r7
 80067d2:	1902      	adds	r2, r0, r4
 80067d4:	19d2      	adds	r2, r2, r7
 80067d6:	8812      	ldrh	r2, [r2, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1902      	adds	r2, r0, r4
 80067e2:	19d2      	adds	r2, r2, r7
 80067e4:	8812      	ldrh	r2, [r2, #0]
 80067e6:	60da      	str	r2, [r3, #12]
 80067e8:	e05e      	b.n	80068a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80067ea:	231a      	movs	r3, #26
 80067ec:	2220      	movs	r2, #32
 80067ee:	189b      	adds	r3, r3, r2
 80067f0:	19db      	adds	r3, r3, r7
 80067f2:	2201      	movs	r2, #1
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e057      	b.n	80068a8 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067f8:	231b      	movs	r3, #27
 80067fa:	2220      	movs	r2, #32
 80067fc:	189b      	adds	r3, r3, r2
 80067fe:	19db      	adds	r3, r3, r7
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d015      	beq.n	8006832 <UART_SetConfig+0x442>
 8006806:	dc18      	bgt.n	800683a <UART_SetConfig+0x44a>
 8006808:	2b04      	cmp	r3, #4
 800680a:	d00d      	beq.n	8006828 <UART_SetConfig+0x438>
 800680c:	dc15      	bgt.n	800683a <UART_SetConfig+0x44a>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <UART_SetConfig+0x428>
 8006812:	2b02      	cmp	r3, #2
 8006814:	d005      	beq.n	8006822 <UART_SetConfig+0x432>
 8006816:	e010      	b.n	800683a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe faf8 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800681c:	0003      	movs	r3, r0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006820:	e014      	b.n	800684c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006822:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <UART_SetConfig+0x4ec>)
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006826:	e011      	b.n	800684c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006828:	f7fe fa64 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 800682c:	0003      	movs	r3, r0
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006830:	e00c      	b.n	800684c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	2380      	movs	r3, #128	; 0x80
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006838:	e008      	b.n	800684c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800683e:	231a      	movs	r3, #26
 8006840:	2220      	movs	r2, #32
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]
        break;
 800684a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	2b00      	cmp	r3, #0
 8006850:	d02a      	beq.n	80068a8 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <UART_SetConfig+0x4e8>)
 8006858:	0052      	lsls	r2, r2, #1
 800685a:	5ad3      	ldrh	r3, [r2, r3]
 800685c:	0019      	movs	r1, r3
 800685e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006860:	f7f9 fc6c 	bl	800013c <__udivsi3>
 8006864:	0003      	movs	r3, r0
 8006866:	001a      	movs	r2, r3
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	18d2      	adds	r2, r2, r3
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	0019      	movs	r1, r3
 8006876:	0010      	movs	r0, r2
 8006878:	f7f9 fc60 	bl	800013c <__udivsi3>
 800687c:	0003      	movs	r3, r0
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d90a      	bls.n	800689c <UART_SetConfig+0x4ac>
 8006886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	025b      	lsls	r3, r3, #9
 800688c:	429a      	cmp	r2, r3
 800688e:	d205      	bcs.n	800689c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	b29a      	uxth	r2, r3
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	e005      	b.n	80068a8 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800689c:	231a      	movs	r3, #26
 800689e:	2220      	movs	r2, #32
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	19db      	adds	r3, r3, r7
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	226a      	movs	r2, #106	; 0x6a
 80068ac:	2101      	movs	r1, #1
 80068ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	2268      	movs	r2, #104	; 0x68
 80068b4:	2101      	movs	r1, #1
 80068b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2200      	movs	r2, #0
 80068bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	2200      	movs	r2, #0
 80068c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068c4:	231a      	movs	r3, #26
 80068c6:	2220      	movs	r2, #32
 80068c8:	189b      	adds	r3, r3, r2
 80068ca:	19db      	adds	r3, r3, r7
 80068cc:	781b      	ldrb	r3, [r3, #0]
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b010      	add	sp, #64	; 0x40
 80068d4:	bdb0      	pop	{r4, r5, r7, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	0800a07c 	.word	0x0800a07c
 80068dc:	00f42400 	.word	0x00f42400

080068e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	2201      	movs	r2, #1
 80068ee:	4013      	ands	r3, r2
 80068f0:	d00b      	beq.n	800690a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <UART_AdvFeatureConfig+0x144>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	0019      	movs	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	2202      	movs	r2, #2
 8006910:	4013      	ands	r3, r2
 8006912:	d00b      	beq.n	800692c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	4a43      	ldr	r2, [pc, #268]	; (8006a28 <UART_AdvFeatureConfig+0x148>)
 800691c:	4013      	ands	r3, r2
 800691e:	0019      	movs	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	2204      	movs	r2, #4
 8006932:	4013      	ands	r3, r2
 8006934:	d00b      	beq.n	800694e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4a3b      	ldr	r2, [pc, #236]	; (8006a2c <UART_AdvFeatureConfig+0x14c>)
 800693e:	4013      	ands	r3, r2
 8006940:	0019      	movs	r1, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	2208      	movs	r2, #8
 8006954:	4013      	ands	r3, r2
 8006956:	d00b      	beq.n	8006970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	4a34      	ldr	r2, [pc, #208]	; (8006a30 <UART_AdvFeatureConfig+0x150>)
 8006960:	4013      	ands	r3, r2
 8006962:	0019      	movs	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	2210      	movs	r2, #16
 8006976:	4013      	ands	r3, r2
 8006978:	d00b      	beq.n	8006992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <UART_AdvFeatureConfig+0x154>)
 8006982:	4013      	ands	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2220      	movs	r2, #32
 8006998:	4013      	ands	r3, r2
 800699a:	d00b      	beq.n	80069b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <UART_AdvFeatureConfig+0x158>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	2240      	movs	r2, #64	; 0x40
 80069ba:	4013      	ands	r3, r2
 80069bc:	d01d      	beq.n	80069fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <UART_AdvFeatureConfig+0x15c>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	035b      	lsls	r3, r3, #13
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10b      	bne.n	80069fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <UART_AdvFeatureConfig+0x160>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4a0e      	ldr	r2, [pc, #56]	; (8006a44 <UART_AdvFeatureConfig+0x164>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }
}
 8006a1c:	46c0      	nop			; (mov r8, r8)
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b002      	add	sp, #8
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	fffdffff 	.word	0xfffdffff
 8006a28:	fffeffff 	.word	0xfffeffff
 8006a2c:	fffbffff 	.word	0xfffbffff
 8006a30:	ffff7fff 	.word	0xffff7fff
 8006a34:	ffffefff 	.word	0xffffefff
 8006a38:	ffffdfff 	.word	0xffffdfff
 8006a3c:	ffefffff 	.word	0xffefffff
 8006a40:	ff9fffff 	.word	0xff9fffff
 8006a44:	fff7ffff 	.word	0xfff7ffff

08006a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2290      	movs	r2, #144	; 0x90
 8006a54:	2100      	movs	r1, #0
 8006a56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a58:	f7fc fbc8 	bl	80031ec <HAL_GetTick>
 8006a5c:	0003      	movs	r3, r0
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2208      	movs	r2, #8
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d10c      	bne.n	8006a88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	0391      	lsls	r1, r2, #14
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <UART_CheckIdleState+0x98>)
 8006a78:	9200      	str	r2, [sp, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f000 f832 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 8006a80:	1e03      	subs	r3, r0, #0
 8006a82:	d001      	beq.n	8006a88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e026      	b.n	8006ad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d10c      	bne.n	8006ab0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	03d1      	lsls	r1, r2, #15
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4a10      	ldr	r2, [pc, #64]	; (8006ae0 <UART_CheckIdleState+0x98>)
 8006aa0:	9200      	str	r2, [sp, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f000 f81e 	bl	8006ae4 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	1e03      	subs	r3, r0, #0
 8006aaa:	d001      	beq.n	8006ab0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e012      	b.n	8006ad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2288      	movs	r2, #136	; 0x88
 8006ab4:	2120      	movs	r1, #32
 8006ab6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	228c      	movs	r2, #140	; 0x8c
 8006abc:	2120      	movs	r1, #32
 8006abe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2284      	movs	r2, #132	; 0x84
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b004      	add	sp, #16
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	01ffffff 	.word	0x01ffffff

08006ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b094      	sub	sp, #80	; 0x50
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	1dfb      	adds	r3, r7, #7
 8006af2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af4:	e0a7      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af8:	3301      	adds	r3, #1
 8006afa:	d100      	bne.n	8006afe <UART_WaitOnFlagUntilTimeout+0x1a>
 8006afc:	e0a3      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afe:	f7fc fb75 	bl	80031ec <HAL_GetTick>
 8006b02:	0002      	movs	r2, r0
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d302      	bcc.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d13f      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b14:	f3ef 8310 	mrs	r3, PRIMASK
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1e:	2301      	movs	r3, #1
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	494e      	ldr	r1, [pc, #312]	; (8006c70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006b36:	400a      	ands	r2, r1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b50:	2301      	movs	r3, #1
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2101      	movs	r1, #1
 8006b68:	438a      	bics	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2288      	movs	r2, #136	; 0x88
 8006b7c:	2120      	movs	r1, #32
 8006b7e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	228c      	movs	r2, #140	; 0x8c
 8006b84:	2120      	movs	r1, #32
 8006b86:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2284      	movs	r2, #132	; 0x84
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e069      	b.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d052      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d148      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	0112      	lsls	r2, r2, #4
 8006bbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc2:	613b      	str	r3, [r7, #16]
  return(result);
 8006bc4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f383 8810 	msr	PRIMASK, r3
}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4924      	ldr	r1, [pc, #144]	; (8006c70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006be0:	400a      	ands	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f383 8810 	msr	PRIMASK, r3
}
 8006bee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bf6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2101      	movs	r1, #1
 8006c12:	438a      	bics	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]
 8006c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f383 8810 	msr	PRIMASK, r3
}
 8006c20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2288      	movs	r2, #136	; 0x88
 8006c26:	2120      	movs	r1, #32
 8006c28:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	228c      	movs	r2, #140	; 0x8c
 8006c2e:	2120      	movs	r1, #32
 8006c30:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2290      	movs	r2, #144	; 0x90
 8006c36:	2120      	movs	r1, #32
 8006c38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2284      	movs	r2, #132	; 0x84
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e010      	b.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	425a      	negs	r2, r3
 8006c56:	4153      	adcs	r3, r2
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	1dfb      	adds	r3, r7, #7
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d100      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x182>
 8006c64:	e747      	b.n	8006af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b014      	add	sp, #80	; 0x50
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	fffffe5f 	.word	0xfffffe5f

08006c74 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	0002      	movs	r2, r0
 8006c7c:	1dbb      	adds	r3, r7, #6
 8006c7e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006c80:	230f      	movs	r3, #15
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8006c88:	210e      	movs	r1, #14
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	222d      	movs	r2, #45	; 0x2d
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e01a      	b.n	8006cce <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8006c98:	240e      	movs	r4, #14
 8006c9a:	193b      	adds	r3, r7, r4
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b299      	uxth	r1, r3
 8006ca0:	193b      	adds	r3, r7, r4
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	3b2d      	subs	r3, #45	; 0x2d
 8006ca6:	4a3e      	ldr	r2, [pc, #248]	; (8006da0 <VL53L1X_SensorInit+0x12c>)
 8006ca8:	5cd2      	ldrb	r2, [r2, r3]
 8006caa:	1dbb      	adds	r3, r7, #6
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f000 f99c 	bl	8006fec <VL53L1_WrByte>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	220f      	movs	r2, #15
 8006cba:	18bb      	adds	r3, r7, r2
 8006cbc:	18ba      	adds	r2, r7, r2
 8006cbe:	7812      	ldrb	r2, [r2, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006cc4:	193b      	adds	r3, r7, r4
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	193b      	adds	r3, r7, r4
 8006cca:	3201      	adds	r2, #1
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	230e      	movs	r3, #14
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b87      	cmp	r3, #135	; 0x87
 8006cd6:	d9df      	bls.n	8006c98 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8006cd8:	1dbb      	adds	r3, r7, #6
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f000 f8b3 	bl	8006e48 <VL53L1X_StartRanging>
 8006ce2:	0003      	movs	r3, r0
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	220f      	movs	r2, #15
 8006ce8:	18bb      	adds	r3, r7, r2
 8006cea:	18ba      	adds	r2, r7, r2
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 8006cf2:	230d      	movs	r3, #13
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8006cfa:	e00f      	b.n	8006d1c <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8006cfc:	230d      	movs	r3, #13
 8006cfe:	18fa      	adds	r2, r7, r3
 8006d00:	1dbb      	adds	r3, r7, #6
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	0011      	movs	r1, r2
 8006d06:	0018      	movs	r0, r3
 8006d08:	f000 f8dc 	bl	8006ec4 <VL53L1X_CheckForDataReady>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	0019      	movs	r1, r3
 8006d10:	220f      	movs	r2, #15
 8006d12:	18bb      	adds	r3, r7, r2
 8006d14:	18ba      	adds	r2, r7, r2
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8006d1c:	230d      	movs	r3, #13
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ea      	beq.n	8006cfc <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8006d26:	1dbb      	adds	r3, r7, #6
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f000 f83a 	bl	8006da4 <VL53L1X_ClearInterrupt>
 8006d30:	0003      	movs	r3, r0
 8006d32:	0019      	movs	r1, r3
 8006d34:	240f      	movs	r4, #15
 8006d36:	193b      	adds	r3, r7, r4
 8006d38:	193a      	adds	r2, r7, r4
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8006d40:	1dbb      	adds	r3, r7, #6
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 f89e 	bl	8006e86 <VL53L1X_StopRanging>
 8006d4a:	0003      	movs	r3, r0
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	193b      	adds	r3, r7, r4
 8006d50:	193a      	adds	r2, r7, r4
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8006d58:	1dbb      	adds	r3, r7, #6
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	2209      	movs	r2, #9
 8006d5e:	2108      	movs	r1, #8
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 f943 	bl	8006fec <VL53L1_WrByte>
 8006d66:	0003      	movs	r3, r0
 8006d68:	0019      	movs	r1, r3
 8006d6a:	193b      	adds	r3, r7, r4
 8006d6c:	193a      	adds	r2, r7, r4
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8006d74:	1dbb      	adds	r3, r7, #6
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	210b      	movs	r1, #11
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f000 f935 	bl	8006fec <VL53L1_WrByte>
 8006d82:	0003      	movs	r3, r0
 8006d84:	0019      	movs	r1, r3
 8006d86:	193b      	adds	r3, r7, r4
 8006d88:	193a      	adds	r2, r7, r4
 8006d8a:	7812      	ldrb	r2, [r2, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	701a      	strb	r2, [r3, #0]
	return status;
 8006d90:	193b      	adds	r3, r7, r4
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	b25b      	sxtb	r3, r3
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b005      	add	sp, #20
 8006d9c:	bd90      	pop	{r4, r7, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	0800a094 	.word	0x0800a094

08006da4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	0002      	movs	r2, r0
 8006dac:	1dbb      	adds	r3, r7, #6
 8006dae:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006db0:	240f      	movs	r4, #15
 8006db2:	193b      	adds	r3, r7, r4
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006db8:	1dbb      	adds	r3, r7, #6
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	2186      	movs	r1, #134	; 0x86
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f000 f913 	bl	8006fec <VL53L1_WrByte>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	0019      	movs	r1, r3
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	193a      	adds	r2, r7, r4
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	701a      	strb	r2, [r3, #0]
	return status;
 8006dd4:	193b      	adds	r3, r7, r4
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b25b      	sxtb	r3, r3
}
 8006dda:	0018      	movs	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b005      	add	sp, #20
 8006de0:	bd90      	pop	{r4, r7, pc}

08006de2 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8006de2:	b5b0      	push	{r4, r5, r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	0002      	movs	r2, r0
 8006dea:	6039      	str	r1, [r7, #0]
 8006dec:	1dbb      	adds	r3, r7, #6
 8006dee:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8006df0:	240f      	movs	r4, #15
 8006df2:	193b      	adds	r3, r7, r4
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8006df8:	250e      	movs	r5, #14
 8006dfa:	197a      	adds	r2, r7, r5
 8006dfc:	1dbb      	adds	r3, r7, #6
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2130      	movs	r1, #48	; 0x30
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 f91c 	bl	8007040 <VL53L1_RdByte>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	183b      	adds	r3, r7, r0
 8006e10:	183a      	adds	r2, r7, r0
 8006e12:	7812      	ldrb	r2, [r2, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8006e18:	197b      	adds	r3, r7, r5
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	4013      	ands	r3, r2
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	197b      	adds	r3, r7, r5
 8006e24:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8006e26:	197b      	adds	r3, r7, r5
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	425a      	negs	r2, r3
 8006e30:	4153      	adcs	r3, r2
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	001a      	movs	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
	return status;
 8006e3a:	183b      	adds	r3, r7, r0
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b25b      	sxtb	r3, r3
}
 8006e40:	0018      	movs	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bdb0      	pop	{r4, r5, r7, pc}

08006e48 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	0002      	movs	r2, r0
 8006e50:	1dbb      	adds	r3, r7, #6
 8006e52:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006e54:	240f      	movs	r4, #15
 8006e56:	193b      	adds	r3, r7, r4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8006e5c:	1dbb      	adds	r3, r7, #6
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	2240      	movs	r2, #64	; 0x40
 8006e62:	2187      	movs	r1, #135	; 0x87
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 f8c1 	bl	8006fec <VL53L1_WrByte>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	193b      	adds	r3, r7, r4
 8006e70:	193a      	adds	r2, r7, r4
 8006e72:	7812      	ldrb	r2, [r2, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	701a      	strb	r2, [r3, #0]
	return status;
 8006e78:	193b      	adds	r3, r7, r4
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b25b      	sxtb	r3, r3
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b005      	add	sp, #20
 8006e84:	bd90      	pop	{r4, r7, pc}

08006e86 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8006e86:	b590      	push	{r4, r7, lr}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	0002      	movs	r2, r0
 8006e8e:	1dbb      	adds	r3, r7, #6
 8006e90:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006e92:	240f      	movs	r4, #15
 8006e94:	193b      	adds	r3, r7, r4
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8006e9a:	1dbb      	adds	r3, r7, #6
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2187      	movs	r1, #135	; 0x87
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f000 f8a2 	bl	8006fec <VL53L1_WrByte>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	0019      	movs	r1, r3
 8006eac:	193b      	adds	r3, r7, r4
 8006eae:	193a      	adds	r2, r7, r4
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	701a      	strb	r2, [r3, #0]
	return status;
 8006eb6:	193b      	adds	r3, r7, r4
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b25b      	sxtb	r3, r3
}
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b005      	add	sp, #20
 8006ec2:	bd90      	pop	{r4, r7, pc}

08006ec4 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8006ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	0002      	movs	r2, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	1dbb      	adds	r3, r7, #6
 8006ed0:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8006ed2:	240f      	movs	r4, #15
 8006ed4:	193b      	adds	r3, r7, r4
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8006eda:	250d      	movs	r5, #13
 8006edc:	197a      	adds	r2, r7, r5
 8006ede:	1dbb      	adds	r3, r7, #6
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7ff ff7c 	bl	8006de2 <VL53L1X_GetInterruptPolarity>
 8006eea:	0003      	movs	r3, r0
 8006eec:	0019      	movs	r1, r3
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	193a      	adds	r2, r7, r4
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8006ef8:	260e      	movs	r6, #14
 8006efa:	19ba      	adds	r2, r7, r6
 8006efc:	1dbb      	adds	r3, r7, #6
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	2131      	movs	r1, #49	; 0x31
 8006f02:	0018      	movs	r0, r3
 8006f04:	f000 f89c 	bl	8007040 <VL53L1_RdByte>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	193b      	adds	r3, r7, r4
 8006f0e:	193a      	adds	r2, r7, r4
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8006f20:	19bb      	adds	r3, r7, r6
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	001a      	movs	r2, r3
 8006f26:	2301      	movs	r3, #1
 8006f28:	4013      	ands	r3, r2
 8006f2a:	197a      	adds	r2, r7, r5
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d103      	bne.n	8006f3a <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e002      	b.n	8006f40 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8006f40:	230f      	movs	r3, #15
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b25b      	sxtb	r3, r3
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b005      	add	sp, #20
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f50 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8006f50:	b5b0      	push	{r4, r5, r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	0002      	movs	r2, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	1dbb      	adds	r3, r7, #6
 8006f5c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006f5e:	240f      	movs	r4, #15
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8006f66:	250e      	movs	r5, #14
 8006f68:	197b      	adds	r3, r7, r5
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8006f6e:	197a      	adds	r2, r7, r5
 8006f70:	1dbb      	adds	r3, r7, #6
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	21e5      	movs	r1, #229	; 0xe5
 8006f76:	0018      	movs	r0, r3
 8006f78:	f000 f862 	bl	8007040 <VL53L1_RdByte>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	0019      	movs	r1, r3
 8006f80:	193b      	adds	r3, r7, r4
 8006f82:	193a      	adds	r2, r7, r4
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	701a      	strb	r2, [r3, #0]
	*state = tmp;
 8006f8a:	197b      	adds	r3, r7, r5
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	701a      	strb	r2, [r3, #0]
	return status;
 8006f92:	193b      	adds	r3, r7, r4
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	b25b      	sxtb	r3, r3
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bdb0      	pop	{r4, r5, r7, pc}

08006fa0 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	1dbb      	adds	r3, r7, #6
 8006fac:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006fae:	240f      	movs	r4, #15
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8006fb6:	250c      	movs	r5, #12
 8006fb8:	197a      	adds	r2, r7, r5
 8006fba:	1dbb      	adds	r3, r7, #6
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	2196      	movs	r1, #150	; 0x96
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 f861 	bl	8007088 <VL53L1_RdWord>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	0019      	movs	r1, r3
 8006fca:	0020      	movs	r0, r4
 8006fcc:	183b      	adds	r3, r7, r0
 8006fce:	183a      	adds	r2, r7, r0
 8006fd0:	7812      	ldrb	r2, [r2, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006fd6:	197b      	adds	r3, r7, r5
 8006fd8:	881a      	ldrh	r2, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	801a      	strh	r2, [r3, #0]
	return status;
 8006fde:	183b      	adds	r3, r7, r0
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b25b      	sxtb	r3, r3
}
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b004      	add	sp, #16
 8006fea:	bdb0      	pop	{r4, r5, r7, pc}

08006fec <VL53L1_WrByte>:
		return VL53L1__IO_ERROR;
	else
	return 0; // to be implemented
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	0004      	movs	r4, r0
 8006ff4:	0008      	movs	r0, r1
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	1dbb      	adds	r3, r7, #6
 8006ffa:	1c22      	adds	r2, r4, #0
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	1c02      	adds	r2, r0, #0
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	1cfb      	adds	r3, r7, #3
 8007006:	1c0a      	adds	r2, r1, #0
 8007008:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	1dbb      	adds	r3, r7, #6
 8007010:	8819      	ldrh	r1, [r3, #0]
 8007012:	480a      	ldr	r0, [pc, #40]	; (800703c <VL53L1_WrByte+0x50>)
 8007014:	2314      	movs	r3, #20
 8007016:	9302      	str	r3, [sp, #8]
 8007018:	2301      	movs	r3, #1
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	1cfb      	adds	r3, r7, #3
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2302      	movs	r3, #2
 8007022:	f7fc fc23 	bl	800386c <HAL_I2C_Mem_Write>
 8007026:	1e03      	subs	r3, r0, #0
 8007028:	d002      	beq.n	8007030 <VL53L1_WrByte+0x44>
		return VL53L1__IO_ERROR;
 800702a:	230d      	movs	r3, #13
 800702c:	425b      	negs	r3, r3
 800702e:	e000      	b.n	8007032 <VL53L1_WrByte+0x46>
	else
	return 0; // to be implemented
 8007030:	2300      	movs	r3, #0
}
 8007032:	0018      	movs	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	b003      	add	sp, #12
 8007038:	bd90      	pop	{r4, r7, pc}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	20000244 	.word	0x20000244

08007040 <VL53L1_RdByte>:
		return VL53L1__IO_ERROR;
	else
	 return 0; // to be implemented
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af04      	add	r7, sp, #16
 8007046:	603a      	str	r2, [r7, #0]
 8007048:	1dbb      	adds	r3, r7, #6
 800704a:	1c02      	adds	r2, r0, #0
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	1c0a      	adds	r2, r1, #0
 8007052:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	1dbb      	adds	r3, r7, #6
 800705a:	8819      	ldrh	r1, [r3, #0]
 800705c:	4809      	ldr	r0, [pc, #36]	; (8007084 <VL53L1_RdByte+0x44>)
 800705e:	2314      	movs	r3, #20
 8007060:	9302      	str	r3, [sp, #8]
 8007062:	2301      	movs	r3, #1
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2302      	movs	r3, #2
 800706c:	f7fc fd2c 	bl	8003ac8 <HAL_I2C_Mem_Read>
 8007070:	1e03      	subs	r3, r0, #0
 8007072:	d002      	beq.n	800707a <VL53L1_RdByte+0x3a>
		return VL53L1__IO_ERROR;
 8007074:	230d      	movs	r3, #13
 8007076:	425b      	negs	r3, r3
 8007078:	e000      	b.n	800707c <VL53L1_RdByte+0x3c>
	else
	return 0; // to be implemented
 800707a:	2300      	movs	r3, #0
}
 800707c:	0018      	movs	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	b002      	add	sp, #8
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000244 	.word	0x20000244

08007088 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af04      	add	r7, sp, #16
 800708e:	603a      	str	r2, [r7, #0]
 8007090:	1dbb      	adds	r3, r7, #6
 8007092:	1c02      	adds	r2, r0, #0
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	1d3b      	adds	r3, r7, #4
 8007098:	1c0a      	adds	r2, r1, #0
 800709a:	801a      	strh	r2, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	881a      	ldrh	r2, [r3, #0]
 80070a0:	1dbb      	adds	r3, r7, #6
 80070a2:	8819      	ldrh	r1, [r3, #0]
 80070a4:	4810      	ldr	r0, [pc, #64]	; (80070e8 <VL53L1_RdWord+0x60>)
 80070a6:	2314      	movs	r3, #20
 80070a8:	9302      	str	r3, [sp, #8]
 80070aa:	2302      	movs	r3, #2
 80070ac:	9301      	str	r3, [sp, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2302      	movs	r3, #2
 80070b4:	f7fc fd08 	bl	8003ac8 <HAL_I2C_Mem_Read>
 80070b8:	1e03      	subs	r3, r0, #0
 80070ba:	d002      	beq.n	80070c2 <VL53L1_RdWord+0x3a>
		return VL53L1__IO_ERROR;
 80070bc:	230d      	movs	r3, #13
 80070be:	425b      	negs	r3, r3
 80070c0:	e00e      	b.n	80070e0 <VL53L1_RdWord+0x58>
	else {
		*data=__REVSH(*data);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	210e      	movs	r1, #14
 80070ca:	187b      	adds	r3, r7, r1
 80070cc:	801a      	strh	r2, [r3, #0]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 80070ce:	187b      	adds	r3, r7, r1
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	ba5b      	rev16	r3, r3
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	b29a      	uxth	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	801a      	strh	r2, [r3, #0]
	return 0; // to be implemented
 80070de:	2300      	movs	r3, #0
	}
}
 80070e0:	0018      	movs	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b004      	add	sp, #16
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000244 	.word	0x20000244

080070ec <__cvt>:
 80070ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ee:	001e      	movs	r6, r3
 80070f0:	2300      	movs	r3, #0
 80070f2:	0014      	movs	r4, r2
 80070f4:	b08b      	sub	sp, #44	; 0x2c
 80070f6:	429e      	cmp	r6, r3
 80070f8:	da04      	bge.n	8007104 <__cvt+0x18>
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	0609      	lsls	r1, r1, #24
 80070fe:	1873      	adds	r3, r6, r1
 8007100:	001e      	movs	r6, r3
 8007102:	232d      	movs	r3, #45	; 0x2d
 8007104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007106:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007108:	7013      	strb	r3, [r2, #0]
 800710a:	2320      	movs	r3, #32
 800710c:	2203      	movs	r2, #3
 800710e:	439f      	bics	r7, r3
 8007110:	2f46      	cmp	r7, #70	; 0x46
 8007112:	d007      	beq.n	8007124 <__cvt+0x38>
 8007114:	003b      	movs	r3, r7
 8007116:	3b45      	subs	r3, #69	; 0x45
 8007118:	4259      	negs	r1, r3
 800711a:	414b      	adcs	r3, r1
 800711c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800711e:	3a01      	subs	r2, #1
 8007120:	18cb      	adds	r3, r1, r3
 8007122:	9310      	str	r3, [sp, #64]	; 0x40
 8007124:	ab09      	add	r3, sp, #36	; 0x24
 8007126:	9304      	str	r3, [sp, #16]
 8007128:	ab08      	add	r3, sp, #32
 800712a:	9303      	str	r3, [sp, #12]
 800712c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800712e:	9200      	str	r2, [sp, #0]
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007134:	0022      	movs	r2, r4
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	0033      	movs	r3, r6
 800713a:	f000 fea7 	bl	8007e8c <_dtoa_r>
 800713e:	0005      	movs	r5, r0
 8007140:	2f47      	cmp	r7, #71	; 0x47
 8007142:	d102      	bne.n	800714a <__cvt+0x5e>
 8007144:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007146:	07db      	lsls	r3, r3, #31
 8007148:	d528      	bpl.n	800719c <__cvt+0xb0>
 800714a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800714c:	18eb      	adds	r3, r5, r3
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	2f46      	cmp	r7, #70	; 0x46
 8007152:	d114      	bne.n	800717e <__cvt+0x92>
 8007154:	782b      	ldrb	r3, [r5, #0]
 8007156:	2b30      	cmp	r3, #48	; 0x30
 8007158:	d10c      	bne.n	8007174 <__cvt+0x88>
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	0020      	movs	r0, r4
 8007160:	0031      	movs	r1, r6
 8007162:	f7f9 f971 	bl	8000448 <__aeabi_dcmpeq>
 8007166:	2800      	cmp	r0, #0
 8007168:	d104      	bne.n	8007174 <__cvt+0x88>
 800716a:	2301      	movs	r3, #1
 800716c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007176:	9a07      	ldr	r2, [sp, #28]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	18d3      	adds	r3, r2, r3
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	2200      	movs	r2, #0
 8007180:	2300      	movs	r3, #0
 8007182:	0020      	movs	r0, r4
 8007184:	0031      	movs	r1, r6
 8007186:	f7f9 f95f 	bl	8000448 <__aeabi_dcmpeq>
 800718a:	2800      	cmp	r0, #0
 800718c:	d001      	beq.n	8007192 <__cvt+0xa6>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	2230      	movs	r2, #48	; 0x30
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	9907      	ldr	r1, [sp, #28]
 8007198:	428b      	cmp	r3, r1
 800719a:	d306      	bcc.n	80071aa <__cvt+0xbe>
 800719c:	0028      	movs	r0, r5
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071a2:	1b5b      	subs	r3, r3, r5
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	b00b      	add	sp, #44	; 0x2c
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071aa:	1c59      	adds	r1, r3, #1
 80071ac:	9109      	str	r1, [sp, #36]	; 0x24
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e7f0      	b.n	8007194 <__cvt+0xa8>

080071b2 <__exponent>:
 80071b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b4:	1c83      	adds	r3, r0, #2
 80071b6:	b087      	sub	sp, #28
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	0005      	movs	r5, r0
 80071bc:	000c      	movs	r4, r1
 80071be:	232b      	movs	r3, #43	; 0x2b
 80071c0:	7002      	strb	r2, [r0, #0]
 80071c2:	2900      	cmp	r1, #0
 80071c4:	da01      	bge.n	80071ca <__exponent+0x18>
 80071c6:	424c      	negs	r4, r1
 80071c8:	3302      	adds	r3, #2
 80071ca:	706b      	strb	r3, [r5, #1]
 80071cc:	2c09      	cmp	r4, #9
 80071ce:	dd2f      	ble.n	8007230 <__exponent+0x7e>
 80071d0:	270a      	movs	r7, #10
 80071d2:	ab04      	add	r3, sp, #16
 80071d4:	1dde      	adds	r6, r3, #7
 80071d6:	0020      	movs	r0, r4
 80071d8:	0039      	movs	r1, r7
 80071da:	9601      	str	r6, [sp, #4]
 80071dc:	f7f9 f91e 	bl	800041c <__aeabi_idivmod>
 80071e0:	3e01      	subs	r6, #1
 80071e2:	3130      	adds	r1, #48	; 0x30
 80071e4:	0020      	movs	r0, r4
 80071e6:	7031      	strb	r1, [r6, #0]
 80071e8:	0039      	movs	r1, r7
 80071ea:	9402      	str	r4, [sp, #8]
 80071ec:	f7f9 f830 	bl	8000250 <__divsi3>
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	0004      	movs	r4, r0
 80071f4:	2b63      	cmp	r3, #99	; 0x63
 80071f6:	dcee      	bgt.n	80071d6 <__exponent+0x24>
 80071f8:	9b01      	ldr	r3, [sp, #4]
 80071fa:	3430      	adds	r4, #48	; 0x30
 80071fc:	1e9a      	subs	r2, r3, #2
 80071fe:	0013      	movs	r3, r2
 8007200:	9903      	ldr	r1, [sp, #12]
 8007202:	7014      	strb	r4, [r2, #0]
 8007204:	a804      	add	r0, sp, #16
 8007206:	3007      	adds	r0, #7
 8007208:	4298      	cmp	r0, r3
 800720a:	d80c      	bhi.n	8007226 <__exponent+0x74>
 800720c:	2300      	movs	r3, #0
 800720e:	4282      	cmp	r2, r0
 8007210:	d804      	bhi.n	800721c <__exponent+0x6a>
 8007212:	aa04      	add	r2, sp, #16
 8007214:	3309      	adds	r3, #9
 8007216:	189b      	adds	r3, r3, r2
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	9a03      	ldr	r2, [sp, #12]
 800721e:	18d3      	adds	r3, r2, r3
 8007220:	1b58      	subs	r0, r3, r5
 8007222:	b007      	add	sp, #28
 8007224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007226:	7818      	ldrb	r0, [r3, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	7008      	strb	r0, [r1, #0]
 800722c:	3101      	adds	r1, #1
 800722e:	e7e9      	b.n	8007204 <__exponent+0x52>
 8007230:	2330      	movs	r3, #48	; 0x30
 8007232:	3430      	adds	r4, #48	; 0x30
 8007234:	70ab      	strb	r3, [r5, #2]
 8007236:	70ec      	strb	r4, [r5, #3]
 8007238:	1d2b      	adds	r3, r5, #4
 800723a:	e7f1      	b.n	8007220 <__exponent+0x6e>

0800723c <_printf_float>:
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723e:	b095      	sub	sp, #84	; 0x54
 8007240:	000c      	movs	r4, r1
 8007242:	9208      	str	r2, [sp, #32]
 8007244:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007246:	9309      	str	r3, [sp, #36]	; 0x24
 8007248:	0007      	movs	r7, r0
 800724a:	f000 fd05 	bl	8007c58 <_localeconv_r>
 800724e:	6803      	ldr	r3, [r0, #0]
 8007250:	0018      	movs	r0, r3
 8007252:	930c      	str	r3, [sp, #48]	; 0x30
 8007254:	f7f8 ff56 	bl	8000104 <strlen>
 8007258:	2300      	movs	r3, #0
 800725a:	9312      	str	r3, [sp, #72]	; 0x48
 800725c:	7e23      	ldrb	r3, [r4, #24]
 800725e:	2207      	movs	r2, #7
 8007260:	930a      	str	r3, [sp, #40]	; 0x28
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	900d      	str	r0, [sp, #52]	; 0x34
 8007266:	930b      	str	r3, [sp, #44]	; 0x2c
 8007268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	05c9      	lsls	r1, r1, #23
 800726e:	d547      	bpl.n	8007300 <_printf_float+0xc4>
 8007270:	189b      	adds	r3, r3, r2
 8007272:	4393      	bics	r3, r2
 8007274:	001a      	movs	r2, r3
 8007276:	3208      	adds	r2, #8
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	681e      	ldr	r6, [r3, #0]
 800727c:	685d      	ldr	r5, [r3, #4]
 800727e:	0032      	movs	r2, r6
 8007280:	002b      	movs	r3, r5
 8007282:	64a2      	str	r2, [r4, #72]	; 0x48
 8007284:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007286:	2201      	movs	r2, #1
 8007288:	006b      	lsls	r3, r5, #1
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	930e      	str	r3, [sp, #56]	; 0x38
 800728e:	0030      	movs	r0, r6
 8007290:	4bab      	ldr	r3, [pc, #684]	; (8007540 <_printf_float+0x304>)
 8007292:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007294:	4252      	negs	r2, r2
 8007296:	f7fb f8cb 	bl	8002430 <__aeabi_dcmpun>
 800729a:	2800      	cmp	r0, #0
 800729c:	d132      	bne.n	8007304 <_printf_float+0xc8>
 800729e:	2201      	movs	r2, #1
 80072a0:	0030      	movs	r0, r6
 80072a2:	4ba7      	ldr	r3, [pc, #668]	; (8007540 <_printf_float+0x304>)
 80072a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80072a6:	4252      	negs	r2, r2
 80072a8:	f7f9 f8de 	bl	8000468 <__aeabi_dcmple>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d129      	bne.n	8007304 <_printf_float+0xc8>
 80072b0:	2200      	movs	r2, #0
 80072b2:	2300      	movs	r3, #0
 80072b4:	0030      	movs	r0, r6
 80072b6:	0029      	movs	r1, r5
 80072b8:	f7f9 f8cc 	bl	8000454 <__aeabi_dcmplt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d003      	beq.n	80072c8 <_printf_float+0x8c>
 80072c0:	0023      	movs	r3, r4
 80072c2:	222d      	movs	r2, #45	; 0x2d
 80072c4:	3343      	adds	r3, #67	; 0x43
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	4d9e      	ldr	r5, [pc, #632]	; (8007544 <_printf_float+0x308>)
 80072cc:	2b47      	cmp	r3, #71	; 0x47
 80072ce:	d900      	bls.n	80072d2 <_printf_float+0x96>
 80072d0:	4d9d      	ldr	r5, [pc, #628]	; (8007548 <_printf_float+0x30c>)
 80072d2:	2303      	movs	r3, #3
 80072d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	3301      	adds	r3, #1
 80072da:	439a      	bics	r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	6022      	str	r2, [r4, #0]
 80072e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e4:	0021      	movs	r1, r4
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	0038      	movs	r0, r7
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	aa13      	add	r2, sp, #76	; 0x4c
 80072ee:	f000 f9fb 	bl	80076e8 <_printf_common>
 80072f2:	3001      	adds	r0, #1
 80072f4:	d000      	beq.n	80072f8 <_printf_float+0xbc>
 80072f6:	e0a3      	b.n	8007440 <_printf_float+0x204>
 80072f8:	2001      	movs	r0, #1
 80072fa:	4240      	negs	r0, r0
 80072fc:	b015      	add	sp, #84	; 0x54
 80072fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007300:	3307      	adds	r3, #7
 8007302:	e7b6      	b.n	8007272 <_printf_float+0x36>
 8007304:	0032      	movs	r2, r6
 8007306:	002b      	movs	r3, r5
 8007308:	0030      	movs	r0, r6
 800730a:	0029      	movs	r1, r5
 800730c:	f7fb f890 	bl	8002430 <__aeabi_dcmpun>
 8007310:	2800      	cmp	r0, #0
 8007312:	d00b      	beq.n	800732c <_printf_float+0xf0>
 8007314:	2d00      	cmp	r5, #0
 8007316:	da03      	bge.n	8007320 <_printf_float+0xe4>
 8007318:	0023      	movs	r3, r4
 800731a:	222d      	movs	r2, #45	; 0x2d
 800731c:	3343      	adds	r3, #67	; 0x43
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007322:	4d8a      	ldr	r5, [pc, #552]	; (800754c <_printf_float+0x310>)
 8007324:	2b47      	cmp	r3, #71	; 0x47
 8007326:	d9d4      	bls.n	80072d2 <_printf_float+0x96>
 8007328:	4d89      	ldr	r5, [pc, #548]	; (8007550 <_printf_float+0x314>)
 800732a:	e7d2      	b.n	80072d2 <_printf_float+0x96>
 800732c:	2220      	movs	r2, #32
 800732e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	4391      	bics	r1, r2
 8007334:	910e      	str	r1, [sp, #56]	; 0x38
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	d14a      	bne.n	80073d0 <_printf_float+0x194>
 800733a:	3307      	adds	r3, #7
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4313      	orrs	r3, r2
 8007346:	2200      	movs	r2, #0
 8007348:	9206      	str	r2, [sp, #24]
 800734a:	aa12      	add	r2, sp, #72	; 0x48
 800734c:	9205      	str	r2, [sp, #20]
 800734e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	9204      	str	r2, [sp, #16]
 8007354:	aa11      	add	r2, sp, #68	; 0x44
 8007356:	9203      	str	r2, [sp, #12]
 8007358:	2223      	movs	r2, #35	; 0x23
 800735a:	a908      	add	r1, sp, #32
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	1852      	adds	r2, r2, r1
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	0032      	movs	r2, r6
 8007368:	002b      	movs	r3, r5
 800736a:	0038      	movs	r0, r7
 800736c:	f7ff febe 	bl	80070ec <__cvt>
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007372:	0005      	movs	r5, r0
 8007374:	2b47      	cmp	r3, #71	; 0x47
 8007376:	d109      	bne.n	800738c <_printf_float+0x150>
 8007378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800737a:	1cda      	adds	r2, r3, #3
 800737c:	db02      	blt.n	8007384 <_printf_float+0x148>
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	4293      	cmp	r3, r2
 8007382:	dd49      	ble.n	8007418 <_printf_float+0x1dc>
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	3b02      	subs	r3, #2
 8007388:	b2db      	uxtb	r3, r3
 800738a:	930a      	str	r3, [sp, #40]	; 0x28
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007390:	2b65      	cmp	r3, #101	; 0x65
 8007392:	d824      	bhi.n	80073de <_printf_float+0x1a2>
 8007394:	0020      	movs	r0, r4
 8007396:	001a      	movs	r2, r3
 8007398:	3901      	subs	r1, #1
 800739a:	3050      	adds	r0, #80	; 0x50
 800739c:	9111      	str	r1, [sp, #68]	; 0x44
 800739e:	f7ff ff08 	bl	80071b2 <__exponent>
 80073a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80073a6:	1813      	adds	r3, r2, r0
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	2a01      	cmp	r2, #1
 80073ac:	dc02      	bgt.n	80073b4 <_printf_float+0x178>
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	07d2      	lsls	r2, r2, #31
 80073b2:	d501      	bpl.n	80073b8 <_printf_float+0x17c>
 80073b4:	3301      	adds	r3, #1
 80073b6:	6123      	str	r3, [r4, #16]
 80073b8:	2323      	movs	r3, #35	; 0x23
 80073ba:	aa08      	add	r2, sp, #32
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d100      	bne.n	80073c6 <_printf_float+0x18a>
 80073c4:	e78d      	b.n	80072e2 <_printf_float+0xa6>
 80073c6:	0023      	movs	r3, r4
 80073c8:	222d      	movs	r2, #45	; 0x2d
 80073ca:	3343      	adds	r3, #67	; 0x43
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e788      	b.n	80072e2 <_printf_float+0xa6>
 80073d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d2:	2a47      	cmp	r2, #71	; 0x47
 80073d4:	d1b3      	bne.n	800733e <_printf_float+0x102>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1b1      	bne.n	800733e <_printf_float+0x102>
 80073da:	3301      	adds	r3, #1
 80073dc:	e7ae      	b.n	800733c <_printf_float+0x100>
 80073de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e0:	2b66      	cmp	r3, #102	; 0x66
 80073e2:	d11b      	bne.n	800741c <_printf_float+0x1e0>
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	2900      	cmp	r1, #0
 80073e8:	dd09      	ble.n	80073fe <_printf_float+0x1c2>
 80073ea:	6121      	str	r1, [r4, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <_printf_float+0x1ba>
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	07d2      	lsls	r2, r2, #31
 80073f4:	d50b      	bpl.n	800740e <_printf_float+0x1d2>
 80073f6:	3301      	adds	r3, #1
 80073f8:	185b      	adds	r3, r3, r1
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	e007      	b.n	800740e <_printf_float+0x1d2>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <_printf_float+0x1ce>
 8007402:	2201      	movs	r2, #1
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	4211      	tst	r1, r2
 8007408:	d000      	beq.n	800740c <_printf_float+0x1d0>
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	6122      	str	r2, [r4, #16]
 800740e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007410:	65a3      	str	r3, [r4, #88]	; 0x58
 8007412:	2300      	movs	r3, #0
 8007414:	930b      	str	r3, [sp, #44]	; 0x2c
 8007416:	e7cf      	b.n	80073b8 <_printf_float+0x17c>
 8007418:	2367      	movs	r3, #103	; 0x67
 800741a:	930a      	str	r3, [sp, #40]	; 0x28
 800741c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800741e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007420:	4299      	cmp	r1, r3
 8007422:	db06      	blt.n	8007432 <_printf_float+0x1f6>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	6121      	str	r1, [r4, #16]
 8007428:	07db      	lsls	r3, r3, #31
 800742a:	d5f0      	bpl.n	800740e <_printf_float+0x1d2>
 800742c:	3101      	adds	r1, #1
 800742e:	6121      	str	r1, [r4, #16]
 8007430:	e7ed      	b.n	800740e <_printf_float+0x1d2>
 8007432:	2201      	movs	r2, #1
 8007434:	2900      	cmp	r1, #0
 8007436:	dc01      	bgt.n	800743c <_printf_float+0x200>
 8007438:	1892      	adds	r2, r2, r2
 800743a:	1a52      	subs	r2, r2, r1
 800743c:	189b      	adds	r3, r3, r2
 800743e:	e7dc      	b.n	80073fa <_printf_float+0x1be>
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	0553      	lsls	r3, r2, #21
 8007444:	d408      	bmi.n	8007458 <_printf_float+0x21c>
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	002a      	movs	r2, r5
 800744a:	0038      	movs	r0, r7
 800744c:	9908      	ldr	r1, [sp, #32]
 800744e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007450:	47a8      	blx	r5
 8007452:	3001      	adds	r0, #1
 8007454:	d12a      	bne.n	80074ac <_printf_float+0x270>
 8007456:	e74f      	b.n	80072f8 <_printf_float+0xbc>
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	2b65      	cmp	r3, #101	; 0x65
 800745c:	d800      	bhi.n	8007460 <_printf_float+0x224>
 800745e:	e0ec      	b.n	800763a <_printf_float+0x3fe>
 8007460:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007462:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	f7f8 ffee 	bl	8000448 <__aeabi_dcmpeq>
 800746c:	2800      	cmp	r0, #0
 800746e:	d034      	beq.n	80074da <_printf_float+0x29e>
 8007470:	2301      	movs	r3, #1
 8007472:	0038      	movs	r0, r7
 8007474:	4a37      	ldr	r2, [pc, #220]	; (8007554 <_printf_float+0x318>)
 8007476:	9908      	ldr	r1, [sp, #32]
 8007478:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800747a:	47a8      	blx	r5
 800747c:	3001      	adds	r0, #1
 800747e:	d100      	bne.n	8007482 <_printf_float+0x246>
 8007480:	e73a      	b.n	80072f8 <_printf_float+0xbc>
 8007482:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007484:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007486:	429a      	cmp	r2, r3
 8007488:	db02      	blt.n	8007490 <_printf_float+0x254>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	07db      	lsls	r3, r3, #31
 800748e:	d50d      	bpl.n	80074ac <_printf_float+0x270>
 8007490:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007492:	0038      	movs	r0, r7
 8007494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007498:	9908      	ldr	r1, [sp, #32]
 800749a:	47a8      	blx	r5
 800749c:	2500      	movs	r5, #0
 800749e:	3001      	adds	r0, #1
 80074a0:	d100      	bne.n	80074a4 <_printf_float+0x268>
 80074a2:	e729      	b.n	80072f8 <_printf_float+0xbc>
 80074a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a6:	3b01      	subs	r3, #1
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc0a      	bgt.n	80074c2 <_printf_float+0x286>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	079b      	lsls	r3, r3, #30
 80074b0:	d500      	bpl.n	80074b4 <_printf_float+0x278>
 80074b2:	e116      	b.n	80076e2 <_printf_float+0x4a6>
 80074b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074b6:	68e0      	ldr	r0, [r4, #12]
 80074b8:	4298      	cmp	r0, r3
 80074ba:	db00      	blt.n	80074be <_printf_float+0x282>
 80074bc:	e71e      	b.n	80072fc <_printf_float+0xc0>
 80074be:	0018      	movs	r0, r3
 80074c0:	e71c      	b.n	80072fc <_printf_float+0xc0>
 80074c2:	0022      	movs	r2, r4
 80074c4:	2301      	movs	r3, #1
 80074c6:	0038      	movs	r0, r7
 80074c8:	9908      	ldr	r1, [sp, #32]
 80074ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074cc:	321a      	adds	r2, #26
 80074ce:	47b0      	blx	r6
 80074d0:	3001      	adds	r0, #1
 80074d2:	d100      	bne.n	80074d6 <_printf_float+0x29a>
 80074d4:	e710      	b.n	80072f8 <_printf_float+0xbc>
 80074d6:	3501      	adds	r5, #1
 80074d8:	e7e4      	b.n	80074a4 <_printf_float+0x268>
 80074da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dc3b      	bgt.n	8007558 <_printf_float+0x31c>
 80074e0:	2301      	movs	r3, #1
 80074e2:	0038      	movs	r0, r7
 80074e4:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <_printf_float+0x318>)
 80074e6:	9908      	ldr	r1, [sp, #32]
 80074e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074ea:	47b0      	blx	r6
 80074ec:	3001      	adds	r0, #1
 80074ee:	d100      	bne.n	80074f2 <_printf_float+0x2b6>
 80074f0:	e702      	b.n	80072f8 <_printf_float+0xbc>
 80074f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074f6:	4313      	orrs	r3, r2
 80074f8:	d102      	bne.n	8007500 <_printf_float+0x2c4>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	07db      	lsls	r3, r3, #31
 80074fe:	d5d5      	bpl.n	80074ac <_printf_float+0x270>
 8007500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007502:	0038      	movs	r0, r7
 8007504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007506:	9908      	ldr	r1, [sp, #32]
 8007508:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800750a:	47b0      	blx	r6
 800750c:	2300      	movs	r3, #0
 800750e:	3001      	adds	r0, #1
 8007510:	d100      	bne.n	8007514 <_printf_float+0x2d8>
 8007512:	e6f1      	b.n	80072f8 <_printf_float+0xbc>
 8007514:	930a      	str	r3, [sp, #40]	; 0x28
 8007516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751a:	425b      	negs	r3, r3
 800751c:	4293      	cmp	r3, r2
 800751e:	dc01      	bgt.n	8007524 <_printf_float+0x2e8>
 8007520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007522:	e791      	b.n	8007448 <_printf_float+0x20c>
 8007524:	0022      	movs	r2, r4
 8007526:	2301      	movs	r3, #1
 8007528:	0038      	movs	r0, r7
 800752a:	9908      	ldr	r1, [sp, #32]
 800752c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800752e:	321a      	adds	r2, #26
 8007530:	47b0      	blx	r6
 8007532:	3001      	adds	r0, #1
 8007534:	d100      	bne.n	8007538 <_printf_float+0x2fc>
 8007536:	e6df      	b.n	80072f8 <_printf_float+0xbc>
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	3301      	adds	r3, #1
 800753c:	e7ea      	b.n	8007514 <_printf_float+0x2d8>
 800753e:	46c0      	nop			; (mov r8, r8)
 8007540:	7fefffff 	.word	0x7fefffff
 8007544:	0800a0ef 	.word	0x0800a0ef
 8007548:	0800a0f3 	.word	0x0800a0f3
 800754c:	0800a0f7 	.word	0x0800a0f7
 8007550:	0800a0fb 	.word	0x0800a0fb
 8007554:	0800a0ff 	.word	0x0800a0ff
 8007558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800755a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800755c:	920a      	str	r2, [sp, #40]	; 0x28
 800755e:	429a      	cmp	r2, r3
 8007560:	dd00      	ble.n	8007564 <_printf_float+0x328>
 8007562:	930a      	str	r3, [sp, #40]	; 0x28
 8007564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	dc3d      	bgt.n	80075e6 <_printf_float+0x3aa>
 800756a:	2300      	movs	r3, #0
 800756c:	930e      	str	r3, [sp, #56]	; 0x38
 800756e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007570:	43db      	mvns	r3, r3
 8007572:	17db      	asrs	r3, r3, #31
 8007574:	930f      	str	r3, [sp, #60]	; 0x3c
 8007576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800757a:	930b      	str	r3, [sp, #44]	; 0x2c
 800757c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800757e:	4013      	ands	r3, r2
 8007580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007586:	4293      	cmp	r3, r2
 8007588:	dc36      	bgt.n	80075f8 <_printf_float+0x3bc>
 800758a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800758c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758e:	429a      	cmp	r2, r3
 8007590:	db40      	blt.n	8007614 <_printf_float+0x3d8>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07db      	lsls	r3, r3, #31
 8007596:	d43d      	bmi.n	8007614 <_printf_float+0x3d8>
 8007598:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800759a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800759c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759e:	1af3      	subs	r3, r6, r3
 80075a0:	1ab6      	subs	r6, r6, r2
 80075a2:	429e      	cmp	r6, r3
 80075a4:	dd00      	ble.n	80075a8 <_printf_float+0x36c>
 80075a6:	001e      	movs	r6, r3
 80075a8:	2e00      	cmp	r6, #0
 80075aa:	dc3c      	bgt.n	8007626 <_printf_float+0x3ea>
 80075ac:	2300      	movs	r3, #0
 80075ae:	930a      	str	r3, [sp, #40]	; 0x28
 80075b0:	43f3      	mvns	r3, r6
 80075b2:	17db      	asrs	r3, r3, #31
 80075b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075be:	4032      	ands	r2, r6
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c4:	4293      	cmp	r3, r2
 80075c6:	dc00      	bgt.n	80075ca <_printf_float+0x38e>
 80075c8:	e770      	b.n	80074ac <_printf_float+0x270>
 80075ca:	0022      	movs	r2, r4
 80075cc:	2301      	movs	r3, #1
 80075ce:	0038      	movs	r0, r7
 80075d0:	9908      	ldr	r1, [sp, #32]
 80075d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075d4:	321a      	adds	r2, #26
 80075d6:	47a8      	blx	r5
 80075d8:	3001      	adds	r0, #1
 80075da:	d100      	bne.n	80075de <_printf_float+0x3a2>
 80075dc:	e68c      	b.n	80072f8 <_printf_float+0xbc>
 80075de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e0:	3301      	adds	r3, #1
 80075e2:	930a      	str	r3, [sp, #40]	; 0x28
 80075e4:	e7e7      	b.n	80075b6 <_printf_float+0x37a>
 80075e6:	002a      	movs	r2, r5
 80075e8:	0038      	movs	r0, r7
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	9908      	ldr	r1, [sp, #32]
 80075ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075f0:	47b0      	blx	r6
 80075f2:	3001      	adds	r0, #1
 80075f4:	d1b9      	bne.n	800756a <_printf_float+0x32e>
 80075f6:	e67f      	b.n	80072f8 <_printf_float+0xbc>
 80075f8:	0022      	movs	r2, r4
 80075fa:	2301      	movs	r3, #1
 80075fc:	0038      	movs	r0, r7
 80075fe:	9908      	ldr	r1, [sp, #32]
 8007600:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007602:	321a      	adds	r2, #26
 8007604:	47b0      	blx	r6
 8007606:	3001      	adds	r0, #1
 8007608:	d100      	bne.n	800760c <_printf_float+0x3d0>
 800760a:	e675      	b.n	80072f8 <_printf_float+0xbc>
 800760c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800760e:	3301      	adds	r3, #1
 8007610:	930e      	str	r3, [sp, #56]	; 0x38
 8007612:	e7b0      	b.n	8007576 <_printf_float+0x33a>
 8007614:	0038      	movs	r0, r7
 8007616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800761a:	9908      	ldr	r1, [sp, #32]
 800761c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800761e:	47b0      	blx	r6
 8007620:	3001      	adds	r0, #1
 8007622:	d1b9      	bne.n	8007598 <_printf_float+0x35c>
 8007624:	e668      	b.n	80072f8 <_printf_float+0xbc>
 8007626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007628:	0038      	movs	r0, r7
 800762a:	18ea      	adds	r2, r5, r3
 800762c:	9908      	ldr	r1, [sp, #32]
 800762e:	0033      	movs	r3, r6
 8007630:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007632:	47a8      	blx	r5
 8007634:	3001      	adds	r0, #1
 8007636:	d1b9      	bne.n	80075ac <_printf_float+0x370>
 8007638:	e65e      	b.n	80072f8 <_printf_float+0xbc>
 800763a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800763c:	2b01      	cmp	r3, #1
 800763e:	dc02      	bgt.n	8007646 <_printf_float+0x40a>
 8007640:	2301      	movs	r3, #1
 8007642:	421a      	tst	r2, r3
 8007644:	d03a      	beq.n	80076bc <_printf_float+0x480>
 8007646:	2301      	movs	r3, #1
 8007648:	002a      	movs	r2, r5
 800764a:	0038      	movs	r0, r7
 800764c:	9908      	ldr	r1, [sp, #32]
 800764e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007650:	47b0      	blx	r6
 8007652:	3001      	adds	r0, #1
 8007654:	d100      	bne.n	8007658 <_printf_float+0x41c>
 8007656:	e64f      	b.n	80072f8 <_printf_float+0xbc>
 8007658:	0038      	movs	r0, r7
 800765a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800765e:	9908      	ldr	r1, [sp, #32]
 8007660:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007662:	47b0      	blx	r6
 8007664:	3001      	adds	r0, #1
 8007666:	d100      	bne.n	800766a <_printf_float+0x42e>
 8007668:	e646      	b.n	80072f8 <_printf_float+0xbc>
 800766a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800766c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800766e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007670:	2200      	movs	r2, #0
 8007672:	001e      	movs	r6, r3
 8007674:	2300      	movs	r3, #0
 8007676:	f7f8 fee7 	bl	8000448 <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d11c      	bne.n	80076b8 <_printf_float+0x47c>
 800767e:	0033      	movs	r3, r6
 8007680:	1c6a      	adds	r2, r5, #1
 8007682:	3b01      	subs	r3, #1
 8007684:	0038      	movs	r0, r7
 8007686:	9908      	ldr	r1, [sp, #32]
 8007688:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800768a:	47a8      	blx	r5
 800768c:	3001      	adds	r0, #1
 800768e:	d10f      	bne.n	80076b0 <_printf_float+0x474>
 8007690:	e632      	b.n	80072f8 <_printf_float+0xbc>
 8007692:	0022      	movs	r2, r4
 8007694:	2301      	movs	r3, #1
 8007696:	0038      	movs	r0, r7
 8007698:	9908      	ldr	r1, [sp, #32]
 800769a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800769c:	321a      	adds	r2, #26
 800769e:	47b0      	blx	r6
 80076a0:	3001      	adds	r0, #1
 80076a2:	d100      	bne.n	80076a6 <_printf_float+0x46a>
 80076a4:	e628      	b.n	80072f8 <_printf_float+0xbc>
 80076a6:	3501      	adds	r5, #1
 80076a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076aa:	3b01      	subs	r3, #1
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	dcf0      	bgt.n	8007692 <_printf_float+0x456>
 80076b0:	0022      	movs	r2, r4
 80076b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b4:	3250      	adds	r2, #80	; 0x50
 80076b6:	e6c8      	b.n	800744a <_printf_float+0x20e>
 80076b8:	2500      	movs	r5, #0
 80076ba:	e7f5      	b.n	80076a8 <_printf_float+0x46c>
 80076bc:	002a      	movs	r2, r5
 80076be:	e7e1      	b.n	8007684 <_printf_float+0x448>
 80076c0:	0022      	movs	r2, r4
 80076c2:	2301      	movs	r3, #1
 80076c4:	0038      	movs	r0, r7
 80076c6:	9908      	ldr	r1, [sp, #32]
 80076c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076ca:	3219      	adds	r2, #25
 80076cc:	47b0      	blx	r6
 80076ce:	3001      	adds	r0, #1
 80076d0:	d100      	bne.n	80076d4 <_printf_float+0x498>
 80076d2:	e611      	b.n	80072f8 <_printf_float+0xbc>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcef      	bgt.n	80076c0 <_printf_float+0x484>
 80076e0:	e6e8      	b.n	80074b4 <_printf_float+0x278>
 80076e2:	2500      	movs	r5, #0
 80076e4:	e7f7      	b.n	80076d6 <_printf_float+0x49a>
 80076e6:	46c0      	nop			; (mov r8, r8)

080076e8 <_printf_common>:
 80076e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ea:	0016      	movs	r6, r2
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	688a      	ldr	r2, [r1, #8]
 80076f0:	690b      	ldr	r3, [r1, #16]
 80076f2:	000c      	movs	r4, r1
 80076f4:	9000      	str	r0, [sp, #0]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	da00      	bge.n	80076fc <_printf_common+0x14>
 80076fa:	0013      	movs	r3, r2
 80076fc:	0022      	movs	r2, r4
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	3243      	adds	r2, #67	; 0x43
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	2a00      	cmp	r2, #0
 8007706:	d001      	beq.n	800770c <_printf_common+0x24>
 8007708:	3301      	adds	r3, #1
 800770a:	6033      	str	r3, [r6, #0]
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	069b      	lsls	r3, r3, #26
 8007710:	d502      	bpl.n	8007718 <_printf_common+0x30>
 8007712:	6833      	ldr	r3, [r6, #0]
 8007714:	3302      	adds	r3, #2
 8007716:	6033      	str	r3, [r6, #0]
 8007718:	6822      	ldr	r2, [r4, #0]
 800771a:	2306      	movs	r3, #6
 800771c:	0015      	movs	r5, r2
 800771e:	401d      	ands	r5, r3
 8007720:	421a      	tst	r2, r3
 8007722:	d027      	beq.n	8007774 <_printf_common+0x8c>
 8007724:	0023      	movs	r3, r4
 8007726:	3343      	adds	r3, #67	; 0x43
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	4193      	sbcs	r3, r2
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	0692      	lsls	r2, r2, #26
 8007732:	d430      	bmi.n	8007796 <_printf_common+0xae>
 8007734:	0022      	movs	r2, r4
 8007736:	9901      	ldr	r1, [sp, #4]
 8007738:	9800      	ldr	r0, [sp, #0]
 800773a:	9d08      	ldr	r5, [sp, #32]
 800773c:	3243      	adds	r2, #67	; 0x43
 800773e:	47a8      	blx	r5
 8007740:	3001      	adds	r0, #1
 8007742:	d025      	beq.n	8007790 <_printf_common+0xa8>
 8007744:	2206      	movs	r2, #6
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	2500      	movs	r5, #0
 800774a:	4013      	ands	r3, r2
 800774c:	2b04      	cmp	r3, #4
 800774e:	d105      	bne.n	800775c <_printf_common+0x74>
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	68e5      	ldr	r5, [r4, #12]
 8007754:	1aed      	subs	r5, r5, r3
 8007756:	43eb      	mvns	r3, r5
 8007758:	17db      	asrs	r3, r3, #31
 800775a:	401d      	ands	r5, r3
 800775c:	68a3      	ldr	r3, [r4, #8]
 800775e:	6922      	ldr	r2, [r4, #16]
 8007760:	4293      	cmp	r3, r2
 8007762:	dd01      	ble.n	8007768 <_printf_common+0x80>
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	18ed      	adds	r5, r5, r3
 8007768:	2600      	movs	r6, #0
 800776a:	42b5      	cmp	r5, r6
 800776c:	d120      	bne.n	80077b0 <_printf_common+0xc8>
 800776e:	2000      	movs	r0, #0
 8007770:	e010      	b.n	8007794 <_printf_common+0xac>
 8007772:	3501      	adds	r5, #1
 8007774:	68e3      	ldr	r3, [r4, #12]
 8007776:	6832      	ldr	r2, [r6, #0]
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	42ab      	cmp	r3, r5
 800777c:	ddd2      	ble.n	8007724 <_printf_common+0x3c>
 800777e:	0022      	movs	r2, r4
 8007780:	2301      	movs	r3, #1
 8007782:	9901      	ldr	r1, [sp, #4]
 8007784:	9800      	ldr	r0, [sp, #0]
 8007786:	9f08      	ldr	r7, [sp, #32]
 8007788:	3219      	adds	r2, #25
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	d1f0      	bne.n	8007772 <_printf_common+0x8a>
 8007790:	2001      	movs	r0, #1
 8007792:	4240      	negs	r0, r0
 8007794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007796:	2030      	movs	r0, #48	; 0x30
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	3143      	adds	r1, #67	; 0x43
 800779c:	7008      	strb	r0, [r1, #0]
 800779e:	0021      	movs	r1, r4
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	3145      	adds	r1, #69	; 0x45
 80077a4:	7809      	ldrb	r1, [r1, #0]
 80077a6:	18a2      	adds	r2, r4, r2
 80077a8:	3243      	adds	r2, #67	; 0x43
 80077aa:	3302      	adds	r3, #2
 80077ac:	7011      	strb	r1, [r2, #0]
 80077ae:	e7c1      	b.n	8007734 <_printf_common+0x4c>
 80077b0:	0022      	movs	r2, r4
 80077b2:	2301      	movs	r3, #1
 80077b4:	9901      	ldr	r1, [sp, #4]
 80077b6:	9800      	ldr	r0, [sp, #0]
 80077b8:	9f08      	ldr	r7, [sp, #32]
 80077ba:	321a      	adds	r2, #26
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	d0e6      	beq.n	8007790 <_printf_common+0xa8>
 80077c2:	3601      	adds	r6, #1
 80077c4:	e7d1      	b.n	800776a <_printf_common+0x82>
	...

080077c8 <_printf_i>:
 80077c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ca:	b08b      	sub	sp, #44	; 0x2c
 80077cc:	9206      	str	r2, [sp, #24]
 80077ce:	000a      	movs	r2, r1
 80077d0:	3243      	adds	r2, #67	; 0x43
 80077d2:	9307      	str	r3, [sp, #28]
 80077d4:	9005      	str	r0, [sp, #20]
 80077d6:	9204      	str	r2, [sp, #16]
 80077d8:	7e0a      	ldrb	r2, [r1, #24]
 80077da:	000c      	movs	r4, r1
 80077dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077de:	2a78      	cmp	r2, #120	; 0x78
 80077e0:	d809      	bhi.n	80077f6 <_printf_i+0x2e>
 80077e2:	2a62      	cmp	r2, #98	; 0x62
 80077e4:	d80b      	bhi.n	80077fe <_printf_i+0x36>
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	d100      	bne.n	80077ec <_printf_i+0x24>
 80077ea:	e0be      	b.n	800796a <_printf_i+0x1a2>
 80077ec:	497c      	ldr	r1, [pc, #496]	; (80079e0 <_printf_i+0x218>)
 80077ee:	9103      	str	r1, [sp, #12]
 80077f0:	2a58      	cmp	r2, #88	; 0x58
 80077f2:	d100      	bne.n	80077f6 <_printf_i+0x2e>
 80077f4:	e093      	b.n	800791e <_printf_i+0x156>
 80077f6:	0026      	movs	r6, r4
 80077f8:	3642      	adds	r6, #66	; 0x42
 80077fa:	7032      	strb	r2, [r6, #0]
 80077fc:	e022      	b.n	8007844 <_printf_i+0x7c>
 80077fe:	0010      	movs	r0, r2
 8007800:	3863      	subs	r0, #99	; 0x63
 8007802:	2815      	cmp	r0, #21
 8007804:	d8f7      	bhi.n	80077f6 <_printf_i+0x2e>
 8007806:	f7f8 fc8f 	bl	8000128 <__gnu_thumb1_case_shi>
 800780a:	0016      	.short	0x0016
 800780c:	fff6001f 	.word	0xfff6001f
 8007810:	fff6fff6 	.word	0xfff6fff6
 8007814:	001ffff6 	.word	0x001ffff6
 8007818:	fff6fff6 	.word	0xfff6fff6
 800781c:	fff6fff6 	.word	0xfff6fff6
 8007820:	003600a3 	.word	0x003600a3
 8007824:	fff60083 	.word	0xfff60083
 8007828:	00b4fff6 	.word	0x00b4fff6
 800782c:	0036fff6 	.word	0x0036fff6
 8007830:	fff6fff6 	.word	0xfff6fff6
 8007834:	0087      	.short	0x0087
 8007836:	0026      	movs	r6, r4
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	3642      	adds	r6, #66	; 0x42
 800783c:	1d11      	adds	r1, r2, #4
 800783e:	6019      	str	r1, [r3, #0]
 8007840:	6813      	ldr	r3, [r2, #0]
 8007842:	7033      	strb	r3, [r6, #0]
 8007844:	2301      	movs	r3, #1
 8007846:	e0a2      	b.n	800798e <_printf_i+0x1c6>
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	6809      	ldr	r1, [r1, #0]
 800784c:	1d02      	adds	r2, r0, #4
 800784e:	060d      	lsls	r5, r1, #24
 8007850:	d50b      	bpl.n	800786a <_printf_i+0xa2>
 8007852:	6805      	ldr	r5, [r0, #0]
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	2d00      	cmp	r5, #0
 8007858:	da03      	bge.n	8007862 <_printf_i+0x9a>
 800785a:	232d      	movs	r3, #45	; 0x2d
 800785c:	9a04      	ldr	r2, [sp, #16]
 800785e:	426d      	negs	r5, r5
 8007860:	7013      	strb	r3, [r2, #0]
 8007862:	4b5f      	ldr	r3, [pc, #380]	; (80079e0 <_printf_i+0x218>)
 8007864:	270a      	movs	r7, #10
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	e01b      	b.n	80078a2 <_printf_i+0xda>
 800786a:	6805      	ldr	r5, [r0, #0]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	0649      	lsls	r1, r1, #25
 8007870:	d5f1      	bpl.n	8007856 <_printf_i+0x8e>
 8007872:	b22d      	sxth	r5, r5
 8007874:	e7ef      	b.n	8007856 <_printf_i+0x8e>
 8007876:	680d      	ldr	r5, [r1, #0]
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	1d08      	adds	r0, r1, #4
 800787c:	6018      	str	r0, [r3, #0]
 800787e:	062e      	lsls	r6, r5, #24
 8007880:	d501      	bpl.n	8007886 <_printf_i+0xbe>
 8007882:	680d      	ldr	r5, [r1, #0]
 8007884:	e003      	b.n	800788e <_printf_i+0xc6>
 8007886:	066d      	lsls	r5, r5, #25
 8007888:	d5fb      	bpl.n	8007882 <_printf_i+0xba>
 800788a:	680d      	ldr	r5, [r1, #0]
 800788c:	b2ad      	uxth	r5, r5
 800788e:	4b54      	ldr	r3, [pc, #336]	; (80079e0 <_printf_i+0x218>)
 8007890:	2708      	movs	r7, #8
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	2a6f      	cmp	r2, #111	; 0x6f
 8007896:	d000      	beq.n	800789a <_printf_i+0xd2>
 8007898:	3702      	adds	r7, #2
 800789a:	0023      	movs	r3, r4
 800789c:	2200      	movs	r2, #0
 800789e:	3343      	adds	r3, #67	; 0x43
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	db03      	blt.n	80078b2 <_printf_i+0xea>
 80078aa:	2104      	movs	r1, #4
 80078ac:	6822      	ldr	r2, [r4, #0]
 80078ae:	438a      	bics	r2, r1
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	2d00      	cmp	r5, #0
 80078b4:	d102      	bne.n	80078bc <_printf_i+0xf4>
 80078b6:	9e04      	ldr	r6, [sp, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <_printf_i+0x10e>
 80078bc:	9e04      	ldr	r6, [sp, #16]
 80078be:	0028      	movs	r0, r5
 80078c0:	0039      	movs	r1, r7
 80078c2:	f7f8 fcc1 	bl	8000248 <__aeabi_uidivmod>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	3e01      	subs	r6, #1
 80078ca:	5c5b      	ldrb	r3, [r3, r1]
 80078cc:	7033      	strb	r3, [r6, #0]
 80078ce:	002b      	movs	r3, r5
 80078d0:	0005      	movs	r5, r0
 80078d2:	429f      	cmp	r7, r3
 80078d4:	d9f3      	bls.n	80078be <_printf_i+0xf6>
 80078d6:	2f08      	cmp	r7, #8
 80078d8:	d109      	bne.n	80078ee <_printf_i+0x126>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	07db      	lsls	r3, r3, #31
 80078de:	d506      	bpl.n	80078ee <_printf_i+0x126>
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	dc02      	bgt.n	80078ee <_printf_i+0x126>
 80078e8:	2330      	movs	r3, #48	; 0x30
 80078ea:	3e01      	subs	r6, #1
 80078ec:	7033      	strb	r3, [r6, #0]
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	1b9b      	subs	r3, r3, r6
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	0021      	movs	r1, r4
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	9805      	ldr	r0, [sp, #20]
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	aa09      	add	r2, sp, #36	; 0x24
 8007900:	f7ff fef2 	bl	80076e8 <_printf_common>
 8007904:	3001      	adds	r0, #1
 8007906:	d147      	bne.n	8007998 <_printf_i+0x1d0>
 8007908:	2001      	movs	r0, #1
 800790a:	4240      	negs	r0, r0
 800790c:	b00b      	add	sp, #44	; 0x2c
 800790e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007910:	2220      	movs	r2, #32
 8007912:	6809      	ldr	r1, [r1, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	6022      	str	r2, [r4, #0]
 8007918:	2278      	movs	r2, #120	; 0x78
 800791a:	4932      	ldr	r1, [pc, #200]	; (80079e4 <_printf_i+0x21c>)
 800791c:	9103      	str	r1, [sp, #12]
 800791e:	0021      	movs	r1, r4
 8007920:	3145      	adds	r1, #69	; 0x45
 8007922:	700a      	strb	r2, [r1, #0]
 8007924:	6819      	ldr	r1, [r3, #0]
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	c920      	ldmia	r1!, {r5}
 800792a:	0610      	lsls	r0, r2, #24
 800792c:	d402      	bmi.n	8007934 <_printf_i+0x16c>
 800792e:	0650      	lsls	r0, r2, #25
 8007930:	d500      	bpl.n	8007934 <_printf_i+0x16c>
 8007932:	b2ad      	uxth	r5, r5
 8007934:	6019      	str	r1, [r3, #0]
 8007936:	07d3      	lsls	r3, r2, #31
 8007938:	d502      	bpl.n	8007940 <_printf_i+0x178>
 800793a:	2320      	movs	r3, #32
 800793c:	4313      	orrs	r3, r2
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	2710      	movs	r7, #16
 8007942:	2d00      	cmp	r5, #0
 8007944:	d1a9      	bne.n	800789a <_printf_i+0xd2>
 8007946:	2220      	movs	r2, #32
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	4393      	bics	r3, r2
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	e7a4      	b.n	800789a <_printf_i+0xd2>
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	680d      	ldr	r5, [r1, #0]
 8007954:	1d10      	adds	r0, r2, #4
 8007956:	6949      	ldr	r1, [r1, #20]
 8007958:	6018      	str	r0, [r3, #0]
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	062e      	lsls	r6, r5, #24
 800795e:	d501      	bpl.n	8007964 <_printf_i+0x19c>
 8007960:	6019      	str	r1, [r3, #0]
 8007962:	e002      	b.n	800796a <_printf_i+0x1a2>
 8007964:	066d      	lsls	r5, r5, #25
 8007966:	d5fb      	bpl.n	8007960 <_printf_i+0x198>
 8007968:	8019      	strh	r1, [r3, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	9e04      	ldr	r6, [sp, #16]
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	e7c0      	b.n	80078f4 <_printf_i+0x12c>
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	1d11      	adds	r1, r2, #4
 8007976:	6019      	str	r1, [r3, #0]
 8007978:	6816      	ldr	r6, [r2, #0]
 800797a:	2100      	movs	r1, #0
 800797c:	0030      	movs	r0, r6
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	f000 f9e9 	bl	8007d56 <memchr>
 8007984:	2800      	cmp	r0, #0
 8007986:	d001      	beq.n	800798c <_printf_i+0x1c4>
 8007988:	1b80      	subs	r0, r0, r6
 800798a:	6060      	str	r0, [r4, #4]
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	2300      	movs	r3, #0
 8007992:	9a04      	ldr	r2, [sp, #16]
 8007994:	7013      	strb	r3, [r2, #0]
 8007996:	e7ad      	b.n	80078f4 <_printf_i+0x12c>
 8007998:	0032      	movs	r2, r6
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	9906      	ldr	r1, [sp, #24]
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	9d07      	ldr	r5, [sp, #28]
 80079a2:	47a8      	blx	r5
 80079a4:	3001      	adds	r0, #1
 80079a6:	d0af      	beq.n	8007908 <_printf_i+0x140>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	079b      	lsls	r3, r3, #30
 80079ac:	d415      	bmi.n	80079da <_printf_i+0x212>
 80079ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b0:	68e0      	ldr	r0, [r4, #12]
 80079b2:	4298      	cmp	r0, r3
 80079b4:	daaa      	bge.n	800790c <_printf_i+0x144>
 80079b6:	0018      	movs	r0, r3
 80079b8:	e7a8      	b.n	800790c <_printf_i+0x144>
 80079ba:	0022      	movs	r2, r4
 80079bc:	2301      	movs	r3, #1
 80079be:	9906      	ldr	r1, [sp, #24]
 80079c0:	9805      	ldr	r0, [sp, #20]
 80079c2:	9e07      	ldr	r6, [sp, #28]
 80079c4:	3219      	adds	r2, #25
 80079c6:	47b0      	blx	r6
 80079c8:	3001      	adds	r0, #1
 80079ca:	d09d      	beq.n	8007908 <_printf_i+0x140>
 80079cc:	3501      	adds	r5, #1
 80079ce:	68e3      	ldr	r3, [r4, #12]
 80079d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	dcf0      	bgt.n	80079ba <_printf_i+0x1f2>
 80079d8:	e7e9      	b.n	80079ae <_printf_i+0x1e6>
 80079da:	2500      	movs	r5, #0
 80079dc:	e7f7      	b.n	80079ce <_printf_i+0x206>
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	0800a101 	.word	0x0800a101
 80079e4:	0800a112 	.word	0x0800a112

080079e8 <std>:
 80079e8:	2300      	movs	r3, #0
 80079ea:	b510      	push	{r4, lr}
 80079ec:	0004      	movs	r4, r0
 80079ee:	6003      	str	r3, [r0, #0]
 80079f0:	6043      	str	r3, [r0, #4]
 80079f2:	6083      	str	r3, [r0, #8]
 80079f4:	8181      	strh	r1, [r0, #12]
 80079f6:	6643      	str	r3, [r0, #100]	; 0x64
 80079f8:	81c2      	strh	r2, [r0, #14]
 80079fa:	6103      	str	r3, [r0, #16]
 80079fc:	6143      	str	r3, [r0, #20]
 80079fe:	6183      	str	r3, [r0, #24]
 8007a00:	0019      	movs	r1, r3
 8007a02:	2208      	movs	r2, #8
 8007a04:	305c      	adds	r0, #92	; 0x5c
 8007a06:	f000 f91f 	bl	8007c48 <memset>
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <std+0x50>)
 8007a0c:	6224      	str	r4, [r4, #32]
 8007a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <std+0x54>)
 8007a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <std+0x58>)
 8007a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <std+0x5c>)
 8007a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <std+0x60>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d005      	beq.n	8007a2e <std+0x46>
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <std+0x64>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d002      	beq.n	8007a2e <std+0x46>
 8007a28:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <std+0x68>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	d103      	bne.n	8007a36 <std+0x4e>
 8007a2e:	0020      	movs	r0, r4
 8007a30:	3058      	adds	r0, #88	; 0x58
 8007a32:	f000 f98d 	bl	8007d50 <__retarget_lock_init_recursive>
 8007a36:	bd10      	pop	{r4, pc}
 8007a38:	08007bb1 	.word	0x08007bb1
 8007a3c:	08007bd9 	.word	0x08007bd9
 8007a40:	08007c11 	.word	0x08007c11
 8007a44:	08007c3d 	.word	0x08007c3d
 8007a48:	200003cc 	.word	0x200003cc
 8007a4c:	20000434 	.word	0x20000434
 8007a50:	2000049c 	.word	0x2000049c

08007a54 <stdio_exit_handler>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4a03      	ldr	r2, [pc, #12]	; (8007a64 <stdio_exit_handler+0x10>)
 8007a58:	4903      	ldr	r1, [pc, #12]	; (8007a68 <stdio_exit_handler+0x14>)
 8007a5a:	4804      	ldr	r0, [pc, #16]	; (8007a6c <stdio_exit_handler+0x18>)
 8007a5c:	f000 f86c 	bl	8007b38 <_fwalk_sglue>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	20000010 	.word	0x20000010
 8007a68:	080097c5 	.word	0x080097c5
 8007a6c:	2000001c 	.word	0x2000001c

08007a70 <cleanup_stdio>:
 8007a70:	6841      	ldr	r1, [r0, #4]
 8007a72:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <cleanup_stdio+0x30>)
 8007a74:	b510      	push	{r4, lr}
 8007a76:	0004      	movs	r4, r0
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	d001      	beq.n	8007a80 <cleanup_stdio+0x10>
 8007a7c:	f001 fea2 	bl	80097c4 <_fflush_r>
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <cleanup_stdio+0x34>)
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <cleanup_stdio+0x1e>
 8007a88:	0020      	movs	r0, r4
 8007a8a:	f001 fe9b 	bl	80097c4 <_fflush_r>
 8007a8e:	68e1      	ldr	r1, [r4, #12]
 8007a90:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <cleanup_stdio+0x38>)
 8007a92:	4299      	cmp	r1, r3
 8007a94:	d002      	beq.n	8007a9c <cleanup_stdio+0x2c>
 8007a96:	0020      	movs	r0, r4
 8007a98:	f001 fe94 	bl	80097c4 <_fflush_r>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	200003cc 	.word	0x200003cc
 8007aa4:	20000434 	.word	0x20000434
 8007aa8:	2000049c 	.word	0x2000049c

08007aac <global_stdio_init.part.0>:
 8007aac:	b510      	push	{r4, lr}
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <global_stdio_init.part.0+0x28>)
 8007ab0:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <global_stdio_init.part.0+0x2c>)
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	4809      	ldr	r0, [pc, #36]	; (8007adc <global_stdio_init.part.0+0x30>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7ff ff95 	bl	80079e8 <std>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	2109      	movs	r1, #9
 8007ac2:	4807      	ldr	r0, [pc, #28]	; (8007ae0 <global_stdio_init.part.0+0x34>)
 8007ac4:	f7ff ff90 	bl	80079e8 <std>
 8007ac8:	2202      	movs	r2, #2
 8007aca:	2112      	movs	r1, #18
 8007acc:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <global_stdio_init.part.0+0x38>)
 8007ace:	f7ff ff8b 	bl	80079e8 <std>
 8007ad2:	bd10      	pop	{r4, pc}
 8007ad4:	20000504 	.word	0x20000504
 8007ad8:	08007a55 	.word	0x08007a55
 8007adc:	200003cc 	.word	0x200003cc
 8007ae0:	20000434 	.word	0x20000434
 8007ae4:	2000049c 	.word	0x2000049c

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4802      	ldr	r0, [pc, #8]	; (8007af4 <__sfp_lock_acquire+0xc>)
 8007aec:	f000 f931 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	2000050d 	.word	0x2000050d

08007af8 <__sfp_lock_release>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4802      	ldr	r0, [pc, #8]	; (8007b04 <__sfp_lock_release+0xc>)
 8007afc:	f000 f92a 	bl	8007d54 <__retarget_lock_release_recursive>
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	2000050d 	.word	0x2000050d

08007b08 <__sinit>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	0004      	movs	r4, r0
 8007b0c:	f7ff ffec 	bl	8007ae8 <__sfp_lock_acquire>
 8007b10:	6a23      	ldr	r3, [r4, #32]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <__sinit+0x14>
 8007b16:	f7ff ffef 	bl	8007af8 <__sfp_lock_release>
 8007b1a:	bd10      	pop	{r4, pc}
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <__sinit+0x28>)
 8007b1e:	6223      	str	r3, [r4, #32]
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <__sinit+0x2c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f6      	bne.n	8007b16 <__sinit+0xe>
 8007b28:	f7ff ffc0 	bl	8007aac <global_stdio_init.part.0>
 8007b2c:	e7f3      	b.n	8007b16 <__sinit+0xe>
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	08007a71 	.word	0x08007a71
 8007b34:	20000504 	.word	0x20000504

08007b38 <_fwalk_sglue>:
 8007b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3a:	0014      	movs	r4, r2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	9000      	str	r0, [sp, #0]
 8007b40:	9101      	str	r1, [sp, #4]
 8007b42:	68a5      	ldr	r5, [r4, #8]
 8007b44:	6867      	ldr	r7, [r4, #4]
 8007b46:	3f01      	subs	r7, #1
 8007b48:	d504      	bpl.n	8007b54 <_fwalk_sglue+0x1c>
 8007b4a:	6824      	ldr	r4, [r4, #0]
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	d1f8      	bne.n	8007b42 <_fwalk_sglue+0xa>
 8007b50:	0030      	movs	r0, r6
 8007b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b54:	89ab      	ldrh	r3, [r5, #12]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d908      	bls.n	8007b6c <_fwalk_sglue+0x34>
 8007b5a:	220e      	movs	r2, #14
 8007b5c:	5eab      	ldrsh	r3, [r5, r2]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	d004      	beq.n	8007b6c <_fwalk_sglue+0x34>
 8007b62:	0029      	movs	r1, r5
 8007b64:	9800      	ldr	r0, [sp, #0]
 8007b66:	9b01      	ldr	r3, [sp, #4]
 8007b68:	4798      	blx	r3
 8007b6a:	4306      	orrs	r6, r0
 8007b6c:	3568      	adds	r5, #104	; 0x68
 8007b6e:	e7ea      	b.n	8007b46 <_fwalk_sglue+0xe>

08007b70 <siprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b500      	push	{lr}
 8007b74:	490b      	ldr	r1, [pc, #44]	; (8007ba4 <siprintf+0x34>)
 8007b76:	b09c      	sub	sp, #112	; 0x70
 8007b78:	ab1d      	add	r3, sp, #116	; 0x74
 8007b7a:	9002      	str	r0, [sp, #8]
 8007b7c:	9006      	str	r0, [sp, #24]
 8007b7e:	9107      	str	r1, [sp, #28]
 8007b80:	9104      	str	r1, [sp, #16]
 8007b82:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <siprintf+0x38>)
 8007b84:	4909      	ldr	r1, [pc, #36]	; (8007bac <siprintf+0x3c>)
 8007b86:	cb04      	ldmia	r3!, {r2}
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	a902      	add	r1, sp, #8
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	f001 fc8e 	bl	80094b0 <_svfiprintf_r>
 8007b94:	2200      	movs	r2, #0
 8007b96:	9b02      	ldr	r3, [sp, #8]
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	b01c      	add	sp, #112	; 0x70
 8007b9c:	bc08      	pop	{r3}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	4718      	bx	r3
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	7fffffff 	.word	0x7fffffff
 8007ba8:	20000068 	.word	0x20000068
 8007bac:	ffff0208 	.word	0xffff0208

08007bb0 <__sread>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	000c      	movs	r4, r1
 8007bb4:	250e      	movs	r5, #14
 8007bb6:	5f49      	ldrsh	r1, [r1, r5]
 8007bb8:	f000 f878 	bl	8007cac <_read_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	db03      	blt.n	8007bc8 <__sread+0x18>
 8007bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bc2:	181b      	adds	r3, r3, r0
 8007bc4:	6563      	str	r3, [r4, #84]	; 0x54
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	4a02      	ldr	r2, [pc, #8]	; (8007bd4 <__sread+0x24>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	e7f9      	b.n	8007bc6 <__sread+0x16>
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	ffffefff 	.word	0xffffefff

08007bd8 <__swrite>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	001f      	movs	r7, r3
 8007bdc:	898b      	ldrh	r3, [r1, #12]
 8007bde:	0005      	movs	r5, r0
 8007be0:	000c      	movs	r4, r1
 8007be2:	0016      	movs	r6, r2
 8007be4:	05db      	lsls	r3, r3, #23
 8007be6:	d505      	bpl.n	8007bf4 <__swrite+0x1c>
 8007be8:	230e      	movs	r3, #14
 8007bea:	5ec9      	ldrsh	r1, [r1, r3]
 8007bec:	2200      	movs	r2, #0
 8007bee:	2302      	movs	r3, #2
 8007bf0:	f000 f848 	bl	8007c84 <_lseek_r>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	4a05      	ldr	r2, [pc, #20]	; (8007c0c <__swrite+0x34>)
 8007bf8:	0028      	movs	r0, r5
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	0032      	movs	r2, r6
 8007c00:	230e      	movs	r3, #14
 8007c02:	5ee1      	ldrsh	r1, [r4, r3]
 8007c04:	003b      	movs	r3, r7
 8007c06:	f000 f865 	bl	8007cd4 <_write_r>
 8007c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c0c:	ffffefff 	.word	0xffffefff

08007c10 <__sseek>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	000c      	movs	r4, r1
 8007c14:	250e      	movs	r5, #14
 8007c16:	5f49      	ldrsh	r1, [r1, r5]
 8007c18:	f000 f834 	bl	8007c84 <_lseek_r>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	1c42      	adds	r2, r0, #1
 8007c20:	d103      	bne.n	8007c2a <__sseek+0x1a>
 8007c22:	4a05      	ldr	r2, [pc, #20]	; (8007c38 <__sseek+0x28>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	2280      	movs	r2, #128	; 0x80
 8007c2c:	0152      	lsls	r2, r2, #5
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	6560      	str	r0, [r4, #84]	; 0x54
 8007c34:	e7f8      	b.n	8007c28 <__sseek+0x18>
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	ffffefff 	.word	0xffffefff

08007c3c <__sclose>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	230e      	movs	r3, #14
 8007c40:	5ec9      	ldrsh	r1, [r1, r3]
 8007c42:	f000 f80d 	bl	8007c60 <_close_r>
 8007c46:	bd10      	pop	{r4, pc}

08007c48 <memset>:
 8007c48:	0003      	movs	r3, r0
 8007c4a:	1882      	adds	r2, r0, r2
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memset+0xa>
 8007c50:	4770      	bx	lr
 8007c52:	7019      	strb	r1, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	e7f9      	b.n	8007c4c <memset+0x4>

08007c58 <_localeconv_r>:
 8007c58:	4800      	ldr	r0, [pc, #0]	; (8007c5c <_localeconv_r+0x4>)
 8007c5a:	4770      	bx	lr
 8007c5c:	2000015c 	.word	0x2000015c

08007c60 <_close_r>:
 8007c60:	2300      	movs	r3, #0
 8007c62:	b570      	push	{r4, r5, r6, lr}
 8007c64:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_close_r+0x20>)
 8007c66:	0004      	movs	r4, r0
 8007c68:	0008      	movs	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7fb f9af 	bl	8002fce <_close>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d103      	bne.n	8007c7c <_close_r+0x1c>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d000      	beq.n	8007c7c <_close_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	20000508 	.word	0x20000508

08007c84 <_lseek_r>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	0004      	movs	r4, r0
 8007c88:	0008      	movs	r0, r1
 8007c8a:	0011      	movs	r1, r2
 8007c8c:	001a      	movs	r2, r3
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4d05      	ldr	r5, [pc, #20]	; (8007ca8 <_lseek_r+0x24>)
 8007c92:	602b      	str	r3, [r5, #0]
 8007c94:	f7fb f9bc 	bl	8003010 <_lseek>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d103      	bne.n	8007ca4 <_lseek_r+0x20>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d000      	beq.n	8007ca4 <_lseek_r+0x20>
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	20000508 	.word	0x20000508

08007cac <_read_r>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	0004      	movs	r4, r0
 8007cb0:	0008      	movs	r0, r1
 8007cb2:	0011      	movs	r1, r2
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4d05      	ldr	r5, [pc, #20]	; (8007cd0 <_read_r+0x24>)
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f7fb f94e 	bl	8002f5c <_read>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d103      	bne.n	8007ccc <_read_r+0x20>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d000      	beq.n	8007ccc <_read_r+0x20>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	20000508 	.word	0x20000508

08007cd4 <_write_r>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	0004      	movs	r4, r0
 8007cd8:	0008      	movs	r0, r1
 8007cda:	0011      	movs	r1, r2
 8007cdc:	001a      	movs	r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4d05      	ldr	r5, [pc, #20]	; (8007cf8 <_write_r+0x24>)
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7fb f957 	bl	8002f96 <_write>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d103      	bne.n	8007cf4 <_write_r+0x20>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d000      	beq.n	8007cf4 <_write_r+0x20>
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	20000508 	.word	0x20000508

08007cfc <__errno>:
 8007cfc:	4b01      	ldr	r3, [pc, #4]	; (8007d04 <__errno+0x8>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	20000068 	.word	0x20000068

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	4c0c      	ldr	r4, [pc, #48]	; (8007d40 <__libc_init_array+0x38>)
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	; (8007d44 <__libc_init_array+0x3c>)
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	2600      	movs	r6, #0
 8007d1a:	f002 f923 	bl	8009f64 <_init>
 8007d1e:	4c0a      	ldr	r4, [pc, #40]	; (8007d48 <__libc_init_array+0x40>)
 8007d20:	4d0a      	ldr	r5, [pc, #40]	; (8007d4c <__libc_init_array+0x44>)
 8007d22:	1b64      	subs	r4, r4, r5
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	00b3      	lsls	r3, r6, #2
 8007d2e:	58eb      	ldr	r3, [r5, r3]
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	00b3      	lsls	r3, r6, #2
 8007d38:	58eb      	ldr	r3, [r5, r3]
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	0800a46c 	.word	0x0800a46c
 8007d44:	0800a46c 	.word	0x0800a46c
 8007d48:	0800a470 	.word	0x0800a470
 8007d4c:	0800a46c 	.word	0x0800a46c

08007d50 <__retarget_lock_init_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_acquire_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__retarget_lock_release_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <memchr>:
 8007d56:	b2c9      	uxtb	r1, r1
 8007d58:	1882      	adds	r2, r0, r2
 8007d5a:	4290      	cmp	r0, r2
 8007d5c:	d101      	bne.n	8007d62 <memchr+0xc>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	4770      	bx	lr
 8007d62:	7803      	ldrb	r3, [r0, #0]
 8007d64:	428b      	cmp	r3, r1
 8007d66:	d0fb      	beq.n	8007d60 <memchr+0xa>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	e7f6      	b.n	8007d5a <memchr+0x4>

08007d6c <quorem>:
 8007d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6e:	6902      	ldr	r2, [r0, #16]
 8007d70:	690b      	ldr	r3, [r1, #16]
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	0007      	movs	r7, r0
 8007d76:	9104      	str	r1, [sp, #16]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	db69      	blt.n	8007e52 <quorem+0xe6>
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	009c      	lsls	r4, r3, #2
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	000b      	movs	r3, r1
 8007d86:	3314      	adds	r3, #20
 8007d88:	9306      	str	r3, [sp, #24]
 8007d8a:	191b      	adds	r3, r3, r4
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	003b      	movs	r3, r7
 8007d90:	3314      	adds	r3, #20
 8007d92:	9303      	str	r3, [sp, #12]
 8007d94:	191c      	adds	r4, r3, r4
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	6826      	ldr	r6, [r4, #0]
 8007d9a:	681d      	ldr	r5, [r3, #0]
 8007d9c:	0030      	movs	r0, r6
 8007d9e:	3501      	adds	r5, #1
 8007da0:	0029      	movs	r1, r5
 8007da2:	f7f8 f9cb 	bl	800013c <__udivsi3>
 8007da6:	9002      	str	r0, [sp, #8]
 8007da8:	42ae      	cmp	r6, r5
 8007daa:	d329      	bcc.n	8007e00 <quorem+0x94>
 8007dac:	9b06      	ldr	r3, [sp, #24]
 8007dae:	2600      	movs	r6, #0
 8007db0:	469c      	mov	ip, r3
 8007db2:	9d03      	ldr	r5, [sp, #12]
 8007db4:	9606      	str	r6, [sp, #24]
 8007db6:	4662      	mov	r2, ip
 8007db8:	ca08      	ldmia	r2!, {r3}
 8007dba:	6828      	ldr	r0, [r5, #0]
 8007dbc:	4694      	mov	ip, r2
 8007dbe:	9a02      	ldr	r2, [sp, #8]
 8007dc0:	b299      	uxth	r1, r3
 8007dc2:	4351      	muls	r1, r2
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	4353      	muls	r3, r2
 8007dc8:	1989      	adds	r1, r1, r6
 8007dca:	0c0a      	lsrs	r2, r1, #16
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	0c1e      	lsrs	r6, r3, #16
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	b282      	uxth	r2, r0
 8007dd6:	18d2      	adds	r2, r2, r3
 8007dd8:	466b      	mov	r3, sp
 8007dda:	b289      	uxth	r1, r1
 8007ddc:	8b9b      	ldrh	r3, [r3, #28]
 8007dde:	1a52      	subs	r2, r2, r1
 8007de0:	0c01      	lsrs	r1, r0, #16
 8007de2:	1ac9      	subs	r1, r1, r3
 8007de4:	1413      	asrs	r3, r2, #16
 8007de6:	18cb      	adds	r3, r1, r3
 8007de8:	1419      	asrs	r1, r3, #16
 8007dea:	b292      	uxth	r2, r2
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	4313      	orrs	r3, r2
 8007df0:	c508      	stmia	r5!, {r3}
 8007df2:	9b05      	ldr	r3, [sp, #20]
 8007df4:	9106      	str	r1, [sp, #24]
 8007df6:	4563      	cmp	r3, ip
 8007df8:	d2dd      	bcs.n	8007db6 <quorem+0x4a>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d030      	beq.n	8007e62 <quorem+0xf6>
 8007e00:	0038      	movs	r0, r7
 8007e02:	9904      	ldr	r1, [sp, #16]
 8007e04:	f001 f9de 	bl	80091c4 <__mcmp>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	db21      	blt.n	8007e50 <quorem+0xe4>
 8007e0c:	0038      	movs	r0, r7
 8007e0e:	2600      	movs	r6, #0
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	9c04      	ldr	r4, [sp, #16]
 8007e14:	3301      	adds	r3, #1
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	3014      	adds	r0, #20
 8007e1a:	3414      	adds	r4, #20
 8007e1c:	6803      	ldr	r3, [r0, #0]
 8007e1e:	cc02      	ldmia	r4!, {r1}
 8007e20:	b29d      	uxth	r5, r3
 8007e22:	19ad      	adds	r5, r5, r6
 8007e24:	b28a      	uxth	r2, r1
 8007e26:	1aaa      	subs	r2, r5, r2
 8007e28:	0c09      	lsrs	r1, r1, #16
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	1a5b      	subs	r3, r3, r1
 8007e2e:	1411      	asrs	r1, r2, #16
 8007e30:	185b      	adds	r3, r3, r1
 8007e32:	141e      	asrs	r6, r3, #16
 8007e34:	b292      	uxth	r2, r2
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	c008      	stmia	r0!, {r3}
 8007e3c:	9b05      	ldr	r3, [sp, #20]
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	d2ec      	bcs.n	8007e1c <quorem+0xb0>
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	9a03      	ldr	r2, [sp, #12]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	18d3      	adds	r3, r2, r3
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d015      	beq.n	8007e7c <quorem+0x110>
 8007e50:	9802      	ldr	r0, [sp, #8]
 8007e52:	b009      	add	sp, #36	; 0x24
 8007e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d106      	bne.n	8007e6a <quorem+0xfe>
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3c04      	subs	r4, #4
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	d3f5      	bcc.n	8007e56 <quorem+0xea>
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	e7c7      	b.n	8007e00 <quorem+0x94>
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d106      	bne.n	8007e84 <quorem+0x118>
 8007e76:	9a01      	ldr	r2, [sp, #4]
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	9a03      	ldr	r2, [sp, #12]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d3f5      	bcc.n	8007e70 <quorem+0x104>
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	e7e2      	b.n	8007e50 <quorem+0xe4>
	...

08007e8c <_dtoa_r>:
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	0014      	movs	r4, r2
 8007e90:	001d      	movs	r5, r3
 8007e92:	69c6      	ldr	r6, [r0, #28]
 8007e94:	b09d      	sub	sp, #116	; 0x74
 8007e96:	9408      	str	r4, [sp, #32]
 8007e98:	9509      	str	r5, [sp, #36]	; 0x24
 8007e9a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007e9c:	9004      	str	r0, [sp, #16]
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	d10f      	bne.n	8007ec2 <_dtoa_r+0x36>
 8007ea2:	2010      	movs	r0, #16
 8007ea4:	f000 fe4a 	bl	8008b3c <malloc>
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	1e02      	subs	r2, r0, #0
 8007eac:	61d8      	str	r0, [r3, #28]
 8007eae:	d104      	bne.n	8007eba <_dtoa_r+0x2e>
 8007eb0:	21ef      	movs	r1, #239	; 0xef
 8007eb2:	4bc6      	ldr	r3, [pc, #792]	; (80081cc <_dtoa_r+0x340>)
 8007eb4:	48c6      	ldr	r0, [pc, #792]	; (80081d0 <_dtoa_r+0x344>)
 8007eb6:	f001 fcdf 	bl	8009878 <__assert_func>
 8007eba:	6046      	str	r6, [r0, #4]
 8007ebc:	6086      	str	r6, [r0, #8]
 8007ebe:	6006      	str	r6, [r0, #0]
 8007ec0:	60c6      	str	r6, [r0, #12]
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	d00b      	beq.n	8007ee4 <_dtoa_r+0x58>
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4093      	lsls	r3, r2
 8007ed2:	604a      	str	r2, [r1, #4]
 8007ed4:	608b      	str	r3, [r1, #8]
 8007ed6:	9804      	ldr	r0, [sp, #16]
 8007ed8:	f000 ff32 	bl	8008d40 <_Bfree>
 8007edc:	2200      	movs	r2, #0
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	da1e      	bge.n	8007f26 <_dtoa_r+0x9a>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	006b      	lsls	r3, r5, #1
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ef4:	4bb7      	ldr	r3, [pc, #732]	; (80081d4 <_dtoa_r+0x348>)
 8007ef6:	4ab7      	ldr	r2, [pc, #732]	; (80081d4 <_dtoa_r+0x348>)
 8007ef8:	403b      	ands	r3, r7
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d116      	bne.n	8007f2c <_dtoa_r+0xa0>
 8007efe:	4bb6      	ldr	r3, [pc, #728]	; (80081d8 <_dtoa_r+0x34c>)
 8007f00:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	033b      	lsls	r3, r7, #12
 8007f06:	0b1b      	lsrs	r3, r3, #12
 8007f08:	4323      	orrs	r3, r4
 8007f0a:	d101      	bne.n	8007f10 <_dtoa_r+0x84>
 8007f0c:	f000 fdb5 	bl	8008a7a <_dtoa_r+0xbee>
 8007f10:	4bb2      	ldr	r3, [pc, #712]	; (80081dc <_dtoa_r+0x350>)
 8007f12:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	d002      	beq.n	8007f20 <_dtoa_r+0x94>
 8007f1a:	4bb1      	ldr	r3, [pc, #708]	; (80081e0 <_dtoa_r+0x354>)
 8007f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	9806      	ldr	r0, [sp, #24]
 8007f22:	b01d      	add	sp, #116	; 0x74
 8007f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f26:	2300      	movs	r3, #0
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	e7e2      	b.n	8007ef2 <_dtoa_r+0x66>
 8007f2c:	9a08      	ldr	r2, [sp, #32]
 8007f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f30:	9210      	str	r2, [sp, #64]	; 0x40
 8007f32:	9311      	str	r3, [sp, #68]	; 0x44
 8007f34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f36:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fa84 	bl	8000448 <__aeabi_dcmpeq>
 8007f40:	1e06      	subs	r6, r0, #0
 8007f42:	d009      	beq.n	8007f58 <_dtoa_r+0xcc>
 8007f44:	2301      	movs	r3, #1
 8007f46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	4ba6      	ldr	r3, [pc, #664]	; (80081e4 <_dtoa_r+0x358>)
 8007f4c:	9306      	str	r3, [sp, #24]
 8007f4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0e5      	beq.n	8007f20 <_dtoa_r+0x94>
 8007f54:	4ba4      	ldr	r3, [pc, #656]	; (80081e8 <_dtoa_r+0x35c>)
 8007f56:	e7e1      	b.n	8007f1c <_dtoa_r+0x90>
 8007f58:	ab1a      	add	r3, sp, #104	; 0x68
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	9804      	ldr	r0, [sp, #16]
 8007f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f66:	f001 f9e1 	bl	800932c <__d2b>
 8007f6a:	007a      	lsls	r2, r7, #1
 8007f6c:	9005      	str	r0, [sp, #20]
 8007f6e:	0d52      	lsrs	r2, r2, #21
 8007f70:	d100      	bne.n	8007f74 <_dtoa_r+0xe8>
 8007f72:	e07b      	b.n	800806c <_dtoa_r+0x1e0>
 8007f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f76:	9617      	str	r6, [sp, #92]	; 0x5c
 8007f78:	0319      	lsls	r1, r3, #12
 8007f7a:	4b9c      	ldr	r3, [pc, #624]	; (80081ec <_dtoa_r+0x360>)
 8007f7c:	0b09      	lsrs	r1, r1, #12
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	499b      	ldr	r1, [pc, #620]	; (80081f0 <_dtoa_r+0x364>)
 8007f82:	1857      	adds	r7, r2, r1
 8007f84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f88:	0019      	movs	r1, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b99      	ldr	r3, [pc, #612]	; (80081f4 <_dtoa_r+0x368>)
 8007f8e:	f7f9 fecd 	bl	8001d2c <__aeabi_dsub>
 8007f92:	4a99      	ldr	r2, [pc, #612]	; (80081f8 <_dtoa_r+0x36c>)
 8007f94:	4b99      	ldr	r3, [pc, #612]	; (80081fc <_dtoa_r+0x370>)
 8007f96:	f7f9 fc07 	bl	80017a8 <__aeabi_dmul>
 8007f9a:	4a99      	ldr	r2, [pc, #612]	; (8008200 <_dtoa_r+0x374>)
 8007f9c:	4b99      	ldr	r3, [pc, #612]	; (8008204 <_dtoa_r+0x378>)
 8007f9e:	f7f8 fca9 	bl	80008f4 <__aeabi_dadd>
 8007fa2:	0004      	movs	r4, r0
 8007fa4:	0038      	movs	r0, r7
 8007fa6:	000d      	movs	r5, r1
 8007fa8:	f7fa fa96 	bl	80024d8 <__aeabi_i2d>
 8007fac:	4a96      	ldr	r2, [pc, #600]	; (8008208 <_dtoa_r+0x37c>)
 8007fae:	4b97      	ldr	r3, [pc, #604]	; (800820c <_dtoa_r+0x380>)
 8007fb0:	f7f9 fbfa 	bl	80017a8 <__aeabi_dmul>
 8007fb4:	0002      	movs	r2, r0
 8007fb6:	000b      	movs	r3, r1
 8007fb8:	0020      	movs	r0, r4
 8007fba:	0029      	movs	r1, r5
 8007fbc:	f7f8 fc9a 	bl	80008f4 <__aeabi_dadd>
 8007fc0:	0004      	movs	r4, r0
 8007fc2:	000d      	movs	r5, r1
 8007fc4:	f7fa fa52 	bl	800246c <__aeabi_d2iz>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	9003      	str	r0, [sp, #12]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	0020      	movs	r0, r4
 8007fd0:	0029      	movs	r1, r5
 8007fd2:	f7f8 fa3f 	bl	8000454 <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d00b      	beq.n	8007ff2 <_dtoa_r+0x166>
 8007fda:	9803      	ldr	r0, [sp, #12]
 8007fdc:	f7fa fa7c 	bl	80024d8 <__aeabi_i2d>
 8007fe0:	002b      	movs	r3, r5
 8007fe2:	0022      	movs	r2, r4
 8007fe4:	f7f8 fa30 	bl	8000448 <__aeabi_dcmpeq>
 8007fe8:	4243      	negs	r3, r0
 8007fea:	4158      	adcs	r0, r3
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1a1b      	subs	r3, r3, r0
 8007ff0:	9303      	str	r3, [sp, #12]
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	9316      	str	r3, [sp, #88]	; 0x58
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	2b16      	cmp	r3, #22
 8007ffa:	d810      	bhi.n	800801e <_dtoa_r+0x192>
 8007ffc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ffe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008000:	9a03      	ldr	r2, [sp, #12]
 8008002:	4b83      	ldr	r3, [pc, #524]	; (8008210 <_dtoa_r+0x384>)
 8008004:	00d2      	lsls	r2, r2, #3
 8008006:	189b      	adds	r3, r3, r2
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f7f8 fa22 	bl	8000454 <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d047      	beq.n	80080a4 <_dtoa_r+0x218>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	3b01      	subs	r3, #1
 8008018:	9303      	str	r3, [sp, #12]
 800801a:	2300      	movs	r3, #0
 800801c:	9316      	str	r3, [sp, #88]	; 0x58
 800801e:	2200      	movs	r2, #0
 8008020:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008022:	920a      	str	r2, [sp, #40]	; 0x28
 8008024:	1bdb      	subs	r3, r3, r7
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	d53e      	bpl.n	80080a8 <_dtoa_r+0x21c>
 800802a:	2201      	movs	r2, #1
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	930a      	str	r3, [sp, #40]	; 0x28
 8008030:	2300      	movs	r3, #0
 8008032:	930c      	str	r3, [sp, #48]	; 0x30
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	db38      	blt.n	80080ac <_dtoa_r+0x220>
 800803a:	9a03      	ldr	r2, [sp, #12]
 800803c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800803e:	4694      	mov	ip, r2
 8008040:	4463      	add	r3, ip
 8008042:	930c      	str	r3, [sp, #48]	; 0x30
 8008044:	2300      	movs	r3, #0
 8008046:	9213      	str	r2, [sp, #76]	; 0x4c
 8008048:	930d      	str	r3, [sp, #52]	; 0x34
 800804a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800804c:	2401      	movs	r4, #1
 800804e:	2b09      	cmp	r3, #9
 8008050:	d867      	bhi.n	8008122 <_dtoa_r+0x296>
 8008052:	2b05      	cmp	r3, #5
 8008054:	dd02      	ble.n	800805c <_dtoa_r+0x1d0>
 8008056:	2400      	movs	r4, #0
 8008058:	3b04      	subs	r3, #4
 800805a:	9322      	str	r3, [sp, #136]	; 0x88
 800805c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805e:	1e98      	subs	r0, r3, #2
 8008060:	2803      	cmp	r0, #3
 8008062:	d867      	bhi.n	8008134 <_dtoa_r+0x2a8>
 8008064:	f7f8 f856 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008068:	5b383a2b 	.word	0x5b383a2b
 800806c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800806e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008070:	18f6      	adds	r6, r6, r3
 8008072:	4b68      	ldr	r3, [pc, #416]	; (8008214 <_dtoa_r+0x388>)
 8008074:	18f2      	adds	r2, r6, r3
 8008076:	2a20      	cmp	r2, #32
 8008078:	dd0f      	ble.n	800809a <_dtoa_r+0x20e>
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	409f      	lsls	r7, r3
 8008080:	4b65      	ldr	r3, [pc, #404]	; (8008218 <_dtoa_r+0x38c>)
 8008082:	0038      	movs	r0, r7
 8008084:	18f3      	adds	r3, r6, r3
 8008086:	40dc      	lsrs	r4, r3
 8008088:	4320      	orrs	r0, r4
 800808a:	f7fa fa55 	bl	8002538 <__aeabi_ui2d>
 800808e:	2201      	movs	r2, #1
 8008090:	4b62      	ldr	r3, [pc, #392]	; (800821c <_dtoa_r+0x390>)
 8008092:	1e77      	subs	r7, r6, #1
 8008094:	18cb      	adds	r3, r1, r3
 8008096:	9217      	str	r2, [sp, #92]	; 0x5c
 8008098:	e776      	b.n	8007f88 <_dtoa_r+0xfc>
 800809a:	2320      	movs	r3, #32
 800809c:	0020      	movs	r0, r4
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	4098      	lsls	r0, r3
 80080a2:	e7f2      	b.n	800808a <_dtoa_r+0x1fe>
 80080a4:	9016      	str	r0, [sp, #88]	; 0x58
 80080a6:	e7ba      	b.n	800801e <_dtoa_r+0x192>
 80080a8:	920c      	str	r2, [sp, #48]	; 0x30
 80080aa:	e7c3      	b.n	8008034 <_dtoa_r+0x1a8>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	9a03      	ldr	r2, [sp, #12]
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	930a      	str	r3, [sp, #40]	; 0x28
 80080b4:	4253      	negs	r3, r2
 80080b6:	930d      	str	r3, [sp, #52]	; 0x34
 80080b8:	2300      	movs	r3, #0
 80080ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80080bc:	e7c5      	b.n	800804a <_dtoa_r+0x1be>
 80080be:	2300      	movs	r3, #0
 80080c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dc13      	bgt.n	80080f4 <_dtoa_r+0x268>
 80080cc:	2301      	movs	r3, #1
 80080ce:	001a      	movs	r2, r3
 80080d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d2:	9307      	str	r3, [sp, #28]
 80080d4:	9223      	str	r2, [sp, #140]	; 0x8c
 80080d6:	e00d      	b.n	80080f4 <_dtoa_r+0x268>
 80080d8:	2301      	movs	r3, #1
 80080da:	e7f1      	b.n	80080c0 <_dtoa_r+0x234>
 80080dc:	2300      	movs	r3, #0
 80080de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80080e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80080e2:	4694      	mov	ip, r2
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	4463      	add	r3, ip
 80080e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ea:	3301      	adds	r3, #1
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dc00      	bgt.n	80080f4 <_dtoa_r+0x268>
 80080f2:	2301      	movs	r3, #1
 80080f4:	9a04      	ldr	r2, [sp, #16]
 80080f6:	2100      	movs	r1, #0
 80080f8:	69d0      	ldr	r0, [r2, #28]
 80080fa:	2204      	movs	r2, #4
 80080fc:	0015      	movs	r5, r2
 80080fe:	3514      	adds	r5, #20
 8008100:	429d      	cmp	r5, r3
 8008102:	d91b      	bls.n	800813c <_dtoa_r+0x2b0>
 8008104:	6041      	str	r1, [r0, #4]
 8008106:	9804      	ldr	r0, [sp, #16]
 8008108:	f000 fdd6 	bl	8008cb8 <_Balloc>
 800810c:	9006      	str	r0, [sp, #24]
 800810e:	2800      	cmp	r0, #0
 8008110:	d117      	bne.n	8008142 <_dtoa_r+0x2b6>
 8008112:	21b0      	movs	r1, #176	; 0xb0
 8008114:	4b42      	ldr	r3, [pc, #264]	; (8008220 <_dtoa_r+0x394>)
 8008116:	482e      	ldr	r0, [pc, #184]	; (80081d0 <_dtoa_r+0x344>)
 8008118:	9a06      	ldr	r2, [sp, #24]
 800811a:	31ff      	adds	r1, #255	; 0xff
 800811c:	e6cb      	b.n	8007eb6 <_dtoa_r+0x2a>
 800811e:	2301      	movs	r3, #1
 8008120:	e7dd      	b.n	80080de <_dtoa_r+0x252>
 8008122:	2300      	movs	r3, #0
 8008124:	940f      	str	r4, [sp, #60]	; 0x3c
 8008126:	9322      	str	r3, [sp, #136]	; 0x88
 8008128:	3b01      	subs	r3, #1
 800812a:	930b      	str	r3, [sp, #44]	; 0x2c
 800812c:	9307      	str	r3, [sp, #28]
 800812e:	2200      	movs	r2, #0
 8008130:	3313      	adds	r3, #19
 8008132:	e7cf      	b.n	80080d4 <_dtoa_r+0x248>
 8008134:	2301      	movs	r3, #1
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	3b02      	subs	r3, #2
 800813a:	e7f6      	b.n	800812a <_dtoa_r+0x29e>
 800813c:	3101      	adds	r1, #1
 800813e:	0052      	lsls	r2, r2, #1
 8008140:	e7dc      	b.n	80080fc <_dtoa_r+0x270>
 8008142:	9b04      	ldr	r3, [sp, #16]
 8008144:	9a06      	ldr	r2, [sp, #24]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	9b07      	ldr	r3, [sp, #28]
 800814c:	2b0e      	cmp	r3, #14
 800814e:	d900      	bls.n	8008152 <_dtoa_r+0x2c6>
 8008150:	e0e5      	b.n	800831e <_dtoa_r+0x492>
 8008152:	2c00      	cmp	r4, #0
 8008154:	d100      	bne.n	8008158 <_dtoa_r+0x2cc>
 8008156:	e0e2      	b.n	800831e <_dtoa_r+0x492>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd64      	ble.n	8008228 <_dtoa_r+0x39c>
 800815e:	210f      	movs	r1, #15
 8008160:	9a03      	ldr	r2, [sp, #12]
 8008162:	4b2b      	ldr	r3, [pc, #172]	; (8008210 <_dtoa_r+0x384>)
 8008164:	400a      	ands	r2, r1
 8008166:	00d2      	lsls	r2, r2, #3
 8008168:	189b      	adds	r3, r3, r2
 800816a:	681e      	ldr	r6, [r3, #0]
 800816c:	685f      	ldr	r7, [r3, #4]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	2402      	movs	r4, #2
 8008172:	111d      	asrs	r5, r3, #4
 8008174:	05db      	lsls	r3, r3, #23
 8008176:	d50a      	bpl.n	800818e <_dtoa_r+0x302>
 8008178:	4b2a      	ldr	r3, [pc, #168]	; (8008224 <_dtoa_r+0x398>)
 800817a:	400d      	ands	r5, r1
 800817c:	6a1a      	ldr	r2, [r3, #32]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008182:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008184:	f7f8 ff16 	bl	8000fb4 <__aeabi_ddiv>
 8008188:	9008      	str	r0, [sp, #32]
 800818a:	9109      	str	r1, [sp, #36]	; 0x24
 800818c:	3401      	adds	r4, #1
 800818e:	4b25      	ldr	r3, [pc, #148]	; (8008224 <_dtoa_r+0x398>)
 8008190:	930e      	str	r3, [sp, #56]	; 0x38
 8008192:	2d00      	cmp	r5, #0
 8008194:	d108      	bne.n	80081a8 <_dtoa_r+0x31c>
 8008196:	9808      	ldr	r0, [sp, #32]
 8008198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819a:	0032      	movs	r2, r6
 800819c:	003b      	movs	r3, r7
 800819e:	f7f8 ff09 	bl	8000fb4 <__aeabi_ddiv>
 80081a2:	9008      	str	r0, [sp, #32]
 80081a4:	9109      	str	r1, [sp, #36]	; 0x24
 80081a6:	e05a      	b.n	800825e <_dtoa_r+0x3d2>
 80081a8:	2301      	movs	r3, #1
 80081aa:	421d      	tst	r5, r3
 80081ac:	d009      	beq.n	80081c2 <_dtoa_r+0x336>
 80081ae:	18e4      	adds	r4, r4, r3
 80081b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b2:	0030      	movs	r0, r6
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	0039      	movs	r1, r7
 80081ba:	f7f9 faf5 	bl	80017a8 <__aeabi_dmul>
 80081be:	0006      	movs	r6, r0
 80081c0:	000f      	movs	r7, r1
 80081c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081c4:	106d      	asrs	r5, r5, #1
 80081c6:	3308      	adds	r3, #8
 80081c8:	e7e2      	b.n	8008190 <_dtoa_r+0x304>
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	0800a130 	.word	0x0800a130
 80081d0:	0800a147 	.word	0x0800a147
 80081d4:	7ff00000 	.word	0x7ff00000
 80081d8:	0000270f 	.word	0x0000270f
 80081dc:	0800a12c 	.word	0x0800a12c
 80081e0:	0800a12f 	.word	0x0800a12f
 80081e4:	0800a0ff 	.word	0x0800a0ff
 80081e8:	0800a100 	.word	0x0800a100
 80081ec:	3ff00000 	.word	0x3ff00000
 80081f0:	fffffc01 	.word	0xfffffc01
 80081f4:	3ff80000 	.word	0x3ff80000
 80081f8:	636f4361 	.word	0x636f4361
 80081fc:	3fd287a7 	.word	0x3fd287a7
 8008200:	8b60c8b3 	.word	0x8b60c8b3
 8008204:	3fc68a28 	.word	0x3fc68a28
 8008208:	509f79fb 	.word	0x509f79fb
 800820c:	3fd34413 	.word	0x3fd34413
 8008210:	0800a238 	.word	0x0800a238
 8008214:	00000432 	.word	0x00000432
 8008218:	00000412 	.word	0x00000412
 800821c:	fe100000 	.word	0xfe100000
 8008220:	0800a19f 	.word	0x0800a19f
 8008224:	0800a210 	.word	0x0800a210
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	2402      	movs	r4, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d016      	beq.n	800825e <_dtoa_r+0x3d2>
 8008230:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008232:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008234:	220f      	movs	r2, #15
 8008236:	425d      	negs	r5, r3
 8008238:	402a      	ands	r2, r5
 800823a:	4bdd      	ldr	r3, [pc, #884]	; (80085b0 <_dtoa_r+0x724>)
 800823c:	00d2      	lsls	r2, r2, #3
 800823e:	189b      	adds	r3, r3, r2
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f7f9 fab0 	bl	80017a8 <__aeabi_dmul>
 8008248:	2701      	movs	r7, #1
 800824a:	2300      	movs	r3, #0
 800824c:	9008      	str	r0, [sp, #32]
 800824e:	9109      	str	r1, [sp, #36]	; 0x24
 8008250:	4ed8      	ldr	r6, [pc, #864]	; (80085b4 <_dtoa_r+0x728>)
 8008252:	112d      	asrs	r5, r5, #4
 8008254:	2d00      	cmp	r5, #0
 8008256:	d000      	beq.n	800825a <_dtoa_r+0x3ce>
 8008258:	e091      	b.n	800837e <_dtoa_r+0x4f2>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1a1      	bne.n	80081a2 <_dtoa_r+0x316>
 800825e:	9e08      	ldr	r6, [sp, #32]
 8008260:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008262:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008264:	2b00      	cmp	r3, #0
 8008266:	d100      	bne.n	800826a <_dtoa_r+0x3de>
 8008268:	e094      	b.n	8008394 <_dtoa_r+0x508>
 800826a:	2200      	movs	r2, #0
 800826c:	0030      	movs	r0, r6
 800826e:	0039      	movs	r1, r7
 8008270:	4bd1      	ldr	r3, [pc, #836]	; (80085b8 <_dtoa_r+0x72c>)
 8008272:	f7f8 f8ef 	bl	8000454 <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	d100      	bne.n	800827c <_dtoa_r+0x3f0>
 800827a:	e08b      	b.n	8008394 <_dtoa_r+0x508>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d100      	bne.n	8008284 <_dtoa_r+0x3f8>
 8008282:	e087      	b.n	8008394 <_dtoa_r+0x508>
 8008284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008286:	2b00      	cmp	r3, #0
 8008288:	dd45      	ble.n	8008316 <_dtoa_r+0x48a>
 800828a:	9b03      	ldr	r3, [sp, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	3b01      	subs	r3, #1
 8008290:	930e      	str	r3, [sp, #56]	; 0x38
 8008292:	0030      	movs	r0, r6
 8008294:	4bc9      	ldr	r3, [pc, #804]	; (80085bc <_dtoa_r+0x730>)
 8008296:	0039      	movs	r1, r7
 8008298:	f7f9 fa86 	bl	80017a8 <__aeabi_dmul>
 800829c:	9008      	str	r0, [sp, #32]
 800829e:	9109      	str	r1, [sp, #36]	; 0x24
 80082a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a2:	3401      	adds	r4, #1
 80082a4:	0020      	movs	r0, r4
 80082a6:	9e08      	ldr	r6, [sp, #32]
 80082a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082aa:	9312      	str	r3, [sp, #72]	; 0x48
 80082ac:	f7fa f914 	bl	80024d8 <__aeabi_i2d>
 80082b0:	0032      	movs	r2, r6
 80082b2:	003b      	movs	r3, r7
 80082b4:	f7f9 fa78 	bl	80017a8 <__aeabi_dmul>
 80082b8:	2200      	movs	r2, #0
 80082ba:	4bc1      	ldr	r3, [pc, #772]	; (80085c0 <_dtoa_r+0x734>)
 80082bc:	f7f8 fb1a 	bl	80008f4 <__aeabi_dadd>
 80082c0:	4ac0      	ldr	r2, [pc, #768]	; (80085c4 <_dtoa_r+0x738>)
 80082c2:	9014      	str	r0, [sp, #80]	; 0x50
 80082c4:	9115      	str	r1, [sp, #84]	; 0x54
 80082c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80082ca:	4694      	mov	ip, r2
 80082cc:	9308      	str	r3, [sp, #32]
 80082ce:	9409      	str	r4, [sp, #36]	; 0x24
 80082d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082d2:	4463      	add	r3, ip
 80082d4:	9318      	str	r3, [sp, #96]	; 0x60
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d15e      	bne.n	800839c <_dtoa_r+0x510>
 80082de:	2200      	movs	r2, #0
 80082e0:	4bb9      	ldr	r3, [pc, #740]	; (80085c8 <_dtoa_r+0x73c>)
 80082e2:	0030      	movs	r0, r6
 80082e4:	0039      	movs	r1, r7
 80082e6:	f7f9 fd21 	bl	8001d2c <__aeabi_dsub>
 80082ea:	9a08      	ldr	r2, [sp, #32]
 80082ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80082ee:	0004      	movs	r4, r0
 80082f0:	000d      	movs	r5, r1
 80082f2:	f7f8 f8c3 	bl	800047c <__aeabi_dcmpgt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d000      	beq.n	80082fc <_dtoa_r+0x470>
 80082fa:	e2b3      	b.n	8008864 <_dtoa_r+0x9d8>
 80082fc:	48b3      	ldr	r0, [pc, #716]	; (80085cc <_dtoa_r+0x740>)
 80082fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008300:	4684      	mov	ip, r0
 8008302:	4461      	add	r1, ip
 8008304:	000b      	movs	r3, r1
 8008306:	0020      	movs	r0, r4
 8008308:	0029      	movs	r1, r5
 800830a:	9a08      	ldr	r2, [sp, #32]
 800830c:	f7f8 f8a2 	bl	8000454 <__aeabi_dcmplt>
 8008310:	2800      	cmp	r0, #0
 8008312:	d000      	beq.n	8008316 <_dtoa_r+0x48a>
 8008314:	e2a3      	b.n	800885e <_dtoa_r+0x9d2>
 8008316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008318:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	9409      	str	r4, [sp, #36]	; 0x24
 800831e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008320:	2b00      	cmp	r3, #0
 8008322:	da00      	bge.n	8008326 <_dtoa_r+0x49a>
 8008324:	e179      	b.n	800861a <_dtoa_r+0x78e>
 8008326:	9a03      	ldr	r2, [sp, #12]
 8008328:	2a0e      	cmp	r2, #14
 800832a:	dd00      	ble.n	800832e <_dtoa_r+0x4a2>
 800832c:	e175      	b.n	800861a <_dtoa_r+0x78e>
 800832e:	4ba0      	ldr	r3, [pc, #640]	; (80085b0 <_dtoa_r+0x724>)
 8008330:	00d2      	lsls	r2, r2, #3
 8008332:	189b      	adds	r3, r3, r2
 8008334:	681e      	ldr	r6, [r3, #0]
 8008336:	685f      	ldr	r7, [r3, #4]
 8008338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800833a:	2b00      	cmp	r3, #0
 800833c:	db00      	blt.n	8008340 <_dtoa_r+0x4b4>
 800833e:	e0e5      	b.n	800850c <_dtoa_r+0x680>
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd00      	ble.n	8008348 <_dtoa_r+0x4bc>
 8008346:	e0e1      	b.n	800850c <_dtoa_r+0x680>
 8008348:	d000      	beq.n	800834c <_dtoa_r+0x4c0>
 800834a:	e288      	b.n	800885e <_dtoa_r+0x9d2>
 800834c:	2200      	movs	r2, #0
 800834e:	0030      	movs	r0, r6
 8008350:	0039      	movs	r1, r7
 8008352:	4b9d      	ldr	r3, [pc, #628]	; (80085c8 <_dtoa_r+0x73c>)
 8008354:	f7f9 fa28 	bl	80017a8 <__aeabi_dmul>
 8008358:	9a08      	ldr	r2, [sp, #32]
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	f7f8 f898 	bl	8000490 <__aeabi_dcmpge>
 8008360:	9e07      	ldr	r6, [sp, #28]
 8008362:	0037      	movs	r7, r6
 8008364:	2800      	cmp	r0, #0
 8008366:	d000      	beq.n	800836a <_dtoa_r+0x4de>
 8008368:	e25f      	b.n	800882a <_dtoa_r+0x99e>
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	9a06      	ldr	r2, [sp, #24]
 800836e:	3301      	adds	r3, #1
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	2331      	movs	r3, #49	; 0x31
 8008374:	7013      	strb	r3, [r2, #0]
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	3301      	adds	r3, #1
 800837a:	9303      	str	r3, [sp, #12]
 800837c:	e25a      	b.n	8008834 <_dtoa_r+0x9a8>
 800837e:	423d      	tst	r5, r7
 8008380:	d005      	beq.n	800838e <_dtoa_r+0x502>
 8008382:	6832      	ldr	r2, [r6, #0]
 8008384:	6873      	ldr	r3, [r6, #4]
 8008386:	f7f9 fa0f 	bl	80017a8 <__aeabi_dmul>
 800838a:	003b      	movs	r3, r7
 800838c:	3401      	adds	r4, #1
 800838e:	106d      	asrs	r5, r5, #1
 8008390:	3608      	adds	r6, #8
 8008392:	e75f      	b.n	8008254 <_dtoa_r+0x3c8>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	930e      	str	r3, [sp, #56]	; 0x38
 8008398:	9b07      	ldr	r3, [sp, #28]
 800839a:	e783      	b.n	80082a4 <_dtoa_r+0x418>
 800839c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800839e:	4b84      	ldr	r3, [pc, #528]	; (80085b0 <_dtoa_r+0x724>)
 80083a0:	3a01      	subs	r2, #1
 80083a2:	00d2      	lsls	r2, r2, #3
 80083a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083a6:	189b      	adds	r3, r3, r2
 80083a8:	9c08      	ldr	r4, [sp, #32]
 80083aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d051      	beq.n	8008458 <_dtoa_r+0x5cc>
 80083b4:	2000      	movs	r0, #0
 80083b6:	4986      	ldr	r1, [pc, #536]	; (80085d0 <_dtoa_r+0x744>)
 80083b8:	f7f8 fdfc 	bl	8000fb4 <__aeabi_ddiv>
 80083bc:	0022      	movs	r2, r4
 80083be:	002b      	movs	r3, r5
 80083c0:	f7f9 fcb4 	bl	8001d2c <__aeabi_dsub>
 80083c4:	9a06      	ldr	r2, [sp, #24]
 80083c6:	0004      	movs	r4, r0
 80083c8:	4694      	mov	ip, r2
 80083ca:	000d      	movs	r5, r1
 80083cc:	9b06      	ldr	r3, [sp, #24]
 80083ce:	9314      	str	r3, [sp, #80]	; 0x50
 80083d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d2:	4463      	add	r3, ip
 80083d4:	9318      	str	r3, [sp, #96]	; 0x60
 80083d6:	0039      	movs	r1, r7
 80083d8:	0030      	movs	r0, r6
 80083da:	f7fa f847 	bl	800246c <__aeabi_d2iz>
 80083de:	9012      	str	r0, [sp, #72]	; 0x48
 80083e0:	f7fa f87a 	bl	80024d8 <__aeabi_i2d>
 80083e4:	0002      	movs	r2, r0
 80083e6:	000b      	movs	r3, r1
 80083e8:	0030      	movs	r0, r6
 80083ea:	0039      	movs	r1, r7
 80083ec:	f7f9 fc9e 	bl	8001d2c <__aeabi_dsub>
 80083f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083f4:	3301      	adds	r3, #1
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fa:	0006      	movs	r6, r0
 80083fc:	3330      	adds	r3, #48	; 0x30
 80083fe:	7013      	strb	r3, [r2, #0]
 8008400:	0022      	movs	r2, r4
 8008402:	002b      	movs	r3, r5
 8008404:	000f      	movs	r7, r1
 8008406:	f7f8 f825 	bl	8000454 <__aeabi_dcmplt>
 800840a:	2800      	cmp	r0, #0
 800840c:	d174      	bne.n	80084f8 <_dtoa_r+0x66c>
 800840e:	0032      	movs	r2, r6
 8008410:	003b      	movs	r3, r7
 8008412:	2000      	movs	r0, #0
 8008414:	4968      	ldr	r1, [pc, #416]	; (80085b8 <_dtoa_r+0x72c>)
 8008416:	f7f9 fc89 	bl	8001d2c <__aeabi_dsub>
 800841a:	0022      	movs	r2, r4
 800841c:	002b      	movs	r3, r5
 800841e:	f7f8 f819 	bl	8000454 <__aeabi_dcmplt>
 8008422:	2800      	cmp	r0, #0
 8008424:	d000      	beq.n	8008428 <_dtoa_r+0x59c>
 8008426:	e0d7      	b.n	80085d8 <_dtoa_r+0x74c>
 8008428:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800842a:	9a08      	ldr	r2, [sp, #32]
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <_dtoa_r+0x5a6>
 8008430:	e771      	b.n	8008316 <_dtoa_r+0x48a>
 8008432:	2200      	movs	r2, #0
 8008434:	0020      	movs	r0, r4
 8008436:	0029      	movs	r1, r5
 8008438:	4b60      	ldr	r3, [pc, #384]	; (80085bc <_dtoa_r+0x730>)
 800843a:	f7f9 f9b5 	bl	80017a8 <__aeabi_dmul>
 800843e:	4b5f      	ldr	r3, [pc, #380]	; (80085bc <_dtoa_r+0x730>)
 8008440:	0004      	movs	r4, r0
 8008442:	000d      	movs	r5, r1
 8008444:	0030      	movs	r0, r6
 8008446:	0039      	movs	r1, r7
 8008448:	2200      	movs	r2, #0
 800844a:	f7f9 f9ad 	bl	80017a8 <__aeabi_dmul>
 800844e:	9b08      	ldr	r3, [sp, #32]
 8008450:	0006      	movs	r6, r0
 8008452:	000f      	movs	r7, r1
 8008454:	9314      	str	r3, [sp, #80]	; 0x50
 8008456:	e7be      	b.n	80083d6 <_dtoa_r+0x54a>
 8008458:	0020      	movs	r0, r4
 800845a:	0029      	movs	r1, r5
 800845c:	f7f9 f9a4 	bl	80017a8 <__aeabi_dmul>
 8008460:	9a06      	ldr	r2, [sp, #24]
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	4694      	mov	ip, r2
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800846a:	9014      	str	r0, [sp, #80]	; 0x50
 800846c:	9115      	str	r1, [sp, #84]	; 0x54
 800846e:	4463      	add	r3, ip
 8008470:	9319      	str	r3, [sp, #100]	; 0x64
 8008472:	0030      	movs	r0, r6
 8008474:	0039      	movs	r1, r7
 8008476:	f7f9 fff9 	bl	800246c <__aeabi_d2iz>
 800847a:	9018      	str	r0, [sp, #96]	; 0x60
 800847c:	f7fa f82c 	bl	80024d8 <__aeabi_i2d>
 8008480:	0002      	movs	r2, r0
 8008482:	000b      	movs	r3, r1
 8008484:	0030      	movs	r0, r6
 8008486:	0039      	movs	r1, r7
 8008488:	f7f9 fc50 	bl	8001d2c <__aeabi_dsub>
 800848c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800848e:	9b08      	ldr	r3, [sp, #32]
 8008490:	3630      	adds	r6, #48	; 0x30
 8008492:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008494:	701e      	strb	r6, [r3, #0]
 8008496:	3301      	adds	r3, #1
 8008498:	0004      	movs	r4, r0
 800849a:	000d      	movs	r5, r1
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	4293      	cmp	r3, r2
 80084a0:	d12d      	bne.n	80084fe <_dtoa_r+0x672>
 80084a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80084a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80084a6:	9a06      	ldr	r2, [sp, #24]
 80084a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084aa:	4694      	mov	ip, r2
 80084ac:	4463      	add	r3, ip
 80084ae:	2200      	movs	r2, #0
 80084b0:	9308      	str	r3, [sp, #32]
 80084b2:	4b47      	ldr	r3, [pc, #284]	; (80085d0 <_dtoa_r+0x744>)
 80084b4:	f7f8 fa1e 	bl	80008f4 <__aeabi_dadd>
 80084b8:	0002      	movs	r2, r0
 80084ba:	000b      	movs	r3, r1
 80084bc:	0020      	movs	r0, r4
 80084be:	0029      	movs	r1, r5
 80084c0:	f7f7 ffdc 	bl	800047c <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d000      	beq.n	80084ca <_dtoa_r+0x63e>
 80084c8:	e086      	b.n	80085d8 <_dtoa_r+0x74c>
 80084ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ce:	2000      	movs	r0, #0
 80084d0:	493f      	ldr	r1, [pc, #252]	; (80085d0 <_dtoa_r+0x744>)
 80084d2:	f7f9 fc2b 	bl	8001d2c <__aeabi_dsub>
 80084d6:	0002      	movs	r2, r0
 80084d8:	000b      	movs	r3, r1
 80084da:	0020      	movs	r0, r4
 80084dc:	0029      	movs	r1, r5
 80084de:	f7f7 ffb9 	bl	8000454 <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d100      	bne.n	80084e8 <_dtoa_r+0x65c>
 80084e6:	e716      	b.n	8008316 <_dtoa_r+0x48a>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	001a      	movs	r2, r3
 80084ec:	3a01      	subs	r2, #1
 80084ee:	9208      	str	r2, [sp, #32]
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	2a30      	cmp	r2, #48	; 0x30
 80084f4:	d0f8      	beq.n	80084e8 <_dtoa_r+0x65c>
 80084f6:	9308      	str	r3, [sp, #32]
 80084f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	e046      	b.n	800858c <_dtoa_r+0x700>
 80084fe:	2200      	movs	r2, #0
 8008500:	4b2e      	ldr	r3, [pc, #184]	; (80085bc <_dtoa_r+0x730>)
 8008502:	f7f9 f951 	bl	80017a8 <__aeabi_dmul>
 8008506:	0006      	movs	r6, r0
 8008508:	000f      	movs	r7, r1
 800850a:	e7b2      	b.n	8008472 <_dtoa_r+0x5e6>
 800850c:	9b06      	ldr	r3, [sp, #24]
 800850e:	9a06      	ldr	r2, [sp, #24]
 8008510:	930a      	str	r3, [sp, #40]	; 0x28
 8008512:	9b07      	ldr	r3, [sp, #28]
 8008514:	9c08      	ldr	r4, [sp, #32]
 8008516:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008518:	3b01      	subs	r3, #1
 800851a:	189b      	adds	r3, r3, r2
 800851c:	930b      	str	r3, [sp, #44]	; 0x2c
 800851e:	0032      	movs	r2, r6
 8008520:	003b      	movs	r3, r7
 8008522:	0020      	movs	r0, r4
 8008524:	0029      	movs	r1, r5
 8008526:	f7f8 fd45 	bl	8000fb4 <__aeabi_ddiv>
 800852a:	f7f9 ff9f 	bl	800246c <__aeabi_d2iz>
 800852e:	9007      	str	r0, [sp, #28]
 8008530:	f7f9 ffd2 	bl	80024d8 <__aeabi_i2d>
 8008534:	0032      	movs	r2, r6
 8008536:	003b      	movs	r3, r7
 8008538:	f7f9 f936 	bl	80017a8 <__aeabi_dmul>
 800853c:	0002      	movs	r2, r0
 800853e:	000b      	movs	r3, r1
 8008540:	0020      	movs	r0, r4
 8008542:	0029      	movs	r1, r5
 8008544:	f7f9 fbf2 	bl	8001d2c <__aeabi_dsub>
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	001a      	movs	r2, r3
 800854c:	3201      	adds	r2, #1
 800854e:	920a      	str	r2, [sp, #40]	; 0x28
 8008550:	9208      	str	r2, [sp, #32]
 8008552:	9a07      	ldr	r2, [sp, #28]
 8008554:	3230      	adds	r2, #48	; 0x30
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800855a:	429a      	cmp	r2, r3
 800855c:	d14f      	bne.n	80085fe <_dtoa_r+0x772>
 800855e:	0002      	movs	r2, r0
 8008560:	000b      	movs	r3, r1
 8008562:	f7f8 f9c7 	bl	80008f4 <__aeabi_dadd>
 8008566:	0032      	movs	r2, r6
 8008568:	003b      	movs	r3, r7
 800856a:	0004      	movs	r4, r0
 800856c:	000d      	movs	r5, r1
 800856e:	f7f7 ff85 	bl	800047c <__aeabi_dcmpgt>
 8008572:	2800      	cmp	r0, #0
 8008574:	d12e      	bne.n	80085d4 <_dtoa_r+0x748>
 8008576:	0032      	movs	r2, r6
 8008578:	003b      	movs	r3, r7
 800857a:	0020      	movs	r0, r4
 800857c:	0029      	movs	r1, r5
 800857e:	f7f7 ff63 	bl	8000448 <__aeabi_dcmpeq>
 8008582:	2800      	cmp	r0, #0
 8008584:	d002      	beq.n	800858c <_dtoa_r+0x700>
 8008586:	9b07      	ldr	r3, [sp, #28]
 8008588:	07de      	lsls	r6, r3, #31
 800858a:	d423      	bmi.n	80085d4 <_dtoa_r+0x748>
 800858c:	9905      	ldr	r1, [sp, #20]
 800858e:	9804      	ldr	r0, [sp, #16]
 8008590:	f000 fbd6 	bl	8008d40 <_Bfree>
 8008594:	2300      	movs	r3, #0
 8008596:	9a08      	ldr	r2, [sp, #32]
 8008598:	7013      	strb	r3, [r2, #0]
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800859e:	3301      	adds	r3, #1
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d100      	bne.n	80085aa <_dtoa_r+0x71e>
 80085a8:	e4ba      	b.n	8007f20 <_dtoa_r+0x94>
 80085aa:	9a08      	ldr	r2, [sp, #32]
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e4b7      	b.n	8007f20 <_dtoa_r+0x94>
 80085b0:	0800a238 	.word	0x0800a238
 80085b4:	0800a210 	.word	0x0800a210
 80085b8:	3ff00000 	.word	0x3ff00000
 80085bc:	40240000 	.word	0x40240000
 80085c0:	401c0000 	.word	0x401c0000
 80085c4:	fcc00000 	.word	0xfcc00000
 80085c8:	40140000 	.word	0x40140000
 80085cc:	7cc00000 	.word	0x7cc00000
 80085d0:	3fe00000 	.word	0x3fe00000
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	930e      	str	r3, [sp, #56]	; 0x38
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	3b01      	subs	r3, #1
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	2a39      	cmp	r2, #57	; 0x39
 80085e2:	d108      	bne.n	80085f6 <_dtoa_r+0x76a>
 80085e4:	9a06      	ldr	r2, [sp, #24]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d1f7      	bne.n	80085da <_dtoa_r+0x74e>
 80085ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ec:	9906      	ldr	r1, [sp, #24]
 80085ee:	3201      	adds	r2, #1
 80085f0:	920e      	str	r2, [sp, #56]	; 0x38
 80085f2:	2230      	movs	r2, #48	; 0x30
 80085f4:	700a      	strb	r2, [r1, #0]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	3201      	adds	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	e77c      	b.n	80084f8 <_dtoa_r+0x66c>
 80085fe:	2200      	movs	r2, #0
 8008600:	4ba9      	ldr	r3, [pc, #676]	; (80088a8 <_dtoa_r+0xa1c>)
 8008602:	f7f9 f8d1 	bl	80017a8 <__aeabi_dmul>
 8008606:	2200      	movs	r2, #0
 8008608:	2300      	movs	r3, #0
 800860a:	0004      	movs	r4, r0
 800860c:	000d      	movs	r5, r1
 800860e:	f7f7 ff1b 	bl	8000448 <__aeabi_dcmpeq>
 8008612:	2800      	cmp	r0, #0
 8008614:	d100      	bne.n	8008618 <_dtoa_r+0x78c>
 8008616:	e782      	b.n	800851e <_dtoa_r+0x692>
 8008618:	e7b8      	b.n	800858c <_dtoa_r+0x700>
 800861a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800861c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800861e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008620:	2f00      	cmp	r7, #0
 8008622:	d012      	beq.n	800864a <_dtoa_r+0x7be>
 8008624:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008626:	2a01      	cmp	r2, #1
 8008628:	dc6e      	bgt.n	8008708 <_dtoa_r+0x87c>
 800862a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800862c:	2a00      	cmp	r2, #0
 800862e:	d065      	beq.n	80086fc <_dtoa_r+0x870>
 8008630:	4a9e      	ldr	r2, [pc, #632]	; (80088ac <_dtoa_r+0xa20>)
 8008632:	189b      	adds	r3, r3, r2
 8008634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008636:	2101      	movs	r1, #1
 8008638:	18d2      	adds	r2, r2, r3
 800863a:	920a      	str	r2, [sp, #40]	; 0x28
 800863c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800863e:	9804      	ldr	r0, [sp, #16]
 8008640:	18d3      	adds	r3, r2, r3
 8008642:	930c      	str	r3, [sp, #48]	; 0x30
 8008644:	f000 fc2c 	bl	8008ea0 <__i2b>
 8008648:	0007      	movs	r7, r0
 800864a:	2c00      	cmp	r4, #0
 800864c:	d00e      	beq.n	800866c <_dtoa_r+0x7e0>
 800864e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd0b      	ble.n	800866c <_dtoa_r+0x7e0>
 8008654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008656:	0023      	movs	r3, r4
 8008658:	4294      	cmp	r4, r2
 800865a:	dd00      	ble.n	800865e <_dtoa_r+0x7d2>
 800865c:	0013      	movs	r3, r2
 800865e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008660:	1ae4      	subs	r4, r4, r3
 8008662:	1ad2      	subs	r2, r2, r3
 8008664:	920a      	str	r2, [sp, #40]	; 0x28
 8008666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	930c      	str	r3, [sp, #48]	; 0x30
 800866c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01e      	beq.n	80086b0 <_dtoa_r+0x824>
 8008672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d05c      	beq.n	8008732 <_dtoa_r+0x8a6>
 8008678:	2d00      	cmp	r5, #0
 800867a:	dd10      	ble.n	800869e <_dtoa_r+0x812>
 800867c:	0039      	movs	r1, r7
 800867e:	002a      	movs	r2, r5
 8008680:	9804      	ldr	r0, [sp, #16]
 8008682:	f000 fcd5 	bl	8009030 <__pow5mult>
 8008686:	9a05      	ldr	r2, [sp, #20]
 8008688:	0001      	movs	r1, r0
 800868a:	0007      	movs	r7, r0
 800868c:	9804      	ldr	r0, [sp, #16]
 800868e:	f000 fc1f 	bl	8008ed0 <__multiply>
 8008692:	0006      	movs	r6, r0
 8008694:	9905      	ldr	r1, [sp, #20]
 8008696:	9804      	ldr	r0, [sp, #16]
 8008698:	f000 fb52 	bl	8008d40 <_Bfree>
 800869c:	9605      	str	r6, [sp, #20]
 800869e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a0:	1b5a      	subs	r2, r3, r5
 80086a2:	42ab      	cmp	r3, r5
 80086a4:	d004      	beq.n	80086b0 <_dtoa_r+0x824>
 80086a6:	9905      	ldr	r1, [sp, #20]
 80086a8:	9804      	ldr	r0, [sp, #16]
 80086aa:	f000 fcc1 	bl	8009030 <__pow5mult>
 80086ae:	9005      	str	r0, [sp, #20]
 80086b0:	2101      	movs	r1, #1
 80086b2:	9804      	ldr	r0, [sp, #16]
 80086b4:	f000 fbf4 	bl	8008ea0 <__i2b>
 80086b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086ba:	0006      	movs	r6, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd3a      	ble.n	8008736 <_dtoa_r+0x8aa>
 80086c0:	001a      	movs	r2, r3
 80086c2:	0001      	movs	r1, r0
 80086c4:	9804      	ldr	r0, [sp, #16]
 80086c6:	f000 fcb3 	bl	8009030 <__pow5mult>
 80086ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086cc:	0006      	movs	r6, r0
 80086ce:	2500      	movs	r5, #0
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	dc38      	bgt.n	8008746 <_dtoa_r+0x8ba>
 80086d4:	2500      	movs	r5, #0
 80086d6:	9b08      	ldr	r3, [sp, #32]
 80086d8:	42ab      	cmp	r3, r5
 80086da:	d130      	bne.n	800873e <_dtoa_r+0x8b2>
 80086dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086de:	031b      	lsls	r3, r3, #12
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	d12c      	bne.n	800873e <_dtoa_r+0x8b2>
 80086e4:	4b72      	ldr	r3, [pc, #456]	; (80088b0 <_dtoa_r+0xa24>)
 80086e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e8:	4213      	tst	r3, r2
 80086ea:	d028      	beq.n	800873e <_dtoa_r+0x8b2>
 80086ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ee:	3501      	adds	r5, #1
 80086f0:	3301      	adds	r3, #1
 80086f2:	930a      	str	r3, [sp, #40]	; 0x28
 80086f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f6:	3301      	adds	r3, #1
 80086f8:	930c      	str	r3, [sp, #48]	; 0x30
 80086fa:	e020      	b.n	800873e <_dtoa_r+0x8b2>
 80086fc:	2336      	movs	r3, #54	; 0x36
 80086fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008700:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	e795      	b.n	8008634 <_dtoa_r+0x7a8>
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	1e5d      	subs	r5, r3, #1
 800870c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800870e:	42ab      	cmp	r3, r5
 8008710:	db07      	blt.n	8008722 <_dtoa_r+0x896>
 8008712:	1b5d      	subs	r5, r3, r5
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	da8b      	bge.n	8008634 <_dtoa_r+0x7a8>
 800871c:	1ae4      	subs	r4, r4, r3
 800871e:	2300      	movs	r3, #0
 8008720:	e788      	b.n	8008634 <_dtoa_r+0x7a8>
 8008722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008726:	1aeb      	subs	r3, r5, r3
 8008728:	18d3      	adds	r3, r2, r3
 800872a:	950d      	str	r5, [sp, #52]	; 0x34
 800872c:	9313      	str	r3, [sp, #76]	; 0x4c
 800872e:	2500      	movs	r5, #0
 8008730:	e7f0      	b.n	8008714 <_dtoa_r+0x888>
 8008732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008734:	e7b7      	b.n	80086a6 <_dtoa_r+0x81a>
 8008736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008738:	2500      	movs	r5, #0
 800873a:	2b01      	cmp	r3, #1
 800873c:	ddca      	ble.n	80086d4 <_dtoa_r+0x848>
 800873e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008740:	2001      	movs	r0, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <_dtoa_r+0x8cc>
 8008746:	6933      	ldr	r3, [r6, #16]
 8008748:	3303      	adds	r3, #3
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	18f3      	adds	r3, r6, r3
 800874e:	6858      	ldr	r0, [r3, #4]
 8008750:	f000 fb5e 	bl	8008e10 <__hi0bits>
 8008754:	2320      	movs	r3, #32
 8008756:	1a18      	subs	r0, r3, r0
 8008758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800875a:	1818      	adds	r0, r3, r0
 800875c:	0002      	movs	r2, r0
 800875e:	231f      	movs	r3, #31
 8008760:	401a      	ands	r2, r3
 8008762:	4218      	tst	r0, r3
 8008764:	d047      	beq.n	80087f6 <_dtoa_r+0x96a>
 8008766:	3301      	adds	r3, #1
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	2b04      	cmp	r3, #4
 800876c:	dd3f      	ble.n	80087ee <_dtoa_r+0x962>
 800876e:	231c      	movs	r3, #28
 8008770:	1a9b      	subs	r3, r3, r2
 8008772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008774:	18e4      	adds	r4, r4, r3
 8008776:	18d2      	adds	r2, r2, r3
 8008778:	920a      	str	r2, [sp, #40]	; 0x28
 800877a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800877c:	18d3      	adds	r3, r2, r3
 800877e:	930c      	str	r3, [sp, #48]	; 0x30
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd05      	ble.n	8008792 <_dtoa_r+0x906>
 8008786:	001a      	movs	r2, r3
 8008788:	9905      	ldr	r1, [sp, #20]
 800878a:	9804      	ldr	r0, [sp, #16]
 800878c:	f000 fcac 	bl	80090e8 <__lshift>
 8008790:	9005      	str	r0, [sp, #20]
 8008792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd05      	ble.n	80087a4 <_dtoa_r+0x918>
 8008798:	0031      	movs	r1, r6
 800879a:	001a      	movs	r2, r3
 800879c:	9804      	ldr	r0, [sp, #16]
 800879e:	f000 fca3 	bl	80090e8 <__lshift>
 80087a2:	0006      	movs	r6, r0
 80087a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d027      	beq.n	80087fa <_dtoa_r+0x96e>
 80087aa:	0031      	movs	r1, r6
 80087ac:	9805      	ldr	r0, [sp, #20]
 80087ae:	f000 fd09 	bl	80091c4 <__mcmp>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	da21      	bge.n	80087fa <_dtoa_r+0x96e>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	220a      	movs	r2, #10
 80087ba:	3b01      	subs	r3, #1
 80087bc:	9303      	str	r3, [sp, #12]
 80087be:	9905      	ldr	r1, [sp, #20]
 80087c0:	2300      	movs	r3, #0
 80087c2:	9804      	ldr	r0, [sp, #16]
 80087c4:	f000 fae0 	bl	8008d88 <__multadd>
 80087c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ca:	9005      	str	r0, [sp, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d100      	bne.n	80087d2 <_dtoa_r+0x946>
 80087d0:	e15d      	b.n	8008a8e <_dtoa_r+0xc02>
 80087d2:	2300      	movs	r3, #0
 80087d4:	0039      	movs	r1, r7
 80087d6:	220a      	movs	r2, #10
 80087d8:	9804      	ldr	r0, [sp, #16]
 80087da:	f000 fad5 	bl	8008d88 <__multadd>
 80087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e0:	0007      	movs	r7, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dc49      	bgt.n	800887a <_dtoa_r+0x9ee>
 80087e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	dc0e      	bgt.n	800880a <_dtoa_r+0x97e>
 80087ec:	e045      	b.n	800887a <_dtoa_r+0x9ee>
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d0c6      	beq.n	8008780 <_dtoa_r+0x8f4>
 80087f2:	331c      	adds	r3, #28
 80087f4:	e7bd      	b.n	8008772 <_dtoa_r+0x8e6>
 80087f6:	0013      	movs	r3, r2
 80087f8:	e7fb      	b.n	80087f2 <_dtoa_r+0x966>
 80087fa:	9b07      	ldr	r3, [sp, #28]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dc36      	bgt.n	800886e <_dtoa_r+0x9e2>
 8008800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008802:	2b02      	cmp	r3, #2
 8008804:	dd33      	ble.n	800886e <_dtoa_r+0x9e2>
 8008806:	9b07      	ldr	r3, [sp, #28]
 8008808:	930b      	str	r3, [sp, #44]	; 0x2c
 800880a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10c      	bne.n	800882a <_dtoa_r+0x99e>
 8008810:	0031      	movs	r1, r6
 8008812:	2205      	movs	r2, #5
 8008814:	9804      	ldr	r0, [sp, #16]
 8008816:	f000 fab7 	bl	8008d88 <__multadd>
 800881a:	0006      	movs	r6, r0
 800881c:	0001      	movs	r1, r0
 800881e:	9805      	ldr	r0, [sp, #20]
 8008820:	f000 fcd0 	bl	80091c4 <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	dd00      	ble.n	800882a <_dtoa_r+0x99e>
 8008828:	e59f      	b.n	800836a <_dtoa_r+0x4de>
 800882a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800882c:	43db      	mvns	r3, r3
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	9b06      	ldr	r3, [sp, #24]
 8008832:	9308      	str	r3, [sp, #32]
 8008834:	2500      	movs	r5, #0
 8008836:	0031      	movs	r1, r6
 8008838:	9804      	ldr	r0, [sp, #16]
 800883a:	f000 fa81 	bl	8008d40 <_Bfree>
 800883e:	2f00      	cmp	r7, #0
 8008840:	d100      	bne.n	8008844 <_dtoa_r+0x9b8>
 8008842:	e6a3      	b.n	800858c <_dtoa_r+0x700>
 8008844:	2d00      	cmp	r5, #0
 8008846:	d005      	beq.n	8008854 <_dtoa_r+0x9c8>
 8008848:	42bd      	cmp	r5, r7
 800884a:	d003      	beq.n	8008854 <_dtoa_r+0x9c8>
 800884c:	0029      	movs	r1, r5
 800884e:	9804      	ldr	r0, [sp, #16]
 8008850:	f000 fa76 	bl	8008d40 <_Bfree>
 8008854:	0039      	movs	r1, r7
 8008856:	9804      	ldr	r0, [sp, #16]
 8008858:	f000 fa72 	bl	8008d40 <_Bfree>
 800885c:	e696      	b.n	800858c <_dtoa_r+0x700>
 800885e:	2600      	movs	r6, #0
 8008860:	0037      	movs	r7, r6
 8008862:	e7e2      	b.n	800882a <_dtoa_r+0x99e>
 8008864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008866:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	0037      	movs	r7, r6
 800886c:	e57d      	b.n	800836a <_dtoa_r+0x4de>
 800886e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d100      	bne.n	8008876 <_dtoa_r+0x9ea>
 8008874:	e0c3      	b.n	80089fe <_dtoa_r+0xb72>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	930b      	str	r3, [sp, #44]	; 0x2c
 800887a:	2c00      	cmp	r4, #0
 800887c:	dd05      	ble.n	800888a <_dtoa_r+0x9fe>
 800887e:	0039      	movs	r1, r7
 8008880:	0022      	movs	r2, r4
 8008882:	9804      	ldr	r0, [sp, #16]
 8008884:	f000 fc30 	bl	80090e8 <__lshift>
 8008888:	0007      	movs	r7, r0
 800888a:	0038      	movs	r0, r7
 800888c:	2d00      	cmp	r5, #0
 800888e:	d024      	beq.n	80088da <_dtoa_r+0xa4e>
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	9804      	ldr	r0, [sp, #16]
 8008894:	f000 fa10 	bl	8008cb8 <_Balloc>
 8008898:	1e04      	subs	r4, r0, #0
 800889a:	d111      	bne.n	80088c0 <_dtoa_r+0xa34>
 800889c:	0022      	movs	r2, r4
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <_dtoa_r+0xa28>)
 80088a0:	4805      	ldr	r0, [pc, #20]	; (80088b8 <_dtoa_r+0xa2c>)
 80088a2:	4906      	ldr	r1, [pc, #24]	; (80088bc <_dtoa_r+0xa30>)
 80088a4:	f7ff fb07 	bl	8007eb6 <_dtoa_r+0x2a>
 80088a8:	40240000 	.word	0x40240000
 80088ac:	00000433 	.word	0x00000433
 80088b0:	7ff00000 	.word	0x7ff00000
 80088b4:	0800a19f 	.word	0x0800a19f
 80088b8:	0800a147 	.word	0x0800a147
 80088bc:	000002ef 	.word	0x000002ef
 80088c0:	0039      	movs	r1, r7
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	310c      	adds	r1, #12
 80088c6:	3202      	adds	r2, #2
 80088c8:	0092      	lsls	r2, r2, #2
 80088ca:	300c      	adds	r0, #12
 80088cc:	f000 ffca 	bl	8009864 <memcpy>
 80088d0:	2201      	movs	r2, #1
 80088d2:	0021      	movs	r1, r4
 80088d4:	9804      	ldr	r0, [sp, #16]
 80088d6:	f000 fc07 	bl	80090e8 <__lshift>
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	189b      	adds	r3, r3, r2
 80088e4:	2201      	movs	r2, #1
 80088e6:	003d      	movs	r5, r7
 80088e8:	0007      	movs	r7, r0
 80088ea:	930e      	str	r3, [sp, #56]	; 0x38
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	4013      	ands	r3, r2
 80088f0:	930d      	str	r3, [sp, #52]	; 0x34
 80088f2:	0031      	movs	r1, r6
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	f7ff fa39 	bl	8007d6c <quorem>
 80088fa:	0029      	movs	r1, r5
 80088fc:	0004      	movs	r4, r0
 80088fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8008900:	9805      	ldr	r0, [sp, #20]
 8008902:	f000 fc5f 	bl	80091c4 <__mcmp>
 8008906:	003a      	movs	r2, r7
 8008908:	900c      	str	r0, [sp, #48]	; 0x30
 800890a:	0031      	movs	r1, r6
 800890c:	9804      	ldr	r0, [sp, #16]
 800890e:	f000 fc75 	bl	80091fc <__mdiff>
 8008912:	2201      	movs	r2, #1
 8008914:	68c3      	ldr	r3, [r0, #12]
 8008916:	3430      	adds	r4, #48	; 0x30
 8008918:	9008      	str	r0, [sp, #32]
 800891a:	920a      	str	r2, [sp, #40]	; 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	d104      	bne.n	800892a <_dtoa_r+0xa9e>
 8008920:	0001      	movs	r1, r0
 8008922:	9805      	ldr	r0, [sp, #20]
 8008924:	f000 fc4e 	bl	80091c4 <__mcmp>
 8008928:	900a      	str	r0, [sp, #40]	; 0x28
 800892a:	9908      	ldr	r1, [sp, #32]
 800892c:	9804      	ldr	r0, [sp, #16]
 800892e:	f000 fa07 	bl	8008d40 <_Bfree>
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008936:	3301      	adds	r3, #1
 8008938:	9308      	str	r3, [sp, #32]
 800893a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893c:	4313      	orrs	r3, r2
 800893e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008940:	4313      	orrs	r3, r2
 8008942:	d109      	bne.n	8008958 <_dtoa_r+0xacc>
 8008944:	2c39      	cmp	r4, #57	; 0x39
 8008946:	d022      	beq.n	800898e <_dtoa_r+0xb02>
 8008948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd01      	ble.n	8008952 <_dtoa_r+0xac6>
 800894e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008950:	3431      	adds	r4, #49	; 0x31
 8008952:	9b07      	ldr	r3, [sp, #28]
 8008954:	701c      	strb	r4, [r3, #0]
 8008956:	e76e      	b.n	8008836 <_dtoa_r+0x9aa>
 8008958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800895a:	2b00      	cmp	r3, #0
 800895c:	db04      	blt.n	8008968 <_dtoa_r+0xadc>
 800895e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008960:	4313      	orrs	r3, r2
 8008962:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008964:	4313      	orrs	r3, r2
 8008966:	d11e      	bne.n	80089a6 <_dtoa_r+0xb1a>
 8008968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	ddf1      	ble.n	8008952 <_dtoa_r+0xac6>
 800896e:	9905      	ldr	r1, [sp, #20]
 8008970:	2201      	movs	r2, #1
 8008972:	9804      	ldr	r0, [sp, #16]
 8008974:	f000 fbb8 	bl	80090e8 <__lshift>
 8008978:	0031      	movs	r1, r6
 800897a:	9005      	str	r0, [sp, #20]
 800897c:	f000 fc22 	bl	80091c4 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dc02      	bgt.n	800898a <_dtoa_r+0xafe>
 8008984:	d1e5      	bne.n	8008952 <_dtoa_r+0xac6>
 8008986:	07e3      	lsls	r3, r4, #31
 8008988:	d5e3      	bpl.n	8008952 <_dtoa_r+0xac6>
 800898a:	2c39      	cmp	r4, #57	; 0x39
 800898c:	d1df      	bne.n	800894e <_dtoa_r+0xac2>
 800898e:	2339      	movs	r3, #57	; 0x39
 8008990:	9a07      	ldr	r2, [sp, #28]
 8008992:	7013      	strb	r3, [r2, #0]
 8008994:	9b08      	ldr	r3, [sp, #32]
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	3b01      	subs	r3, #1
 800899a:	781a      	ldrb	r2, [r3, #0]
 800899c:	2a39      	cmp	r2, #57	; 0x39
 800899e:	d063      	beq.n	8008a68 <_dtoa_r+0xbdc>
 80089a0:	3201      	adds	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e747      	b.n	8008836 <_dtoa_r+0x9aa>
 80089a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dd03      	ble.n	80089b4 <_dtoa_r+0xb28>
 80089ac:	2c39      	cmp	r4, #57	; 0x39
 80089ae:	d0ee      	beq.n	800898e <_dtoa_r+0xb02>
 80089b0:	3401      	adds	r4, #1
 80089b2:	e7ce      	b.n	8008952 <_dtoa_r+0xac6>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	701c      	strb	r4, [r3, #0]
 80089ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089bc:	4293      	cmp	r3, r2
 80089be:	d03e      	beq.n	8008a3e <_dtoa_r+0xbb2>
 80089c0:	2300      	movs	r3, #0
 80089c2:	220a      	movs	r2, #10
 80089c4:	9905      	ldr	r1, [sp, #20]
 80089c6:	9804      	ldr	r0, [sp, #16]
 80089c8:	f000 f9de 	bl	8008d88 <__multadd>
 80089cc:	2300      	movs	r3, #0
 80089ce:	9005      	str	r0, [sp, #20]
 80089d0:	220a      	movs	r2, #10
 80089d2:	0029      	movs	r1, r5
 80089d4:	9804      	ldr	r0, [sp, #16]
 80089d6:	42bd      	cmp	r5, r7
 80089d8:	d106      	bne.n	80089e8 <_dtoa_r+0xb5c>
 80089da:	f000 f9d5 	bl	8008d88 <__multadd>
 80089de:	0005      	movs	r5, r0
 80089e0:	0007      	movs	r7, r0
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	e784      	b.n	80088f2 <_dtoa_r+0xa66>
 80089e8:	f000 f9ce 	bl	8008d88 <__multadd>
 80089ec:	0039      	movs	r1, r7
 80089ee:	0005      	movs	r5, r0
 80089f0:	2300      	movs	r3, #0
 80089f2:	220a      	movs	r2, #10
 80089f4:	9804      	ldr	r0, [sp, #16]
 80089f6:	f000 f9c7 	bl	8008d88 <__multadd>
 80089fa:	0007      	movs	r7, r0
 80089fc:	e7f1      	b.n	80089e2 <_dtoa_r+0xb56>
 80089fe:	9b07      	ldr	r3, [sp, #28]
 8008a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a02:	2500      	movs	r5, #0
 8008a04:	0031      	movs	r1, r6
 8008a06:	9805      	ldr	r0, [sp, #20]
 8008a08:	f7ff f9b0 	bl	8007d6c <quorem>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	3030      	adds	r0, #48	; 0x30
 8008a10:	5558      	strb	r0, [r3, r5]
 8008a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a14:	3501      	adds	r5, #1
 8008a16:	0004      	movs	r4, r0
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dd07      	ble.n	8008a2c <_dtoa_r+0xba0>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	220a      	movs	r2, #10
 8008a20:	9905      	ldr	r1, [sp, #20]
 8008a22:	9804      	ldr	r0, [sp, #16]
 8008a24:	f000 f9b0 	bl	8008d88 <__multadd>
 8008a28:	9005      	str	r0, [sp, #20]
 8008a2a:	e7eb      	b.n	8008a04 <_dtoa_r+0xb78>
 8008a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a2e:	2301      	movs	r3, #1
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	dd00      	ble.n	8008a36 <_dtoa_r+0xbaa>
 8008a34:	0013      	movs	r3, r2
 8008a36:	2500      	movs	r5, #0
 8008a38:	9a06      	ldr	r2, [sp, #24]
 8008a3a:	18d3      	adds	r3, r2, r3
 8008a3c:	9308      	str	r3, [sp, #32]
 8008a3e:	9905      	ldr	r1, [sp, #20]
 8008a40:	2201      	movs	r2, #1
 8008a42:	9804      	ldr	r0, [sp, #16]
 8008a44:	f000 fb50 	bl	80090e8 <__lshift>
 8008a48:	0031      	movs	r1, r6
 8008a4a:	9005      	str	r0, [sp, #20]
 8008a4c:	f000 fbba 	bl	80091c4 <__mcmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	dc9f      	bgt.n	8008994 <_dtoa_r+0xb08>
 8008a54:	d101      	bne.n	8008a5a <_dtoa_r+0xbce>
 8008a56:	07e4      	lsls	r4, r4, #31
 8008a58:	d49c      	bmi.n	8008994 <_dtoa_r+0xb08>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	9308      	str	r3, [sp, #32]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	2a30      	cmp	r2, #48	; 0x30
 8008a64:	d0fa      	beq.n	8008a5c <_dtoa_r+0xbd0>
 8008a66:	e6e6      	b.n	8008836 <_dtoa_r+0x9aa>
 8008a68:	9a06      	ldr	r2, [sp, #24]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d193      	bne.n	8008996 <_dtoa_r+0xb0a>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	2331      	movs	r3, #49	; 0x31
 8008a76:	7013      	strb	r3, [r2, #0]
 8008a78:	e6dd      	b.n	8008836 <_dtoa_r+0x9aa>
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <_dtoa_r+0xc14>)
 8008a7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a7e:	9306      	str	r3, [sp, #24]
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <_dtoa_r+0xc18>)
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	d001      	beq.n	8008a8a <_dtoa_r+0xbfe>
 8008a86:	f7ff fa49 	bl	8007f1c <_dtoa_r+0x90>
 8008a8a:	f7ff fa49 	bl	8007f20 <_dtoa_r+0x94>
 8008a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dcb6      	bgt.n	8008a02 <_dtoa_r+0xb76>
 8008a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dd00      	ble.n	8008a9c <_dtoa_r+0xc10>
 8008a9a:	e6b6      	b.n	800880a <_dtoa_r+0x97e>
 8008a9c:	e7b1      	b.n	8008a02 <_dtoa_r+0xb76>
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	0800a123 	.word	0x0800a123
 8008aa4:	0800a12b 	.word	0x0800a12b

08008aa8 <_free_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	0005      	movs	r5, r0
 8008aac:	2900      	cmp	r1, #0
 8008aae:	d010      	beq.n	8008ad2 <_free_r+0x2a>
 8008ab0:	1f0c      	subs	r4, r1, #4
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da00      	bge.n	8008aba <_free_r+0x12>
 8008ab8:	18e4      	adds	r4, r4, r3
 8008aba:	0028      	movs	r0, r5
 8008abc:	f000 f8ec 	bl	8008c98 <__malloc_lock>
 8008ac0:	4a1d      	ldr	r2, [pc, #116]	; (8008b38 <_free_r+0x90>)
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <_free_r+0x2c>
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6014      	str	r4, [r2, #0]
 8008acc:	0028      	movs	r0, r5
 8008ace:	f000 f8eb 	bl	8008ca8 <__malloc_unlock>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d908      	bls.n	8008aea <_free_r+0x42>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	1821      	adds	r1, r4, r0
 8008adc:	428b      	cmp	r3, r1
 8008ade:	d1f3      	bne.n	8008ac8 <_free_r+0x20>
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	1809      	adds	r1, r1, r0
 8008ae6:	6021      	str	r1, [r4, #0]
 8008ae8:	e7ee      	b.n	8008ac8 <_free_r+0x20>
 8008aea:	001a      	movs	r2, r3
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <_free_r+0x4e>
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	d9f9      	bls.n	8008aea <_free_r+0x42>
 8008af6:	6811      	ldr	r1, [r2, #0]
 8008af8:	1850      	adds	r0, r2, r1
 8008afa:	42a0      	cmp	r0, r4
 8008afc:	d10b      	bne.n	8008b16 <_free_r+0x6e>
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	1809      	adds	r1, r1, r0
 8008b02:	1850      	adds	r0, r2, r1
 8008b04:	6011      	str	r1, [r2, #0]
 8008b06:	4283      	cmp	r3, r0
 8008b08:	d1e0      	bne.n	8008acc <_free_r+0x24>
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	1841      	adds	r1, r0, r1
 8008b10:	6011      	str	r1, [r2, #0]
 8008b12:	6053      	str	r3, [r2, #4]
 8008b14:	e7da      	b.n	8008acc <_free_r+0x24>
 8008b16:	42a0      	cmp	r0, r4
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x78>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	e7d5      	b.n	8008acc <_free_r+0x24>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	1821      	adds	r1, r4, r0
 8008b24:	428b      	cmp	r3, r1
 8008b26:	d103      	bne.n	8008b30 <_free_r+0x88>
 8008b28:	6819      	ldr	r1, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	1809      	adds	r1, r1, r0
 8008b2e:	6021      	str	r1, [r4, #0]
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	6054      	str	r4, [r2, #4]
 8008b34:	e7ca      	b.n	8008acc <_free_r+0x24>
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	20000510 	.word	0x20000510

08008b3c <malloc>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <malloc+0x10>)
 8008b40:	0001      	movs	r1, r0
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	f000 f826 	bl	8008b94 <_malloc_r>
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	46c0      	nop			; (mov r8, r8)
 8008b4c:	20000068 	.word	0x20000068

08008b50 <sbrk_aligned>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4e0f      	ldr	r6, [pc, #60]	; (8008b90 <sbrk_aligned+0x40>)
 8008b54:	000d      	movs	r5, r1
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	0004      	movs	r4, r0
 8008b5a:	2900      	cmp	r1, #0
 8008b5c:	d102      	bne.n	8008b64 <sbrk_aligned+0x14>
 8008b5e:	f000 fe6f 	bl	8009840 <_sbrk_r>
 8008b62:	6030      	str	r0, [r6, #0]
 8008b64:	0029      	movs	r1, r5
 8008b66:	0020      	movs	r0, r4
 8008b68:	f000 fe6a 	bl	8009840 <_sbrk_r>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d00a      	beq.n	8008b86 <sbrk_aligned+0x36>
 8008b70:	2303      	movs	r3, #3
 8008b72:	1cc5      	adds	r5, r0, #3
 8008b74:	439d      	bics	r5, r3
 8008b76:	42a8      	cmp	r0, r5
 8008b78:	d007      	beq.n	8008b8a <sbrk_aligned+0x3a>
 8008b7a:	1a29      	subs	r1, r5, r0
 8008b7c:	0020      	movs	r0, r4
 8008b7e:	f000 fe5f 	bl	8009840 <_sbrk_r>
 8008b82:	3001      	adds	r0, #1
 8008b84:	d101      	bne.n	8008b8a <sbrk_aligned+0x3a>
 8008b86:	2501      	movs	r5, #1
 8008b88:	426d      	negs	r5, r5
 8008b8a:	0028      	movs	r0, r5
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	20000514 	.word	0x20000514

08008b94 <_malloc_r>:
 8008b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b96:	2203      	movs	r2, #3
 8008b98:	1ccb      	adds	r3, r1, #3
 8008b9a:	4393      	bics	r3, r2
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	0006      	movs	r6, r0
 8008ba0:	001f      	movs	r7, r3
 8008ba2:	2b0c      	cmp	r3, #12
 8008ba4:	d238      	bcs.n	8008c18 <_malloc_r+0x84>
 8008ba6:	270c      	movs	r7, #12
 8008ba8:	42b9      	cmp	r1, r7
 8008baa:	d837      	bhi.n	8008c1c <_malloc_r+0x88>
 8008bac:	0030      	movs	r0, r6
 8008bae:	f000 f873 	bl	8008c98 <__malloc_lock>
 8008bb2:	4b38      	ldr	r3, [pc, #224]	; (8008c94 <_malloc_r+0x100>)
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	001c      	movs	r4, r3
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	d133      	bne.n	8008c26 <_malloc_r+0x92>
 8008bbe:	0039      	movs	r1, r7
 8008bc0:	0030      	movs	r0, r6
 8008bc2:	f7ff ffc5 	bl	8008b50 <sbrk_aligned>
 8008bc6:	0004      	movs	r4, r0
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d15e      	bne.n	8008c8a <_malloc_r+0xf6>
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	681c      	ldr	r4, [r3, #0]
 8008bd0:	0025      	movs	r5, r4
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	d14e      	bne.n	8008c74 <_malloc_r+0xe0>
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	d051      	beq.n	8008c7e <_malloc_r+0xea>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	0029      	movs	r1, r5
 8008bde:	18e3      	adds	r3, r4, r3
 8008be0:	0030      	movs	r0, r6
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f000 fe2c 	bl	8009840 <_sbrk_r>
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	4283      	cmp	r3, r0
 8008bec:	d147      	bne.n	8008c7e <_malloc_r+0xea>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	0030      	movs	r0, r6
 8008bf2:	1aff      	subs	r7, r7, r3
 8008bf4:	0039      	movs	r1, r7
 8008bf6:	f7ff ffab 	bl	8008b50 <sbrk_aligned>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d03f      	beq.n	8008c7e <_malloc_r+0xea>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	19db      	adds	r3, r3, r7
 8008c02:	6023      	str	r3, [r4, #0]
 8008c04:	9b00      	ldr	r3, [sp, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d040      	beq.n	8008c8e <_malloc_r+0xfa>
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	42a2      	cmp	r2, r4
 8008c10:	d133      	bne.n	8008c7a <_malloc_r+0xe6>
 8008c12:	2200      	movs	r2, #0
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	e014      	b.n	8008c42 <_malloc_r+0xae>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dac5      	bge.n	8008ba8 <_malloc_r+0x14>
 8008c1c:	230c      	movs	r3, #12
 8008c1e:	2500      	movs	r5, #0
 8008c20:	6033      	str	r3, [r6, #0]
 8008c22:	0028      	movs	r0, r5
 8008c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c26:	6821      	ldr	r1, [r4, #0]
 8008c28:	1bc9      	subs	r1, r1, r7
 8008c2a:	d420      	bmi.n	8008c6e <_malloc_r+0xda>
 8008c2c:	290b      	cmp	r1, #11
 8008c2e:	d918      	bls.n	8008c62 <_malloc_r+0xce>
 8008c30:	19e2      	adds	r2, r4, r7
 8008c32:	6027      	str	r7, [r4, #0]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d112      	bne.n	8008c5e <_malloc_r+0xca>
 8008c38:	9b00      	ldr	r3, [sp, #0]
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	6011      	str	r1, [r2, #0]
 8008c40:	6053      	str	r3, [r2, #4]
 8008c42:	0030      	movs	r0, r6
 8008c44:	0025      	movs	r5, r4
 8008c46:	f000 f82f 	bl	8008ca8 <__malloc_unlock>
 8008c4a:	2207      	movs	r2, #7
 8008c4c:	350b      	adds	r5, #11
 8008c4e:	1d23      	adds	r3, r4, #4
 8008c50:	4395      	bics	r5, r2
 8008c52:	1aea      	subs	r2, r5, r3
 8008c54:	429d      	cmp	r5, r3
 8008c56:	d0e4      	beq.n	8008c22 <_malloc_r+0x8e>
 8008c58:	1b5b      	subs	r3, r3, r5
 8008c5a:	50a3      	str	r3, [r4, r2]
 8008c5c:	e7e1      	b.n	8008c22 <_malloc_r+0x8e>
 8008c5e:	605a      	str	r2, [r3, #4]
 8008c60:	e7ec      	b.n	8008c3c <_malloc_r+0xa8>
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d1d5      	bne.n	8008c14 <_malloc_r+0x80>
 8008c68:	9b00      	ldr	r3, [sp, #0]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e7e9      	b.n	8008c42 <_malloc_r+0xae>
 8008c6e:	0023      	movs	r3, r4
 8008c70:	6864      	ldr	r4, [r4, #4]
 8008c72:	e7a2      	b.n	8008bba <_malloc_r+0x26>
 8008c74:	002c      	movs	r4, r5
 8008c76:	686d      	ldr	r5, [r5, #4]
 8008c78:	e7ab      	b.n	8008bd2 <_malloc_r+0x3e>
 8008c7a:	0013      	movs	r3, r2
 8008c7c:	e7c4      	b.n	8008c08 <_malloc_r+0x74>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	0030      	movs	r0, r6
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	f000 f810 	bl	8008ca8 <__malloc_unlock>
 8008c88:	e7cb      	b.n	8008c22 <_malloc_r+0x8e>
 8008c8a:	6027      	str	r7, [r4, #0]
 8008c8c:	e7d9      	b.n	8008c42 <_malloc_r+0xae>
 8008c8e:	605b      	str	r3, [r3, #4]
 8008c90:	deff      	udf	#255	; 0xff
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	20000510 	.word	0x20000510

08008c98 <__malloc_lock>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	4802      	ldr	r0, [pc, #8]	; (8008ca4 <__malloc_lock+0xc>)
 8008c9c:	f7ff f859 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	2000050c 	.word	0x2000050c

08008ca8 <__malloc_unlock>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <__malloc_unlock+0xc>)
 8008cac:	f7ff f852 	bl	8007d54 <__retarget_lock_release_recursive>
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	46c0      	nop			; (mov r8, r8)
 8008cb4:	2000050c 	.word	0x2000050c

08008cb8 <_Balloc>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	69c5      	ldr	r5, [r0, #28]
 8008cbc:	0006      	movs	r6, r0
 8008cbe:	000c      	movs	r4, r1
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	d10e      	bne.n	8008ce2 <_Balloc+0x2a>
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f7ff ff39 	bl	8008b3c <malloc>
 8008cca:	1e02      	subs	r2, r0, #0
 8008ccc:	61f0      	str	r0, [r6, #28]
 8008cce:	d104      	bne.n	8008cda <_Balloc+0x22>
 8008cd0:	216b      	movs	r1, #107	; 0x6b
 8008cd2:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <_Balloc+0x80>)
 8008cd4:	4819      	ldr	r0, [pc, #100]	; (8008d3c <_Balloc+0x84>)
 8008cd6:	f000 fdcf 	bl	8009878 <__assert_func>
 8008cda:	6045      	str	r5, [r0, #4]
 8008cdc:	6085      	str	r5, [r0, #8]
 8008cde:	6005      	str	r5, [r0, #0]
 8008ce0:	60c5      	str	r5, [r0, #12]
 8008ce2:	69f5      	ldr	r5, [r6, #28]
 8008ce4:	68eb      	ldr	r3, [r5, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d013      	beq.n	8008d12 <_Balloc+0x5a>
 8008cea:	69f3      	ldr	r3, [r6, #28]
 8008cec:	00a2      	lsls	r2, r4, #2
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d118      	bne.n	8008d2a <_Balloc+0x72>
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	000d      	movs	r5, r1
 8008cfc:	40a5      	lsls	r5, r4
 8008cfe:	1d6a      	adds	r2, r5, #5
 8008d00:	0030      	movs	r0, r6
 8008d02:	0092      	lsls	r2, r2, #2
 8008d04:	f000 fdd6 	bl	80098b4 <_calloc_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d00c      	beq.n	8008d26 <_Balloc+0x6e>
 8008d0c:	6044      	str	r4, [r0, #4]
 8008d0e:	6085      	str	r5, [r0, #8]
 8008d10:	e00d      	b.n	8008d2e <_Balloc+0x76>
 8008d12:	2221      	movs	r2, #33	; 0x21
 8008d14:	2104      	movs	r1, #4
 8008d16:	0030      	movs	r0, r6
 8008d18:	f000 fdcc 	bl	80098b4 <_calloc_r>
 8008d1c:	69f3      	ldr	r3, [r6, #28]
 8008d1e:	60e8      	str	r0, [r5, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e1      	bne.n	8008cea <_Balloc+0x32>
 8008d26:	2000      	movs	r0, #0
 8008d28:	bd70      	pop	{r4, r5, r6, pc}
 8008d2a:	6802      	ldr	r2, [r0, #0]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6103      	str	r3, [r0, #16]
 8008d32:	60c3      	str	r3, [r0, #12]
 8008d34:	e7f8      	b.n	8008d28 <_Balloc+0x70>
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	0800a130 	.word	0x0800a130
 8008d3c:	0800a1b0 	.word	0x0800a1b0

08008d40 <_Bfree>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	69c6      	ldr	r6, [r0, #28]
 8008d44:	0005      	movs	r5, r0
 8008d46:	000c      	movs	r4, r1
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	d10e      	bne.n	8008d6a <_Bfree+0x2a>
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f7ff fef5 	bl	8008b3c <malloc>
 8008d52:	1e02      	subs	r2, r0, #0
 8008d54:	61e8      	str	r0, [r5, #28]
 8008d56:	d104      	bne.n	8008d62 <_Bfree+0x22>
 8008d58:	218f      	movs	r1, #143	; 0x8f
 8008d5a:	4b09      	ldr	r3, [pc, #36]	; (8008d80 <_Bfree+0x40>)
 8008d5c:	4809      	ldr	r0, [pc, #36]	; (8008d84 <_Bfree+0x44>)
 8008d5e:	f000 fd8b 	bl	8009878 <__assert_func>
 8008d62:	6046      	str	r6, [r0, #4]
 8008d64:	6086      	str	r6, [r0, #8]
 8008d66:	6006      	str	r6, [r0, #0]
 8008d68:	60c6      	str	r6, [r0, #12]
 8008d6a:	2c00      	cmp	r4, #0
 8008d6c:	d007      	beq.n	8008d7e <_Bfree+0x3e>
 8008d6e:	69eb      	ldr	r3, [r5, #28]
 8008d70:	6862      	ldr	r2, [r4, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	0092      	lsls	r2, r2, #2
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	601c      	str	r4, [r3, #0]
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	0800a130 	.word	0x0800a130
 8008d84:	0800a1b0 	.word	0x0800a1b0

08008d88 <__multadd>:
 8008d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d8a:	000e      	movs	r6, r1
 8008d8c:	9001      	str	r0, [sp, #4]
 8008d8e:	000c      	movs	r4, r1
 8008d90:	001d      	movs	r5, r3
 8008d92:	2000      	movs	r0, #0
 8008d94:	690f      	ldr	r7, [r1, #16]
 8008d96:	3614      	adds	r6, #20
 8008d98:	6833      	ldr	r3, [r6, #0]
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	b299      	uxth	r1, r3
 8008d9e:	4351      	muls	r1, r2
 8008da0:	0c1b      	lsrs	r3, r3, #16
 8008da2:	4353      	muls	r3, r2
 8008da4:	1949      	adds	r1, r1, r5
 8008da6:	0c0d      	lsrs	r5, r1, #16
 8008da8:	195b      	adds	r3, r3, r5
 8008daa:	0c1d      	lsrs	r5, r3, #16
 8008dac:	b289      	uxth	r1, r1
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	185b      	adds	r3, r3, r1
 8008db2:	c608      	stmia	r6!, {r3}
 8008db4:	4287      	cmp	r7, r0
 8008db6:	dcef      	bgt.n	8008d98 <__multadd+0x10>
 8008db8:	2d00      	cmp	r5, #0
 8008dba:	d022      	beq.n	8008e02 <__multadd+0x7a>
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	42bb      	cmp	r3, r7
 8008dc0:	dc19      	bgt.n	8008df6 <__multadd+0x6e>
 8008dc2:	6861      	ldr	r1, [r4, #4]
 8008dc4:	9801      	ldr	r0, [sp, #4]
 8008dc6:	3101      	adds	r1, #1
 8008dc8:	f7ff ff76 	bl	8008cb8 <_Balloc>
 8008dcc:	1e06      	subs	r6, r0, #0
 8008dce:	d105      	bne.n	8008ddc <__multadd+0x54>
 8008dd0:	0032      	movs	r2, r6
 8008dd2:	21ba      	movs	r1, #186	; 0xba
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <__multadd+0x80>)
 8008dd6:	480d      	ldr	r0, [pc, #52]	; (8008e0c <__multadd+0x84>)
 8008dd8:	f000 fd4e 	bl	8009878 <__assert_func>
 8008ddc:	0021      	movs	r1, r4
 8008dde:	6922      	ldr	r2, [r4, #16]
 8008de0:	310c      	adds	r1, #12
 8008de2:	3202      	adds	r2, #2
 8008de4:	0092      	lsls	r2, r2, #2
 8008de6:	300c      	adds	r0, #12
 8008de8:	f000 fd3c 	bl	8009864 <memcpy>
 8008dec:	0021      	movs	r1, r4
 8008dee:	9801      	ldr	r0, [sp, #4]
 8008df0:	f7ff ffa6 	bl	8008d40 <_Bfree>
 8008df4:	0034      	movs	r4, r6
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	18e3      	adds	r3, r4, r3
 8008dfc:	605d      	str	r5, [r3, #4]
 8008dfe:	1c7b      	adds	r3, r7, #1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	0020      	movs	r0, r4
 8008e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	0800a19f 	.word	0x0800a19f
 8008e0c:	0800a1b0 	.word	0x0800a1b0

08008e10 <__hi0bits>:
 8008e10:	0003      	movs	r3, r0
 8008e12:	0c02      	lsrs	r2, r0, #16
 8008e14:	2000      	movs	r0, #0
 8008e16:	4282      	cmp	r2, r0
 8008e18:	d101      	bne.n	8008e1e <__hi0bits+0xe>
 8008e1a:	041b      	lsls	r3, r3, #16
 8008e1c:	3010      	adds	r0, #16
 8008e1e:	0e1a      	lsrs	r2, r3, #24
 8008e20:	d101      	bne.n	8008e26 <__hi0bits+0x16>
 8008e22:	3008      	adds	r0, #8
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	0f1a      	lsrs	r2, r3, #28
 8008e28:	d101      	bne.n	8008e2e <__hi0bits+0x1e>
 8008e2a:	3004      	adds	r0, #4
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	0f9a      	lsrs	r2, r3, #30
 8008e30:	d101      	bne.n	8008e36 <__hi0bits+0x26>
 8008e32:	3002      	adds	r0, #2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db03      	blt.n	8008e42 <__hi0bits+0x32>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	d400      	bmi.n	8008e42 <__hi0bits+0x32>
 8008e40:	2020      	movs	r0, #32
 8008e42:	4770      	bx	lr

08008e44 <__lo0bits>:
 8008e44:	6803      	ldr	r3, [r0, #0]
 8008e46:	0001      	movs	r1, r0
 8008e48:	2207      	movs	r2, #7
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	4010      	ands	r0, r2
 8008e4e:	4213      	tst	r3, r2
 8008e50:	d00d      	beq.n	8008e6e <__lo0bits+0x2a>
 8008e52:	3a06      	subs	r2, #6
 8008e54:	2000      	movs	r0, #0
 8008e56:	4213      	tst	r3, r2
 8008e58:	d105      	bne.n	8008e66 <__lo0bits+0x22>
 8008e5a:	3002      	adds	r0, #2
 8008e5c:	4203      	tst	r3, r0
 8008e5e:	d003      	beq.n	8008e68 <__lo0bits+0x24>
 8008e60:	40d3      	lsrs	r3, r2
 8008e62:	0010      	movs	r0, r2
 8008e64:	600b      	str	r3, [r1, #0]
 8008e66:	4770      	bx	lr
 8008e68:	089b      	lsrs	r3, r3, #2
 8008e6a:	600b      	str	r3, [r1, #0]
 8008e6c:	e7fb      	b.n	8008e66 <__lo0bits+0x22>
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d101      	bne.n	8008e78 <__lo0bits+0x34>
 8008e74:	2010      	movs	r0, #16
 8008e76:	0c1b      	lsrs	r3, r3, #16
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	d101      	bne.n	8008e82 <__lo0bits+0x3e>
 8008e7e:	3008      	adds	r0, #8
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	071a      	lsls	r2, r3, #28
 8008e84:	d101      	bne.n	8008e8a <__lo0bits+0x46>
 8008e86:	3004      	adds	r0, #4
 8008e88:	091b      	lsrs	r3, r3, #4
 8008e8a:	079a      	lsls	r2, r3, #30
 8008e8c:	d101      	bne.n	8008e92 <__lo0bits+0x4e>
 8008e8e:	3002      	adds	r0, #2
 8008e90:	089b      	lsrs	r3, r3, #2
 8008e92:	07da      	lsls	r2, r3, #31
 8008e94:	d4e9      	bmi.n	8008e6a <__lo0bits+0x26>
 8008e96:	3001      	adds	r0, #1
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	d1e6      	bne.n	8008e6a <__lo0bits+0x26>
 8008e9c:	2020      	movs	r0, #32
 8008e9e:	e7e2      	b.n	8008e66 <__lo0bits+0x22>

08008ea0 <__i2b>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	000c      	movs	r4, r1
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	f7ff ff07 	bl	8008cb8 <_Balloc>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d107      	bne.n	8008ebe <__i2b+0x1e>
 8008eae:	2146      	movs	r1, #70	; 0x46
 8008eb0:	4c05      	ldr	r4, [pc, #20]	; (8008ec8 <__i2b+0x28>)
 8008eb2:	0002      	movs	r2, r0
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <__i2b+0x2c>)
 8008eb6:	0020      	movs	r0, r4
 8008eb8:	31ff      	adds	r1, #255	; 0xff
 8008eba:	f000 fcdd 	bl	8009878 <__assert_func>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	6144      	str	r4, [r0, #20]
 8008ec2:	6103      	str	r3, [r0, #16]
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	0800a1b0 	.word	0x0800a1b0
 8008ecc:	0800a19f 	.word	0x0800a19f

08008ed0 <__multiply>:
 8008ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed2:	0015      	movs	r5, r2
 8008ed4:	690a      	ldr	r2, [r1, #16]
 8008ed6:	692b      	ldr	r3, [r5, #16]
 8008ed8:	000c      	movs	r4, r1
 8008eda:	b08b      	sub	sp, #44	; 0x2c
 8008edc:	429a      	cmp	r2, r3
 8008ede:	da01      	bge.n	8008ee4 <__multiply+0x14>
 8008ee0:	002c      	movs	r4, r5
 8008ee2:	000d      	movs	r5, r1
 8008ee4:	6927      	ldr	r7, [r4, #16]
 8008ee6:	692e      	ldr	r6, [r5, #16]
 8008ee8:	6861      	ldr	r1, [r4, #4]
 8008eea:	19bb      	adds	r3, r7, r6
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	19ba      	adds	r2, r7, r6
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	da00      	bge.n	8008ef8 <__multiply+0x28>
 8008ef6:	3101      	adds	r1, #1
 8008ef8:	f7ff fede 	bl	8008cb8 <_Balloc>
 8008efc:	9002      	str	r0, [sp, #8]
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d106      	bne.n	8008f10 <__multiply+0x40>
 8008f02:	21b1      	movs	r1, #177	; 0xb1
 8008f04:	4b48      	ldr	r3, [pc, #288]	; (8009028 <__multiply+0x158>)
 8008f06:	4849      	ldr	r0, [pc, #292]	; (800902c <__multiply+0x15c>)
 8008f08:	9a02      	ldr	r2, [sp, #8]
 8008f0a:	0049      	lsls	r1, r1, #1
 8008f0c:	f000 fcb4 	bl	8009878 <__assert_func>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	3314      	adds	r3, #20
 8008f16:	469c      	mov	ip, r3
 8008f18:	19bb      	adds	r3, r7, r6
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4463      	add	r3, ip
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	4663      	mov	r3, ip
 8008f22:	9904      	ldr	r1, [sp, #16]
 8008f24:	428b      	cmp	r3, r1
 8008f26:	d32a      	bcc.n	8008f7e <__multiply+0xae>
 8008f28:	0023      	movs	r3, r4
 8008f2a:	00bf      	lsls	r7, r7, #2
 8008f2c:	3314      	adds	r3, #20
 8008f2e:	3514      	adds	r5, #20
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	00b6      	lsls	r6, r6, #2
 8008f34:	19db      	adds	r3, r3, r7
 8008f36:	9305      	str	r3, [sp, #20]
 8008f38:	19ab      	adds	r3, r5, r6
 8008f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	9306      	str	r3, [sp, #24]
 8008f40:	0023      	movs	r3, r4
 8008f42:	9a05      	ldr	r2, [sp, #20]
 8008f44:	3315      	adds	r3, #21
 8008f46:	9501      	str	r5, [sp, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d305      	bcc.n	8008f58 <__multiply+0x88>
 8008f4c:	1b13      	subs	r3, r2, r4
 8008f4e:	3b15      	subs	r3, #21
 8008f50:	089b      	lsrs	r3, r3, #2
 8008f52:	3301      	adds	r3, #1
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	9306      	str	r3, [sp, #24]
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d310      	bcc.n	8008f82 <__multiply+0xb2>
 8008f60:	9b03      	ldr	r3, [sp, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dd05      	ble.n	8008f72 <__multiply+0xa2>
 8008f66:	9b04      	ldr	r3, [sp, #16]
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d056      	beq.n	8009020 <__multiply+0x150>
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	9a03      	ldr	r2, [sp, #12]
 8008f76:	0018      	movs	r0, r3
 8008f78:	611a      	str	r2, [r3, #16]
 8008f7a:	b00b      	add	sp, #44	; 0x2c
 8008f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f7e:	c304      	stmia	r3!, {r2}
 8008f80:	e7cf      	b.n	8008f22 <__multiply+0x52>
 8008f82:	9b01      	ldr	r3, [sp, #4]
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	b280      	uxth	r0, r0
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d01e      	beq.n	8008fca <__multiply+0xfa>
 8008f8c:	4667      	mov	r7, ip
 8008f8e:	2500      	movs	r5, #0
 8008f90:	9e08      	ldr	r6, [sp, #32]
 8008f92:	ce02      	ldmia	r6!, {r1}
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	b28b      	uxth	r3, r1
 8008f9a:	4343      	muls	r3, r0
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	466b      	mov	r3, sp
 8008fa0:	8b9b      	ldrh	r3, [r3, #28]
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	195b      	adds	r3, r3, r5
 8008fa6:	0c0d      	lsrs	r5, r1, #16
 8008fa8:	4345      	muls	r5, r0
 8008faa:	9a07      	ldr	r2, [sp, #28]
 8008fac:	0c11      	lsrs	r1, r2, #16
 8008fae:	1869      	adds	r1, r5, r1
 8008fb0:	0c1a      	lsrs	r2, r3, #16
 8008fb2:	188a      	adds	r2, r1, r2
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	0c15      	lsrs	r5, r2, #16
 8008fb8:	0412      	lsls	r2, r2, #16
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	9b05      	ldr	r3, [sp, #20]
 8008fbe:	c704      	stmia	r7!, {r2}
 8008fc0:	42b3      	cmp	r3, r6
 8008fc2:	d8e6      	bhi.n	8008f92 <__multiply+0xc2>
 8008fc4:	4663      	mov	r3, ip
 8008fc6:	9a06      	ldr	r2, [sp, #24]
 8008fc8:	509d      	str	r5, [r3, r2]
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	0c00      	lsrs	r0, r0, #16
 8008fd0:	d020      	beq.n	8009014 <__multiply+0x144>
 8008fd2:	4663      	mov	r3, ip
 8008fd4:	0025      	movs	r5, r4
 8008fd6:	4661      	mov	r1, ip
 8008fd8:	2700      	movs	r7, #0
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3514      	adds	r5, #20
 8008fde:	682a      	ldr	r2, [r5, #0]
 8008fe0:	680e      	ldr	r6, [r1, #0]
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	4342      	muls	r2, r0
 8008fe6:	0c36      	lsrs	r6, r6, #16
 8008fe8:	1992      	adds	r2, r2, r6
 8008fea:	19d2      	adds	r2, r2, r7
 8008fec:	0416      	lsls	r6, r2, #16
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	431e      	orrs	r6, r3
 8008ff2:	600e      	str	r6, [r1, #0]
 8008ff4:	cd40      	ldmia	r5!, {r6}
 8008ff6:	684b      	ldr	r3, [r1, #4]
 8008ff8:	0c36      	lsrs	r6, r6, #16
 8008ffa:	4346      	muls	r6, r0
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	0c12      	lsrs	r2, r2, #16
 8009000:	18f3      	adds	r3, r6, r3
 8009002:	189b      	adds	r3, r3, r2
 8009004:	9a05      	ldr	r2, [sp, #20]
 8009006:	0c1f      	lsrs	r7, r3, #16
 8009008:	3104      	adds	r1, #4
 800900a:	42aa      	cmp	r2, r5
 800900c:	d8e7      	bhi.n	8008fde <__multiply+0x10e>
 800900e:	4662      	mov	r2, ip
 8009010:	9906      	ldr	r1, [sp, #24]
 8009012:	5053      	str	r3, [r2, r1]
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	3304      	adds	r3, #4
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	2304      	movs	r3, #4
 800901c:	449c      	add	ip, r3
 800901e:	e79b      	b.n	8008f58 <__multiply+0x88>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	3b01      	subs	r3, #1
 8009024:	9303      	str	r3, [sp, #12]
 8009026:	e79b      	b.n	8008f60 <__multiply+0x90>
 8009028:	0800a19f 	.word	0x0800a19f
 800902c:	0800a1b0 	.word	0x0800a1b0

08009030 <__pow5mult>:
 8009030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009032:	2303      	movs	r3, #3
 8009034:	0015      	movs	r5, r2
 8009036:	0007      	movs	r7, r0
 8009038:	000e      	movs	r6, r1
 800903a:	401a      	ands	r2, r3
 800903c:	421d      	tst	r5, r3
 800903e:	d008      	beq.n	8009052 <__pow5mult+0x22>
 8009040:	4925      	ldr	r1, [pc, #148]	; (80090d8 <__pow5mult+0xa8>)
 8009042:	3a01      	subs	r2, #1
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	5852      	ldr	r2, [r2, r1]
 8009048:	2300      	movs	r3, #0
 800904a:	0031      	movs	r1, r6
 800904c:	f7ff fe9c 	bl	8008d88 <__multadd>
 8009050:	0006      	movs	r6, r0
 8009052:	10ad      	asrs	r5, r5, #2
 8009054:	d03d      	beq.n	80090d2 <__pow5mult+0xa2>
 8009056:	69fc      	ldr	r4, [r7, #28]
 8009058:	2c00      	cmp	r4, #0
 800905a:	d10f      	bne.n	800907c <__pow5mult+0x4c>
 800905c:	2010      	movs	r0, #16
 800905e:	f7ff fd6d 	bl	8008b3c <malloc>
 8009062:	1e02      	subs	r2, r0, #0
 8009064:	61f8      	str	r0, [r7, #28]
 8009066:	d105      	bne.n	8009074 <__pow5mult+0x44>
 8009068:	21b4      	movs	r1, #180	; 0xb4
 800906a:	4b1c      	ldr	r3, [pc, #112]	; (80090dc <__pow5mult+0xac>)
 800906c:	481c      	ldr	r0, [pc, #112]	; (80090e0 <__pow5mult+0xb0>)
 800906e:	31ff      	adds	r1, #255	; 0xff
 8009070:	f000 fc02 	bl	8009878 <__assert_func>
 8009074:	6044      	str	r4, [r0, #4]
 8009076:	6084      	str	r4, [r0, #8]
 8009078:	6004      	str	r4, [r0, #0]
 800907a:	60c4      	str	r4, [r0, #12]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	689c      	ldr	r4, [r3, #8]
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	2c00      	cmp	r4, #0
 8009084:	d108      	bne.n	8009098 <__pow5mult+0x68>
 8009086:	0038      	movs	r0, r7
 8009088:	4916      	ldr	r1, [pc, #88]	; (80090e4 <__pow5mult+0xb4>)
 800908a:	f7ff ff09 	bl	8008ea0 <__i2b>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	0004      	movs	r4, r0
 8009092:	6098      	str	r0, [r3, #8]
 8009094:	2300      	movs	r3, #0
 8009096:	6003      	str	r3, [r0, #0]
 8009098:	2301      	movs	r3, #1
 800909a:	421d      	tst	r5, r3
 800909c:	d00a      	beq.n	80090b4 <__pow5mult+0x84>
 800909e:	0031      	movs	r1, r6
 80090a0:	0022      	movs	r2, r4
 80090a2:	0038      	movs	r0, r7
 80090a4:	f7ff ff14 	bl	8008ed0 <__multiply>
 80090a8:	0031      	movs	r1, r6
 80090aa:	9001      	str	r0, [sp, #4]
 80090ac:	0038      	movs	r0, r7
 80090ae:	f7ff fe47 	bl	8008d40 <_Bfree>
 80090b2:	9e01      	ldr	r6, [sp, #4]
 80090b4:	106d      	asrs	r5, r5, #1
 80090b6:	d00c      	beq.n	80090d2 <__pow5mult+0xa2>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d107      	bne.n	80090ce <__pow5mult+0x9e>
 80090be:	0022      	movs	r2, r4
 80090c0:	0021      	movs	r1, r4
 80090c2:	0038      	movs	r0, r7
 80090c4:	f7ff ff04 	bl	8008ed0 <__multiply>
 80090c8:	2300      	movs	r3, #0
 80090ca:	6020      	str	r0, [r4, #0]
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	0004      	movs	r4, r0
 80090d0:	e7e2      	b.n	8009098 <__pow5mult+0x68>
 80090d2:	0030      	movs	r0, r6
 80090d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	0800a300 	.word	0x0800a300
 80090dc:	0800a130 	.word	0x0800a130
 80090e0:	0800a1b0 	.word	0x0800a1b0
 80090e4:	00000271 	.word	0x00000271

080090e8 <__lshift>:
 80090e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ea:	000c      	movs	r4, r1
 80090ec:	0017      	movs	r7, r2
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	1155      	asrs	r5, r2, #5
 80090f2:	b087      	sub	sp, #28
 80090f4:	18eb      	adds	r3, r5, r3
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	3301      	adds	r3, #1
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	6849      	ldr	r1, [r1, #4]
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	9004      	str	r0, [sp, #16]
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	4293      	cmp	r3, r2
 8009106:	db10      	blt.n	800912a <__lshift+0x42>
 8009108:	9804      	ldr	r0, [sp, #16]
 800910a:	f7ff fdd5 	bl	8008cb8 <_Balloc>
 800910e:	2300      	movs	r3, #0
 8009110:	0002      	movs	r2, r0
 8009112:	0006      	movs	r6, r0
 8009114:	0019      	movs	r1, r3
 8009116:	3214      	adds	r2, #20
 8009118:	4298      	cmp	r0, r3
 800911a:	d10c      	bne.n	8009136 <__lshift+0x4e>
 800911c:	31df      	adds	r1, #223	; 0xdf
 800911e:	0032      	movs	r2, r6
 8009120:	4b26      	ldr	r3, [pc, #152]	; (80091bc <__lshift+0xd4>)
 8009122:	4827      	ldr	r0, [pc, #156]	; (80091c0 <__lshift+0xd8>)
 8009124:	31ff      	adds	r1, #255	; 0xff
 8009126:	f000 fba7 	bl	8009878 <__assert_func>
 800912a:	3101      	adds	r1, #1
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	e7e8      	b.n	8009102 <__lshift+0x1a>
 8009130:	0098      	lsls	r0, r3, #2
 8009132:	5011      	str	r1, [r2, r0]
 8009134:	3301      	adds	r3, #1
 8009136:	42ab      	cmp	r3, r5
 8009138:	dbfa      	blt.n	8009130 <__lshift+0x48>
 800913a:	43eb      	mvns	r3, r5
 800913c:	17db      	asrs	r3, r3, #31
 800913e:	401d      	ands	r5, r3
 8009140:	211f      	movs	r1, #31
 8009142:	0023      	movs	r3, r4
 8009144:	0038      	movs	r0, r7
 8009146:	00ad      	lsls	r5, r5, #2
 8009148:	1955      	adds	r5, r2, r5
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	3314      	adds	r3, #20
 800914e:	0092      	lsls	r2, r2, #2
 8009150:	4008      	ands	r0, r1
 8009152:	4684      	mov	ip, r0
 8009154:	189a      	adds	r2, r3, r2
 8009156:	420f      	tst	r7, r1
 8009158:	d02a      	beq.n	80091b0 <__lshift+0xc8>
 800915a:	3101      	adds	r1, #1
 800915c:	1a09      	subs	r1, r1, r0
 800915e:	9105      	str	r1, [sp, #20]
 8009160:	2100      	movs	r1, #0
 8009162:	9503      	str	r5, [sp, #12]
 8009164:	4667      	mov	r7, ip
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	40b8      	lsls	r0, r7
 800916a:	4308      	orrs	r0, r1
 800916c:	9903      	ldr	r1, [sp, #12]
 800916e:	c101      	stmia	r1!, {r0}
 8009170:	9103      	str	r1, [sp, #12]
 8009172:	9805      	ldr	r0, [sp, #20]
 8009174:	cb02      	ldmia	r3!, {r1}
 8009176:	40c1      	lsrs	r1, r0
 8009178:	429a      	cmp	r2, r3
 800917a:	d8f3      	bhi.n	8009164 <__lshift+0x7c>
 800917c:	0020      	movs	r0, r4
 800917e:	3015      	adds	r0, #21
 8009180:	2304      	movs	r3, #4
 8009182:	4282      	cmp	r2, r0
 8009184:	d304      	bcc.n	8009190 <__lshift+0xa8>
 8009186:	1b13      	subs	r3, r2, r4
 8009188:	3b15      	subs	r3, #21
 800918a:	089b      	lsrs	r3, r3, #2
 800918c:	3301      	adds	r3, #1
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	50e9      	str	r1, [r5, r3]
 8009192:	2900      	cmp	r1, #0
 8009194:	d002      	beq.n	800919c <__lshift+0xb4>
 8009196:	9b02      	ldr	r3, [sp, #8]
 8009198:	3302      	adds	r3, #2
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	9804      	ldr	r0, [sp, #16]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	0021      	movs	r1, r4
 80091a4:	6133      	str	r3, [r6, #16]
 80091a6:	f7ff fdcb 	bl	8008d40 <_Bfree>
 80091aa:	0030      	movs	r0, r6
 80091ac:	b007      	add	sp, #28
 80091ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b0:	cb02      	ldmia	r3!, {r1}
 80091b2:	c502      	stmia	r5!, {r1}
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d8fb      	bhi.n	80091b0 <__lshift+0xc8>
 80091b8:	e7f0      	b.n	800919c <__lshift+0xb4>
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	0800a19f 	.word	0x0800a19f
 80091c0:	0800a1b0 	.word	0x0800a1b0

080091c4 <__mcmp>:
 80091c4:	b530      	push	{r4, r5, lr}
 80091c6:	690b      	ldr	r3, [r1, #16]
 80091c8:	6904      	ldr	r4, [r0, #16]
 80091ca:	0002      	movs	r2, r0
 80091cc:	1ae0      	subs	r0, r4, r3
 80091ce:	429c      	cmp	r4, r3
 80091d0:	d10e      	bne.n	80091f0 <__mcmp+0x2c>
 80091d2:	3214      	adds	r2, #20
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	3114      	adds	r1, #20
 80091d8:	0014      	movs	r4, r2
 80091da:	18c9      	adds	r1, r1, r3
 80091dc:	18d2      	adds	r2, r2, r3
 80091de:	3a04      	subs	r2, #4
 80091e0:	3904      	subs	r1, #4
 80091e2:	6815      	ldr	r5, [r2, #0]
 80091e4:	680b      	ldr	r3, [r1, #0]
 80091e6:	429d      	cmp	r5, r3
 80091e8:	d003      	beq.n	80091f2 <__mcmp+0x2e>
 80091ea:	2001      	movs	r0, #1
 80091ec:	429d      	cmp	r5, r3
 80091ee:	d303      	bcc.n	80091f8 <__mcmp+0x34>
 80091f0:	bd30      	pop	{r4, r5, pc}
 80091f2:	4294      	cmp	r4, r2
 80091f4:	d3f3      	bcc.n	80091de <__mcmp+0x1a>
 80091f6:	e7fb      	b.n	80091f0 <__mcmp+0x2c>
 80091f8:	4240      	negs	r0, r0
 80091fa:	e7f9      	b.n	80091f0 <__mcmp+0x2c>

080091fc <__mdiff>:
 80091fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091fe:	000e      	movs	r6, r1
 8009200:	0007      	movs	r7, r0
 8009202:	0011      	movs	r1, r2
 8009204:	0030      	movs	r0, r6
 8009206:	b087      	sub	sp, #28
 8009208:	0014      	movs	r4, r2
 800920a:	f7ff ffdb 	bl	80091c4 <__mcmp>
 800920e:	1e05      	subs	r5, r0, #0
 8009210:	d110      	bne.n	8009234 <__mdiff+0x38>
 8009212:	0001      	movs	r1, r0
 8009214:	0038      	movs	r0, r7
 8009216:	f7ff fd4f 	bl	8008cb8 <_Balloc>
 800921a:	1e02      	subs	r2, r0, #0
 800921c:	d104      	bne.n	8009228 <__mdiff+0x2c>
 800921e:	4b3f      	ldr	r3, [pc, #252]	; (800931c <__mdiff+0x120>)
 8009220:	483f      	ldr	r0, [pc, #252]	; (8009320 <__mdiff+0x124>)
 8009222:	4940      	ldr	r1, [pc, #256]	; (8009324 <__mdiff+0x128>)
 8009224:	f000 fb28 	bl	8009878 <__assert_func>
 8009228:	2301      	movs	r3, #1
 800922a:	6145      	str	r5, [r0, #20]
 800922c:	6103      	str	r3, [r0, #16]
 800922e:	0010      	movs	r0, r2
 8009230:	b007      	add	sp, #28
 8009232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009234:	2301      	movs	r3, #1
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	2800      	cmp	r0, #0
 800923a:	db04      	blt.n	8009246 <__mdiff+0x4a>
 800923c:	0023      	movs	r3, r4
 800923e:	0034      	movs	r4, r6
 8009240:	001e      	movs	r6, r3
 8009242:	2300      	movs	r3, #0
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	0038      	movs	r0, r7
 8009248:	6861      	ldr	r1, [r4, #4]
 800924a:	f7ff fd35 	bl	8008cb8 <_Balloc>
 800924e:	1e02      	subs	r2, r0, #0
 8009250:	d103      	bne.n	800925a <__mdiff+0x5e>
 8009252:	4b32      	ldr	r3, [pc, #200]	; (800931c <__mdiff+0x120>)
 8009254:	4832      	ldr	r0, [pc, #200]	; (8009320 <__mdiff+0x124>)
 8009256:	4934      	ldr	r1, [pc, #208]	; (8009328 <__mdiff+0x12c>)
 8009258:	e7e4      	b.n	8009224 <__mdiff+0x28>
 800925a:	9b01      	ldr	r3, [sp, #4]
 800925c:	2700      	movs	r7, #0
 800925e:	60c3      	str	r3, [r0, #12]
 8009260:	6920      	ldr	r0, [r4, #16]
 8009262:	3414      	adds	r4, #20
 8009264:	0083      	lsls	r3, r0, #2
 8009266:	18e3      	adds	r3, r4, r3
 8009268:	0021      	movs	r1, r4
 800926a:	9401      	str	r4, [sp, #4]
 800926c:	0034      	movs	r4, r6
 800926e:	9302      	str	r3, [sp, #8]
 8009270:	6933      	ldr	r3, [r6, #16]
 8009272:	3414      	adds	r4, #20
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	18e3      	adds	r3, r4, r3
 8009278:	9303      	str	r3, [sp, #12]
 800927a:	0013      	movs	r3, r2
 800927c:	3314      	adds	r3, #20
 800927e:	469c      	mov	ip, r3
 8009280:	9305      	str	r3, [sp, #20]
 8009282:	9104      	str	r1, [sp, #16]
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	cc02      	ldmia	r4!, {r1}
 8009288:	cb20      	ldmia	r3!, {r5}
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	b2ab      	uxth	r3, r5
 800928e:	19df      	adds	r7, r3, r7
 8009290:	b28b      	uxth	r3, r1
 8009292:	1afb      	subs	r3, r7, r3
 8009294:	0c09      	lsrs	r1, r1, #16
 8009296:	0c2d      	lsrs	r5, r5, #16
 8009298:	1a6d      	subs	r5, r5, r1
 800929a:	1419      	asrs	r1, r3, #16
 800929c:	1869      	adds	r1, r5, r1
 800929e:	b29b      	uxth	r3, r3
 80092a0:	140f      	asrs	r7, r1, #16
 80092a2:	0409      	lsls	r1, r1, #16
 80092a4:	4319      	orrs	r1, r3
 80092a6:	4663      	mov	r3, ip
 80092a8:	c302      	stmia	r3!, {r1}
 80092aa:	469c      	mov	ip, r3
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	d8e8      	bhi.n	8009284 <__mdiff+0x88>
 80092b2:	0031      	movs	r1, r6
 80092b4:	9c03      	ldr	r4, [sp, #12]
 80092b6:	3115      	adds	r1, #21
 80092b8:	2304      	movs	r3, #4
 80092ba:	428c      	cmp	r4, r1
 80092bc:	d304      	bcc.n	80092c8 <__mdiff+0xcc>
 80092be:	1ba3      	subs	r3, r4, r6
 80092c0:	3b15      	subs	r3, #21
 80092c2:	089b      	lsrs	r3, r3, #2
 80092c4:	3301      	adds	r3, #1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	9901      	ldr	r1, [sp, #4]
 80092ca:	18cd      	adds	r5, r1, r3
 80092cc:	9905      	ldr	r1, [sp, #20]
 80092ce:	002e      	movs	r6, r5
 80092d0:	18cb      	adds	r3, r1, r3
 80092d2:	469c      	mov	ip, r3
 80092d4:	9902      	ldr	r1, [sp, #8]
 80092d6:	428e      	cmp	r6, r1
 80092d8:	d310      	bcc.n	80092fc <__mdiff+0x100>
 80092da:	9e02      	ldr	r6, [sp, #8]
 80092dc:	1ee9      	subs	r1, r5, #3
 80092de:	2400      	movs	r4, #0
 80092e0:	428e      	cmp	r6, r1
 80092e2:	d304      	bcc.n	80092ee <__mdiff+0xf2>
 80092e4:	0031      	movs	r1, r6
 80092e6:	3103      	adds	r1, #3
 80092e8:	1b49      	subs	r1, r1, r5
 80092ea:	0889      	lsrs	r1, r1, #2
 80092ec:	008c      	lsls	r4, r1, #2
 80092ee:	191b      	adds	r3, r3, r4
 80092f0:	3b04      	subs	r3, #4
 80092f2:	6819      	ldr	r1, [r3, #0]
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d00f      	beq.n	8009318 <__mdiff+0x11c>
 80092f8:	6110      	str	r0, [r2, #16]
 80092fa:	e798      	b.n	800922e <__mdiff+0x32>
 80092fc:	ce02      	ldmia	r6!, {r1}
 80092fe:	b28c      	uxth	r4, r1
 8009300:	19e4      	adds	r4, r4, r7
 8009302:	0c0f      	lsrs	r7, r1, #16
 8009304:	1421      	asrs	r1, r4, #16
 8009306:	1879      	adds	r1, r7, r1
 8009308:	b2a4      	uxth	r4, r4
 800930a:	140f      	asrs	r7, r1, #16
 800930c:	0409      	lsls	r1, r1, #16
 800930e:	4321      	orrs	r1, r4
 8009310:	4664      	mov	r4, ip
 8009312:	c402      	stmia	r4!, {r1}
 8009314:	46a4      	mov	ip, r4
 8009316:	e7dd      	b.n	80092d4 <__mdiff+0xd8>
 8009318:	3801      	subs	r0, #1
 800931a:	e7e9      	b.n	80092f0 <__mdiff+0xf4>
 800931c:	0800a19f 	.word	0x0800a19f
 8009320:	0800a1b0 	.word	0x0800a1b0
 8009324:	00000237 	.word	0x00000237
 8009328:	00000245 	.word	0x00000245

0800932c <__d2b>:
 800932c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800932e:	2101      	movs	r1, #1
 8009330:	0014      	movs	r4, r2
 8009332:	001d      	movs	r5, r3
 8009334:	9f08      	ldr	r7, [sp, #32]
 8009336:	f7ff fcbf 	bl	8008cb8 <_Balloc>
 800933a:	1e06      	subs	r6, r0, #0
 800933c:	d105      	bne.n	800934a <__d2b+0x1e>
 800933e:	0032      	movs	r2, r6
 8009340:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <__d2b+0xa8>)
 8009342:	4825      	ldr	r0, [pc, #148]	; (80093d8 <__d2b+0xac>)
 8009344:	4925      	ldr	r1, [pc, #148]	; (80093dc <__d2b+0xb0>)
 8009346:	f000 fa97 	bl	8009878 <__assert_func>
 800934a:	032b      	lsls	r3, r5, #12
 800934c:	006d      	lsls	r5, r5, #1
 800934e:	0b1b      	lsrs	r3, r3, #12
 8009350:	0d6d      	lsrs	r5, r5, #21
 8009352:	d125      	bne.n	80093a0 <__d2b+0x74>
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	2c00      	cmp	r4, #0
 8009358:	d028      	beq.n	80093ac <__d2b+0x80>
 800935a:	4668      	mov	r0, sp
 800935c:	9400      	str	r4, [sp, #0]
 800935e:	f7ff fd71 	bl	8008e44 <__lo0bits>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	2800      	cmp	r0, #0
 8009368:	d01e      	beq.n	80093a8 <__d2b+0x7c>
 800936a:	2220      	movs	r2, #32
 800936c:	001c      	movs	r4, r3
 800936e:	1a12      	subs	r2, r2, r0
 8009370:	4094      	lsls	r4, r2
 8009372:	0022      	movs	r2, r4
 8009374:	40c3      	lsrs	r3, r0
 8009376:	430a      	orrs	r2, r1
 8009378:	6172      	str	r2, [r6, #20]
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	9c01      	ldr	r4, [sp, #4]
 800937e:	61b4      	str	r4, [r6, #24]
 8009380:	1e63      	subs	r3, r4, #1
 8009382:	419c      	sbcs	r4, r3
 8009384:	3401      	adds	r4, #1
 8009386:	6134      	str	r4, [r6, #16]
 8009388:	2d00      	cmp	r5, #0
 800938a:	d017      	beq.n	80093bc <__d2b+0x90>
 800938c:	2435      	movs	r4, #53	; 0x35
 800938e:	4b14      	ldr	r3, [pc, #80]	; (80093e0 <__d2b+0xb4>)
 8009390:	18ed      	adds	r5, r5, r3
 8009392:	182d      	adds	r5, r5, r0
 8009394:	603d      	str	r5, [r7, #0]
 8009396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009398:	1a24      	subs	r4, r4, r0
 800939a:	601c      	str	r4, [r3, #0]
 800939c:	0030      	movs	r0, r6
 800939e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	0352      	lsls	r2, r2, #13
 80093a4:	4313      	orrs	r3, r2
 80093a6:	e7d5      	b.n	8009354 <__d2b+0x28>
 80093a8:	6171      	str	r1, [r6, #20]
 80093aa:	e7e7      	b.n	800937c <__d2b+0x50>
 80093ac:	a801      	add	r0, sp, #4
 80093ae:	f7ff fd49 	bl	8008e44 <__lo0bits>
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	2401      	movs	r4, #1
 80093b6:	6173      	str	r3, [r6, #20]
 80093b8:	3020      	adds	r0, #32
 80093ba:	e7e4      	b.n	8009386 <__d2b+0x5a>
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <__d2b+0xb8>)
 80093be:	18c0      	adds	r0, r0, r3
 80093c0:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <__d2b+0xbc>)
 80093c2:	6038      	str	r0, [r7, #0]
 80093c4:	18e3      	adds	r3, r4, r3
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	18f3      	adds	r3, r6, r3
 80093ca:	6958      	ldr	r0, [r3, #20]
 80093cc:	f7ff fd20 	bl	8008e10 <__hi0bits>
 80093d0:	0164      	lsls	r4, r4, #5
 80093d2:	e7e0      	b.n	8009396 <__d2b+0x6a>
 80093d4:	0800a19f 	.word	0x0800a19f
 80093d8:	0800a1b0 	.word	0x0800a1b0
 80093dc:	0000030f 	.word	0x0000030f
 80093e0:	fffffbcd 	.word	0xfffffbcd
 80093e4:	fffffbce 	.word	0xfffffbce
 80093e8:	3fffffff 	.word	0x3fffffff

080093ec <__ssputs_r>:
 80093ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ee:	b085      	sub	sp, #20
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	9203      	str	r2, [sp, #12]
 80093f4:	688e      	ldr	r6, [r1, #8]
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	0007      	movs	r7, r0
 80093fa:	000c      	movs	r4, r1
 80093fc:	680b      	ldr	r3, [r1, #0]
 80093fe:	4296      	cmp	r6, r2
 8009400:	d831      	bhi.n	8009466 <__ssputs_r+0x7a>
 8009402:	898a      	ldrh	r2, [r1, #12]
 8009404:	2190      	movs	r1, #144	; 0x90
 8009406:	00c9      	lsls	r1, r1, #3
 8009408:	420a      	tst	r2, r1
 800940a:	d029      	beq.n	8009460 <__ssputs_r+0x74>
 800940c:	2003      	movs	r0, #3
 800940e:	6921      	ldr	r1, [r4, #16]
 8009410:	1a5b      	subs	r3, r3, r1
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	6963      	ldr	r3, [r4, #20]
 8009416:	4343      	muls	r3, r0
 8009418:	0fdd      	lsrs	r5, r3, #31
 800941a:	18ed      	adds	r5, r5, r3
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	9802      	ldr	r0, [sp, #8]
 8009420:	3301      	adds	r3, #1
 8009422:	181b      	adds	r3, r3, r0
 8009424:	106d      	asrs	r5, r5, #1
 8009426:	42ab      	cmp	r3, r5
 8009428:	d900      	bls.n	800942c <__ssputs_r+0x40>
 800942a:	001d      	movs	r5, r3
 800942c:	0552      	lsls	r2, r2, #21
 800942e:	d529      	bpl.n	8009484 <__ssputs_r+0x98>
 8009430:	0029      	movs	r1, r5
 8009432:	0038      	movs	r0, r7
 8009434:	f7ff fbae 	bl	8008b94 <_malloc_r>
 8009438:	1e06      	subs	r6, r0, #0
 800943a:	d02d      	beq.n	8009498 <__ssputs_r+0xac>
 800943c:	9a02      	ldr	r2, [sp, #8]
 800943e:	6921      	ldr	r1, [r4, #16]
 8009440:	f000 fa10 	bl	8009864 <memcpy>
 8009444:	89a2      	ldrh	r2, [r4, #12]
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <__ssputs_r+0xc0>)
 8009448:	401a      	ands	r2, r3
 800944a:	2380      	movs	r3, #128	; 0x80
 800944c:	4313      	orrs	r3, r2
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	9b02      	ldr	r3, [sp, #8]
 8009452:	6126      	str	r6, [r4, #16]
 8009454:	18f6      	adds	r6, r6, r3
 8009456:	6026      	str	r6, [r4, #0]
 8009458:	6165      	str	r5, [r4, #20]
 800945a:	9e01      	ldr	r6, [sp, #4]
 800945c:	1aed      	subs	r5, r5, r3
 800945e:	60a5      	str	r5, [r4, #8]
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	429e      	cmp	r6, r3
 8009464:	d900      	bls.n	8009468 <__ssputs_r+0x7c>
 8009466:	9e01      	ldr	r6, [sp, #4]
 8009468:	0032      	movs	r2, r6
 800946a:	9903      	ldr	r1, [sp, #12]
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	f000 f9d4 	bl	800981a <memmove>
 8009472:	2000      	movs	r0, #0
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	1b9b      	subs	r3, r3, r6
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	199b      	adds	r3, r3, r6
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	b005      	add	sp, #20
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009484:	002a      	movs	r2, r5
 8009486:	0038      	movs	r0, r7
 8009488:	f000 fa53 	bl	8009932 <_realloc_r>
 800948c:	1e06      	subs	r6, r0, #0
 800948e:	d1df      	bne.n	8009450 <__ssputs_r+0x64>
 8009490:	0038      	movs	r0, r7
 8009492:	6921      	ldr	r1, [r4, #16]
 8009494:	f7ff fb08 	bl	8008aa8 <_free_r>
 8009498:	230c      	movs	r3, #12
 800949a:	2001      	movs	r0, #1
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	89a2      	ldrh	r2, [r4, #12]
 80094a0:	3334      	adds	r3, #52	; 0x34
 80094a2:	4313      	orrs	r3, r2
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	4240      	negs	r0, r0
 80094a8:	e7ea      	b.n	8009480 <__ssputs_r+0x94>
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	fffffb7f 	.word	0xfffffb7f

080094b0 <_svfiprintf_r>:
 80094b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b2:	b0a1      	sub	sp, #132	; 0x84
 80094b4:	9003      	str	r0, [sp, #12]
 80094b6:	001d      	movs	r5, r3
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	000f      	movs	r7, r1
 80094bc:	0016      	movs	r6, r2
 80094be:	061b      	lsls	r3, r3, #24
 80094c0:	d511      	bpl.n	80094e6 <_svfiprintf_r+0x36>
 80094c2:	690b      	ldr	r3, [r1, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10e      	bne.n	80094e6 <_svfiprintf_r+0x36>
 80094c8:	2140      	movs	r1, #64	; 0x40
 80094ca:	f7ff fb63 	bl	8008b94 <_malloc_r>
 80094ce:	6038      	str	r0, [r7, #0]
 80094d0:	6138      	str	r0, [r7, #16]
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d105      	bne.n	80094e2 <_svfiprintf_r+0x32>
 80094d6:	230c      	movs	r3, #12
 80094d8:	9a03      	ldr	r2, [sp, #12]
 80094da:	3801      	subs	r0, #1
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	b021      	add	sp, #132	; 0x84
 80094e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	2300      	movs	r3, #0
 80094e8:	ac08      	add	r4, sp, #32
 80094ea:	6163      	str	r3, [r4, #20]
 80094ec:	3320      	adds	r3, #32
 80094ee:	7663      	strb	r3, [r4, #25]
 80094f0:	3310      	adds	r3, #16
 80094f2:	76a3      	strb	r3, [r4, #26]
 80094f4:	9507      	str	r5, [sp, #28]
 80094f6:	0035      	movs	r5, r6
 80094f8:	782b      	ldrb	r3, [r5, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <_svfiprintf_r+0x52>
 80094fe:	2b25      	cmp	r3, #37	; 0x25
 8009500:	d148      	bne.n	8009594 <_svfiprintf_r+0xe4>
 8009502:	1bab      	subs	r3, r5, r6
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	42b5      	cmp	r5, r6
 8009508:	d00b      	beq.n	8009522 <_svfiprintf_r+0x72>
 800950a:	0032      	movs	r2, r6
 800950c:	0039      	movs	r1, r7
 800950e:	9803      	ldr	r0, [sp, #12]
 8009510:	f7ff ff6c 	bl	80093ec <__ssputs_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d100      	bne.n	800951a <_svfiprintf_r+0x6a>
 8009518:	e0af      	b.n	800967a <_svfiprintf_r+0x1ca>
 800951a:	6963      	ldr	r3, [r4, #20]
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	189b      	adds	r3, r3, r2
 8009520:	6163      	str	r3, [r4, #20]
 8009522:	782b      	ldrb	r3, [r5, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d100      	bne.n	800952a <_svfiprintf_r+0x7a>
 8009528:	e0a7      	b.n	800967a <_svfiprintf_r+0x1ca>
 800952a:	2201      	movs	r2, #1
 800952c:	2300      	movs	r3, #0
 800952e:	4252      	negs	r2, r2
 8009530:	6062      	str	r2, [r4, #4]
 8009532:	a904      	add	r1, sp, #16
 8009534:	3254      	adds	r2, #84	; 0x54
 8009536:	1852      	adds	r2, r2, r1
 8009538:	1c6e      	adds	r6, r5, #1
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	60e3      	str	r3, [r4, #12]
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	7013      	strb	r3, [r2, #0]
 8009542:	65a3      	str	r3, [r4, #88]	; 0x58
 8009544:	4b55      	ldr	r3, [pc, #340]	; (800969c <_svfiprintf_r+0x1ec>)
 8009546:	2205      	movs	r2, #5
 8009548:	0018      	movs	r0, r3
 800954a:	7831      	ldrb	r1, [r6, #0]
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	f7fe fc02 	bl	8007d56 <memchr>
 8009552:	1c75      	adds	r5, r6, #1
 8009554:	2800      	cmp	r0, #0
 8009556:	d11f      	bne.n	8009598 <_svfiprintf_r+0xe8>
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	06d3      	lsls	r3, r2, #27
 800955c:	d504      	bpl.n	8009568 <_svfiprintf_r+0xb8>
 800955e:	2353      	movs	r3, #83	; 0x53
 8009560:	a904      	add	r1, sp, #16
 8009562:	185b      	adds	r3, r3, r1
 8009564:	2120      	movs	r1, #32
 8009566:	7019      	strb	r1, [r3, #0]
 8009568:	0713      	lsls	r3, r2, #28
 800956a:	d504      	bpl.n	8009576 <_svfiprintf_r+0xc6>
 800956c:	2353      	movs	r3, #83	; 0x53
 800956e:	a904      	add	r1, sp, #16
 8009570:	185b      	adds	r3, r3, r1
 8009572:	212b      	movs	r1, #43	; 0x2b
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	7833      	ldrb	r3, [r6, #0]
 8009578:	2b2a      	cmp	r3, #42	; 0x2a
 800957a:	d016      	beq.n	80095aa <_svfiprintf_r+0xfa>
 800957c:	0035      	movs	r5, r6
 800957e:	2100      	movs	r1, #0
 8009580:	200a      	movs	r0, #10
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	782a      	ldrb	r2, [r5, #0]
 8009586:	1c6e      	adds	r6, r5, #1
 8009588:	3a30      	subs	r2, #48	; 0x30
 800958a:	2a09      	cmp	r2, #9
 800958c:	d94e      	bls.n	800962c <_svfiprintf_r+0x17c>
 800958e:	2900      	cmp	r1, #0
 8009590:	d111      	bne.n	80095b6 <_svfiprintf_r+0x106>
 8009592:	e017      	b.n	80095c4 <_svfiprintf_r+0x114>
 8009594:	3501      	adds	r5, #1
 8009596:	e7af      	b.n	80094f8 <_svfiprintf_r+0x48>
 8009598:	9b05      	ldr	r3, [sp, #20]
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	1ac0      	subs	r0, r0, r3
 800959e:	2301      	movs	r3, #1
 80095a0:	4083      	lsls	r3, r0
 80095a2:	4313      	orrs	r3, r2
 80095a4:	002e      	movs	r6, r5
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	e7cc      	b.n	8009544 <_svfiprintf_r+0x94>
 80095aa:	9b07      	ldr	r3, [sp, #28]
 80095ac:	1d19      	adds	r1, r3, #4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	9107      	str	r1, [sp, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db01      	blt.n	80095ba <_svfiprintf_r+0x10a>
 80095b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80095b8:	e004      	b.n	80095c4 <_svfiprintf_r+0x114>
 80095ba:	425b      	negs	r3, r3
 80095bc:	60e3      	str	r3, [r4, #12]
 80095be:	2302      	movs	r3, #2
 80095c0:	4313      	orrs	r3, r2
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	782b      	ldrb	r3, [r5, #0]
 80095c6:	2b2e      	cmp	r3, #46	; 0x2e
 80095c8:	d10a      	bne.n	80095e0 <_svfiprintf_r+0x130>
 80095ca:	786b      	ldrb	r3, [r5, #1]
 80095cc:	2b2a      	cmp	r3, #42	; 0x2a
 80095ce:	d135      	bne.n	800963c <_svfiprintf_r+0x18c>
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	3502      	adds	r5, #2
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9207      	str	r2, [sp, #28]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	db2b      	blt.n	8009636 <_svfiprintf_r+0x186>
 80095de:	9309      	str	r3, [sp, #36]	; 0x24
 80095e0:	4e2f      	ldr	r6, [pc, #188]	; (80096a0 <_svfiprintf_r+0x1f0>)
 80095e2:	2203      	movs	r2, #3
 80095e4:	0030      	movs	r0, r6
 80095e6:	7829      	ldrb	r1, [r5, #0]
 80095e8:	f7fe fbb5 	bl	8007d56 <memchr>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d006      	beq.n	80095fe <_svfiprintf_r+0x14e>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	1b80      	subs	r0, r0, r6
 80095f4:	4083      	lsls	r3, r0
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	3501      	adds	r5, #1
 80095fa:	4313      	orrs	r3, r2
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	7829      	ldrb	r1, [r5, #0]
 8009600:	2206      	movs	r2, #6
 8009602:	4828      	ldr	r0, [pc, #160]	; (80096a4 <_svfiprintf_r+0x1f4>)
 8009604:	1c6e      	adds	r6, r5, #1
 8009606:	7621      	strb	r1, [r4, #24]
 8009608:	f7fe fba5 	bl	8007d56 <memchr>
 800960c:	2800      	cmp	r0, #0
 800960e:	d03c      	beq.n	800968a <_svfiprintf_r+0x1da>
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <_svfiprintf_r+0x1f8>)
 8009612:	2b00      	cmp	r3, #0
 8009614:	d125      	bne.n	8009662 <_svfiprintf_r+0x1b2>
 8009616:	2207      	movs	r2, #7
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	3307      	adds	r3, #7
 800961c:	4393      	bics	r3, r2
 800961e:	3308      	adds	r3, #8
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	6963      	ldr	r3, [r4, #20]
 8009624:	9a04      	ldr	r2, [sp, #16]
 8009626:	189b      	adds	r3, r3, r2
 8009628:	6163      	str	r3, [r4, #20]
 800962a:	e764      	b.n	80094f6 <_svfiprintf_r+0x46>
 800962c:	4343      	muls	r3, r0
 800962e:	0035      	movs	r5, r6
 8009630:	2101      	movs	r1, #1
 8009632:	189b      	adds	r3, r3, r2
 8009634:	e7a6      	b.n	8009584 <_svfiprintf_r+0xd4>
 8009636:	2301      	movs	r3, #1
 8009638:	425b      	negs	r3, r3
 800963a:	e7d0      	b.n	80095de <_svfiprintf_r+0x12e>
 800963c:	2300      	movs	r3, #0
 800963e:	200a      	movs	r0, #10
 8009640:	001a      	movs	r2, r3
 8009642:	3501      	adds	r5, #1
 8009644:	6063      	str	r3, [r4, #4]
 8009646:	7829      	ldrb	r1, [r5, #0]
 8009648:	1c6e      	adds	r6, r5, #1
 800964a:	3930      	subs	r1, #48	; 0x30
 800964c:	2909      	cmp	r1, #9
 800964e:	d903      	bls.n	8009658 <_svfiprintf_r+0x1a8>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0c5      	beq.n	80095e0 <_svfiprintf_r+0x130>
 8009654:	9209      	str	r2, [sp, #36]	; 0x24
 8009656:	e7c3      	b.n	80095e0 <_svfiprintf_r+0x130>
 8009658:	4342      	muls	r2, r0
 800965a:	0035      	movs	r5, r6
 800965c:	2301      	movs	r3, #1
 800965e:	1852      	adds	r2, r2, r1
 8009660:	e7f1      	b.n	8009646 <_svfiprintf_r+0x196>
 8009662:	aa07      	add	r2, sp, #28
 8009664:	9200      	str	r2, [sp, #0]
 8009666:	0021      	movs	r1, r4
 8009668:	003a      	movs	r2, r7
 800966a:	4b10      	ldr	r3, [pc, #64]	; (80096ac <_svfiprintf_r+0x1fc>)
 800966c:	9803      	ldr	r0, [sp, #12]
 800966e:	f7fd fde5 	bl	800723c <_printf_float>
 8009672:	9004      	str	r0, [sp, #16]
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	3301      	adds	r3, #1
 8009678:	d1d3      	bne.n	8009622 <_svfiprintf_r+0x172>
 800967a:	89bb      	ldrh	r3, [r7, #12]
 800967c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800967e:	065b      	lsls	r3, r3, #25
 8009680:	d400      	bmi.n	8009684 <_svfiprintf_r+0x1d4>
 8009682:	e72c      	b.n	80094de <_svfiprintf_r+0x2e>
 8009684:	2001      	movs	r0, #1
 8009686:	4240      	negs	r0, r0
 8009688:	e729      	b.n	80094de <_svfiprintf_r+0x2e>
 800968a:	aa07      	add	r2, sp, #28
 800968c:	9200      	str	r2, [sp, #0]
 800968e:	0021      	movs	r1, r4
 8009690:	003a      	movs	r2, r7
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <_svfiprintf_r+0x1fc>)
 8009694:	9803      	ldr	r0, [sp, #12]
 8009696:	f7fe f897 	bl	80077c8 <_printf_i>
 800969a:	e7ea      	b.n	8009672 <_svfiprintf_r+0x1c2>
 800969c:	0800a30c 	.word	0x0800a30c
 80096a0:	0800a312 	.word	0x0800a312
 80096a4:	0800a316 	.word	0x0800a316
 80096a8:	0800723d 	.word	0x0800723d
 80096ac:	080093ed 	.word	0x080093ed

080096b0 <__sflush_r>:
 80096b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096b2:	898b      	ldrh	r3, [r1, #12]
 80096b4:	0005      	movs	r5, r0
 80096b6:	000c      	movs	r4, r1
 80096b8:	071a      	lsls	r2, r3, #28
 80096ba:	d45c      	bmi.n	8009776 <__sflush_r+0xc6>
 80096bc:	684a      	ldr	r2, [r1, #4]
 80096be:	2a00      	cmp	r2, #0
 80096c0:	dc04      	bgt.n	80096cc <__sflush_r+0x1c>
 80096c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	dc01      	bgt.n	80096cc <__sflush_r+0x1c>
 80096c8:	2000      	movs	r0, #0
 80096ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d0fa      	beq.n	80096c8 <__sflush_r+0x18>
 80096d2:	2200      	movs	r2, #0
 80096d4:	2080      	movs	r0, #128	; 0x80
 80096d6:	682e      	ldr	r6, [r5, #0]
 80096d8:	602a      	str	r2, [r5, #0]
 80096da:	001a      	movs	r2, r3
 80096dc:	0140      	lsls	r0, r0, #5
 80096de:	6a21      	ldr	r1, [r4, #32]
 80096e0:	4002      	ands	r2, r0
 80096e2:	4203      	tst	r3, r0
 80096e4:	d034      	beq.n	8009750 <__sflush_r+0xa0>
 80096e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	075b      	lsls	r3, r3, #29
 80096ec:	d506      	bpl.n	80096fc <__sflush_r+0x4c>
 80096ee:	6863      	ldr	r3, [r4, #4]
 80096f0:	1ac0      	subs	r0, r0, r3
 80096f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <__sflush_r+0x4c>
 80096f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096fa:	1ac0      	subs	r0, r0, r3
 80096fc:	0002      	movs	r2, r0
 80096fe:	2300      	movs	r3, #0
 8009700:	0028      	movs	r0, r5
 8009702:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009704:	6a21      	ldr	r1, [r4, #32]
 8009706:	47b8      	blx	r7
 8009708:	89a2      	ldrh	r2, [r4, #12]
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d106      	bne.n	800971c <__sflush_r+0x6c>
 800970e:	6829      	ldr	r1, [r5, #0]
 8009710:	291d      	cmp	r1, #29
 8009712:	d82c      	bhi.n	800976e <__sflush_r+0xbe>
 8009714:	4b2a      	ldr	r3, [pc, #168]	; (80097c0 <__sflush_r+0x110>)
 8009716:	410b      	asrs	r3, r1
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d428      	bmi.n	800976e <__sflush_r+0xbe>
 800971c:	2300      	movs	r3, #0
 800971e:	6063      	str	r3, [r4, #4]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	04d2      	lsls	r2, r2, #19
 8009726:	d505      	bpl.n	8009734 <__sflush_r+0x84>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <__sflush_r+0x82>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d100      	bne.n	8009734 <__sflush_r+0x84>
 8009732:	6560      	str	r0, [r4, #84]	; 0x54
 8009734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009736:	602e      	str	r6, [r5, #0]
 8009738:	2900      	cmp	r1, #0
 800973a:	d0c5      	beq.n	80096c8 <__sflush_r+0x18>
 800973c:	0023      	movs	r3, r4
 800973e:	3344      	adds	r3, #68	; 0x44
 8009740:	4299      	cmp	r1, r3
 8009742:	d002      	beq.n	800974a <__sflush_r+0x9a>
 8009744:	0028      	movs	r0, r5
 8009746:	f7ff f9af 	bl	8008aa8 <_free_r>
 800974a:	2000      	movs	r0, #0
 800974c:	6360      	str	r0, [r4, #52]	; 0x34
 800974e:	e7bc      	b.n	80096ca <__sflush_r+0x1a>
 8009750:	2301      	movs	r3, #1
 8009752:	0028      	movs	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d1c6      	bne.n	80096e8 <__sflush_r+0x38>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0c3      	beq.n	80096e8 <__sflush_r+0x38>
 8009760:	2b1d      	cmp	r3, #29
 8009762:	d001      	beq.n	8009768 <__sflush_r+0xb8>
 8009764:	2b16      	cmp	r3, #22
 8009766:	d101      	bne.n	800976c <__sflush_r+0xbc>
 8009768:	602e      	str	r6, [r5, #0]
 800976a:	e7ad      	b.n	80096c8 <__sflush_r+0x18>
 800976c:	89a2      	ldrh	r2, [r4, #12]
 800976e:	2340      	movs	r3, #64	; 0x40
 8009770:	4313      	orrs	r3, r2
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	e7a9      	b.n	80096ca <__sflush_r+0x1a>
 8009776:	690e      	ldr	r6, [r1, #16]
 8009778:	2e00      	cmp	r6, #0
 800977a:	d0a5      	beq.n	80096c8 <__sflush_r+0x18>
 800977c:	680f      	ldr	r7, [r1, #0]
 800977e:	600e      	str	r6, [r1, #0]
 8009780:	1bba      	subs	r2, r7, r6
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	079b      	lsls	r3, r3, #30
 8009788:	d100      	bne.n	800978c <__sflush_r+0xdc>
 800978a:	694a      	ldr	r2, [r1, #20]
 800978c:	60a2      	str	r2, [r4, #8]
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	dd99      	ble.n	80096c8 <__sflush_r+0x18>
 8009794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009796:	0032      	movs	r2, r6
 8009798:	001f      	movs	r7, r3
 800979a:	0028      	movs	r0, r5
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6a21      	ldr	r1, [r4, #32]
 80097a0:	47b8      	blx	r7
 80097a2:	2800      	cmp	r0, #0
 80097a4:	dc06      	bgt.n	80097b4 <__sflush_r+0x104>
 80097a6:	2340      	movs	r3, #64	; 0x40
 80097a8:	2001      	movs	r0, #1
 80097aa:	89a2      	ldrh	r2, [r4, #12]
 80097ac:	4240      	negs	r0, r0
 80097ae:	4313      	orrs	r3, r2
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	e78a      	b.n	80096ca <__sflush_r+0x1a>
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	1836      	adds	r6, r6, r0
 80097b8:	1a1b      	subs	r3, r3, r0
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	e7e7      	b.n	800978e <__sflush_r+0xde>
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	dfbffffe 	.word	0xdfbffffe

080097c4 <_fflush_r>:
 80097c4:	690b      	ldr	r3, [r1, #16]
 80097c6:	b570      	push	{r4, r5, r6, lr}
 80097c8:	0005      	movs	r5, r0
 80097ca:	000c      	movs	r4, r1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <_fflush_r+0x12>
 80097d0:	2500      	movs	r5, #0
 80097d2:	0028      	movs	r0, r5
 80097d4:	bd70      	pop	{r4, r5, r6, pc}
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d004      	beq.n	80097e4 <_fflush_r+0x20>
 80097da:	6a03      	ldr	r3, [r0, #32]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <_fflush_r+0x20>
 80097e0:	f7fe f992 	bl	8007b08 <__sinit>
 80097e4:	220c      	movs	r2, #12
 80097e6:	5ea3      	ldrsh	r3, [r4, r2]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0f1      	beq.n	80097d0 <_fflush_r+0xc>
 80097ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097ee:	07d2      	lsls	r2, r2, #31
 80097f0:	d404      	bmi.n	80097fc <_fflush_r+0x38>
 80097f2:	059b      	lsls	r3, r3, #22
 80097f4:	d402      	bmi.n	80097fc <_fflush_r+0x38>
 80097f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f8:	f7fe faab 	bl	8007d52 <__retarget_lock_acquire_recursive>
 80097fc:	0028      	movs	r0, r5
 80097fe:	0021      	movs	r1, r4
 8009800:	f7ff ff56 	bl	80096b0 <__sflush_r>
 8009804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009806:	0005      	movs	r5, r0
 8009808:	07db      	lsls	r3, r3, #31
 800980a:	d4e2      	bmi.n	80097d2 <_fflush_r+0xe>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	059b      	lsls	r3, r3, #22
 8009810:	d4df      	bmi.n	80097d2 <_fflush_r+0xe>
 8009812:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009814:	f7fe fa9e 	bl	8007d54 <__retarget_lock_release_recursive>
 8009818:	e7db      	b.n	80097d2 <_fflush_r+0xe>

0800981a <memmove>:
 800981a:	b510      	push	{r4, lr}
 800981c:	4288      	cmp	r0, r1
 800981e:	d902      	bls.n	8009826 <memmove+0xc>
 8009820:	188b      	adds	r3, r1, r2
 8009822:	4298      	cmp	r0, r3
 8009824:	d303      	bcc.n	800982e <memmove+0x14>
 8009826:	2300      	movs	r3, #0
 8009828:	e007      	b.n	800983a <memmove+0x20>
 800982a:	5c8b      	ldrb	r3, [r1, r2]
 800982c:	5483      	strb	r3, [r0, r2]
 800982e:	3a01      	subs	r2, #1
 8009830:	d2fb      	bcs.n	800982a <memmove+0x10>
 8009832:	bd10      	pop	{r4, pc}
 8009834:	5ccc      	ldrb	r4, [r1, r3]
 8009836:	54c4      	strb	r4, [r0, r3]
 8009838:	3301      	adds	r3, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	d1fa      	bne.n	8009834 <memmove+0x1a>
 800983e:	e7f8      	b.n	8009832 <memmove+0x18>

08009840 <_sbrk_r>:
 8009840:	2300      	movs	r3, #0
 8009842:	b570      	push	{r4, r5, r6, lr}
 8009844:	4d06      	ldr	r5, [pc, #24]	; (8009860 <_sbrk_r+0x20>)
 8009846:	0004      	movs	r4, r0
 8009848:	0008      	movs	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f9 fbec 	bl	8003028 <_sbrk>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d103      	bne.n	800985c <_sbrk_r+0x1c>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d000      	beq.n	800985c <_sbrk_r+0x1c>
 800985a:	6023      	str	r3, [r4, #0]
 800985c:	bd70      	pop	{r4, r5, r6, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000508 	.word	0x20000508

08009864 <memcpy>:
 8009864:	2300      	movs	r3, #0
 8009866:	b510      	push	{r4, lr}
 8009868:	429a      	cmp	r2, r3
 800986a:	d100      	bne.n	800986e <memcpy+0xa>
 800986c:	bd10      	pop	{r4, pc}
 800986e:	5ccc      	ldrb	r4, [r1, r3]
 8009870:	54c4      	strb	r4, [r0, r3]
 8009872:	3301      	adds	r3, #1
 8009874:	e7f8      	b.n	8009868 <memcpy+0x4>
	...

08009878 <__assert_func>:
 8009878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800987a:	0014      	movs	r4, r2
 800987c:	001a      	movs	r2, r3
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <__assert_func+0x2c>)
 8009880:	0005      	movs	r5, r0
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	000e      	movs	r6, r1
 8009886:	68d8      	ldr	r0, [r3, #12]
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <__assert_func+0x30>)
 800988a:	2c00      	cmp	r4, #0
 800988c:	d101      	bne.n	8009892 <__assert_func+0x1a>
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <__assert_func+0x34>)
 8009890:	001c      	movs	r4, r3
 8009892:	4907      	ldr	r1, [pc, #28]	; (80098b0 <__assert_func+0x38>)
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	9402      	str	r4, [sp, #8]
 8009898:	002b      	movs	r3, r5
 800989a:	9600      	str	r6, [sp, #0]
 800989c:	f000 f886 	bl	80099ac <fiprintf>
 80098a0:	f000 f894 	bl	80099cc <abort>
 80098a4:	20000068 	.word	0x20000068
 80098a8:	0800a327 	.word	0x0800a327
 80098ac:	0800a362 	.word	0x0800a362
 80098b0:	0800a334 	.word	0x0800a334

080098b4 <_calloc_r>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	0c0b      	lsrs	r3, r1, #16
 80098b8:	0c15      	lsrs	r5, r2, #16
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d11e      	bne.n	80098fc <_calloc_r+0x48>
 80098be:	2d00      	cmp	r5, #0
 80098c0:	d10c      	bne.n	80098dc <_calloc_r+0x28>
 80098c2:	b289      	uxth	r1, r1
 80098c4:	b294      	uxth	r4, r2
 80098c6:	434c      	muls	r4, r1
 80098c8:	0021      	movs	r1, r4
 80098ca:	f7ff f963 	bl	8008b94 <_malloc_r>
 80098ce:	1e05      	subs	r5, r0, #0
 80098d0:	d01b      	beq.n	800990a <_calloc_r+0x56>
 80098d2:	0022      	movs	r2, r4
 80098d4:	2100      	movs	r1, #0
 80098d6:	f7fe f9b7 	bl	8007c48 <memset>
 80098da:	e016      	b.n	800990a <_calloc_r+0x56>
 80098dc:	1c2b      	adds	r3, r5, #0
 80098de:	1c0c      	adds	r4, r1, #0
 80098e0:	b289      	uxth	r1, r1
 80098e2:	b292      	uxth	r2, r2
 80098e4:	434a      	muls	r2, r1
 80098e6:	b2a1      	uxth	r1, r4
 80098e8:	b29c      	uxth	r4, r3
 80098ea:	434c      	muls	r4, r1
 80098ec:	0c13      	lsrs	r3, r2, #16
 80098ee:	18e4      	adds	r4, r4, r3
 80098f0:	0c23      	lsrs	r3, r4, #16
 80098f2:	d107      	bne.n	8009904 <_calloc_r+0x50>
 80098f4:	0424      	lsls	r4, r4, #16
 80098f6:	b292      	uxth	r2, r2
 80098f8:	4314      	orrs	r4, r2
 80098fa:	e7e5      	b.n	80098c8 <_calloc_r+0x14>
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	d101      	bne.n	8009904 <_calloc_r+0x50>
 8009900:	1c14      	adds	r4, r2, #0
 8009902:	e7ed      	b.n	80098e0 <_calloc_r+0x2c>
 8009904:	230c      	movs	r3, #12
 8009906:	2500      	movs	r5, #0
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	0028      	movs	r0, r5
 800990c:	bd70      	pop	{r4, r5, r6, pc}

0800990e <__ascii_mbtowc>:
 800990e:	b082      	sub	sp, #8
 8009910:	2900      	cmp	r1, #0
 8009912:	d100      	bne.n	8009916 <__ascii_mbtowc+0x8>
 8009914:	a901      	add	r1, sp, #4
 8009916:	1e10      	subs	r0, r2, #0
 8009918:	d006      	beq.n	8009928 <__ascii_mbtowc+0x1a>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <__ascii_mbtowc+0x1e>
 800991e:	7813      	ldrb	r3, [r2, #0]
 8009920:	600b      	str	r3, [r1, #0]
 8009922:	7810      	ldrb	r0, [r2, #0]
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	4198      	sbcs	r0, r3
 8009928:	b002      	add	sp, #8
 800992a:	4770      	bx	lr
 800992c:	2002      	movs	r0, #2
 800992e:	4240      	negs	r0, r0
 8009930:	e7fa      	b.n	8009928 <__ascii_mbtowc+0x1a>

08009932 <_realloc_r>:
 8009932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009934:	0007      	movs	r7, r0
 8009936:	000e      	movs	r6, r1
 8009938:	0014      	movs	r4, r2
 800993a:	2900      	cmp	r1, #0
 800993c:	d105      	bne.n	800994a <_realloc_r+0x18>
 800993e:	0011      	movs	r1, r2
 8009940:	f7ff f928 	bl	8008b94 <_malloc_r>
 8009944:	0005      	movs	r5, r0
 8009946:	0028      	movs	r0, r5
 8009948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800994a:	2a00      	cmp	r2, #0
 800994c:	d103      	bne.n	8009956 <_realloc_r+0x24>
 800994e:	f7ff f8ab 	bl	8008aa8 <_free_r>
 8009952:	0025      	movs	r5, r4
 8009954:	e7f7      	b.n	8009946 <_realloc_r+0x14>
 8009956:	f000 f840 	bl	80099da <_malloc_usable_size_r>
 800995a:	9001      	str	r0, [sp, #4]
 800995c:	4284      	cmp	r4, r0
 800995e:	d803      	bhi.n	8009968 <_realloc_r+0x36>
 8009960:	0035      	movs	r5, r6
 8009962:	0843      	lsrs	r3, r0, #1
 8009964:	42a3      	cmp	r3, r4
 8009966:	d3ee      	bcc.n	8009946 <_realloc_r+0x14>
 8009968:	0021      	movs	r1, r4
 800996a:	0038      	movs	r0, r7
 800996c:	f7ff f912 	bl	8008b94 <_malloc_r>
 8009970:	1e05      	subs	r5, r0, #0
 8009972:	d0e8      	beq.n	8009946 <_realloc_r+0x14>
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	0022      	movs	r2, r4
 8009978:	429c      	cmp	r4, r3
 800997a:	d900      	bls.n	800997e <_realloc_r+0x4c>
 800997c:	001a      	movs	r2, r3
 800997e:	0031      	movs	r1, r6
 8009980:	0028      	movs	r0, r5
 8009982:	f7ff ff6f 	bl	8009864 <memcpy>
 8009986:	0031      	movs	r1, r6
 8009988:	0038      	movs	r0, r7
 800998a:	f7ff f88d 	bl	8008aa8 <_free_r>
 800998e:	e7da      	b.n	8009946 <_realloc_r+0x14>

08009990 <__ascii_wctomb>:
 8009990:	0003      	movs	r3, r0
 8009992:	1e08      	subs	r0, r1, #0
 8009994:	d005      	beq.n	80099a2 <__ascii_wctomb+0x12>
 8009996:	2aff      	cmp	r2, #255	; 0xff
 8009998:	d904      	bls.n	80099a4 <__ascii_wctomb+0x14>
 800999a:	228a      	movs	r2, #138	; 0x8a
 800999c:	2001      	movs	r0, #1
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	4240      	negs	r0, r0
 80099a2:	4770      	bx	lr
 80099a4:	2001      	movs	r0, #1
 80099a6:	700a      	strb	r2, [r1, #0]
 80099a8:	e7fb      	b.n	80099a2 <__ascii_wctomb+0x12>
	...

080099ac <fiprintf>:
 80099ac:	b40e      	push	{r1, r2, r3}
 80099ae:	b517      	push	{r0, r1, r2, r4, lr}
 80099b0:	4c05      	ldr	r4, [pc, #20]	; (80099c8 <fiprintf+0x1c>)
 80099b2:	ab05      	add	r3, sp, #20
 80099b4:	cb04      	ldmia	r3!, {r2}
 80099b6:	0001      	movs	r1, r0
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	f000 f83c 	bl	8009a38 <_vfiprintf_r>
 80099c0:	bc1e      	pop	{r1, r2, r3, r4}
 80099c2:	bc08      	pop	{r3}
 80099c4:	b003      	add	sp, #12
 80099c6:	4718      	bx	r3
 80099c8:	20000068 	.word	0x20000068

080099cc <abort>:
 80099cc:	2006      	movs	r0, #6
 80099ce:	b510      	push	{r4, lr}
 80099d0:	f000 fa1e 	bl	8009e10 <raise>
 80099d4:	2001      	movs	r0, #1
 80099d6:	f7f9 fab5 	bl	8002f44 <_exit>

080099da <_malloc_usable_size_r>:
 80099da:	1f0b      	subs	r3, r1, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	1f18      	subs	r0, r3, #4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	da01      	bge.n	80099e8 <_malloc_usable_size_r+0xe>
 80099e4:	580b      	ldr	r3, [r1, r0]
 80099e6:	18c0      	adds	r0, r0, r3
 80099e8:	4770      	bx	lr

080099ea <__sfputc_r>:
 80099ea:	6893      	ldr	r3, [r2, #8]
 80099ec:	b510      	push	{r4, lr}
 80099ee:	3b01      	subs	r3, #1
 80099f0:	6093      	str	r3, [r2, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	da04      	bge.n	8009a00 <__sfputc_r+0x16>
 80099f6:	6994      	ldr	r4, [r2, #24]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	db07      	blt.n	8009a0c <__sfputc_r+0x22>
 80099fc:	290a      	cmp	r1, #10
 80099fe:	d005      	beq.n	8009a0c <__sfputc_r+0x22>
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	1c58      	adds	r0, r3, #1
 8009a04:	6010      	str	r0, [r2, #0]
 8009a06:	7019      	strb	r1, [r3, #0]
 8009a08:	0008      	movs	r0, r1
 8009a0a:	bd10      	pop	{r4, pc}
 8009a0c:	f000 f930 	bl	8009c70 <__swbuf_r>
 8009a10:	0001      	movs	r1, r0
 8009a12:	e7f9      	b.n	8009a08 <__sfputc_r+0x1e>

08009a14 <__sfputs_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	0006      	movs	r6, r0
 8009a18:	000f      	movs	r7, r1
 8009a1a:	0014      	movs	r4, r2
 8009a1c:	18d5      	adds	r5, r2, r3
 8009a1e:	42ac      	cmp	r4, r5
 8009a20:	d101      	bne.n	8009a26 <__sfputs_r+0x12>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e007      	b.n	8009a36 <__sfputs_r+0x22>
 8009a26:	7821      	ldrb	r1, [r4, #0]
 8009a28:	003a      	movs	r2, r7
 8009a2a:	0030      	movs	r0, r6
 8009a2c:	f7ff ffdd 	bl	80099ea <__sfputc_r>
 8009a30:	3401      	adds	r4, #1
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	d1f3      	bne.n	8009a1e <__sfputs_r+0xa>
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a38 <_vfiprintf_r>:
 8009a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3a:	b0a1      	sub	sp, #132	; 0x84
 8009a3c:	000f      	movs	r7, r1
 8009a3e:	0015      	movs	r5, r2
 8009a40:	001e      	movs	r6, r3
 8009a42:	9003      	str	r0, [sp, #12]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d004      	beq.n	8009a52 <_vfiprintf_r+0x1a>
 8009a48:	6a03      	ldr	r3, [r0, #32]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <_vfiprintf_r+0x1a>
 8009a4e:	f7fe f85b 	bl	8007b08 <__sinit>
 8009a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a54:	07db      	lsls	r3, r3, #31
 8009a56:	d405      	bmi.n	8009a64 <_vfiprintf_r+0x2c>
 8009a58:	89bb      	ldrh	r3, [r7, #12]
 8009a5a:	059b      	lsls	r3, r3, #22
 8009a5c:	d402      	bmi.n	8009a64 <_vfiprintf_r+0x2c>
 8009a5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009a60:	f7fe f977 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8009a64:	89bb      	ldrh	r3, [r7, #12]
 8009a66:	071b      	lsls	r3, r3, #28
 8009a68:	d502      	bpl.n	8009a70 <_vfiprintf_r+0x38>
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d113      	bne.n	8009a98 <_vfiprintf_r+0x60>
 8009a70:	0039      	movs	r1, r7
 8009a72:	9803      	ldr	r0, [sp, #12]
 8009a74:	f000 f93e 	bl	8009cf4 <__swsetup_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d00d      	beq.n	8009a98 <_vfiprintf_r+0x60>
 8009a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a7e:	07db      	lsls	r3, r3, #31
 8009a80:	d503      	bpl.n	8009a8a <_vfiprintf_r+0x52>
 8009a82:	2001      	movs	r0, #1
 8009a84:	4240      	negs	r0, r0
 8009a86:	b021      	add	sp, #132	; 0x84
 8009a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8a:	89bb      	ldrh	r3, [r7, #12]
 8009a8c:	059b      	lsls	r3, r3, #22
 8009a8e:	d4f8      	bmi.n	8009a82 <_vfiprintf_r+0x4a>
 8009a90:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009a92:	f7fe f95f 	bl	8007d54 <__retarget_lock_release_recursive>
 8009a96:	e7f4      	b.n	8009a82 <_vfiprintf_r+0x4a>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	ac08      	add	r4, sp, #32
 8009a9c:	6163      	str	r3, [r4, #20]
 8009a9e:	3320      	adds	r3, #32
 8009aa0:	7663      	strb	r3, [r4, #25]
 8009aa2:	3310      	adds	r3, #16
 8009aa4:	76a3      	strb	r3, [r4, #26]
 8009aa6:	9607      	str	r6, [sp, #28]
 8009aa8:	002e      	movs	r6, r5
 8009aaa:	7833      	ldrb	r3, [r6, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <_vfiprintf_r+0x7c>
 8009ab0:	2b25      	cmp	r3, #37	; 0x25
 8009ab2:	d148      	bne.n	8009b46 <_vfiprintf_r+0x10e>
 8009ab4:	1b73      	subs	r3, r6, r5
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	42ae      	cmp	r6, r5
 8009aba:	d00b      	beq.n	8009ad4 <_vfiprintf_r+0x9c>
 8009abc:	002a      	movs	r2, r5
 8009abe:	0039      	movs	r1, r7
 8009ac0:	9803      	ldr	r0, [sp, #12]
 8009ac2:	f7ff ffa7 	bl	8009a14 <__sfputs_r>
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d100      	bne.n	8009acc <_vfiprintf_r+0x94>
 8009aca:	e0af      	b.n	8009c2c <_vfiprintf_r+0x1f4>
 8009acc:	6963      	ldr	r3, [r4, #20]
 8009ace:	9a05      	ldr	r2, [sp, #20]
 8009ad0:	189b      	adds	r3, r3, r2
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	7833      	ldrb	r3, [r6, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d100      	bne.n	8009adc <_vfiprintf_r+0xa4>
 8009ada:	e0a7      	b.n	8009c2c <_vfiprintf_r+0x1f4>
 8009adc:	2201      	movs	r2, #1
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4252      	negs	r2, r2
 8009ae2:	6062      	str	r2, [r4, #4]
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	3254      	adds	r2, #84	; 0x54
 8009ae8:	1852      	adds	r2, r2, r1
 8009aea:	1c75      	adds	r5, r6, #1
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	60e3      	str	r3, [r4, #12]
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	7013      	strb	r3, [r2, #0]
 8009af4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009af6:	4b59      	ldr	r3, [pc, #356]	; (8009c5c <_vfiprintf_r+0x224>)
 8009af8:	2205      	movs	r2, #5
 8009afa:	0018      	movs	r0, r3
 8009afc:	7829      	ldrb	r1, [r5, #0]
 8009afe:	9305      	str	r3, [sp, #20]
 8009b00:	f7fe f929 	bl	8007d56 <memchr>
 8009b04:	1c6e      	adds	r6, r5, #1
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d11f      	bne.n	8009b4a <_vfiprintf_r+0x112>
 8009b0a:	6822      	ldr	r2, [r4, #0]
 8009b0c:	06d3      	lsls	r3, r2, #27
 8009b0e:	d504      	bpl.n	8009b1a <_vfiprintf_r+0xe2>
 8009b10:	2353      	movs	r3, #83	; 0x53
 8009b12:	a904      	add	r1, sp, #16
 8009b14:	185b      	adds	r3, r3, r1
 8009b16:	2120      	movs	r1, #32
 8009b18:	7019      	strb	r1, [r3, #0]
 8009b1a:	0713      	lsls	r3, r2, #28
 8009b1c:	d504      	bpl.n	8009b28 <_vfiprintf_r+0xf0>
 8009b1e:	2353      	movs	r3, #83	; 0x53
 8009b20:	a904      	add	r1, sp, #16
 8009b22:	185b      	adds	r3, r3, r1
 8009b24:	212b      	movs	r1, #43	; 0x2b
 8009b26:	7019      	strb	r1, [r3, #0]
 8009b28:	782b      	ldrb	r3, [r5, #0]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d016      	beq.n	8009b5c <_vfiprintf_r+0x124>
 8009b2e:	002e      	movs	r6, r5
 8009b30:	2100      	movs	r1, #0
 8009b32:	200a      	movs	r0, #10
 8009b34:	68e3      	ldr	r3, [r4, #12]
 8009b36:	7832      	ldrb	r2, [r6, #0]
 8009b38:	1c75      	adds	r5, r6, #1
 8009b3a:	3a30      	subs	r2, #48	; 0x30
 8009b3c:	2a09      	cmp	r2, #9
 8009b3e:	d94e      	bls.n	8009bde <_vfiprintf_r+0x1a6>
 8009b40:	2900      	cmp	r1, #0
 8009b42:	d111      	bne.n	8009b68 <_vfiprintf_r+0x130>
 8009b44:	e017      	b.n	8009b76 <_vfiprintf_r+0x13e>
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7af      	b.n	8009aaa <_vfiprintf_r+0x72>
 8009b4a:	9b05      	ldr	r3, [sp, #20]
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	1ac0      	subs	r0, r0, r3
 8009b50:	2301      	movs	r3, #1
 8009b52:	4083      	lsls	r3, r0
 8009b54:	4313      	orrs	r3, r2
 8009b56:	0035      	movs	r5, r6
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	e7cc      	b.n	8009af6 <_vfiprintf_r+0xbe>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	1d19      	adds	r1, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9107      	str	r1, [sp, #28]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	db01      	blt.n	8009b6c <_vfiprintf_r+0x134>
 8009b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b6a:	e004      	b.n	8009b76 <_vfiprintf_r+0x13e>
 8009b6c:	425b      	negs	r3, r3
 8009b6e:	60e3      	str	r3, [r4, #12]
 8009b70:	2302      	movs	r3, #2
 8009b72:	4313      	orrs	r3, r2
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	7833      	ldrb	r3, [r6, #0]
 8009b78:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7a:	d10a      	bne.n	8009b92 <_vfiprintf_r+0x15a>
 8009b7c:	7873      	ldrb	r3, [r6, #1]
 8009b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b80:	d135      	bne.n	8009bee <_vfiprintf_r+0x1b6>
 8009b82:	9b07      	ldr	r3, [sp, #28]
 8009b84:	3602      	adds	r6, #2
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9207      	str	r2, [sp, #28]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	db2b      	blt.n	8009be8 <_vfiprintf_r+0x1b0>
 8009b90:	9309      	str	r3, [sp, #36]	; 0x24
 8009b92:	4d33      	ldr	r5, [pc, #204]	; (8009c60 <_vfiprintf_r+0x228>)
 8009b94:	2203      	movs	r2, #3
 8009b96:	0028      	movs	r0, r5
 8009b98:	7831      	ldrb	r1, [r6, #0]
 8009b9a:	f7fe f8dc 	bl	8007d56 <memchr>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d006      	beq.n	8009bb0 <_vfiprintf_r+0x178>
 8009ba2:	2340      	movs	r3, #64	; 0x40
 8009ba4:	1b40      	subs	r0, r0, r5
 8009ba6:	4083      	lsls	r3, r0
 8009ba8:	6822      	ldr	r2, [r4, #0]
 8009baa:	3601      	adds	r6, #1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	7831      	ldrb	r1, [r6, #0]
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	482b      	ldr	r0, [pc, #172]	; (8009c64 <_vfiprintf_r+0x22c>)
 8009bb6:	1c75      	adds	r5, r6, #1
 8009bb8:	7621      	strb	r1, [r4, #24]
 8009bba:	f7fe f8cc 	bl	8007d56 <memchr>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d043      	beq.n	8009c4a <_vfiprintf_r+0x212>
 8009bc2:	4b29      	ldr	r3, [pc, #164]	; (8009c68 <_vfiprintf_r+0x230>)
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d125      	bne.n	8009c14 <_vfiprintf_r+0x1dc>
 8009bc8:	2207      	movs	r2, #7
 8009bca:	9b07      	ldr	r3, [sp, #28]
 8009bcc:	3307      	adds	r3, #7
 8009bce:	4393      	bics	r3, r2
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	9307      	str	r3, [sp, #28]
 8009bd4:	6963      	ldr	r3, [r4, #20]
 8009bd6:	9a04      	ldr	r2, [sp, #16]
 8009bd8:	189b      	adds	r3, r3, r2
 8009bda:	6163      	str	r3, [r4, #20]
 8009bdc:	e764      	b.n	8009aa8 <_vfiprintf_r+0x70>
 8009bde:	4343      	muls	r3, r0
 8009be0:	002e      	movs	r6, r5
 8009be2:	2101      	movs	r1, #1
 8009be4:	189b      	adds	r3, r3, r2
 8009be6:	e7a6      	b.n	8009b36 <_vfiprintf_r+0xfe>
 8009be8:	2301      	movs	r3, #1
 8009bea:	425b      	negs	r3, r3
 8009bec:	e7d0      	b.n	8009b90 <_vfiprintf_r+0x158>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	200a      	movs	r0, #10
 8009bf2:	001a      	movs	r2, r3
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	7831      	ldrb	r1, [r6, #0]
 8009bfa:	1c75      	adds	r5, r6, #1
 8009bfc:	3930      	subs	r1, #48	; 0x30
 8009bfe:	2909      	cmp	r1, #9
 8009c00:	d903      	bls.n	8009c0a <_vfiprintf_r+0x1d2>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0c5      	beq.n	8009b92 <_vfiprintf_r+0x15a>
 8009c06:	9209      	str	r2, [sp, #36]	; 0x24
 8009c08:	e7c3      	b.n	8009b92 <_vfiprintf_r+0x15a>
 8009c0a:	4342      	muls	r2, r0
 8009c0c:	002e      	movs	r6, r5
 8009c0e:	2301      	movs	r3, #1
 8009c10:	1852      	adds	r2, r2, r1
 8009c12:	e7f1      	b.n	8009bf8 <_vfiprintf_r+0x1c0>
 8009c14:	aa07      	add	r2, sp, #28
 8009c16:	9200      	str	r2, [sp, #0]
 8009c18:	0021      	movs	r1, r4
 8009c1a:	003a      	movs	r2, r7
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <_vfiprintf_r+0x234>)
 8009c1e:	9803      	ldr	r0, [sp, #12]
 8009c20:	f7fd fb0c 	bl	800723c <_printf_float>
 8009c24:	9004      	str	r0, [sp, #16]
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	d1d3      	bne.n	8009bd4 <_vfiprintf_r+0x19c>
 8009c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d405      	bmi.n	8009c3e <_vfiprintf_r+0x206>
 8009c32:	89bb      	ldrh	r3, [r7, #12]
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_vfiprintf_r+0x206>
 8009c38:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009c3a:	f7fe f88b 	bl	8007d54 <__retarget_lock_release_recursive>
 8009c3e:	89bb      	ldrh	r3, [r7, #12]
 8009c40:	065b      	lsls	r3, r3, #25
 8009c42:	d500      	bpl.n	8009c46 <_vfiprintf_r+0x20e>
 8009c44:	e71d      	b.n	8009a82 <_vfiprintf_r+0x4a>
 8009c46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c48:	e71d      	b.n	8009a86 <_vfiprintf_r+0x4e>
 8009c4a:	aa07      	add	r2, sp, #28
 8009c4c:	9200      	str	r2, [sp, #0]
 8009c4e:	0021      	movs	r1, r4
 8009c50:	003a      	movs	r2, r7
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_vfiprintf_r+0x234>)
 8009c54:	9803      	ldr	r0, [sp, #12]
 8009c56:	f7fd fdb7 	bl	80077c8 <_printf_i>
 8009c5a:	e7e3      	b.n	8009c24 <_vfiprintf_r+0x1ec>
 8009c5c:	0800a30c 	.word	0x0800a30c
 8009c60:	0800a312 	.word	0x0800a312
 8009c64:	0800a316 	.word	0x0800a316
 8009c68:	0800723d 	.word	0x0800723d
 8009c6c:	08009a15 	.word	0x08009a15

08009c70 <__swbuf_r>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	0006      	movs	r6, r0
 8009c74:	000d      	movs	r5, r1
 8009c76:	0014      	movs	r4, r2
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d004      	beq.n	8009c86 <__swbuf_r+0x16>
 8009c7c:	6a03      	ldr	r3, [r0, #32]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <__swbuf_r+0x16>
 8009c82:	f7fd ff41 	bl	8007b08 <__sinit>
 8009c86:	69a3      	ldr	r3, [r4, #24]
 8009c88:	60a3      	str	r3, [r4, #8]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	071b      	lsls	r3, r3, #28
 8009c8e:	d528      	bpl.n	8009ce2 <__swbuf_r+0x72>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d025      	beq.n	8009ce2 <__swbuf_r+0x72>
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	b2ef      	uxtb	r7, r5
 8009c9c:	1ac0      	subs	r0, r0, r3
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	b2ed      	uxtb	r5, r5
 8009ca2:	4283      	cmp	r3, r0
 8009ca4:	dc05      	bgt.n	8009cb2 <__swbuf_r+0x42>
 8009ca6:	0021      	movs	r1, r4
 8009ca8:	0030      	movs	r0, r6
 8009caa:	f7ff fd8b 	bl	80097c4 <_fflush_r>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d11d      	bne.n	8009cee <__swbuf_r+0x7e>
 8009cb2:	68a3      	ldr	r3, [r4, #8]
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	60a3      	str	r3, [r4, #8]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	6022      	str	r2, [r4, #0]
 8009cc0:	701f      	strb	r7, [r3, #0]
 8009cc2:	6963      	ldr	r3, [r4, #20]
 8009cc4:	4283      	cmp	r3, r0
 8009cc6:	d004      	beq.n	8009cd2 <__swbuf_r+0x62>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	07db      	lsls	r3, r3, #31
 8009ccc:	d507      	bpl.n	8009cde <__swbuf_r+0x6e>
 8009cce:	2d0a      	cmp	r5, #10
 8009cd0:	d105      	bne.n	8009cde <__swbuf_r+0x6e>
 8009cd2:	0021      	movs	r1, r4
 8009cd4:	0030      	movs	r0, r6
 8009cd6:	f7ff fd75 	bl	80097c4 <_fflush_r>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d107      	bne.n	8009cee <__swbuf_r+0x7e>
 8009cde:	0028      	movs	r0, r5
 8009ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce2:	0021      	movs	r1, r4
 8009ce4:	0030      	movs	r0, r6
 8009ce6:	f000 f805 	bl	8009cf4 <__swsetup_r>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0d3      	beq.n	8009c96 <__swbuf_r+0x26>
 8009cee:	2501      	movs	r5, #1
 8009cf0:	426d      	negs	r5, r5
 8009cf2:	e7f4      	b.n	8009cde <__swbuf_r+0x6e>

08009cf4 <__swsetup_r>:
 8009cf4:	4b30      	ldr	r3, [pc, #192]	; (8009db8 <__swsetup_r+0xc4>)
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	0005      	movs	r5, r0
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	000c      	movs	r4, r1
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d004      	beq.n	8009d0c <__swsetup_r+0x18>
 8009d02:	6a03      	ldr	r3, [r0, #32]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <__swsetup_r+0x18>
 8009d08:	f7fd fefe 	bl	8007b08 <__sinit>
 8009d0c:	230c      	movs	r3, #12
 8009d0e:	5ee2      	ldrsh	r2, [r4, r3]
 8009d10:	b293      	uxth	r3, r2
 8009d12:	0711      	lsls	r1, r2, #28
 8009d14:	d423      	bmi.n	8009d5e <__swsetup_r+0x6a>
 8009d16:	06d9      	lsls	r1, r3, #27
 8009d18:	d407      	bmi.n	8009d2a <__swsetup_r+0x36>
 8009d1a:	2309      	movs	r3, #9
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	3337      	adds	r3, #55	; 0x37
 8009d22:	4313      	orrs	r3, r2
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	4240      	negs	r0, r0
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
 8009d2a:	075b      	lsls	r3, r3, #29
 8009d2c:	d513      	bpl.n	8009d56 <__swsetup_r+0x62>
 8009d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d30:	2900      	cmp	r1, #0
 8009d32:	d008      	beq.n	8009d46 <__swsetup_r+0x52>
 8009d34:	0023      	movs	r3, r4
 8009d36:	3344      	adds	r3, #68	; 0x44
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <__swsetup_r+0x4e>
 8009d3c:	0028      	movs	r0, r5
 8009d3e:	f7fe feb3 	bl	8008aa8 <_free_r>
 8009d42:	2300      	movs	r3, #0
 8009d44:	6363      	str	r3, [r4, #52]	; 0x34
 8009d46:	2224      	movs	r2, #36	; 0x24
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	4393      	bics	r3, r2
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	2308      	movs	r3, #8
 8009d58:	89a2      	ldrh	r2, [r4, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10b      	bne.n	8009d7c <__swsetup_r+0x88>
 8009d64:	21a0      	movs	r1, #160	; 0xa0
 8009d66:	2280      	movs	r2, #128	; 0x80
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	0089      	lsls	r1, r1, #2
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	400b      	ands	r3, r1
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d003      	beq.n	8009d7c <__swsetup_r+0x88>
 8009d74:	0021      	movs	r1, r4
 8009d76:	0028      	movs	r0, r5
 8009d78:	f000 f892 	bl	8009ea0 <__smakebuf_r>
 8009d7c:	220c      	movs	r2, #12
 8009d7e:	5ea3      	ldrsh	r3, [r4, r2]
 8009d80:	2001      	movs	r0, #1
 8009d82:	001a      	movs	r2, r3
 8009d84:	b299      	uxth	r1, r3
 8009d86:	4002      	ands	r2, r0
 8009d88:	4203      	tst	r3, r0
 8009d8a:	d00f      	beq.n	8009dac <__swsetup_r+0xb8>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60a2      	str	r2, [r4, #8]
 8009d90:	6962      	ldr	r2, [r4, #20]
 8009d92:	4252      	negs	r2, r2
 8009d94:	61a2      	str	r2, [r4, #24]
 8009d96:	2000      	movs	r0, #0
 8009d98:	6922      	ldr	r2, [r4, #16]
 8009d9a:	4282      	cmp	r2, r0
 8009d9c:	d1c4      	bne.n	8009d28 <__swsetup_r+0x34>
 8009d9e:	0609      	lsls	r1, r1, #24
 8009da0:	d5c2      	bpl.n	8009d28 <__swsetup_r+0x34>
 8009da2:	2240      	movs	r2, #64	; 0x40
 8009da4:	4313      	orrs	r3, r2
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	3801      	subs	r0, #1
 8009daa:	e7bd      	b.n	8009d28 <__swsetup_r+0x34>
 8009dac:	0788      	lsls	r0, r1, #30
 8009dae:	d400      	bmi.n	8009db2 <__swsetup_r+0xbe>
 8009db0:	6962      	ldr	r2, [r4, #20]
 8009db2:	60a2      	str	r2, [r4, #8]
 8009db4:	e7ef      	b.n	8009d96 <__swsetup_r+0xa2>
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20000068 	.word	0x20000068

08009dbc <_raise_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	0004      	movs	r4, r0
 8009dc0:	000d      	movs	r5, r1
 8009dc2:	291f      	cmp	r1, #31
 8009dc4:	d904      	bls.n	8009dd0 <_raise_r+0x14>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	2001      	movs	r0, #1
 8009dcc:	4240      	negs	r0, r0
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <_raise_r+0x24>
 8009dd6:	008a      	lsls	r2, r1, #2
 8009dd8:	189b      	adds	r3, r3, r2
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d108      	bne.n	8009df2 <_raise_r+0x36>
 8009de0:	0020      	movs	r0, r4
 8009de2:	f000 f831 	bl	8009e48 <_getpid_r>
 8009de6:	002a      	movs	r2, r5
 8009de8:	0001      	movs	r1, r0
 8009dea:	0020      	movs	r0, r4
 8009dec:	f000 f81a 	bl	8009e24 <_kill_r>
 8009df0:	e7ed      	b.n	8009dce <_raise_r+0x12>
 8009df2:	2000      	movs	r0, #0
 8009df4:	2a01      	cmp	r2, #1
 8009df6:	d0ea      	beq.n	8009dce <_raise_r+0x12>
 8009df8:	1c51      	adds	r1, r2, #1
 8009dfa:	d103      	bne.n	8009e04 <_raise_r+0x48>
 8009dfc:	2316      	movs	r3, #22
 8009dfe:	3001      	adds	r0, #1
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	e7e4      	b.n	8009dce <_raise_r+0x12>
 8009e04:	2400      	movs	r4, #0
 8009e06:	0028      	movs	r0, r5
 8009e08:	601c      	str	r4, [r3, #0]
 8009e0a:	4790      	blx	r2
 8009e0c:	0020      	movs	r0, r4
 8009e0e:	e7de      	b.n	8009dce <_raise_r+0x12>

08009e10 <raise>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	4b03      	ldr	r3, [pc, #12]	; (8009e20 <raise+0x10>)
 8009e14:	0001      	movs	r1, r0
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	f7ff ffd0 	bl	8009dbc <_raise_r>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	46c0      	nop			; (mov r8, r8)
 8009e20:	20000068 	.word	0x20000068

08009e24 <_kill_r>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b570      	push	{r4, r5, r6, lr}
 8009e28:	4d06      	ldr	r5, [pc, #24]	; (8009e44 <_kill_r+0x20>)
 8009e2a:	0004      	movs	r4, r0
 8009e2c:	0008      	movs	r0, r1
 8009e2e:	0011      	movs	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f9 f877 	bl	8002f24 <_kill>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d103      	bne.n	8009e42 <_kill_r+0x1e>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d000      	beq.n	8009e42 <_kill_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	20000508 	.word	0x20000508

08009e48 <_getpid_r>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	f7f9 f865 	bl	8002f18 <_getpid>
 8009e4e:	bd10      	pop	{r4, pc}

08009e50 <__swhatbuf_r>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	000e      	movs	r6, r1
 8009e54:	001d      	movs	r5, r3
 8009e56:	230e      	movs	r3, #14
 8009e58:	5ec9      	ldrsh	r1, [r1, r3]
 8009e5a:	0014      	movs	r4, r2
 8009e5c:	b096      	sub	sp, #88	; 0x58
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	da0c      	bge.n	8009e7c <__swhatbuf_r+0x2c>
 8009e62:	89b2      	ldrh	r2, [r6, #12]
 8009e64:	2380      	movs	r3, #128	; 0x80
 8009e66:	0011      	movs	r1, r2
 8009e68:	4019      	ands	r1, r3
 8009e6a:	421a      	tst	r2, r3
 8009e6c:	d013      	beq.n	8009e96 <__swhatbuf_r+0x46>
 8009e6e:	2100      	movs	r1, #0
 8009e70:	3b40      	subs	r3, #64	; 0x40
 8009e72:	2000      	movs	r0, #0
 8009e74:	6029      	str	r1, [r5, #0]
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	b016      	add	sp, #88	; 0x58
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	466a      	mov	r2, sp
 8009e7e:	f000 f84d 	bl	8009f1c <_fstat_r>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	dbed      	blt.n	8009e62 <__swhatbuf_r+0x12>
 8009e86:	23f0      	movs	r3, #240	; 0xf0
 8009e88:	9901      	ldr	r1, [sp, #4]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	4019      	ands	r1, r3
 8009e8e:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <__swhatbuf_r+0x4c>)
 8009e90:	18c9      	adds	r1, r1, r3
 8009e92:	424b      	negs	r3, r1
 8009e94:	4159      	adcs	r1, r3
 8009e96:	2380      	movs	r3, #128	; 0x80
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	e7ea      	b.n	8009e72 <__swhatbuf_r+0x22>
 8009e9c:	ffffe000 	.word	0xffffe000

08009ea0 <__smakebuf_r>:
 8009ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea2:	2602      	movs	r6, #2
 8009ea4:	898b      	ldrh	r3, [r1, #12]
 8009ea6:	0005      	movs	r5, r0
 8009ea8:	000c      	movs	r4, r1
 8009eaa:	4233      	tst	r3, r6
 8009eac:	d006      	beq.n	8009ebc <__smakebuf_r+0x1c>
 8009eae:	0023      	movs	r3, r4
 8009eb0:	3347      	adds	r3, #71	; 0x47
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	6123      	str	r3, [r4, #16]
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	6163      	str	r3, [r4, #20]
 8009eba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ebc:	466a      	mov	r2, sp
 8009ebe:	ab01      	add	r3, sp, #4
 8009ec0:	f7ff ffc6 	bl	8009e50 <__swhatbuf_r>
 8009ec4:	9900      	ldr	r1, [sp, #0]
 8009ec6:	0007      	movs	r7, r0
 8009ec8:	0028      	movs	r0, r5
 8009eca:	f7fe fe63 	bl	8008b94 <_malloc_r>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d108      	bne.n	8009ee4 <__smakebuf_r+0x44>
 8009ed2:	220c      	movs	r2, #12
 8009ed4:	5ea3      	ldrsh	r3, [r4, r2]
 8009ed6:	059a      	lsls	r2, r3, #22
 8009ed8:	d4ef      	bmi.n	8009eba <__smakebuf_r+0x1a>
 8009eda:	2203      	movs	r2, #3
 8009edc:	4393      	bics	r3, r2
 8009ede:	431e      	orrs	r6, r3
 8009ee0:	81a6      	strh	r6, [r4, #12]
 8009ee2:	e7e4      	b.n	8009eae <__smakebuf_r+0xe>
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	89a2      	ldrh	r2, [r4, #12]
 8009ee8:	6020      	str	r0, [r4, #0]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	6120      	str	r0, [r4, #16]
 8009ef2:	6163      	str	r3, [r4, #20]
 8009ef4:	9b01      	ldr	r3, [sp, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00c      	beq.n	8009f14 <__smakebuf_r+0x74>
 8009efa:	0028      	movs	r0, r5
 8009efc:	230e      	movs	r3, #14
 8009efe:	5ee1      	ldrsh	r1, [r4, r3]
 8009f00:	f000 f81e 	bl	8009f40 <_isatty_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d005      	beq.n	8009f14 <__smakebuf_r+0x74>
 8009f08:	2303      	movs	r3, #3
 8009f0a:	89a2      	ldrh	r2, [r4, #12]
 8009f0c:	439a      	bics	r2, r3
 8009f0e:	3b02      	subs	r3, #2
 8009f10:	4313      	orrs	r3, r2
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	433b      	orrs	r3, r7
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	e7ce      	b.n	8009eba <__smakebuf_r+0x1a>

08009f1c <_fstat_r>:
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	4d06      	ldr	r5, [pc, #24]	; (8009f3c <_fstat_r+0x20>)
 8009f22:	0004      	movs	r4, r0
 8009f24:	0008      	movs	r0, r1
 8009f26:	0011      	movs	r1, r2
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	f7f9 f85a 	bl	8002fe2 <_fstat>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d103      	bne.n	8009f3a <_fstat_r+0x1e>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d000      	beq.n	8009f3a <_fstat_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	20000508 	.word	0x20000508

08009f40 <_isatty_r>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_isatty_r+0x20>)
 8009f46:	0004      	movs	r4, r0
 8009f48:	0008      	movs	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f9 f857 	bl	8002ffe <_isatty>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d103      	bne.n	8009f5c <_isatty_r+0x1c>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d000      	beq.n	8009f5c <_isatty_r+0x1c>
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	46c0      	nop			; (mov r8, r8)
 8009f60:	20000508 	.word	0x20000508

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr

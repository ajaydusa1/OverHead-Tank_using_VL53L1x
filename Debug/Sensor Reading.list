
Sensor Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  0800e270  0800e270  0001e270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9a4  0800e9a4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9a4  0800e9a4  0001e9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9ac  0800e9ac  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9ac  0800e9ac  0001e9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9b0  0800e9b0  0001e9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  20000208  0800ebbc  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  0800ebbc  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024ae5  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fcd  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00047d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5e  00000000  00000000  000490e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c809  00000000  00000000  0004a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198c9  00000000  00000000  00066847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad44d  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a94  00000000  00000000  0012d560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00132ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000208 	.word	0x20000208
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e254 	.word	0x0800e254

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000020c 	.word	0x2000020c
 8000100:	0800e254 	.word	0x0800e254

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f843 	bl	80014c4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff93 	bl	8001374 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f835 	bl	80014c4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f82b 	bl	80014c4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffbb 	bl	80013f8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffb1 	bl	80013f8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f834 	bl	8000540 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__udivmoddi4>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	4657      	mov	r7, sl
 8000544:	464e      	mov	r6, r9
 8000546:	4645      	mov	r5, r8
 8000548:	46de      	mov	lr, fp
 800054a:	b5e0      	push	{r5, r6, r7, lr}
 800054c:	0004      	movs	r4, r0
 800054e:	000d      	movs	r5, r1
 8000550:	4692      	mov	sl, r2
 8000552:	4699      	mov	r9, r3
 8000554:	b083      	sub	sp, #12
 8000556:	428b      	cmp	r3, r1
 8000558:	d830      	bhi.n	80005bc <__udivmoddi4+0x7c>
 800055a:	d02d      	beq.n	80005b8 <__udivmoddi4+0x78>
 800055c:	4649      	mov	r1, r9
 800055e:	4650      	mov	r0, sl
 8000560:	f001 ff20 	bl	80023a4 <__clzdi2>
 8000564:	0029      	movs	r1, r5
 8000566:	0006      	movs	r6, r0
 8000568:	0020      	movs	r0, r4
 800056a:	f001 ff1b 	bl	80023a4 <__clzdi2>
 800056e:	1a33      	subs	r3, r6, r0
 8000570:	4698      	mov	r8, r3
 8000572:	3b20      	subs	r3, #32
 8000574:	d434      	bmi.n	80005e0 <__udivmoddi4+0xa0>
 8000576:	469b      	mov	fp, r3
 8000578:	4653      	mov	r3, sl
 800057a:	465a      	mov	r2, fp
 800057c:	4093      	lsls	r3, r2
 800057e:	4642      	mov	r2, r8
 8000580:	001f      	movs	r7, r3
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	001e      	movs	r6, r3
 8000588:	42af      	cmp	r7, r5
 800058a:	d83b      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800058c:	42af      	cmp	r7, r5
 800058e:	d100      	bne.n	8000592 <__udivmoddi4+0x52>
 8000590:	e079      	b.n	8000686 <__udivmoddi4+0x146>
 8000592:	465b      	mov	r3, fp
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	41bd      	sbcs	r5, r7
 8000598:	2b00      	cmp	r3, #0
 800059a:	da00      	bge.n	800059e <__udivmoddi4+0x5e>
 800059c:	e076      	b.n	800068c <__udivmoddi4+0x14c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	465a      	mov	r2, fp
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	4642      	mov	r2, r8
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	e029      	b.n	800060c <__udivmoddi4+0xcc>
 80005b8:	4282      	cmp	r2, r0
 80005ba:	d9cf      	bls.n	800055c <__udivmoddi4+0x1c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2300      	movs	r3, #0
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <__udivmoddi4+0x8e>
 80005ca:	601c      	str	r4, [r3, #0]
 80005cc:	605d      	str	r5, [r3, #4]
 80005ce:	9800      	ldr	r0, [sp, #0]
 80005d0:	9901      	ldr	r1, [sp, #4]
 80005d2:	b003      	add	sp, #12
 80005d4:	bcf0      	pop	{r4, r5, r6, r7}
 80005d6:	46bb      	mov	fp, r7
 80005d8:	46b2      	mov	sl, r6
 80005da:	46a9      	mov	r9, r5
 80005dc:	46a0      	mov	r8, r4
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	4642      	mov	r2, r8
 80005e2:	469b      	mov	fp, r3
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	4652      	mov	r2, sl
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	4641      	mov	r1, r8
 80005ee:	0013      	movs	r3, r2
 80005f0:	464a      	mov	r2, r9
 80005f2:	408a      	lsls	r2, r1
 80005f4:	0017      	movs	r7, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	431f      	orrs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d9c3      	bls.n	800058c <__udivmoddi4+0x4c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4643      	mov	r3, r8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0d8      	beq.n	80005c4 <__udivmoddi4+0x84>
 8000612:	07fb      	lsls	r3, r7, #31
 8000614:	0872      	lsrs	r2, r6, #1
 8000616:	431a      	orrs	r2, r3
 8000618:	4646      	mov	r6, r8
 800061a:	087b      	lsrs	r3, r7, #1
 800061c:	e00e      	b.n	800063c <__udivmoddi4+0xfc>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d101      	bne.n	8000626 <__udivmoddi4+0xe6>
 8000622:	42a2      	cmp	r2, r4
 8000624:	d80c      	bhi.n	8000640 <__udivmoddi4+0x100>
 8000626:	1aa4      	subs	r4, r4, r2
 8000628:	419d      	sbcs	r5, r3
 800062a:	2001      	movs	r0, #1
 800062c:	1924      	adds	r4, r4, r4
 800062e:	416d      	adcs	r5, r5
 8000630:	2100      	movs	r1, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	1824      	adds	r4, r4, r0
 8000636:	414d      	adcs	r5, r1
 8000638:	2e00      	cmp	r6, #0
 800063a:	d006      	beq.n	800064a <__udivmoddi4+0x10a>
 800063c:	42ab      	cmp	r3, r5
 800063e:	d9ee      	bls.n	800061e <__udivmoddi4+0xde>
 8000640:	3e01      	subs	r6, #1
 8000642:	1924      	adds	r4, r4, r4
 8000644:	416d      	adcs	r5, r5
 8000646:	2e00      	cmp	r6, #0
 8000648:	d1f8      	bne.n	800063c <__udivmoddi4+0xfc>
 800064a:	9800      	ldr	r0, [sp, #0]
 800064c:	9901      	ldr	r1, [sp, #4]
 800064e:	465b      	mov	r3, fp
 8000650:	1900      	adds	r0, r0, r4
 8000652:	4169      	adcs	r1, r5
 8000654:	2b00      	cmp	r3, #0
 8000656:	db24      	blt.n	80006a2 <__udivmoddi4+0x162>
 8000658:	002b      	movs	r3, r5
 800065a:	465a      	mov	r2, fp
 800065c:	4644      	mov	r4, r8
 800065e:	40d3      	lsrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	40e2      	lsrs	r2, r4
 8000664:	001c      	movs	r4, r3
 8000666:	465b      	mov	r3, fp
 8000668:	0015      	movs	r5, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	db2a      	blt.n	80006c4 <__udivmoddi4+0x184>
 800066e:	0026      	movs	r6, r4
 8000670:	409e      	lsls	r6, r3
 8000672:	0033      	movs	r3, r6
 8000674:	0026      	movs	r6, r4
 8000676:	4647      	mov	r7, r8
 8000678:	40be      	lsls	r6, r7
 800067a:	0032      	movs	r2, r6
 800067c:	1a80      	subs	r0, r0, r2
 800067e:	4199      	sbcs	r1, r3
 8000680:	9000      	str	r0, [sp, #0]
 8000682:	9101      	str	r1, [sp, #4]
 8000684:	e79e      	b.n	80005c4 <__udivmoddi4+0x84>
 8000686:	42a3      	cmp	r3, r4
 8000688:	d8bc      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800068a:	e782      	b.n	8000592 <__udivmoddi4+0x52>
 800068c:	4642      	mov	r2, r8
 800068e:	2320      	movs	r3, #32
 8000690:	2100      	movs	r1, #0
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	2200      	movs	r2, #0
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	40da      	lsrs	r2, r3
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	e785      	b.n	80005ae <__udivmoddi4+0x6e>
 80006a2:	4642      	mov	r2, r8
 80006a4:	2320      	movs	r3, #32
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	4646      	mov	r6, r8
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	40f3      	lsrs	r3, r6
 80006b2:	4644      	mov	r4, r8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	002a      	movs	r2, r5
 80006b8:	40e2      	lsrs	r2, r4
 80006ba:	001c      	movs	r4, r3
 80006bc:	465b      	mov	r3, fp
 80006be:	0015      	movs	r5, r2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dad4      	bge.n	800066e <__udivmoddi4+0x12e>
 80006c4:	4642      	mov	r2, r8
 80006c6:	002f      	movs	r7, r5
 80006c8:	2320      	movs	r3, #32
 80006ca:	0026      	movs	r6, r4
 80006cc:	4097      	lsls	r7, r2
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	40de      	lsrs	r6, r3
 80006d2:	003b      	movs	r3, r7
 80006d4:	4333      	orrs	r3, r6
 80006d6:	e7cd      	b.n	8000674 <__udivmoddi4+0x134>

080006d8 <__aeabi_dadd>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464f      	mov	r7, r9
 80006dc:	4646      	mov	r6, r8
 80006de:	46d6      	mov	lr, sl
 80006e0:	0004      	movs	r4, r0
 80006e2:	b5c0      	push	{r6, r7, lr}
 80006e4:	001f      	movs	r7, r3
 80006e6:	030b      	lsls	r3, r1, #12
 80006e8:	0010      	movs	r0, r2
 80006ea:	004e      	lsls	r6, r1, #1
 80006ec:	0a5b      	lsrs	r3, r3, #9
 80006ee:	0fcd      	lsrs	r5, r1, #31
 80006f0:	0f61      	lsrs	r1, r4, #29
 80006f2:	007a      	lsls	r2, r7, #1
 80006f4:	4319      	orrs	r1, r3
 80006f6:	00e3      	lsls	r3, r4, #3
 80006f8:	033c      	lsls	r4, r7, #12
 80006fa:	0fff      	lsrs	r7, r7, #31
 80006fc:	46bc      	mov	ip, r7
 80006fe:	0a64      	lsrs	r4, r4, #9
 8000700:	0f47      	lsrs	r7, r0, #29
 8000702:	4327      	orrs	r7, r4
 8000704:	0d76      	lsrs	r6, r6, #21
 8000706:	0d52      	lsrs	r2, r2, #21
 8000708:	00c0      	lsls	r0, r0, #3
 800070a:	46b9      	mov	r9, r7
 800070c:	4680      	mov	r8, r0
 800070e:	1ab7      	subs	r7, r6, r2
 8000710:	4565      	cmp	r5, ip
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x3e>
 8000714:	e09b      	b.n	800084e <__aeabi_dadd+0x176>
 8000716:	2f00      	cmp	r7, #0
 8000718:	dc00      	bgt.n	800071c <__aeabi_dadd+0x44>
 800071a:	e084      	b.n	8000826 <__aeabi_dadd+0x14e>
 800071c:	2a00      	cmp	r2, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x4a>
 8000720:	e0be      	b.n	80008a0 <__aeabi_dadd+0x1c8>
 8000722:	4ac8      	ldr	r2, [pc, #800]	; (8000a44 <__aeabi_dadd+0x36c>)
 8000724:	4296      	cmp	r6, r2
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x52>
 8000728:	e124      	b.n	8000974 <__aeabi_dadd+0x29c>
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	464c      	mov	r4, r9
 800072e:	0412      	lsls	r2, r2, #16
 8000730:	4314      	orrs	r4, r2
 8000732:	46a1      	mov	r9, r4
 8000734:	2f38      	cmp	r7, #56	; 0x38
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0x62>
 8000738:	e167      	b.n	8000a0a <__aeabi_dadd+0x332>
 800073a:	2f1f      	cmp	r7, #31
 800073c:	dd00      	ble.n	8000740 <__aeabi_dadd+0x68>
 800073e:	e1d6      	b.n	8000aee <__aeabi_dadd+0x416>
 8000740:	2220      	movs	r2, #32
 8000742:	464c      	mov	r4, r9
 8000744:	1bd2      	subs	r2, r2, r7
 8000746:	4094      	lsls	r4, r2
 8000748:	46a2      	mov	sl, r4
 800074a:	4644      	mov	r4, r8
 800074c:	40fc      	lsrs	r4, r7
 800074e:	0020      	movs	r0, r4
 8000750:	4654      	mov	r4, sl
 8000752:	4304      	orrs	r4, r0
 8000754:	4640      	mov	r0, r8
 8000756:	4090      	lsls	r0, r2
 8000758:	1e42      	subs	r2, r0, #1
 800075a:	4190      	sbcs	r0, r2
 800075c:	464a      	mov	r2, r9
 800075e:	40fa      	lsrs	r2, r7
 8000760:	4304      	orrs	r4, r0
 8000762:	1a89      	subs	r1, r1, r2
 8000764:	1b1c      	subs	r4, r3, r4
 8000766:	42a3      	cmp	r3, r4
 8000768:	4192      	sbcs	r2, r2
 800076a:	4252      	negs	r2, r2
 800076c:	1a8b      	subs	r3, r1, r2
 800076e:	469a      	mov	sl, r3
 8000770:	4653      	mov	r3, sl
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	d400      	bmi.n	8000778 <__aeabi_dadd+0xa0>
 8000776:	e0d4      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000778:	4653      	mov	r3, sl
 800077a:	025a      	lsls	r2, r3, #9
 800077c:	0a53      	lsrs	r3, r2, #9
 800077e:	469a      	mov	sl, r3
 8000780:	4653      	mov	r3, sl
 8000782:	2b00      	cmp	r3, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0xb0>
 8000786:	e104      	b.n	8000992 <__aeabi_dadd+0x2ba>
 8000788:	4650      	mov	r0, sl
 800078a:	f001 fded 	bl	8002368 <__clzsi2>
 800078e:	0003      	movs	r3, r0
 8000790:	3b08      	subs	r3, #8
 8000792:	2220      	movs	r2, #32
 8000794:	0020      	movs	r0, r4
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	4651      	mov	r1, sl
 800079a:	40d0      	lsrs	r0, r2
 800079c:	4099      	lsls	r1, r3
 800079e:	0002      	movs	r2, r0
 80007a0:	409c      	lsls	r4, r3
 80007a2:	430a      	orrs	r2, r1
 80007a4:	42b3      	cmp	r3, r6
 80007a6:	da00      	bge.n	80007aa <__aeabi_dadd+0xd2>
 80007a8:	e102      	b.n	80009b0 <__aeabi_dadd+0x2d8>
 80007aa:	1b9b      	subs	r3, r3, r6
 80007ac:	1c59      	adds	r1, r3, #1
 80007ae:	291f      	cmp	r1, #31
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dadd+0xdc>
 80007b2:	e0a7      	b.n	8000904 <__aeabi_dadd+0x22c>
 80007b4:	2320      	movs	r3, #32
 80007b6:	0010      	movs	r0, r2
 80007b8:	0026      	movs	r6, r4
 80007ba:	1a5b      	subs	r3, r3, r1
 80007bc:	409c      	lsls	r4, r3
 80007be:	4098      	lsls	r0, r3
 80007c0:	40ce      	lsrs	r6, r1
 80007c2:	40ca      	lsrs	r2, r1
 80007c4:	1e63      	subs	r3, r4, #1
 80007c6:	419c      	sbcs	r4, r3
 80007c8:	4330      	orrs	r0, r6
 80007ca:	4692      	mov	sl, r2
 80007cc:	2600      	movs	r6, #0
 80007ce:	4304      	orrs	r4, r0
 80007d0:	0763      	lsls	r3, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x110>
 80007d4:	230f      	movs	r3, #15
 80007d6:	4023      	ands	r3, r4
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x110>
 80007dc:	1d23      	adds	r3, r4, #4
 80007de:	42a3      	cmp	r3, r4
 80007e0:	41a4      	sbcs	r4, r4
 80007e2:	4264      	negs	r4, r4
 80007e4:	44a2      	add	sl, r4
 80007e6:	001c      	movs	r4, r3
 80007e8:	4653      	mov	r3, sl
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	d400      	bmi.n	80007f0 <__aeabi_dadd+0x118>
 80007ee:	e09b      	b.n	8000928 <__aeabi_dadd+0x250>
 80007f0:	4b94      	ldr	r3, [pc, #592]	; (8000a44 <__aeabi_dadd+0x36c>)
 80007f2:	3601      	adds	r6, #1
 80007f4:	429e      	cmp	r6, r3
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x122>
 80007f8:	e0b8      	b.n	800096c <__aeabi_dadd+0x294>
 80007fa:	4653      	mov	r3, sl
 80007fc:	4992      	ldr	r1, [pc, #584]	; (8000a48 <__aeabi_dadd+0x370>)
 80007fe:	08e4      	lsrs	r4, r4, #3
 8000800:	400b      	ands	r3, r1
 8000802:	0019      	movs	r1, r3
 8000804:	075b      	lsls	r3, r3, #29
 8000806:	4323      	orrs	r3, r4
 8000808:	0572      	lsls	r2, r6, #21
 800080a:	024c      	lsls	r4, r1, #9
 800080c:	0b24      	lsrs	r4, r4, #12
 800080e:	0d52      	lsrs	r2, r2, #21
 8000810:	0512      	lsls	r2, r2, #20
 8000812:	07ed      	lsls	r5, r5, #31
 8000814:	4322      	orrs	r2, r4
 8000816:	432a      	orrs	r2, r5
 8000818:	0018      	movs	r0, r3
 800081a:	0011      	movs	r1, r2
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	2f00      	cmp	r7, #0
 8000828:	d048      	beq.n	80008bc <__aeabi_dadd+0x1e4>
 800082a:	1b97      	subs	r7, r2, r6
 800082c:	2e00      	cmp	r6, #0
 800082e:	d000      	beq.n	8000832 <__aeabi_dadd+0x15a>
 8000830:	e10e      	b.n	8000a50 <__aeabi_dadd+0x378>
 8000832:	000c      	movs	r4, r1
 8000834:	431c      	orrs	r4, r3
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x162>
 8000838:	e1b7      	b.n	8000baa <__aeabi_dadd+0x4d2>
 800083a:	1e7c      	subs	r4, r7, #1
 800083c:	2f01      	cmp	r7, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x16a>
 8000840:	e226      	b.n	8000c90 <__aeabi_dadd+0x5b8>
 8000842:	4d80      	ldr	r5, [pc, #512]	; (8000a44 <__aeabi_dadd+0x36c>)
 8000844:	42af      	cmp	r7, r5
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x172>
 8000848:	e1d5      	b.n	8000bf6 <__aeabi_dadd+0x51e>
 800084a:	0027      	movs	r7, r4
 800084c:	e107      	b.n	8000a5e <__aeabi_dadd+0x386>
 800084e:	2f00      	cmp	r7, #0
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dadd+0x17c>
 8000852:	e0b2      	b.n	80009ba <__aeabi_dadd+0x2e2>
 8000854:	2a00      	cmp	r2, #0
 8000856:	d047      	beq.n	80008e8 <__aeabi_dadd+0x210>
 8000858:	4a7a      	ldr	r2, [pc, #488]	; (8000a44 <__aeabi_dadd+0x36c>)
 800085a:	4296      	cmp	r6, r2
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x188>
 800085e:	e089      	b.n	8000974 <__aeabi_dadd+0x29c>
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	464c      	mov	r4, r9
 8000864:	0412      	lsls	r2, r2, #16
 8000866:	4314      	orrs	r4, r2
 8000868:	46a1      	mov	r9, r4
 800086a:	2f38      	cmp	r7, #56	; 0x38
 800086c:	dc6b      	bgt.n	8000946 <__aeabi_dadd+0x26e>
 800086e:	2f1f      	cmp	r7, #31
 8000870:	dc00      	bgt.n	8000874 <__aeabi_dadd+0x19c>
 8000872:	e16e      	b.n	8000b52 <__aeabi_dadd+0x47a>
 8000874:	003a      	movs	r2, r7
 8000876:	4648      	mov	r0, r9
 8000878:	3a20      	subs	r2, #32
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4684      	mov	ip, r0
 800087e:	2f20      	cmp	r7, #32
 8000880:	d007      	beq.n	8000892 <__aeabi_dadd+0x1ba>
 8000882:	2240      	movs	r2, #64	; 0x40
 8000884:	4648      	mov	r0, r9
 8000886:	1bd2      	subs	r2, r2, r7
 8000888:	4090      	lsls	r0, r2
 800088a:	0002      	movs	r2, r0
 800088c:	4640      	mov	r0, r8
 800088e:	4310      	orrs	r0, r2
 8000890:	4680      	mov	r8, r0
 8000892:	4640      	mov	r0, r8
 8000894:	1e42      	subs	r2, r0, #1
 8000896:	4190      	sbcs	r0, r2
 8000898:	4662      	mov	r2, ip
 800089a:	0004      	movs	r4, r0
 800089c:	4314      	orrs	r4, r2
 800089e:	e057      	b.n	8000950 <__aeabi_dadd+0x278>
 80008a0:	464a      	mov	r2, r9
 80008a2:	4302      	orrs	r2, r0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x1d0>
 80008a6:	e103      	b.n	8000ab0 <__aeabi_dadd+0x3d8>
 80008a8:	1e7a      	subs	r2, r7, #1
 80008aa:	2f01      	cmp	r7, #1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x1d8>
 80008ae:	e193      	b.n	8000bd8 <__aeabi_dadd+0x500>
 80008b0:	4c64      	ldr	r4, [pc, #400]	; (8000a44 <__aeabi_dadd+0x36c>)
 80008b2:	42a7      	cmp	r7, r4
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x1e0>
 80008b6:	e18a      	b.n	8000bce <__aeabi_dadd+0x4f6>
 80008b8:	0017      	movs	r7, r2
 80008ba:	e73b      	b.n	8000734 <__aeabi_dadd+0x5c>
 80008bc:	4c63      	ldr	r4, [pc, #396]	; (8000a4c <__aeabi_dadd+0x374>)
 80008be:	1c72      	adds	r2, r6, #1
 80008c0:	4222      	tst	r2, r4
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dadd+0x1ee>
 80008c4:	e0e0      	b.n	8000a88 <__aeabi_dadd+0x3b0>
 80008c6:	000a      	movs	r2, r1
 80008c8:	431a      	orrs	r2, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x1f8>
 80008ce:	e174      	b.n	8000bba <__aeabi_dadd+0x4e2>
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1fe>
 80008d4:	e1d0      	b.n	8000c78 <__aeabi_dadd+0x5a0>
 80008d6:	464a      	mov	r2, r9
 80008d8:	4302      	orrs	r2, r0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x206>
 80008dc:	e1e3      	b.n	8000ca6 <__aeabi_dadd+0x5ce>
 80008de:	074a      	lsls	r2, r1, #29
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	08c9      	lsrs	r1, r1, #3
 80008e6:	e029      	b.n	800093c <__aeabi_dadd+0x264>
 80008e8:	464a      	mov	r2, r9
 80008ea:	4302      	orrs	r2, r0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x218>
 80008ee:	e17d      	b.n	8000bec <__aeabi_dadd+0x514>
 80008f0:	1e7a      	subs	r2, r7, #1
 80008f2:	2f01      	cmp	r7, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x220>
 80008f6:	e0e0      	b.n	8000aba <__aeabi_dadd+0x3e2>
 80008f8:	4c52      	ldr	r4, [pc, #328]	; (8000a44 <__aeabi_dadd+0x36c>)
 80008fa:	42a7      	cmp	r7, r4
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x228>
 80008fe:	e166      	b.n	8000bce <__aeabi_dadd+0x4f6>
 8000900:	0017      	movs	r7, r2
 8000902:	e7b2      	b.n	800086a <__aeabi_dadd+0x192>
 8000904:	0010      	movs	r0, r2
 8000906:	3b1f      	subs	r3, #31
 8000908:	40d8      	lsrs	r0, r3
 800090a:	2920      	cmp	r1, #32
 800090c:	d003      	beq.n	8000916 <__aeabi_dadd+0x23e>
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	409a      	lsls	r2, r3
 8000914:	4314      	orrs	r4, r2
 8000916:	1e63      	subs	r3, r4, #1
 8000918:	419c      	sbcs	r4, r3
 800091a:	2300      	movs	r3, #0
 800091c:	2600      	movs	r6, #0
 800091e:	469a      	mov	sl, r3
 8000920:	4304      	orrs	r4, r0
 8000922:	0763      	lsls	r3, r4, #29
 8000924:	d000      	beq.n	8000928 <__aeabi_dadd+0x250>
 8000926:	e755      	b.n	80007d4 <__aeabi_dadd+0xfc>
 8000928:	4652      	mov	r2, sl
 800092a:	08e3      	lsrs	r3, r4, #3
 800092c:	0752      	lsls	r2, r2, #29
 800092e:	4313      	orrs	r3, r2
 8000930:	4652      	mov	r2, sl
 8000932:	0037      	movs	r7, r6
 8000934:	08d1      	lsrs	r1, r2, #3
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <__aeabi_dadd+0x36c>)
 8000938:	4297      	cmp	r7, r2
 800093a:	d01f      	beq.n	800097c <__aeabi_dadd+0x2a4>
 800093c:	0309      	lsls	r1, r1, #12
 800093e:	057a      	lsls	r2, r7, #21
 8000940:	0b0c      	lsrs	r4, r1, #12
 8000942:	0d52      	lsrs	r2, r2, #21
 8000944:	e764      	b.n	8000810 <__aeabi_dadd+0x138>
 8000946:	4642      	mov	r2, r8
 8000948:	464c      	mov	r4, r9
 800094a:	4314      	orrs	r4, r2
 800094c:	1e62      	subs	r2, r4, #1
 800094e:	4194      	sbcs	r4, r2
 8000950:	18e4      	adds	r4, r4, r3
 8000952:	429c      	cmp	r4, r3
 8000954:	4192      	sbcs	r2, r2
 8000956:	4252      	negs	r2, r2
 8000958:	4692      	mov	sl, r2
 800095a:	448a      	add	sl, r1
 800095c:	4653      	mov	r3, sl
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	d5df      	bpl.n	8000922 <__aeabi_dadd+0x24a>
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <__aeabi_dadd+0x36c>)
 8000964:	3601      	adds	r6, #1
 8000966:	429e      	cmp	r6, r3
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x294>
 800096a:	e0b3      	b.n	8000ad4 <__aeabi_dadd+0x3fc>
 800096c:	0032      	movs	r2, r6
 800096e:	2400      	movs	r4, #0
 8000970:	2300      	movs	r3, #0
 8000972:	e74d      	b.n	8000810 <__aeabi_dadd+0x138>
 8000974:	074a      	lsls	r2, r1, #29
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	4313      	orrs	r3, r2
 800097a:	08c9      	lsrs	r1, r1, #3
 800097c:	001a      	movs	r2, r3
 800097e:	430a      	orrs	r2, r1
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x2ac>
 8000982:	e200      	b.n	8000d86 <__aeabi_dadd+0x6ae>
 8000984:	2480      	movs	r4, #128	; 0x80
 8000986:	0324      	lsls	r4, r4, #12
 8000988:	430c      	orrs	r4, r1
 800098a:	0324      	lsls	r4, r4, #12
 800098c:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <__aeabi_dadd+0x36c>)
 800098e:	0b24      	lsrs	r4, r4, #12
 8000990:	e73e      	b.n	8000810 <__aeabi_dadd+0x138>
 8000992:	0020      	movs	r0, r4
 8000994:	f001 fce8 	bl	8002368 <__clzsi2>
 8000998:	0003      	movs	r3, r0
 800099a:	3318      	adds	r3, #24
 800099c:	2b1f      	cmp	r3, #31
 800099e:	dc00      	bgt.n	80009a2 <__aeabi_dadd+0x2ca>
 80009a0:	e6f7      	b.n	8000792 <__aeabi_dadd+0xba>
 80009a2:	0022      	movs	r2, r4
 80009a4:	3808      	subs	r0, #8
 80009a6:	4082      	lsls	r2, r0
 80009a8:	2400      	movs	r4, #0
 80009aa:	42b3      	cmp	r3, r6
 80009ac:	db00      	blt.n	80009b0 <__aeabi_dadd+0x2d8>
 80009ae:	e6fc      	b.n	80007aa <__aeabi_dadd+0xd2>
 80009b0:	1af6      	subs	r6, r6, r3
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <__aeabi_dadd+0x370>)
 80009b4:	401a      	ands	r2, r3
 80009b6:	4692      	mov	sl, r2
 80009b8:	e70a      	b.n	80007d0 <__aeabi_dadd+0xf8>
 80009ba:	2f00      	cmp	r7, #0
 80009bc:	d02b      	beq.n	8000a16 <__aeabi_dadd+0x33e>
 80009be:	1b97      	subs	r7, r2, r6
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x2ee>
 80009c4:	e0b8      	b.n	8000b38 <__aeabi_dadd+0x460>
 80009c6:	4c1f      	ldr	r4, [pc, #124]	; (8000a44 <__aeabi_dadd+0x36c>)
 80009c8:	42a2      	cmp	r2, r4
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x2f6>
 80009cc:	e11c      	b.n	8000c08 <__aeabi_dadd+0x530>
 80009ce:	2480      	movs	r4, #128	; 0x80
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	4321      	orrs	r1, r4
 80009d4:	2f38      	cmp	r7, #56	; 0x38
 80009d6:	dd00      	ble.n	80009da <__aeabi_dadd+0x302>
 80009d8:	e11e      	b.n	8000c18 <__aeabi_dadd+0x540>
 80009da:	2f1f      	cmp	r7, #31
 80009dc:	dd00      	ble.n	80009e0 <__aeabi_dadd+0x308>
 80009de:	e19e      	b.n	8000d1e <__aeabi_dadd+0x646>
 80009e0:	2620      	movs	r6, #32
 80009e2:	000c      	movs	r4, r1
 80009e4:	1bf6      	subs	r6, r6, r7
 80009e6:	0018      	movs	r0, r3
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	40b4      	lsls	r4, r6
 80009ec:	40f8      	lsrs	r0, r7
 80009ee:	1e5e      	subs	r6, r3, #1
 80009f0:	41b3      	sbcs	r3, r6
 80009f2:	40f9      	lsrs	r1, r7
 80009f4:	4304      	orrs	r4, r0
 80009f6:	431c      	orrs	r4, r3
 80009f8:	4489      	add	r9, r1
 80009fa:	4444      	add	r4, r8
 80009fc:	4544      	cmp	r4, r8
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	425b      	negs	r3, r3
 8000a02:	444b      	add	r3, r9
 8000a04:	469a      	mov	sl, r3
 8000a06:	0016      	movs	r6, r2
 8000a08:	e7a8      	b.n	800095c <__aeabi_dadd+0x284>
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	464c      	mov	r4, r9
 8000a0e:	4314      	orrs	r4, r2
 8000a10:	1e62      	subs	r2, r4, #1
 8000a12:	4194      	sbcs	r4, r2
 8000a14:	e6a6      	b.n	8000764 <__aeabi_dadd+0x8c>
 8000a16:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__aeabi_dadd+0x374>)
 8000a18:	1c72      	adds	r2, r6, #1
 8000a1a:	4222      	tst	r2, r4
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x348>
 8000a1e:	e0a8      	b.n	8000b72 <__aeabi_dadd+0x49a>
 8000a20:	000a      	movs	r2, r1
 8000a22:	431a      	orrs	r2, r3
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x352>
 8000a28:	e10a      	b.n	8000c40 <__aeabi_dadd+0x568>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x358>
 8000a2e:	e15e      	b.n	8000cee <__aeabi_dadd+0x616>
 8000a30:	464a      	mov	r2, r9
 8000a32:	4302      	orrs	r2, r0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_dadd+0x360>
 8000a36:	e161      	b.n	8000cfc <__aeabi_dadd+0x624>
 8000a38:	074a      	lsls	r2, r1, #29
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	e77c      	b.n	800093c <__aeabi_dadd+0x264>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	000007fe 	.word	0x000007fe
 8000a50:	4ccf      	ldr	r4, [pc, #828]	; (8000d90 <__aeabi_dadd+0x6b8>)
 8000a52:	42a2      	cmp	r2, r4
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x380>
 8000a56:	e0ce      	b.n	8000bf6 <__aeabi_dadd+0x51e>
 8000a58:	2480      	movs	r4, #128	; 0x80
 8000a5a:	0424      	lsls	r4, r4, #16
 8000a5c:	4321      	orrs	r1, r4
 8000a5e:	2f38      	cmp	r7, #56	; 0x38
 8000a60:	dc5b      	bgt.n	8000b1a <__aeabi_dadd+0x442>
 8000a62:	2f1f      	cmp	r7, #31
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dadd+0x390>
 8000a66:	e0dc      	b.n	8000c22 <__aeabi_dadd+0x54a>
 8000a68:	2520      	movs	r5, #32
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	1bed      	subs	r5, r5, r7
 8000a6e:	001e      	movs	r6, r3
 8000a70:	40ab      	lsls	r3, r5
 8000a72:	40ac      	lsls	r4, r5
 8000a74:	40fe      	lsrs	r6, r7
 8000a76:	1e5d      	subs	r5, r3, #1
 8000a78:	41ab      	sbcs	r3, r5
 8000a7a:	4334      	orrs	r4, r6
 8000a7c:	40f9      	lsrs	r1, r7
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	464b      	mov	r3, r9
 8000a82:	1a5b      	subs	r3, r3, r1
 8000a84:	4699      	mov	r9, r3
 8000a86:	e04c      	b.n	8000b22 <__aeabi_dadd+0x44a>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	1a1c      	subs	r4, r3, r0
 8000a8c:	1a88      	subs	r0, r1, r2
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4252      	negs	r2, r2
 8000a94:	4692      	mov	sl, r2
 8000a96:	0002      	movs	r2, r0
 8000a98:	4650      	mov	r0, sl
 8000a9a:	1a12      	subs	r2, r2, r0
 8000a9c:	4692      	mov	sl, r2
 8000a9e:	0212      	lsls	r2, r2, #8
 8000aa0:	d478      	bmi.n	8000b94 <__aeabi_dadd+0x4bc>
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x3d2>
 8000aa8:	e66a      	b.n	8000780 <__aeabi_dadd+0xa8>
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2500      	movs	r5, #0
 8000aae:	e745      	b.n	800093c <__aeabi_dadd+0x264>
 8000ab0:	074a      	lsls	r2, r1, #29
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	e73d      	b.n	8000936 <__aeabi_dadd+0x25e>
 8000aba:	181c      	adds	r4, r3, r0
 8000abc:	429c      	cmp	r4, r3
 8000abe:	419b      	sbcs	r3, r3
 8000ac0:	4449      	add	r1, r9
 8000ac2:	468a      	mov	sl, r1
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	449a      	add	sl, r3
 8000ac8:	4653      	mov	r3, sl
 8000aca:	2601      	movs	r6, #1
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0x3fa>
 8000ad0:	e727      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	4652      	mov	r2, sl
 8000ad6:	4baf      	ldr	r3, [pc, #700]	; (8000d94 <__aeabi_dadd+0x6bc>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	401a      	ands	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	4021      	ands	r1, r4
 8000ae0:	0862      	lsrs	r2, r4, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	07dc      	lsls	r4, r3, #31
 8000ae6:	085b      	lsrs	r3, r3, #1
 8000ae8:	469a      	mov	sl, r3
 8000aea:	4314      	orrs	r4, r2
 8000aec:	e670      	b.n	80007d0 <__aeabi_dadd+0xf8>
 8000aee:	003a      	movs	r2, r7
 8000af0:	464c      	mov	r4, r9
 8000af2:	3a20      	subs	r2, #32
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	46a4      	mov	ip, r4
 8000af8:	2f20      	cmp	r7, #32
 8000afa:	d007      	beq.n	8000b0c <__aeabi_dadd+0x434>
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	4648      	mov	r0, r9
 8000b00:	1bd2      	subs	r2, r2, r7
 8000b02:	4090      	lsls	r0, r2
 8000b04:	0002      	movs	r2, r0
 8000b06:	4640      	mov	r0, r8
 8000b08:	4310      	orrs	r0, r2
 8000b0a:	4680      	mov	r8, r0
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	1e42      	subs	r2, r0, #1
 8000b10:	4190      	sbcs	r0, r2
 8000b12:	4662      	mov	r2, ip
 8000b14:	0004      	movs	r4, r0
 8000b16:	4314      	orrs	r4, r2
 8000b18:	e624      	b.n	8000764 <__aeabi_dadd+0x8c>
 8000b1a:	4319      	orrs	r1, r3
 8000b1c:	000c      	movs	r4, r1
 8000b1e:	1e63      	subs	r3, r4, #1
 8000b20:	419c      	sbcs	r4, r3
 8000b22:	4643      	mov	r3, r8
 8000b24:	1b1c      	subs	r4, r3, r4
 8000b26:	45a0      	cmp	r8, r4
 8000b28:	419b      	sbcs	r3, r3
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	469a      	mov	sl, r3
 8000b32:	4665      	mov	r5, ip
 8000b34:	0016      	movs	r6, r2
 8000b36:	e61b      	b.n	8000770 <__aeabi_dadd+0x98>
 8000b38:	000c      	movs	r4, r1
 8000b3a:	431c      	orrs	r4, r3
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x468>
 8000b3e:	e0c7      	b.n	8000cd0 <__aeabi_dadd+0x5f8>
 8000b40:	1e7c      	subs	r4, r7, #1
 8000b42:	2f01      	cmp	r7, #1
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x470>
 8000b46:	e0f9      	b.n	8000d3c <__aeabi_dadd+0x664>
 8000b48:	4e91      	ldr	r6, [pc, #580]	; (8000d90 <__aeabi_dadd+0x6b8>)
 8000b4a:	42b7      	cmp	r7, r6
 8000b4c:	d05c      	beq.n	8000c08 <__aeabi_dadd+0x530>
 8000b4e:	0027      	movs	r7, r4
 8000b50:	e740      	b.n	80009d4 <__aeabi_dadd+0x2fc>
 8000b52:	2220      	movs	r2, #32
 8000b54:	464c      	mov	r4, r9
 8000b56:	4640      	mov	r0, r8
 8000b58:	1bd2      	subs	r2, r2, r7
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	40f8      	lsrs	r0, r7
 8000b5e:	4304      	orrs	r4, r0
 8000b60:	4640      	mov	r0, r8
 8000b62:	4090      	lsls	r0, r2
 8000b64:	1e42      	subs	r2, r0, #1
 8000b66:	4190      	sbcs	r0, r2
 8000b68:	464a      	mov	r2, r9
 8000b6a:	40fa      	lsrs	r2, r7
 8000b6c:	4304      	orrs	r4, r0
 8000b6e:	1889      	adds	r1, r1, r2
 8000b70:	e6ee      	b.n	8000950 <__aeabi_dadd+0x278>
 8000b72:	4c87      	ldr	r4, [pc, #540]	; (8000d90 <__aeabi_dadd+0x6b8>)
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x4a2>
 8000b78:	e6f9      	b.n	800096e <__aeabi_dadd+0x296>
 8000b7a:	1818      	adds	r0, r3, r0
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	419b      	sbcs	r3, r3
 8000b80:	4449      	add	r1, r9
 8000b82:	425b      	negs	r3, r3
 8000b84:	18cb      	adds	r3, r1, r3
 8000b86:	07dc      	lsls	r4, r3, #31
 8000b88:	0840      	lsrs	r0, r0, #1
 8000b8a:	085b      	lsrs	r3, r3, #1
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	0016      	movs	r6, r2
 8000b90:	4304      	orrs	r4, r0
 8000b92:	e6c6      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000b94:	4642      	mov	r2, r8
 8000b96:	1ad4      	subs	r4, r2, r3
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	4180      	sbcs	r0, r0
 8000b9c:	464b      	mov	r3, r9
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	1a0b      	subs	r3, r1, r0
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	4665      	mov	r5, ip
 8000ba8:	e5ea      	b.n	8000780 <__aeabi_dadd+0xa8>
 8000baa:	464b      	mov	r3, r9
 8000bac:	464a      	mov	r2, r9
 8000bae:	08c0      	lsrs	r0, r0, #3
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	4665      	mov	r5, ip
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	08d1      	lsrs	r1, r2, #3
 8000bb8:	e6bd      	b.n	8000936 <__aeabi_dadd+0x25e>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_dadd+0x4e8>
 8000bbe:	e08e      	b.n	8000cde <__aeabi_dadd+0x606>
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	4303      	orrs	r3, r0
 8000bc4:	d117      	bne.n	8000bf6 <__aeabi_dadd+0x51e>
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	2500      	movs	r5, #0
 8000bca:	0309      	lsls	r1, r1, #12
 8000bcc:	e6da      	b.n	8000984 <__aeabi_dadd+0x2ac>
 8000bce:	074a      	lsls	r2, r1, #29
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	08c9      	lsrs	r1, r1, #3
 8000bd6:	e6d1      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	464a      	mov	r2, r9
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	1a89      	subs	r1, r1, r2
 8000be2:	425b      	negs	r3, r3
 8000be4:	1acb      	subs	r3, r1, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	2601      	movs	r6, #1
 8000bea:	e5c1      	b.n	8000770 <__aeabi_dadd+0x98>
 8000bec:	074a      	lsls	r2, r1, #29
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	08c9      	lsrs	r1, r1, #3
 8000bf4:	e69f      	b.n	8000936 <__aeabi_dadd+0x25e>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	08d8      	lsrs	r0, r3, #3
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	075b      	lsls	r3, r3, #29
 8000c00:	4665      	mov	r5, ip
 8000c02:	4303      	orrs	r3, r0
 8000c04:	08d1      	lsrs	r1, r2, #3
 8000c06:	e6b9      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000c08:	4643      	mov	r3, r8
 8000c0a:	08d8      	lsrs	r0, r3, #3
 8000c0c:	464b      	mov	r3, r9
 8000c0e:	464a      	mov	r2, r9
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	4303      	orrs	r3, r0
 8000c14:	08d1      	lsrs	r1, r2, #3
 8000c16:	e6b1      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	000c      	movs	r4, r1
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	e6eb      	b.n	80009fa <__aeabi_dadd+0x322>
 8000c22:	003c      	movs	r4, r7
 8000c24:	000d      	movs	r5, r1
 8000c26:	3c20      	subs	r4, #32
 8000c28:	40e5      	lsrs	r5, r4
 8000c2a:	2f20      	cmp	r7, #32
 8000c2c:	d003      	beq.n	8000c36 <__aeabi_dadd+0x55e>
 8000c2e:	2440      	movs	r4, #64	; 0x40
 8000c30:	1be4      	subs	r4, r4, r7
 8000c32:	40a1      	lsls	r1, r4
 8000c34:	430b      	orrs	r3, r1
 8000c36:	001c      	movs	r4, r3
 8000c38:	1e63      	subs	r3, r4, #1
 8000c3a:	419c      	sbcs	r4, r3
 8000c3c:	432c      	orrs	r4, r5
 8000c3e:	e770      	b.n	8000b22 <__aeabi_dadd+0x44a>
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d0e1      	beq.n	8000c08 <__aeabi_dadd+0x530>
 8000c44:	464a      	mov	r2, r9
 8000c46:	4302      	orrs	r2, r0
 8000c48:	d0c1      	beq.n	8000bce <__aeabi_dadd+0x4f6>
 8000c4a:	074a      	lsls	r2, r1, #29
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	08c9      	lsrs	r1, r1, #3
 8000c54:	0312      	lsls	r2, r2, #12
 8000c56:	4211      	tst	r1, r2
 8000c58:	d008      	beq.n	8000c6c <__aeabi_dadd+0x594>
 8000c5a:	4648      	mov	r0, r9
 8000c5c:	08c4      	lsrs	r4, r0, #3
 8000c5e:	4214      	tst	r4, r2
 8000c60:	d104      	bne.n	8000c6c <__aeabi_dadd+0x594>
 8000c62:	4643      	mov	r3, r8
 8000c64:	0021      	movs	r1, r4
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	0742      	lsls	r2, r0, #29
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	0f5a      	lsrs	r2, r3, #29
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	0752      	lsls	r2, r2, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	e681      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000c78:	464b      	mov	r3, r9
 8000c7a:	4303      	orrs	r3, r0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x5a8>
 8000c7e:	e714      	b.n	8000aaa <__aeabi_dadd+0x3d2>
 8000c80:	464b      	mov	r3, r9
 8000c82:	464a      	mov	r2, r9
 8000c84:	08c0      	lsrs	r0, r0, #3
 8000c86:	075b      	lsls	r3, r3, #29
 8000c88:	4665      	mov	r5, ip
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	08d1      	lsrs	r1, r2, #3
 8000c8e:	e655      	b.n	800093c <__aeabi_dadd+0x264>
 8000c90:	1ac4      	subs	r4, r0, r3
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	4180      	sbcs	r0, r0
 8000c96:	464b      	mov	r3, r9
 8000c98:	4240      	negs	r0, r0
 8000c9a:	1a59      	subs	r1, r3, r1
 8000c9c:	1a0b      	subs	r3, r1, r0
 8000c9e:	469a      	mov	sl, r3
 8000ca0:	4665      	mov	r5, ip
 8000ca2:	2601      	movs	r6, #1
 8000ca4:	e564      	b.n	8000770 <__aeabi_dadd+0x98>
 8000ca6:	1a1c      	subs	r4, r3, r0
 8000ca8:	464a      	mov	r2, r9
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	4180      	sbcs	r0, r0
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	4240      	negs	r0, r0
 8000cb2:	1a12      	subs	r2, r2, r0
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	0212      	lsls	r2, r2, #8
 8000cb8:	d549      	bpl.n	8000d4e <__aeabi_dadd+0x676>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	1ad4      	subs	r4, r2, r3
 8000cbe:	45a0      	cmp	r8, r4
 8000cc0:	4180      	sbcs	r0, r0
 8000cc2:	464b      	mov	r3, r9
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	1a59      	subs	r1, r3, r1
 8000cc8:	1a0b      	subs	r3, r1, r0
 8000cca:	469a      	mov	sl, r3
 8000ccc:	4665      	mov	r5, ip
 8000cce:	e57f      	b.n	80007d0 <__aeabi_dadd+0xf8>
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	08c0      	lsrs	r0, r0, #3
 8000cd6:	075b      	lsls	r3, r3, #29
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	08d1      	lsrs	r1, r2, #3
 8000cdc:	e62b      	b.n	8000936 <__aeabi_dadd+0x25e>
 8000cde:	464a      	mov	r2, r9
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	d138      	bne.n	8000d58 <__aeabi_dadd+0x680>
 8000ce6:	074a      	lsls	r2, r1, #29
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	08c9      	lsrs	r1, r1, #3
 8000cec:	e646      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000cee:	464b      	mov	r3, r9
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	08c0      	lsrs	r0, r0, #3
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e61f      	b.n	800093c <__aeabi_dadd+0x264>
 8000cfc:	181c      	adds	r4, r3, r0
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	419b      	sbcs	r3, r3
 8000d02:	4449      	add	r1, r9
 8000d04:	468a      	mov	sl, r1
 8000d06:	425b      	negs	r3, r3
 8000d08:	449a      	add	sl, r3
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x63a>
 8000d10:	e607      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000d12:	4652      	mov	r2, sl
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <__aeabi_dadd+0x6bc>)
 8000d16:	2601      	movs	r6, #1
 8000d18:	401a      	ands	r2, r3
 8000d1a:	4692      	mov	sl, r2
 8000d1c:	e601      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000d1e:	003c      	movs	r4, r7
 8000d20:	000e      	movs	r6, r1
 8000d22:	3c20      	subs	r4, #32
 8000d24:	40e6      	lsrs	r6, r4
 8000d26:	2f20      	cmp	r7, #32
 8000d28:	d003      	beq.n	8000d32 <__aeabi_dadd+0x65a>
 8000d2a:	2440      	movs	r4, #64	; 0x40
 8000d2c:	1be4      	subs	r4, r4, r7
 8000d2e:	40a1      	lsls	r1, r4
 8000d30:	430b      	orrs	r3, r1
 8000d32:	001c      	movs	r4, r3
 8000d34:	1e63      	subs	r3, r4, #1
 8000d36:	419c      	sbcs	r4, r3
 8000d38:	4334      	orrs	r4, r6
 8000d3a:	e65e      	b.n	80009fa <__aeabi_dadd+0x322>
 8000d3c:	4443      	add	r3, r8
 8000d3e:	4283      	cmp	r3, r0
 8000d40:	4180      	sbcs	r0, r0
 8000d42:	4449      	add	r1, r9
 8000d44:	468a      	mov	sl, r1
 8000d46:	4240      	negs	r0, r0
 8000d48:	001c      	movs	r4, r3
 8000d4a:	4482      	add	sl, r0
 8000d4c:	e6bc      	b.n	8000ac8 <__aeabi_dadd+0x3f0>
 8000d4e:	4653      	mov	r3, sl
 8000d50:	4323      	orrs	r3, r4
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x67e>
 8000d54:	e6a9      	b.n	8000aaa <__aeabi_dadd+0x3d2>
 8000d56:	e5e4      	b.n	8000922 <__aeabi_dadd+0x24a>
 8000d58:	074a      	lsls	r2, r1, #29
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	0312      	lsls	r2, r2, #12
 8000d62:	4211      	tst	r1, r2
 8000d64:	d009      	beq.n	8000d7a <__aeabi_dadd+0x6a2>
 8000d66:	4648      	mov	r0, r9
 8000d68:	08c4      	lsrs	r4, r0, #3
 8000d6a:	4214      	tst	r4, r2
 8000d6c:	d105      	bne.n	8000d7a <__aeabi_dadd+0x6a2>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	4665      	mov	r5, ip
 8000d72:	0021      	movs	r1, r4
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	0742      	lsls	r2, r0, #29
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	0f5a      	lsrs	r2, r3, #29
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	0752      	lsls	r2, r2, #29
 8000d82:	4313      	orrs	r3, r2
 8000d84:	e5fa      	b.n	800097c <__aeabi_dadd+0x2a4>
 8000d86:	2300      	movs	r3, #0
 8000d88:	4a01      	ldr	r2, [pc, #4]	; (8000d90 <__aeabi_dadd+0x6b8>)
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	e540      	b.n	8000810 <__aeabi_dadd+0x138>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	000007ff 	.word	0x000007ff
 8000d94:	ff7fffff 	.word	0xff7fffff

08000d98 <__aeabi_ddiv>:
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	4657      	mov	r7, sl
 8000d9c:	464e      	mov	r6, r9
 8000d9e:	4645      	mov	r5, r8
 8000da0:	46de      	mov	lr, fp
 8000da2:	b5e0      	push	{r5, r6, r7, lr}
 8000da4:	030c      	lsls	r4, r1, #12
 8000da6:	001f      	movs	r7, r3
 8000da8:	004b      	lsls	r3, r1, #1
 8000daa:	4681      	mov	r9, r0
 8000dac:	4692      	mov	sl, r2
 8000dae:	0005      	movs	r5, r0
 8000db0:	b085      	sub	sp, #20
 8000db2:	0b24      	lsrs	r4, r4, #12
 8000db4:	0d5b      	lsrs	r3, r3, #21
 8000db6:	0fce      	lsrs	r6, r1, #31
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x26>
 8000dbc:	e152      	b.n	8001064 <__aeabi_ddiv+0x2cc>
 8000dbe:	4ad2      	ldr	r2, [pc, #840]	; (8001108 <__aeabi_ddiv+0x370>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x2e>
 8000dc4:	e16e      	b.n	80010a4 <__aeabi_ddiv+0x30c>
 8000dc6:	0f42      	lsrs	r2, r0, #29
 8000dc8:	00e4      	lsls	r4, r4, #3
 8000dca:	4314      	orrs	r4, r2
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0412      	lsls	r2, r2, #16
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	4690      	mov	r8, r2
 8000dd4:	4acd      	ldr	r2, [pc, #820]	; (800110c <__aeabi_ddiv+0x374>)
 8000dd6:	00c5      	lsls	r5, r0, #3
 8000dd8:	4693      	mov	fp, r2
 8000dda:	449b      	add	fp, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4699      	mov	r9, r3
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	033c      	lsls	r4, r7, #12
 8000de4:	007b      	lsls	r3, r7, #1
 8000de6:	4650      	mov	r0, sl
 8000de8:	0b24      	lsrs	r4, r4, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	0fff      	lsrs	r7, r7, #31
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x5c>
 8000df2:	e11a      	b.n	800102a <__aeabi_ddiv+0x292>
 8000df4:	4ac4      	ldr	r2, [pc, #784]	; (8001108 <__aeabi_ddiv+0x370>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d100      	bne.n	8000dfc <__aeabi_ddiv+0x64>
 8000dfa:	e15e      	b.n	80010ba <__aeabi_ddiv+0x322>
 8000dfc:	0f42      	lsrs	r2, r0, #29
 8000dfe:	00e4      	lsls	r4, r4, #3
 8000e00:	4322      	orrs	r2, r4
 8000e02:	2480      	movs	r4, #128	; 0x80
 8000e04:	0424      	lsls	r4, r4, #16
 8000e06:	4314      	orrs	r4, r2
 8000e08:	4ac0      	ldr	r2, [pc, #768]	; (800110c <__aeabi_ddiv+0x374>)
 8000e0a:	00c1      	lsls	r1, r0, #3
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	465a      	mov	r2, fp
 8000e10:	4463      	add	r3, ip
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	469b      	mov	fp, r3
 8000e16:	2000      	movs	r0, #0
 8000e18:	0033      	movs	r3, r6
 8000e1a:	407b      	eors	r3, r7
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	464b      	mov	r3, r9
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d827      	bhi.n	8000e74 <__aeabi_ddiv+0xdc>
 8000e24:	4aba      	ldr	r2, [pc, #744]	; (8001110 <__aeabi_ddiv+0x378>)
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	469f      	mov	pc, r3
 8000e2c:	46b2      	mov	sl, r6
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d016      	beq.n	8000e62 <__aeabi_ddiv+0xca>
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xa2>
 8000e38:	e287      	b.n	800134a <__aeabi_ddiv+0x5b2>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0xa8>
 8000e3e:	e0d5      	b.n	8000fec <__aeabi_ddiv+0x254>
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2500      	movs	r5, #0
 8000e46:	051b      	lsls	r3, r3, #20
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	07d2      	lsls	r2, r2, #31
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	0028      	movs	r0, r5
 8000e52:	0019      	movs	r1, r3
 8000e54:	b005      	add	sp, #20
 8000e56:	bcf0      	pop	{r4, r5, r6, r7}
 8000e58:	46bb      	mov	fp, r7
 8000e5a:	46b2      	mov	sl, r6
 8000e5c:	46a9      	mov	r9, r5
 8000e5e:	46a0      	mov	r8, r4
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e62:	2200      	movs	r2, #0
 8000e64:	2500      	movs	r5, #0
 8000e66:	4ba8      	ldr	r3, [pc, #672]	; (8001108 <__aeabi_ddiv+0x370>)
 8000e68:	e7ed      	b.n	8000e46 <__aeabi_ddiv+0xae>
 8000e6a:	46ba      	mov	sl, r7
 8000e6c:	46a0      	mov	r8, r4
 8000e6e:	000d      	movs	r5, r1
 8000e70:	9000      	str	r0, [sp, #0]
 8000e72:	e7dc      	b.n	8000e2e <__aeabi_ddiv+0x96>
 8000e74:	4544      	cmp	r4, r8
 8000e76:	d200      	bcs.n	8000e7a <__aeabi_ddiv+0xe2>
 8000e78:	e1c4      	b.n	8001204 <__aeabi_ddiv+0x46c>
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0xe6>
 8000e7c:	e1bf      	b.n	80011fe <__aeabi_ddiv+0x466>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	425b      	negs	r3, r3
 8000e82:	469c      	mov	ip, r3
 8000e84:	002e      	movs	r6, r5
 8000e86:	4640      	mov	r0, r8
 8000e88:	2500      	movs	r5, #0
 8000e8a:	44e3      	add	fp, ip
 8000e8c:	0223      	lsls	r3, r4, #8
 8000e8e:	0e0c      	lsrs	r4, r1, #24
 8000e90:	431c      	orrs	r4, r3
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	4699      	mov	r9, r3
 8000e96:	0423      	lsls	r3, r4, #16
 8000e98:	020a      	lsls	r2, r1, #8
 8000e9a:	0c1f      	lsrs	r7, r3, #16
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	9701      	str	r7, [sp, #4]
 8000ea2:	f7ff f9d1 	bl	8000248 <__aeabi_uidivmod>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	437a      	muls	r2, r7
 8000eaa:	040b      	lsls	r3, r1, #16
 8000eac:	0c31      	lsrs	r1, r6, #16
 8000eae:	4680      	mov	r8, r0
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d907      	bls.n	8000ec6 <__aeabi_ddiv+0x12e>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	425b      	negs	r3, r3
 8000eba:	469c      	mov	ip, r3
 8000ebc:	1909      	adds	r1, r1, r4
 8000ebe:	44e0      	add	r8, ip
 8000ec0:	428c      	cmp	r4, r1
 8000ec2:	d800      	bhi.n	8000ec6 <__aeabi_ddiv+0x12e>
 8000ec4:	e201      	b.n	80012ca <__aeabi_ddiv+0x532>
 8000ec6:	1a88      	subs	r0, r1, r2
 8000ec8:	4649      	mov	r1, r9
 8000eca:	f7ff f9bd 	bl	8000248 <__aeabi_uidivmod>
 8000ece:	9a01      	ldr	r2, [sp, #4]
 8000ed0:	0436      	lsls	r6, r6, #16
 8000ed2:	4342      	muls	r2, r0
 8000ed4:	0409      	lsls	r1, r1, #16
 8000ed6:	0c36      	lsrs	r6, r6, #16
 8000ed8:	0003      	movs	r3, r0
 8000eda:	430e      	orrs	r6, r1
 8000edc:	42b2      	cmp	r2, r6
 8000ede:	d904      	bls.n	8000eea <__aeabi_ddiv+0x152>
 8000ee0:	1936      	adds	r6, r6, r4
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	42b4      	cmp	r4, r6
 8000ee6:	d800      	bhi.n	8000eea <__aeabi_ddiv+0x152>
 8000ee8:	e1e9      	b.n	80012be <__aeabi_ddiv+0x526>
 8000eea:	1ab0      	subs	r0, r6, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	9e00      	ldr	r6, [sp, #0]
 8000ef0:	0412      	lsls	r2, r2, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	0c33      	lsrs	r3, r6, #16
 8000ef6:	001f      	movs	r7, r3
 8000ef8:	0c11      	lsrs	r1, r2, #16
 8000efa:	4690      	mov	r8, r2
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	0413      	lsls	r3, r2, #16
 8000f00:	0432      	lsls	r2, r6, #16
 8000f02:	0c16      	lsrs	r6, r2, #16
 8000f04:	0032      	movs	r2, r6
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	435a      	muls	r2, r3
 8000f0a:	9603      	str	r6, [sp, #12]
 8000f0c:	437b      	muls	r3, r7
 8000f0e:	434e      	muls	r6, r1
 8000f10:	4379      	muls	r1, r7
 8000f12:	0c17      	lsrs	r7, r2, #16
 8000f14:	46bc      	mov	ip, r7
 8000f16:	199b      	adds	r3, r3, r6
 8000f18:	4463      	add	r3, ip
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	d903      	bls.n	8000f26 <__aeabi_ddiv+0x18e>
 8000f1e:	2680      	movs	r6, #128	; 0x80
 8000f20:	0276      	lsls	r6, r6, #9
 8000f22:	46b4      	mov	ip, r6
 8000f24:	4461      	add	r1, ip
 8000f26:	0c1e      	lsrs	r6, r3, #16
 8000f28:	1871      	adds	r1, r6, r1
 8000f2a:	0416      	lsls	r6, r2, #16
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	0c36      	lsrs	r6, r6, #16
 8000f30:	199e      	adds	r6, r3, r6
 8000f32:	4288      	cmp	r0, r1
 8000f34:	d302      	bcc.n	8000f3c <__aeabi_ddiv+0x1a4>
 8000f36:	d112      	bne.n	8000f5e <__aeabi_ddiv+0x1c6>
 8000f38:	42b5      	cmp	r5, r6
 8000f3a:	d210      	bcs.n	8000f5e <__aeabi_ddiv+0x1c6>
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	469c      	mov	ip, r3
 8000f44:	4465      	add	r5, ip
 8000f46:	001f      	movs	r7, r3
 8000f48:	429d      	cmp	r5, r3
 8000f4a:	419b      	sbcs	r3, r3
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	191b      	adds	r3, r3, r4
 8000f50:	18c0      	adds	r0, r0, r3
 8000f52:	4284      	cmp	r4, r0
 8000f54:	d200      	bcs.n	8000f58 <__aeabi_ddiv+0x1c0>
 8000f56:	e19e      	b.n	8001296 <__aeabi_ddiv+0x4fe>
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x1c4>
 8000f5a:	e199      	b.n	8001290 <__aeabi_ddiv+0x4f8>
 8000f5c:	4690      	mov	r8, r2
 8000f5e:	1bae      	subs	r6, r5, r6
 8000f60:	42b5      	cmp	r5, r6
 8000f62:	41ad      	sbcs	r5, r5
 8000f64:	1a40      	subs	r0, r0, r1
 8000f66:	426d      	negs	r5, r5
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x1d8>
 8000f6e:	e1d2      	b.n	8001316 <__aeabi_ddiv+0x57e>
 8000f70:	4649      	mov	r1, r9
 8000f72:	f7ff f969 	bl	8000248 <__aeabi_uidivmod>
 8000f76:	9a01      	ldr	r2, [sp, #4]
 8000f78:	040b      	lsls	r3, r1, #16
 8000f7a:	4342      	muls	r2, r0
 8000f7c:	0c31      	lsrs	r1, r6, #16
 8000f7e:	0005      	movs	r5, r0
 8000f80:	4319      	orrs	r1, r3
 8000f82:	428a      	cmp	r2, r1
 8000f84:	d900      	bls.n	8000f88 <__aeabi_ddiv+0x1f0>
 8000f86:	e16c      	b.n	8001262 <__aeabi_ddiv+0x4ca>
 8000f88:	1a88      	subs	r0, r1, r2
 8000f8a:	4649      	mov	r1, r9
 8000f8c:	f7ff f95c 	bl	8000248 <__aeabi_uidivmod>
 8000f90:	9a01      	ldr	r2, [sp, #4]
 8000f92:	0436      	lsls	r6, r6, #16
 8000f94:	4342      	muls	r2, r0
 8000f96:	0409      	lsls	r1, r1, #16
 8000f98:	0c36      	lsrs	r6, r6, #16
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	430e      	orrs	r6, r1
 8000f9e:	42b2      	cmp	r2, r6
 8000fa0:	d900      	bls.n	8000fa4 <__aeabi_ddiv+0x20c>
 8000fa2:	e153      	b.n	800124c <__aeabi_ddiv+0x4b4>
 8000fa4:	9803      	ldr	r0, [sp, #12]
 8000fa6:	1ab6      	subs	r6, r6, r2
 8000fa8:	0002      	movs	r2, r0
 8000faa:	042d      	lsls	r5, r5, #16
 8000fac:	431d      	orrs	r5, r3
 8000fae:	9f02      	ldr	r7, [sp, #8]
 8000fb0:	042b      	lsls	r3, r5, #16
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	435a      	muls	r2, r3
 8000fb6:	437b      	muls	r3, r7
 8000fb8:	469c      	mov	ip, r3
 8000fba:	0c29      	lsrs	r1, r5, #16
 8000fbc:	4348      	muls	r0, r1
 8000fbe:	0c13      	lsrs	r3, r2, #16
 8000fc0:	4484      	add	ip, r0
 8000fc2:	4463      	add	r3, ip
 8000fc4:	4379      	muls	r1, r7
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_ddiv+0x23a>
 8000fca:	2080      	movs	r0, #128	; 0x80
 8000fcc:	0240      	lsls	r0, r0, #9
 8000fce:	4684      	mov	ip, r0
 8000fd0:	4461      	add	r1, ip
 8000fd2:	0c18      	lsrs	r0, r3, #16
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	0c12      	lsrs	r2, r2, #16
 8000fda:	1840      	adds	r0, r0, r1
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	4286      	cmp	r6, r0
 8000fe0:	d200      	bcs.n	8000fe4 <__aeabi_ddiv+0x24c>
 8000fe2:	e100      	b.n	80011e6 <__aeabi_ddiv+0x44e>
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x250>
 8000fe6:	e0fb      	b.n	80011e0 <__aeabi_ddiv+0x448>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	431d      	orrs	r5, r3
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <__aeabi_ddiv+0x37c>)
 8000fee:	445b      	add	r3, fp
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_ddiv+0x25e>
 8000ff4:	e0aa      	b.n	800114c <__aeabi_ddiv+0x3b4>
 8000ff6:	076a      	lsls	r2, r5, #29
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_ddiv+0x264>
 8000ffa:	e13d      	b.n	8001278 <__aeabi_ddiv+0x4e0>
 8000ffc:	08e9      	lsrs	r1, r5, #3
 8000ffe:	4642      	mov	r2, r8
 8001000:	01d2      	lsls	r2, r2, #7
 8001002:	d506      	bpl.n	8001012 <__aeabi_ddiv+0x27a>
 8001004:	4642      	mov	r2, r8
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <__aeabi_ddiv+0x380>)
 8001008:	401a      	ands	r2, r3
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	4690      	mov	r8, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	445b      	add	r3, fp
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <__aeabi_ddiv+0x384>)
 8001014:	4293      	cmp	r3, r2
 8001016:	dd00      	ble.n	800101a <__aeabi_ddiv+0x282>
 8001018:	e723      	b.n	8000e62 <__aeabi_ddiv+0xca>
 800101a:	4642      	mov	r2, r8
 800101c:	055b      	lsls	r3, r3, #21
 800101e:	0755      	lsls	r5, r2, #29
 8001020:	0252      	lsls	r2, r2, #9
 8001022:	430d      	orrs	r5, r1
 8001024:	0b12      	lsrs	r2, r2, #12
 8001026:	0d5b      	lsrs	r3, r3, #21
 8001028:	e70d      	b.n	8000e46 <__aeabi_ddiv+0xae>
 800102a:	4651      	mov	r1, sl
 800102c:	4321      	orrs	r1, r4
 800102e:	d100      	bne.n	8001032 <__aeabi_ddiv+0x29a>
 8001030:	e07c      	b.n	800112c <__aeabi_ddiv+0x394>
 8001032:	2c00      	cmp	r4, #0
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x2a0>
 8001036:	e0fb      	b.n	8001230 <__aeabi_ddiv+0x498>
 8001038:	0020      	movs	r0, r4
 800103a:	f001 f995 	bl	8002368 <__clzsi2>
 800103e:	0002      	movs	r2, r0
 8001040:	3a0b      	subs	r2, #11
 8001042:	231d      	movs	r3, #29
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	4652      	mov	r2, sl
 8001048:	0001      	movs	r1, r0
 800104a:	40da      	lsrs	r2, r3
 800104c:	4653      	mov	r3, sl
 800104e:	3908      	subs	r1, #8
 8001050:	408b      	lsls	r3, r1
 8001052:	408c      	lsls	r4, r1
 8001054:	0019      	movs	r1, r3
 8001056:	4314      	orrs	r4, r2
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <__aeabi_ddiv+0x388>)
 800105a:	4458      	add	r0, fp
 800105c:	469b      	mov	fp, r3
 800105e:	4483      	add	fp, r0
 8001060:	2000      	movs	r0, #0
 8001062:	e6d9      	b.n	8000e18 <__aeabi_ddiv+0x80>
 8001064:	0003      	movs	r3, r0
 8001066:	4323      	orrs	r3, r4
 8001068:	4698      	mov	r8, r3
 800106a:	d044      	beq.n	80010f6 <__aeabi_ddiv+0x35e>
 800106c:	2c00      	cmp	r4, #0
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x2da>
 8001070:	e0cf      	b.n	8001212 <__aeabi_ddiv+0x47a>
 8001072:	0020      	movs	r0, r4
 8001074:	f001 f978 	bl	8002368 <__clzsi2>
 8001078:	0001      	movs	r1, r0
 800107a:	0002      	movs	r2, r0
 800107c:	390b      	subs	r1, #11
 800107e:	231d      	movs	r3, #29
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	4649      	mov	r1, r9
 8001084:	0010      	movs	r0, r2
 8001086:	40d9      	lsrs	r1, r3
 8001088:	3808      	subs	r0, #8
 800108a:	4084      	lsls	r4, r0
 800108c:	000b      	movs	r3, r1
 800108e:	464d      	mov	r5, r9
 8001090:	4323      	orrs	r3, r4
 8001092:	4698      	mov	r8, r3
 8001094:	4085      	lsls	r5, r0
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <__aeabi_ddiv+0x38c>)
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	469b      	mov	fp, r3
 800109c:	2300      	movs	r3, #0
 800109e:	4699      	mov	r9, r3
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	e69e      	b.n	8000de2 <__aeabi_ddiv+0x4a>
 80010a4:	0002      	movs	r2, r0
 80010a6:	4322      	orrs	r2, r4
 80010a8:	4690      	mov	r8, r2
 80010aa:	d11d      	bne.n	80010e8 <__aeabi_ddiv+0x350>
 80010ac:	2208      	movs	r2, #8
 80010ae:	469b      	mov	fp, r3
 80010b0:	2302      	movs	r3, #2
 80010b2:	2500      	movs	r5, #0
 80010b4:	4691      	mov	r9, r2
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	e693      	b.n	8000de2 <__aeabi_ddiv+0x4a>
 80010ba:	4651      	mov	r1, sl
 80010bc:	4321      	orrs	r1, r4
 80010be:	d109      	bne.n	80010d4 <__aeabi_ddiv+0x33c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	464a      	mov	r2, r9
 80010c4:	431a      	orrs	r2, r3
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <__aeabi_ddiv+0x390>)
 80010c8:	4691      	mov	r9, r2
 80010ca:	469c      	mov	ip, r3
 80010cc:	2400      	movs	r4, #0
 80010ce:	2002      	movs	r0, #2
 80010d0:	44e3      	add	fp, ip
 80010d2:	e6a1      	b.n	8000e18 <__aeabi_ddiv+0x80>
 80010d4:	2303      	movs	r3, #3
 80010d6:	464a      	mov	r2, r9
 80010d8:	431a      	orrs	r2, r3
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <__aeabi_ddiv+0x390>)
 80010dc:	4691      	mov	r9, r2
 80010de:	469c      	mov	ip, r3
 80010e0:	4651      	mov	r1, sl
 80010e2:	2003      	movs	r0, #3
 80010e4:	44e3      	add	fp, ip
 80010e6:	e697      	b.n	8000e18 <__aeabi_ddiv+0x80>
 80010e8:	220c      	movs	r2, #12
 80010ea:	469b      	mov	fp, r3
 80010ec:	2303      	movs	r3, #3
 80010ee:	46a0      	mov	r8, r4
 80010f0:	4691      	mov	r9, r2
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	e675      	b.n	8000de2 <__aeabi_ddiv+0x4a>
 80010f6:	2304      	movs	r3, #4
 80010f8:	4699      	mov	r9, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	469b      	mov	fp, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	2500      	movs	r5, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	e66d      	b.n	8000de2 <__aeabi_ddiv+0x4a>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	000007ff 	.word	0x000007ff
 800110c:	fffffc01 	.word	0xfffffc01
 8001110:	0800e300 	.word	0x0800e300
 8001114:	000003ff 	.word	0x000003ff
 8001118:	feffffff 	.word	0xfeffffff
 800111c:	000007fe 	.word	0x000007fe
 8001120:	000003f3 	.word	0x000003f3
 8001124:	fffffc0d 	.word	0xfffffc0d
 8001128:	fffff801 	.word	0xfffff801
 800112c:	464a      	mov	r2, r9
 800112e:	2301      	movs	r3, #1
 8001130:	431a      	orrs	r2, r3
 8001132:	4691      	mov	r9, r2
 8001134:	2400      	movs	r4, #0
 8001136:	2001      	movs	r0, #1
 8001138:	e66e      	b.n	8000e18 <__aeabi_ddiv+0x80>
 800113a:	2300      	movs	r3, #0
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	469a      	mov	sl, r3
 8001140:	2500      	movs	r5, #0
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <__aeabi_ddiv+0x5cc>)
 8001144:	0312      	lsls	r2, r2, #12
 8001146:	e67e      	b.n	8000e46 <__aeabi_ddiv+0xae>
 8001148:	2501      	movs	r5, #1
 800114a:	426d      	negs	r5, r5
 800114c:	2201      	movs	r2, #1
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	2a38      	cmp	r2, #56	; 0x38
 8001152:	dd00      	ble.n	8001156 <__aeabi_ddiv+0x3be>
 8001154:	e674      	b.n	8000e40 <__aeabi_ddiv+0xa8>
 8001156:	2a1f      	cmp	r2, #31
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x3c4>
 800115a:	e0bd      	b.n	80012d8 <__aeabi_ddiv+0x540>
 800115c:	211f      	movs	r1, #31
 800115e:	4249      	negs	r1, r1
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	4641      	mov	r1, r8
 8001164:	40d9      	lsrs	r1, r3
 8001166:	000b      	movs	r3, r1
 8001168:	2a20      	cmp	r2, #32
 800116a:	d004      	beq.n	8001176 <__aeabi_ddiv+0x3de>
 800116c:	4641      	mov	r1, r8
 800116e:	4a7e      	ldr	r2, [pc, #504]	; (8001368 <__aeabi_ddiv+0x5d0>)
 8001170:	445a      	add	r2, fp
 8001172:	4091      	lsls	r1, r2
 8001174:	430d      	orrs	r5, r1
 8001176:	0029      	movs	r1, r5
 8001178:	1e4a      	subs	r2, r1, #1
 800117a:	4191      	sbcs	r1, r2
 800117c:	4319      	orrs	r1, r3
 800117e:	2307      	movs	r3, #7
 8001180:	001d      	movs	r5, r3
 8001182:	2200      	movs	r2, #0
 8001184:	400d      	ands	r5, r1
 8001186:	420b      	tst	r3, r1
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x3f4>
 800118a:	e0d0      	b.n	800132e <__aeabi_ddiv+0x596>
 800118c:	220f      	movs	r2, #15
 800118e:	2300      	movs	r3, #0
 8001190:	400a      	ands	r2, r1
 8001192:	2a04      	cmp	r2, #4
 8001194:	d100      	bne.n	8001198 <__aeabi_ddiv+0x400>
 8001196:	e0c7      	b.n	8001328 <__aeabi_ddiv+0x590>
 8001198:	1d0a      	adds	r2, r1, #4
 800119a:	428a      	cmp	r2, r1
 800119c:	4189      	sbcs	r1, r1
 800119e:	4249      	negs	r1, r1
 80011a0:	185b      	adds	r3, r3, r1
 80011a2:	0011      	movs	r1, r2
 80011a4:	021a      	lsls	r2, r3, #8
 80011a6:	d400      	bmi.n	80011aa <__aeabi_ddiv+0x412>
 80011a8:	e0be      	b.n	8001328 <__aeabi_ddiv+0x590>
 80011aa:	2301      	movs	r3, #1
 80011ac:	2200      	movs	r2, #0
 80011ae:	2500      	movs	r5, #0
 80011b0:	e649      	b.n	8000e46 <__aeabi_ddiv+0xae>
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	4643      	mov	r3, r8
 80011b6:	0312      	lsls	r2, r2, #12
 80011b8:	4213      	tst	r3, r2
 80011ba:	d008      	beq.n	80011ce <__aeabi_ddiv+0x436>
 80011bc:	4214      	tst	r4, r2
 80011be:	d106      	bne.n	80011ce <__aeabi_ddiv+0x436>
 80011c0:	4322      	orrs	r2, r4
 80011c2:	0312      	lsls	r2, r2, #12
 80011c4:	46ba      	mov	sl, r7
 80011c6:	000d      	movs	r5, r1
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <__aeabi_ddiv+0x5cc>)
 80011ca:	0b12      	lsrs	r2, r2, #12
 80011cc:	e63b      	b.n	8000e46 <__aeabi_ddiv+0xae>
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	4643      	mov	r3, r8
 80011d2:	0312      	lsls	r2, r2, #12
 80011d4:	431a      	orrs	r2, r3
 80011d6:	0312      	lsls	r2, r2, #12
 80011d8:	46b2      	mov	sl, r6
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <__aeabi_ddiv+0x5cc>)
 80011dc:	0b12      	lsrs	r2, r2, #12
 80011de:	e632      	b.n	8000e46 <__aeabi_ddiv+0xae>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x44e>
 80011e4:	e702      	b.n	8000fec <__aeabi_ddiv+0x254>
 80011e6:	19a6      	adds	r6, r4, r6
 80011e8:	1e6a      	subs	r2, r5, #1
 80011ea:	42a6      	cmp	r6, r4
 80011ec:	d200      	bcs.n	80011f0 <__aeabi_ddiv+0x458>
 80011ee:	e089      	b.n	8001304 <__aeabi_ddiv+0x56c>
 80011f0:	4286      	cmp	r6, r0
 80011f2:	d200      	bcs.n	80011f6 <__aeabi_ddiv+0x45e>
 80011f4:	e09f      	b.n	8001336 <__aeabi_ddiv+0x59e>
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x462>
 80011f8:	e0af      	b.n	800135a <__aeabi_ddiv+0x5c2>
 80011fa:	0015      	movs	r5, r2
 80011fc:	e6f4      	b.n	8000fe8 <__aeabi_ddiv+0x250>
 80011fe:	42a9      	cmp	r1, r5
 8001200:	d900      	bls.n	8001204 <__aeabi_ddiv+0x46c>
 8001202:	e63c      	b.n	8000e7e <__aeabi_ddiv+0xe6>
 8001204:	4643      	mov	r3, r8
 8001206:	07de      	lsls	r6, r3, #31
 8001208:	0858      	lsrs	r0, r3, #1
 800120a:	086b      	lsrs	r3, r5, #1
 800120c:	431e      	orrs	r6, r3
 800120e:	07ed      	lsls	r5, r5, #31
 8001210:	e63c      	b.n	8000e8c <__aeabi_ddiv+0xf4>
 8001212:	f001 f8a9 	bl	8002368 <__clzsi2>
 8001216:	0001      	movs	r1, r0
 8001218:	0002      	movs	r2, r0
 800121a:	3115      	adds	r1, #21
 800121c:	3220      	adds	r2, #32
 800121e:	291c      	cmp	r1, #28
 8001220:	dc00      	bgt.n	8001224 <__aeabi_ddiv+0x48c>
 8001222:	e72c      	b.n	800107e <__aeabi_ddiv+0x2e6>
 8001224:	464b      	mov	r3, r9
 8001226:	3808      	subs	r0, #8
 8001228:	4083      	lsls	r3, r0
 800122a:	2500      	movs	r5, #0
 800122c:	4698      	mov	r8, r3
 800122e:	e732      	b.n	8001096 <__aeabi_ddiv+0x2fe>
 8001230:	f001 f89a 	bl	8002368 <__clzsi2>
 8001234:	0003      	movs	r3, r0
 8001236:	001a      	movs	r2, r3
 8001238:	3215      	adds	r2, #21
 800123a:	3020      	adds	r0, #32
 800123c:	2a1c      	cmp	r2, #28
 800123e:	dc00      	bgt.n	8001242 <__aeabi_ddiv+0x4aa>
 8001240:	e6ff      	b.n	8001042 <__aeabi_ddiv+0x2aa>
 8001242:	4654      	mov	r4, sl
 8001244:	3b08      	subs	r3, #8
 8001246:	2100      	movs	r1, #0
 8001248:	409c      	lsls	r4, r3
 800124a:	e705      	b.n	8001058 <__aeabi_ddiv+0x2c0>
 800124c:	1936      	adds	r6, r6, r4
 800124e:	3b01      	subs	r3, #1
 8001250:	42b4      	cmp	r4, r6
 8001252:	d900      	bls.n	8001256 <__aeabi_ddiv+0x4be>
 8001254:	e6a6      	b.n	8000fa4 <__aeabi_ddiv+0x20c>
 8001256:	42b2      	cmp	r2, r6
 8001258:	d800      	bhi.n	800125c <__aeabi_ddiv+0x4c4>
 800125a:	e6a3      	b.n	8000fa4 <__aeabi_ddiv+0x20c>
 800125c:	1e83      	subs	r3, r0, #2
 800125e:	1936      	adds	r6, r6, r4
 8001260:	e6a0      	b.n	8000fa4 <__aeabi_ddiv+0x20c>
 8001262:	1909      	adds	r1, r1, r4
 8001264:	3d01      	subs	r5, #1
 8001266:	428c      	cmp	r4, r1
 8001268:	d900      	bls.n	800126c <__aeabi_ddiv+0x4d4>
 800126a:	e68d      	b.n	8000f88 <__aeabi_ddiv+0x1f0>
 800126c:	428a      	cmp	r2, r1
 800126e:	d800      	bhi.n	8001272 <__aeabi_ddiv+0x4da>
 8001270:	e68a      	b.n	8000f88 <__aeabi_ddiv+0x1f0>
 8001272:	1e85      	subs	r5, r0, #2
 8001274:	1909      	adds	r1, r1, r4
 8001276:	e687      	b.n	8000f88 <__aeabi_ddiv+0x1f0>
 8001278:	220f      	movs	r2, #15
 800127a:	402a      	ands	r2, r5
 800127c:	2a04      	cmp	r2, #4
 800127e:	d100      	bne.n	8001282 <__aeabi_ddiv+0x4ea>
 8001280:	e6bc      	b.n	8000ffc <__aeabi_ddiv+0x264>
 8001282:	1d29      	adds	r1, r5, #4
 8001284:	42a9      	cmp	r1, r5
 8001286:	41ad      	sbcs	r5, r5
 8001288:	426d      	negs	r5, r5
 800128a:	08c9      	lsrs	r1, r1, #3
 800128c:	44a8      	add	r8, r5
 800128e:	e6b6      	b.n	8000ffe <__aeabi_ddiv+0x266>
 8001290:	42af      	cmp	r7, r5
 8001292:	d900      	bls.n	8001296 <__aeabi_ddiv+0x4fe>
 8001294:	e662      	b.n	8000f5c <__aeabi_ddiv+0x1c4>
 8001296:	4281      	cmp	r1, r0
 8001298:	d804      	bhi.n	80012a4 <__aeabi_ddiv+0x50c>
 800129a:	d000      	beq.n	800129e <__aeabi_ddiv+0x506>
 800129c:	e65e      	b.n	8000f5c <__aeabi_ddiv+0x1c4>
 800129e:	42ae      	cmp	r6, r5
 80012a0:	d800      	bhi.n	80012a4 <__aeabi_ddiv+0x50c>
 80012a2:	e65b      	b.n	8000f5c <__aeabi_ddiv+0x1c4>
 80012a4:	2302      	movs	r3, #2
 80012a6:	425b      	negs	r3, r3
 80012a8:	469c      	mov	ip, r3
 80012aa:	9b00      	ldr	r3, [sp, #0]
 80012ac:	44e0      	add	r8, ip
 80012ae:	469c      	mov	ip, r3
 80012b0:	4465      	add	r5, ip
 80012b2:	429d      	cmp	r5, r3
 80012b4:	419b      	sbcs	r3, r3
 80012b6:	425b      	negs	r3, r3
 80012b8:	191b      	adds	r3, r3, r4
 80012ba:	18c0      	adds	r0, r0, r3
 80012bc:	e64f      	b.n	8000f5e <__aeabi_ddiv+0x1c6>
 80012be:	42b2      	cmp	r2, r6
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x52c>
 80012c2:	e612      	b.n	8000eea <__aeabi_ddiv+0x152>
 80012c4:	1e83      	subs	r3, r0, #2
 80012c6:	1936      	adds	r6, r6, r4
 80012c8:	e60f      	b.n	8000eea <__aeabi_ddiv+0x152>
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d800      	bhi.n	80012d0 <__aeabi_ddiv+0x538>
 80012ce:	e5fa      	b.n	8000ec6 <__aeabi_ddiv+0x12e>
 80012d0:	1e83      	subs	r3, r0, #2
 80012d2:	4698      	mov	r8, r3
 80012d4:	1909      	adds	r1, r1, r4
 80012d6:	e5f6      	b.n	8000ec6 <__aeabi_ddiv+0x12e>
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <__aeabi_ddiv+0x5d4>)
 80012da:	0028      	movs	r0, r5
 80012dc:	445b      	add	r3, fp
 80012de:	4641      	mov	r1, r8
 80012e0:	409d      	lsls	r5, r3
 80012e2:	4099      	lsls	r1, r3
 80012e4:	40d0      	lsrs	r0, r2
 80012e6:	1e6b      	subs	r3, r5, #1
 80012e8:	419d      	sbcs	r5, r3
 80012ea:	4643      	mov	r3, r8
 80012ec:	4301      	orrs	r1, r0
 80012ee:	4329      	orrs	r1, r5
 80012f0:	40d3      	lsrs	r3, r2
 80012f2:	074a      	lsls	r2, r1, #29
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x560>
 80012f6:	e755      	b.n	80011a4 <__aeabi_ddiv+0x40c>
 80012f8:	220f      	movs	r2, #15
 80012fa:	400a      	ands	r2, r1
 80012fc:	2a04      	cmp	r2, #4
 80012fe:	d000      	beq.n	8001302 <__aeabi_ddiv+0x56a>
 8001300:	e74a      	b.n	8001198 <__aeabi_ddiv+0x400>
 8001302:	e74f      	b.n	80011a4 <__aeabi_ddiv+0x40c>
 8001304:	0015      	movs	r5, r2
 8001306:	4286      	cmp	r6, r0
 8001308:	d000      	beq.n	800130c <__aeabi_ddiv+0x574>
 800130a:	e66d      	b.n	8000fe8 <__aeabi_ddiv+0x250>
 800130c:	9a00      	ldr	r2, [sp, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d000      	beq.n	8001314 <__aeabi_ddiv+0x57c>
 8001312:	e669      	b.n	8000fe8 <__aeabi_ddiv+0x250>
 8001314:	e66a      	b.n	8000fec <__aeabi_ddiv+0x254>
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <__aeabi_ddiv+0x5d8>)
 8001318:	445b      	add	r3, fp
 800131a:	2b00      	cmp	r3, #0
 800131c:	dc00      	bgt.n	8001320 <__aeabi_ddiv+0x588>
 800131e:	e713      	b.n	8001148 <__aeabi_ddiv+0x3b0>
 8001320:	2501      	movs	r5, #1
 8001322:	2100      	movs	r1, #0
 8001324:	44a8      	add	r8, r5
 8001326:	e66a      	b.n	8000ffe <__aeabi_ddiv+0x266>
 8001328:	075d      	lsls	r5, r3, #29
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	0b1a      	lsrs	r2, r3, #12
 800132e:	08c9      	lsrs	r1, r1, #3
 8001330:	2300      	movs	r3, #0
 8001332:	430d      	orrs	r5, r1
 8001334:	e587      	b.n	8000e46 <__aeabi_ddiv+0xae>
 8001336:	9900      	ldr	r1, [sp, #0]
 8001338:	3d02      	subs	r5, #2
 800133a:	004a      	lsls	r2, r1, #1
 800133c:	428a      	cmp	r2, r1
 800133e:	41bf      	sbcs	r7, r7
 8001340:	427f      	negs	r7, r7
 8001342:	193f      	adds	r7, r7, r4
 8001344:	19f6      	adds	r6, r6, r7
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	e7dd      	b.n	8001306 <__aeabi_ddiv+0x56e>
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	4643      	mov	r3, r8
 800134e:	0312      	lsls	r2, r2, #12
 8001350:	431a      	orrs	r2, r3
 8001352:	0312      	lsls	r2, r2, #12
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <__aeabi_ddiv+0x5cc>)
 8001356:	0b12      	lsrs	r2, r2, #12
 8001358:	e575      	b.n	8000e46 <__aeabi_ddiv+0xae>
 800135a:	9900      	ldr	r1, [sp, #0]
 800135c:	4299      	cmp	r1, r3
 800135e:	d3ea      	bcc.n	8001336 <__aeabi_ddiv+0x59e>
 8001360:	0015      	movs	r5, r2
 8001362:	e7d3      	b.n	800130c <__aeabi_ddiv+0x574>
 8001364:	000007ff 	.word	0x000007ff
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e
 8001370:	000003ff 	.word	0x000003ff

08001374 <__eqdf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464e      	mov	r6, r9
 8001378:	4645      	mov	r5, r8
 800137a:	46de      	mov	lr, fp
 800137c:	4657      	mov	r7, sl
 800137e:	4690      	mov	r8, r2
 8001380:	b5e0      	push	{r5, r6, r7, lr}
 8001382:	0017      	movs	r7, r2
 8001384:	031a      	lsls	r2, r3, #12
 8001386:	0b12      	lsrs	r2, r2, #12
 8001388:	0005      	movs	r5, r0
 800138a:	4684      	mov	ip, r0
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <__eqdf2+0x80>)
 800138e:	030e      	lsls	r6, r1, #12
 8001390:	004c      	lsls	r4, r1, #1
 8001392:	4691      	mov	r9, r2
 8001394:	005a      	lsls	r2, r3, #1
 8001396:	0fdb      	lsrs	r3, r3, #31
 8001398:	469b      	mov	fp, r3
 800139a:	0b36      	lsrs	r6, r6, #12
 800139c:	0d64      	lsrs	r4, r4, #21
 800139e:	0fc9      	lsrs	r1, r1, #31
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d019      	beq.n	80013da <__eqdf2+0x66>
 80013a6:	4282      	cmp	r2, r0
 80013a8:	d010      	beq.n	80013cc <__eqdf2+0x58>
 80013aa:	2001      	movs	r0, #1
 80013ac:	4294      	cmp	r4, r2
 80013ae:	d10e      	bne.n	80013ce <__eqdf2+0x5a>
 80013b0:	454e      	cmp	r6, r9
 80013b2:	d10c      	bne.n	80013ce <__eqdf2+0x5a>
 80013b4:	2001      	movs	r0, #1
 80013b6:	45c4      	cmp	ip, r8
 80013b8:	d109      	bne.n	80013ce <__eqdf2+0x5a>
 80013ba:	4559      	cmp	r1, fp
 80013bc:	d017      	beq.n	80013ee <__eqdf2+0x7a>
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d105      	bne.n	80013ce <__eqdf2+0x5a>
 80013c2:	0030      	movs	r0, r6
 80013c4:	4328      	orrs	r0, r5
 80013c6:	1e43      	subs	r3, r0, #1
 80013c8:	4198      	sbcs	r0, r3
 80013ca:	e000      	b.n	80013ce <__eqdf2+0x5a>
 80013cc:	2001      	movs	r0, #1
 80013ce:	bcf0      	pop	{r4, r5, r6, r7}
 80013d0:	46bb      	mov	fp, r7
 80013d2:	46b2      	mov	sl, r6
 80013d4:	46a9      	mov	r9, r5
 80013d6:	46a0      	mov	r8, r4
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	0033      	movs	r3, r6
 80013dc:	2001      	movs	r0, #1
 80013de:	432b      	orrs	r3, r5
 80013e0:	d1f5      	bne.n	80013ce <__eqdf2+0x5a>
 80013e2:	42a2      	cmp	r2, r4
 80013e4:	d1f3      	bne.n	80013ce <__eqdf2+0x5a>
 80013e6:	464b      	mov	r3, r9
 80013e8:	433b      	orrs	r3, r7
 80013ea:	d1f0      	bne.n	80013ce <__eqdf2+0x5a>
 80013ec:	e7e2      	b.n	80013b4 <__eqdf2+0x40>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7ed      	b.n	80013ce <__eqdf2+0x5a>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__gedf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4647      	mov	r7, r8
 80013fc:	46ce      	mov	lr, r9
 80013fe:	0004      	movs	r4, r0
 8001400:	0018      	movs	r0, r3
 8001402:	0016      	movs	r6, r2
 8001404:	031b      	lsls	r3, r3, #12
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	4d2d      	ldr	r5, [pc, #180]	; (80014c0 <__gedf2+0xc8>)
 800140a:	004a      	lsls	r2, r1, #1
 800140c:	4699      	mov	r9, r3
 800140e:	b580      	push	{r7, lr}
 8001410:	0043      	lsls	r3, r0, #1
 8001412:	030f      	lsls	r7, r1, #12
 8001414:	46a4      	mov	ip, r4
 8001416:	46b0      	mov	r8, r6
 8001418:	0b3f      	lsrs	r7, r7, #12
 800141a:	0d52      	lsrs	r2, r2, #21
 800141c:	0fc9      	lsrs	r1, r1, #31
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fc0      	lsrs	r0, r0, #31
 8001422:	42aa      	cmp	r2, r5
 8001424:	d021      	beq.n	800146a <__gedf2+0x72>
 8001426:	42ab      	cmp	r3, r5
 8001428:	d013      	beq.n	8001452 <__gedf2+0x5a>
 800142a:	2a00      	cmp	r2, #0
 800142c:	d122      	bne.n	8001474 <__gedf2+0x7c>
 800142e:	433c      	orrs	r4, r7
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <__gedf2+0x42>
 8001434:	464d      	mov	r5, r9
 8001436:	432e      	orrs	r6, r5
 8001438:	d022      	beq.n	8001480 <__gedf2+0x88>
 800143a:	2c00      	cmp	r4, #0
 800143c:	d010      	beq.n	8001460 <__gedf2+0x68>
 800143e:	4281      	cmp	r1, r0
 8001440:	d022      	beq.n	8001488 <__gedf2+0x90>
 8001442:	2002      	movs	r0, #2
 8001444:	3901      	subs	r1, #1
 8001446:	4008      	ands	r0, r1
 8001448:	3801      	subs	r0, #1
 800144a:	bcc0      	pop	{r6, r7}
 800144c:	46b9      	mov	r9, r7
 800144e:	46b0      	mov	r8, r6
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	464d      	mov	r5, r9
 8001454:	432e      	orrs	r6, r5
 8001456:	d129      	bne.n	80014ac <__gedf2+0xb4>
 8001458:	2a00      	cmp	r2, #0
 800145a:	d1f0      	bne.n	800143e <__gedf2+0x46>
 800145c:	433c      	orrs	r4, r7
 800145e:	d1ee      	bne.n	800143e <__gedf2+0x46>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1f2      	bne.n	800144a <__gedf2+0x52>
 8001464:	2001      	movs	r0, #1
 8001466:	4240      	negs	r0, r0
 8001468:	e7ef      	b.n	800144a <__gedf2+0x52>
 800146a:	003d      	movs	r5, r7
 800146c:	4325      	orrs	r5, r4
 800146e:	d11d      	bne.n	80014ac <__gedf2+0xb4>
 8001470:	4293      	cmp	r3, r2
 8001472:	d0ee      	beq.n	8001452 <__gedf2+0x5a>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e2      	bne.n	800143e <__gedf2+0x46>
 8001478:	464c      	mov	r4, r9
 800147a:	4326      	orrs	r6, r4
 800147c:	d1df      	bne.n	800143e <__gedf2+0x46>
 800147e:	e7e0      	b.n	8001442 <__gedf2+0x4a>
 8001480:	2000      	movs	r0, #0
 8001482:	2c00      	cmp	r4, #0
 8001484:	d0e1      	beq.n	800144a <__gedf2+0x52>
 8001486:	e7dc      	b.n	8001442 <__gedf2+0x4a>
 8001488:	429a      	cmp	r2, r3
 800148a:	dc0a      	bgt.n	80014a2 <__gedf2+0xaa>
 800148c:	dbe8      	blt.n	8001460 <__gedf2+0x68>
 800148e:	454f      	cmp	r7, r9
 8001490:	d8d7      	bhi.n	8001442 <__gedf2+0x4a>
 8001492:	d00e      	beq.n	80014b2 <__gedf2+0xba>
 8001494:	2000      	movs	r0, #0
 8001496:	454f      	cmp	r7, r9
 8001498:	d2d7      	bcs.n	800144a <__gedf2+0x52>
 800149a:	2900      	cmp	r1, #0
 800149c:	d0e2      	beq.n	8001464 <__gedf2+0x6c>
 800149e:	0008      	movs	r0, r1
 80014a0:	e7d3      	b.n	800144a <__gedf2+0x52>
 80014a2:	4243      	negs	r3, r0
 80014a4:	4158      	adcs	r0, r3
 80014a6:	0040      	lsls	r0, r0, #1
 80014a8:	3801      	subs	r0, #1
 80014aa:	e7ce      	b.n	800144a <__gedf2+0x52>
 80014ac:	2002      	movs	r0, #2
 80014ae:	4240      	negs	r0, r0
 80014b0:	e7cb      	b.n	800144a <__gedf2+0x52>
 80014b2:	45c4      	cmp	ip, r8
 80014b4:	d8c5      	bhi.n	8001442 <__gedf2+0x4a>
 80014b6:	2000      	movs	r0, #0
 80014b8:	45c4      	cmp	ip, r8
 80014ba:	d2c6      	bcs.n	800144a <__gedf2+0x52>
 80014bc:	e7ed      	b.n	800149a <__gedf2+0xa2>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	000007ff 	.word	0x000007ff

080014c4 <__ledf2>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	4647      	mov	r7, r8
 80014c8:	46ce      	mov	lr, r9
 80014ca:	0004      	movs	r4, r0
 80014cc:	0018      	movs	r0, r3
 80014ce:	0016      	movs	r6, r2
 80014d0:	031b      	lsls	r3, r3, #12
 80014d2:	0b1b      	lsrs	r3, r3, #12
 80014d4:	4d2c      	ldr	r5, [pc, #176]	; (8001588 <__ledf2+0xc4>)
 80014d6:	004a      	lsls	r2, r1, #1
 80014d8:	4699      	mov	r9, r3
 80014da:	b580      	push	{r7, lr}
 80014dc:	0043      	lsls	r3, r0, #1
 80014de:	030f      	lsls	r7, r1, #12
 80014e0:	46a4      	mov	ip, r4
 80014e2:	46b0      	mov	r8, r6
 80014e4:	0b3f      	lsrs	r7, r7, #12
 80014e6:	0d52      	lsrs	r2, r2, #21
 80014e8:	0fc9      	lsrs	r1, r1, #31
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	0fc0      	lsrs	r0, r0, #31
 80014ee:	42aa      	cmp	r2, r5
 80014f0:	d00d      	beq.n	800150e <__ledf2+0x4a>
 80014f2:	42ab      	cmp	r3, r5
 80014f4:	d010      	beq.n	8001518 <__ledf2+0x54>
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d127      	bne.n	800154a <__ledf2+0x86>
 80014fa:	433c      	orrs	r4, r7
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <__ledf2+0x60>
 8001500:	464d      	mov	r5, r9
 8001502:	432e      	orrs	r6, r5
 8001504:	d10e      	bne.n	8001524 <__ledf2+0x60>
 8001506:	2000      	movs	r0, #0
 8001508:	2c00      	cmp	r4, #0
 800150a:	d015      	beq.n	8001538 <__ledf2+0x74>
 800150c:	e00e      	b.n	800152c <__ledf2+0x68>
 800150e:	003d      	movs	r5, r7
 8001510:	4325      	orrs	r5, r4
 8001512:	d110      	bne.n	8001536 <__ledf2+0x72>
 8001514:	4293      	cmp	r3, r2
 8001516:	d118      	bne.n	800154a <__ledf2+0x86>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d10b      	bne.n	8001536 <__ledf2+0x72>
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <__ledf2+0x64>
 8001522:	433c      	orrs	r4, r7
 8001524:	2c00      	cmp	r4, #0
 8001526:	d00b      	beq.n	8001540 <__ledf2+0x7c>
 8001528:	4281      	cmp	r1, r0
 800152a:	d014      	beq.n	8001556 <__ledf2+0x92>
 800152c:	2002      	movs	r0, #2
 800152e:	3901      	subs	r1, #1
 8001530:	4008      	ands	r0, r1
 8001532:	3801      	subs	r0, #1
 8001534:	e000      	b.n	8001538 <__ledf2+0x74>
 8001536:	2002      	movs	r0, #2
 8001538:	bcc0      	pop	{r6, r7}
 800153a:	46b9      	mov	r9, r7
 800153c:	46b0      	mov	r8, r6
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f9      	bne.n	8001538 <__ledf2+0x74>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7f6      	b.n	8001538 <__ledf2+0x74>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ec      	bne.n	8001528 <__ledf2+0x64>
 800154e:	464c      	mov	r4, r9
 8001550:	4326      	orrs	r6, r4
 8001552:	d1e9      	bne.n	8001528 <__ledf2+0x64>
 8001554:	e7ea      	b.n	800152c <__ledf2+0x68>
 8001556:	429a      	cmp	r2, r3
 8001558:	dd04      	ble.n	8001564 <__ledf2+0xa0>
 800155a:	4243      	negs	r3, r0
 800155c:	4158      	adcs	r0, r3
 800155e:	0040      	lsls	r0, r0, #1
 8001560:	3801      	subs	r0, #1
 8001562:	e7e9      	b.n	8001538 <__ledf2+0x74>
 8001564:	429a      	cmp	r2, r3
 8001566:	dbeb      	blt.n	8001540 <__ledf2+0x7c>
 8001568:	454f      	cmp	r7, r9
 800156a:	d8df      	bhi.n	800152c <__ledf2+0x68>
 800156c:	d006      	beq.n	800157c <__ledf2+0xb8>
 800156e:	2000      	movs	r0, #0
 8001570:	454f      	cmp	r7, r9
 8001572:	d2e1      	bcs.n	8001538 <__ledf2+0x74>
 8001574:	2900      	cmp	r1, #0
 8001576:	d0e5      	beq.n	8001544 <__ledf2+0x80>
 8001578:	0008      	movs	r0, r1
 800157a:	e7dd      	b.n	8001538 <__ledf2+0x74>
 800157c:	45c4      	cmp	ip, r8
 800157e:	d8d5      	bhi.n	800152c <__ledf2+0x68>
 8001580:	2000      	movs	r0, #0
 8001582:	45c4      	cmp	ip, r8
 8001584:	d2d8      	bcs.n	8001538 <__ledf2+0x74>
 8001586:	e7f5      	b.n	8001574 <__ledf2+0xb0>
 8001588:	000007ff 	.word	0x000007ff

0800158c <__aeabi_dmul>:
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	4645      	mov	r5, r8
 8001590:	46de      	mov	lr, fp
 8001592:	4657      	mov	r7, sl
 8001594:	464e      	mov	r6, r9
 8001596:	b5e0      	push	{r5, r6, r7, lr}
 8001598:	001f      	movs	r7, r3
 800159a:	030b      	lsls	r3, r1, #12
 800159c:	0b1b      	lsrs	r3, r3, #12
 800159e:	469b      	mov	fp, r3
 80015a0:	004d      	lsls	r5, r1, #1
 80015a2:	0fcb      	lsrs	r3, r1, #31
 80015a4:	0004      	movs	r4, r0
 80015a6:	4691      	mov	r9, r2
 80015a8:	4698      	mov	r8, r3
 80015aa:	b087      	sub	sp, #28
 80015ac:	0d6d      	lsrs	r5, r5, #21
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0x26>
 80015b0:	e1cd      	b.n	800194e <__aeabi_dmul+0x3c2>
 80015b2:	4bce      	ldr	r3, [pc, #824]	; (80018ec <__aeabi_dmul+0x360>)
 80015b4:	429d      	cmp	r5, r3
 80015b6:	d100      	bne.n	80015ba <__aeabi_dmul+0x2e>
 80015b8:	e1e9      	b.n	800198e <__aeabi_dmul+0x402>
 80015ba:	465a      	mov	r2, fp
 80015bc:	0f43      	lsrs	r3, r0, #29
 80015be:	00d2      	lsls	r2, r2, #3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0412      	lsls	r2, r2, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	00c3      	lsls	r3, r0, #3
 80015ca:	469a      	mov	sl, r3
 80015cc:	4bc8      	ldr	r3, [pc, #800]	; (80018f0 <__aeabi_dmul+0x364>)
 80015ce:	4693      	mov	fp, r2
 80015d0:	469c      	mov	ip, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	2600      	movs	r6, #0
 80015d6:	4465      	add	r5, ip
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	033c      	lsls	r4, r7, #12
 80015dc:	007b      	lsls	r3, r7, #1
 80015de:	4648      	mov	r0, r9
 80015e0:	0b24      	lsrs	r4, r4, #12
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	0fff      	lsrs	r7, r7, #31
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d100      	bne.n	80015ec <__aeabi_dmul+0x60>
 80015ea:	e189      	b.n	8001900 <__aeabi_dmul+0x374>
 80015ec:	4abf      	ldr	r2, [pc, #764]	; (80018ec <__aeabi_dmul+0x360>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <__aeabi_dmul+0x9a>
 80015f2:	0f42      	lsrs	r2, r0, #29
 80015f4:	00e4      	lsls	r4, r4, #3
 80015f6:	4322      	orrs	r2, r4
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	0424      	lsls	r4, r4, #16
 80015fc:	4314      	orrs	r4, r2
 80015fe:	4abc      	ldr	r2, [pc, #752]	; (80018f0 <__aeabi_dmul+0x364>)
 8001600:	2100      	movs	r1, #0
 8001602:	4694      	mov	ip, r2
 8001604:	4642      	mov	r2, r8
 8001606:	4463      	add	r3, ip
 8001608:	195b      	adds	r3, r3, r5
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	407a      	eors	r2, r7
 8001610:	3301      	adds	r3, #1
 8001612:	00c0      	lsls	r0, r0, #3
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	2e0a      	cmp	r6, #10
 800161a:	dd1c      	ble.n	8001656 <__aeabi_dmul+0xca>
 800161c:	003a      	movs	r2, r7
 800161e:	2e0b      	cmp	r6, #11
 8001620:	d05e      	beq.n	80016e0 <__aeabi_dmul+0x154>
 8001622:	4647      	mov	r7, r8
 8001624:	e056      	b.n	80016d4 <__aeabi_dmul+0x148>
 8001626:	4649      	mov	r1, r9
 8001628:	4bb0      	ldr	r3, [pc, #704]	; (80018ec <__aeabi_dmul+0x360>)
 800162a:	4321      	orrs	r1, r4
 800162c:	18eb      	adds	r3, r5, r3
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2900      	cmp	r1, #0
 8001632:	d12a      	bne.n	800168a <__aeabi_dmul+0xfe>
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	2202      	movs	r2, #2
 8001638:	0100      	lsls	r0, r0, #4
 800163a:	002b      	movs	r3, r5
 800163c:	4684      	mov	ip, r0
 800163e:	4316      	orrs	r6, r2
 8001640:	4642      	mov	r2, r8
 8001642:	4463      	add	r3, ip
 8001644:	407a      	eors	r2, r7
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2e0a      	cmp	r6, #10
 800164c:	dd00      	ble.n	8001650 <__aeabi_dmul+0xc4>
 800164e:	e231      	b.n	8001ab4 <__aeabi_dmul+0x528>
 8001650:	2000      	movs	r0, #0
 8001652:	2400      	movs	r4, #0
 8001654:	2102      	movs	r1, #2
 8001656:	2e02      	cmp	r6, #2
 8001658:	dc26      	bgt.n	80016a8 <__aeabi_dmul+0x11c>
 800165a:	3e01      	subs	r6, #1
 800165c:	2e01      	cmp	r6, #1
 800165e:	d852      	bhi.n	8001706 <__aeabi_dmul+0x17a>
 8001660:	2902      	cmp	r1, #2
 8001662:	d04c      	beq.n	80016fe <__aeabi_dmul+0x172>
 8001664:	2901      	cmp	r1, #1
 8001666:	d000      	beq.n	800166a <__aeabi_dmul+0xde>
 8001668:	e118      	b.n	800189c <__aeabi_dmul+0x310>
 800166a:	2300      	movs	r3, #0
 800166c:	2400      	movs	r4, #0
 800166e:	2500      	movs	r5, #0
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	4323      	orrs	r3, r4
 8001674:	07d2      	lsls	r2, r2, #31
 8001676:	4313      	orrs	r3, r2
 8001678:	0028      	movs	r0, r5
 800167a:	0019      	movs	r1, r3
 800167c:	b007      	add	sp, #28
 800167e:	bcf0      	pop	{r4, r5, r6, r7}
 8001680:	46bb      	mov	fp, r7
 8001682:	46b2      	mov	sl, r6
 8001684:	46a9      	mov	r9, r5
 8001686:	46a0      	mov	r8, r4
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	2203      	movs	r2, #3
 800168e:	0109      	lsls	r1, r1, #4
 8001690:	002b      	movs	r3, r5
 8001692:	468c      	mov	ip, r1
 8001694:	4316      	orrs	r6, r2
 8001696:	4642      	mov	r2, r8
 8001698:	4463      	add	r3, ip
 800169a:	407a      	eors	r2, r7
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2e0a      	cmp	r6, #10
 80016a2:	dd00      	ble.n	80016a6 <__aeabi_dmul+0x11a>
 80016a4:	e228      	b.n	8001af8 <__aeabi_dmul+0x56c>
 80016a6:	2103      	movs	r1, #3
 80016a8:	2501      	movs	r5, #1
 80016aa:	40b5      	lsls	r5, r6
 80016ac:	46ac      	mov	ip, r5
 80016ae:	26a6      	movs	r6, #166	; 0xa6
 80016b0:	4663      	mov	r3, ip
 80016b2:	00f6      	lsls	r6, r6, #3
 80016b4:	4035      	ands	r5, r6
 80016b6:	4233      	tst	r3, r6
 80016b8:	d10b      	bne.n	80016d2 <__aeabi_dmul+0x146>
 80016ba:	2690      	movs	r6, #144	; 0x90
 80016bc:	00b6      	lsls	r6, r6, #2
 80016be:	4233      	tst	r3, r6
 80016c0:	d118      	bne.n	80016f4 <__aeabi_dmul+0x168>
 80016c2:	3eb9      	subs	r6, #185	; 0xb9
 80016c4:	3eff      	subs	r6, #255	; 0xff
 80016c6:	421e      	tst	r6, r3
 80016c8:	d01d      	beq.n	8001706 <__aeabi_dmul+0x17a>
 80016ca:	46a3      	mov	fp, r4
 80016cc:	4682      	mov	sl, r0
 80016ce:	9100      	str	r1, [sp, #0]
 80016d0:	e000      	b.n	80016d4 <__aeabi_dmul+0x148>
 80016d2:	0017      	movs	r7, r2
 80016d4:	9900      	ldr	r1, [sp, #0]
 80016d6:	003a      	movs	r2, r7
 80016d8:	2902      	cmp	r1, #2
 80016da:	d010      	beq.n	80016fe <__aeabi_dmul+0x172>
 80016dc:	465c      	mov	r4, fp
 80016de:	4650      	mov	r0, sl
 80016e0:	2903      	cmp	r1, #3
 80016e2:	d1bf      	bne.n	8001664 <__aeabi_dmul+0xd8>
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	031b      	lsls	r3, r3, #12
 80016e8:	431c      	orrs	r4, r3
 80016ea:	0324      	lsls	r4, r4, #12
 80016ec:	0005      	movs	r5, r0
 80016ee:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <__aeabi_dmul+0x360>)
 80016f0:	0b24      	lsrs	r4, r4, #12
 80016f2:	e7bd      	b.n	8001670 <__aeabi_dmul+0xe4>
 80016f4:	2480      	movs	r4, #128	; 0x80
 80016f6:	2200      	movs	r2, #0
 80016f8:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <__aeabi_dmul+0x360>)
 80016fa:	0324      	lsls	r4, r4, #12
 80016fc:	e7b8      	b.n	8001670 <__aeabi_dmul+0xe4>
 80016fe:	2400      	movs	r4, #0
 8001700:	2500      	movs	r5, #0
 8001702:	4b7a      	ldr	r3, [pc, #488]	; (80018ec <__aeabi_dmul+0x360>)
 8001704:	e7b4      	b.n	8001670 <__aeabi_dmul+0xe4>
 8001706:	4653      	mov	r3, sl
 8001708:	041e      	lsls	r6, r3, #16
 800170a:	0c36      	lsrs	r6, r6, #16
 800170c:	0c1f      	lsrs	r7, r3, #16
 800170e:	0033      	movs	r3, r6
 8001710:	0c01      	lsrs	r1, r0, #16
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	4343      	muls	r3, r0
 8001718:	4698      	mov	r8, r3
 800171a:	0003      	movs	r3, r0
 800171c:	437b      	muls	r3, r7
 800171e:	4699      	mov	r9, r3
 8001720:	0033      	movs	r3, r6
 8001722:	434b      	muls	r3, r1
 8001724:	469c      	mov	ip, r3
 8001726:	4643      	mov	r3, r8
 8001728:	000d      	movs	r5, r1
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	469a      	mov	sl, r3
 800172e:	437d      	muls	r5, r7
 8001730:	44cc      	add	ip, r9
 8001732:	44d4      	add	ip, sl
 8001734:	9500      	str	r5, [sp, #0]
 8001736:	45e1      	cmp	r9, ip
 8001738:	d904      	bls.n	8001744 <__aeabi_dmul+0x1b8>
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	4699      	mov	r9, r3
 8001740:	444d      	add	r5, r9
 8001742:	9500      	str	r5, [sp, #0]
 8001744:	4663      	mov	r3, ip
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	001d      	movs	r5, r3
 800174a:	4663      	mov	r3, ip
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	469c      	mov	ip, r3
 8001750:	4643      	mov	r3, r8
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	4698      	mov	r8, r3
 8001758:	4663      	mov	r3, ip
 800175a:	4443      	add	r3, r8
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	0c23      	lsrs	r3, r4, #16
 8001760:	4698      	mov	r8, r3
 8001762:	0033      	movs	r3, r6
 8001764:	0424      	lsls	r4, r4, #16
 8001766:	0c24      	lsrs	r4, r4, #16
 8001768:	4363      	muls	r3, r4
 800176a:	469c      	mov	ip, r3
 800176c:	0023      	movs	r3, r4
 800176e:	437b      	muls	r3, r7
 8001770:	4699      	mov	r9, r3
 8001772:	4643      	mov	r3, r8
 8001774:	435e      	muls	r6, r3
 8001776:	435f      	muls	r7, r3
 8001778:	444e      	add	r6, r9
 800177a:	4663      	mov	r3, ip
 800177c:	46b2      	mov	sl, r6
 800177e:	0c1e      	lsrs	r6, r3, #16
 8001780:	4456      	add	r6, sl
 8001782:	45b1      	cmp	r9, r6
 8001784:	d903      	bls.n	800178e <__aeabi_dmul+0x202>
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4699      	mov	r9, r3
 800178c:	444f      	add	r7, r9
 800178e:	0c33      	lsrs	r3, r6, #16
 8001790:	4699      	mov	r9, r3
 8001792:	003b      	movs	r3, r7
 8001794:	444b      	add	r3, r9
 8001796:	9305      	str	r3, [sp, #20]
 8001798:	4663      	mov	r3, ip
 800179a:	46ac      	mov	ip, r5
 800179c:	041f      	lsls	r7, r3, #16
 800179e:	0c3f      	lsrs	r7, r7, #16
 80017a0:	0436      	lsls	r6, r6, #16
 80017a2:	19f6      	adds	r6, r6, r7
 80017a4:	44b4      	add	ip, r6
 80017a6:	4663      	mov	r3, ip
 80017a8:	9304      	str	r3, [sp, #16]
 80017aa:	465b      	mov	r3, fp
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	469c      	mov	ip, r3
 80017b0:	465b      	mov	r3, fp
 80017b2:	041f      	lsls	r7, r3, #16
 80017b4:	0c3f      	lsrs	r7, r7, #16
 80017b6:	003b      	movs	r3, r7
 80017b8:	4343      	muls	r3, r0
 80017ba:	4699      	mov	r9, r3
 80017bc:	4663      	mov	r3, ip
 80017be:	4343      	muls	r3, r0
 80017c0:	469a      	mov	sl, r3
 80017c2:	464b      	mov	r3, r9
 80017c4:	4660      	mov	r0, ip
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	469b      	mov	fp, r3
 80017ca:	4348      	muls	r0, r1
 80017cc:	4379      	muls	r1, r7
 80017ce:	4451      	add	r1, sl
 80017d0:	4459      	add	r1, fp
 80017d2:	458a      	cmp	sl, r1
 80017d4:	d903      	bls.n	80017de <__aeabi_dmul+0x252>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	469a      	mov	sl, r3
 80017dc:	4450      	add	r0, sl
 80017de:	0c0b      	lsrs	r3, r1, #16
 80017e0:	469a      	mov	sl, r3
 80017e2:	464b      	mov	r3, r9
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	4699      	mov	r9, r3
 80017ea:	003b      	movs	r3, r7
 80017ec:	4363      	muls	r3, r4
 80017ee:	0409      	lsls	r1, r1, #16
 80017f0:	4645      	mov	r5, r8
 80017f2:	4449      	add	r1, r9
 80017f4:	4699      	mov	r9, r3
 80017f6:	4663      	mov	r3, ip
 80017f8:	435c      	muls	r4, r3
 80017fa:	436b      	muls	r3, r5
 80017fc:	469c      	mov	ip, r3
 80017fe:	464b      	mov	r3, r9
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	4698      	mov	r8, r3
 8001804:	436f      	muls	r7, r5
 8001806:	193f      	adds	r7, r7, r4
 8001808:	4447      	add	r7, r8
 800180a:	4450      	add	r0, sl
 800180c:	42bc      	cmp	r4, r7
 800180e:	d903      	bls.n	8001818 <__aeabi_dmul+0x28c>
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	4698      	mov	r8, r3
 8001816:	44c4      	add	ip, r8
 8001818:	9b04      	ldr	r3, [sp, #16]
 800181a:	9d00      	ldr	r5, [sp, #0]
 800181c:	4698      	mov	r8, r3
 800181e:	4445      	add	r5, r8
 8001820:	42b5      	cmp	r5, r6
 8001822:	41b6      	sbcs	r6, r6
 8001824:	4273      	negs	r3, r6
 8001826:	4698      	mov	r8, r3
 8001828:	464b      	mov	r3, r9
 800182a:	041e      	lsls	r6, r3, #16
 800182c:	9b05      	ldr	r3, [sp, #20]
 800182e:	043c      	lsls	r4, r7, #16
 8001830:	4699      	mov	r9, r3
 8001832:	0c36      	lsrs	r6, r6, #16
 8001834:	19a4      	adds	r4, r4, r6
 8001836:	444c      	add	r4, r9
 8001838:	46a1      	mov	r9, r4
 800183a:	4683      	mov	fp, r0
 800183c:	186e      	adds	r6, r5, r1
 800183e:	44c1      	add	r9, r8
 8001840:	428e      	cmp	r6, r1
 8001842:	4189      	sbcs	r1, r1
 8001844:	44cb      	add	fp, r9
 8001846:	465d      	mov	r5, fp
 8001848:	4249      	negs	r1, r1
 800184a:	186d      	adds	r5, r5, r1
 800184c:	429c      	cmp	r4, r3
 800184e:	41a4      	sbcs	r4, r4
 8001850:	45c1      	cmp	r9, r8
 8001852:	419b      	sbcs	r3, r3
 8001854:	4583      	cmp	fp, r0
 8001856:	4180      	sbcs	r0, r0
 8001858:	428d      	cmp	r5, r1
 800185a:	4189      	sbcs	r1, r1
 800185c:	425b      	negs	r3, r3
 800185e:	4264      	negs	r4, r4
 8001860:	431c      	orrs	r4, r3
 8001862:	4240      	negs	r0, r0
 8001864:	9b03      	ldr	r3, [sp, #12]
 8001866:	4249      	negs	r1, r1
 8001868:	4301      	orrs	r1, r0
 800186a:	0270      	lsls	r0, r6, #9
 800186c:	0c3f      	lsrs	r7, r7, #16
 800186e:	4318      	orrs	r0, r3
 8001870:	19e4      	adds	r4, r4, r7
 8001872:	1e47      	subs	r7, r0, #1
 8001874:	41b8      	sbcs	r0, r7
 8001876:	1864      	adds	r4, r4, r1
 8001878:	4464      	add	r4, ip
 800187a:	0df6      	lsrs	r6, r6, #23
 800187c:	0261      	lsls	r1, r4, #9
 800187e:	4330      	orrs	r0, r6
 8001880:	0dec      	lsrs	r4, r5, #23
 8001882:	026e      	lsls	r6, r5, #9
 8001884:	430c      	orrs	r4, r1
 8001886:	4330      	orrs	r0, r6
 8001888:	01c9      	lsls	r1, r1, #7
 800188a:	d400      	bmi.n	800188e <__aeabi_dmul+0x302>
 800188c:	e0f1      	b.n	8001a72 <__aeabi_dmul+0x4e6>
 800188e:	2101      	movs	r1, #1
 8001890:	0843      	lsrs	r3, r0, #1
 8001892:	4001      	ands	r1, r0
 8001894:	430b      	orrs	r3, r1
 8001896:	07e0      	lsls	r0, r4, #31
 8001898:	4318      	orrs	r0, r3
 800189a:	0864      	lsrs	r4, r4, #1
 800189c:	4915      	ldr	r1, [pc, #84]	; (80018f4 <__aeabi_dmul+0x368>)
 800189e:	9b02      	ldr	r3, [sp, #8]
 80018a0:	468c      	mov	ip, r1
 80018a2:	4463      	add	r3, ip
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	dc00      	bgt.n	80018aa <__aeabi_dmul+0x31e>
 80018a8:	e097      	b.n	80019da <__aeabi_dmul+0x44e>
 80018aa:	0741      	lsls	r1, r0, #29
 80018ac:	d009      	beq.n	80018c2 <__aeabi_dmul+0x336>
 80018ae:	210f      	movs	r1, #15
 80018b0:	4001      	ands	r1, r0
 80018b2:	2904      	cmp	r1, #4
 80018b4:	d005      	beq.n	80018c2 <__aeabi_dmul+0x336>
 80018b6:	1d01      	adds	r1, r0, #4
 80018b8:	4281      	cmp	r1, r0
 80018ba:	4180      	sbcs	r0, r0
 80018bc:	4240      	negs	r0, r0
 80018be:	1824      	adds	r4, r4, r0
 80018c0:	0008      	movs	r0, r1
 80018c2:	01e1      	lsls	r1, r4, #7
 80018c4:	d506      	bpl.n	80018d4 <__aeabi_dmul+0x348>
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	00c9      	lsls	r1, r1, #3
 80018ca:	468c      	mov	ip, r1
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <__aeabi_dmul+0x36c>)
 80018ce:	401c      	ands	r4, r3
 80018d0:	9b02      	ldr	r3, [sp, #8]
 80018d2:	4463      	add	r3, ip
 80018d4:	4909      	ldr	r1, [pc, #36]	; (80018fc <__aeabi_dmul+0x370>)
 80018d6:	428b      	cmp	r3, r1
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dmul+0x350>
 80018da:	e710      	b.n	80016fe <__aeabi_dmul+0x172>
 80018dc:	0761      	lsls	r1, r4, #29
 80018de:	08c5      	lsrs	r5, r0, #3
 80018e0:	0264      	lsls	r4, r4, #9
 80018e2:	055b      	lsls	r3, r3, #21
 80018e4:	430d      	orrs	r5, r1
 80018e6:	0b24      	lsrs	r4, r4, #12
 80018e8:	0d5b      	lsrs	r3, r3, #21
 80018ea:	e6c1      	b.n	8001670 <__aeabi_dmul+0xe4>
 80018ec:	000007ff 	.word	0x000007ff
 80018f0:	fffffc01 	.word	0xfffffc01
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	feffffff 	.word	0xfeffffff
 80018fc:	000007fe 	.word	0x000007fe
 8001900:	464b      	mov	r3, r9
 8001902:	4323      	orrs	r3, r4
 8001904:	d059      	beq.n	80019ba <__aeabi_dmul+0x42e>
 8001906:	2c00      	cmp	r4, #0
 8001908:	d100      	bne.n	800190c <__aeabi_dmul+0x380>
 800190a:	e0a3      	b.n	8001a54 <__aeabi_dmul+0x4c8>
 800190c:	0020      	movs	r0, r4
 800190e:	f000 fd2b 	bl	8002368 <__clzsi2>
 8001912:	0001      	movs	r1, r0
 8001914:	0003      	movs	r3, r0
 8001916:	390b      	subs	r1, #11
 8001918:	221d      	movs	r2, #29
 800191a:	1a52      	subs	r2, r2, r1
 800191c:	4649      	mov	r1, r9
 800191e:	0018      	movs	r0, r3
 8001920:	40d1      	lsrs	r1, r2
 8001922:	464a      	mov	r2, r9
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	4084      	lsls	r4, r0
 800192a:	0010      	movs	r0, r2
 800192c:	430c      	orrs	r4, r1
 800192e:	4a74      	ldr	r2, [pc, #464]	; (8001b00 <__aeabi_dmul+0x574>)
 8001930:	1aeb      	subs	r3, r5, r3
 8001932:	4694      	mov	ip, r2
 8001934:	4642      	mov	r2, r8
 8001936:	4463      	add	r3, ip
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	9b01      	ldr	r3, [sp, #4]
 800193c:	407a      	eors	r2, r7
 800193e:	3301      	adds	r3, #1
 8001940:	2100      	movs	r1, #0
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2e0a      	cmp	r6, #10
 8001948:	dd00      	ble.n	800194c <__aeabi_dmul+0x3c0>
 800194a:	e667      	b.n	800161c <__aeabi_dmul+0x90>
 800194c:	e683      	b.n	8001656 <__aeabi_dmul+0xca>
 800194e:	465b      	mov	r3, fp
 8001950:	4303      	orrs	r3, r0
 8001952:	469a      	mov	sl, r3
 8001954:	d02a      	beq.n	80019ac <__aeabi_dmul+0x420>
 8001956:	465b      	mov	r3, fp
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06d      	beq.n	8001a38 <__aeabi_dmul+0x4ac>
 800195c:	4658      	mov	r0, fp
 800195e:	f000 fd03 	bl	8002368 <__clzsi2>
 8001962:	0001      	movs	r1, r0
 8001964:	0003      	movs	r3, r0
 8001966:	390b      	subs	r1, #11
 8001968:	221d      	movs	r2, #29
 800196a:	1a52      	subs	r2, r2, r1
 800196c:	0021      	movs	r1, r4
 800196e:	0018      	movs	r0, r3
 8001970:	465d      	mov	r5, fp
 8001972:	40d1      	lsrs	r1, r2
 8001974:	3808      	subs	r0, #8
 8001976:	4085      	lsls	r5, r0
 8001978:	000a      	movs	r2, r1
 800197a:	4084      	lsls	r4, r0
 800197c:	432a      	orrs	r2, r5
 800197e:	4693      	mov	fp, r2
 8001980:	46a2      	mov	sl, r4
 8001982:	4d5f      	ldr	r5, [pc, #380]	; (8001b00 <__aeabi_dmul+0x574>)
 8001984:	2600      	movs	r6, #0
 8001986:	1aed      	subs	r5, r5, r3
 8001988:	2300      	movs	r3, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	e625      	b.n	80015da <__aeabi_dmul+0x4e>
 800198e:	465b      	mov	r3, fp
 8001990:	4303      	orrs	r3, r0
 8001992:	469a      	mov	sl, r3
 8001994:	d105      	bne.n	80019a2 <__aeabi_dmul+0x416>
 8001996:	2300      	movs	r3, #0
 8001998:	469b      	mov	fp, r3
 800199a:	3302      	adds	r3, #2
 800199c:	2608      	movs	r6, #8
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	e61b      	b.n	80015da <__aeabi_dmul+0x4e>
 80019a2:	2303      	movs	r3, #3
 80019a4:	4682      	mov	sl, r0
 80019a6:	260c      	movs	r6, #12
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	e616      	b.n	80015da <__aeabi_dmul+0x4e>
 80019ac:	2300      	movs	r3, #0
 80019ae:	469b      	mov	fp, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	2604      	movs	r6, #4
 80019b4:	2500      	movs	r5, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	e60f      	b.n	80015da <__aeabi_dmul+0x4e>
 80019ba:	4642      	mov	r2, r8
 80019bc:	3301      	adds	r3, #1
 80019be:	9501      	str	r5, [sp, #4]
 80019c0:	431e      	orrs	r6, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	407a      	eors	r2, r7
 80019c6:	3301      	adds	r3, #1
 80019c8:	2400      	movs	r4, #0
 80019ca:	2000      	movs	r0, #0
 80019cc:	2101      	movs	r1, #1
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2e0a      	cmp	r6, #10
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dmul+0x44c>
 80019d6:	e621      	b.n	800161c <__aeabi_dmul+0x90>
 80019d8:	e63d      	b.n	8001656 <__aeabi_dmul+0xca>
 80019da:	2101      	movs	r1, #1
 80019dc:	1ac9      	subs	r1, r1, r3
 80019de:	2938      	cmp	r1, #56	; 0x38
 80019e0:	dd00      	ble.n	80019e4 <__aeabi_dmul+0x458>
 80019e2:	e642      	b.n	800166a <__aeabi_dmul+0xde>
 80019e4:	291f      	cmp	r1, #31
 80019e6:	dd47      	ble.n	8001a78 <__aeabi_dmul+0x4ec>
 80019e8:	261f      	movs	r6, #31
 80019ea:	0025      	movs	r5, r4
 80019ec:	4276      	negs	r6, r6
 80019ee:	1af3      	subs	r3, r6, r3
 80019f0:	40dd      	lsrs	r5, r3
 80019f2:	002b      	movs	r3, r5
 80019f4:	2920      	cmp	r1, #32
 80019f6:	d005      	beq.n	8001a04 <__aeabi_dmul+0x478>
 80019f8:	4942      	ldr	r1, [pc, #264]	; (8001b04 <__aeabi_dmul+0x578>)
 80019fa:	9d02      	ldr	r5, [sp, #8]
 80019fc:	468c      	mov	ip, r1
 80019fe:	4465      	add	r5, ip
 8001a00:	40ac      	lsls	r4, r5
 8001a02:	4320      	orrs	r0, r4
 8001a04:	1e41      	subs	r1, r0, #1
 8001a06:	4188      	sbcs	r0, r1
 8001a08:	4318      	orrs	r0, r3
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	001d      	movs	r5, r3
 8001a0e:	2400      	movs	r4, #0
 8001a10:	4005      	ands	r5, r0
 8001a12:	4203      	tst	r3, r0
 8001a14:	d04a      	beq.n	8001aac <__aeabi_dmul+0x520>
 8001a16:	230f      	movs	r3, #15
 8001a18:	2400      	movs	r4, #0
 8001a1a:	4003      	ands	r3, r0
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d042      	beq.n	8001aa6 <__aeabi_dmul+0x51a>
 8001a20:	1d03      	adds	r3, r0, #4
 8001a22:	4283      	cmp	r3, r0
 8001a24:	4180      	sbcs	r0, r0
 8001a26:	4240      	negs	r0, r0
 8001a28:	1824      	adds	r4, r4, r0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	0223      	lsls	r3, r4, #8
 8001a2e:	d53a      	bpl.n	8001aa6 <__aeabi_dmul+0x51a>
 8001a30:	2301      	movs	r3, #1
 8001a32:	2400      	movs	r4, #0
 8001a34:	2500      	movs	r5, #0
 8001a36:	e61b      	b.n	8001670 <__aeabi_dmul+0xe4>
 8001a38:	f000 fc96 	bl	8002368 <__clzsi2>
 8001a3c:	0001      	movs	r1, r0
 8001a3e:	0003      	movs	r3, r0
 8001a40:	3115      	adds	r1, #21
 8001a42:	3320      	adds	r3, #32
 8001a44:	291c      	cmp	r1, #28
 8001a46:	dd8f      	ble.n	8001968 <__aeabi_dmul+0x3dc>
 8001a48:	3808      	subs	r0, #8
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4084      	lsls	r4, r0
 8001a4e:	4692      	mov	sl, r2
 8001a50:	46a3      	mov	fp, r4
 8001a52:	e796      	b.n	8001982 <__aeabi_dmul+0x3f6>
 8001a54:	f000 fc88 	bl	8002368 <__clzsi2>
 8001a58:	0001      	movs	r1, r0
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	3115      	adds	r1, #21
 8001a5e:	3320      	adds	r3, #32
 8001a60:	291c      	cmp	r1, #28
 8001a62:	dc00      	bgt.n	8001a66 <__aeabi_dmul+0x4da>
 8001a64:	e758      	b.n	8001918 <__aeabi_dmul+0x38c>
 8001a66:	0002      	movs	r2, r0
 8001a68:	464c      	mov	r4, r9
 8001a6a:	3a08      	subs	r2, #8
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	4094      	lsls	r4, r2
 8001a70:	e75d      	b.n	800192e <__aeabi_dmul+0x3a2>
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	e711      	b.n	800189c <__aeabi_dmul+0x310>
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <__aeabi_dmul+0x57c>)
 8001a7a:	0026      	movs	r6, r4
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	0003      	movs	r3, r0
 8001a80:	9d02      	ldr	r5, [sp, #8]
 8001a82:	40cb      	lsrs	r3, r1
 8001a84:	4465      	add	r5, ip
 8001a86:	40ae      	lsls	r6, r5
 8001a88:	431e      	orrs	r6, r3
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	40ab      	lsls	r3, r5
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	4183      	sbcs	r3, r0
 8001a92:	0030      	movs	r0, r6
 8001a94:	4318      	orrs	r0, r3
 8001a96:	40cc      	lsrs	r4, r1
 8001a98:	0743      	lsls	r3, r0, #29
 8001a9a:	d0c7      	beq.n	8001a2c <__aeabi_dmul+0x4a0>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d1bd      	bne.n	8001a20 <__aeabi_dmul+0x494>
 8001aa4:	e7c2      	b.n	8001a2c <__aeabi_dmul+0x4a0>
 8001aa6:	0765      	lsls	r5, r4, #29
 8001aa8:	0264      	lsls	r4, r4, #9
 8001aaa:	0b24      	lsrs	r4, r4, #12
 8001aac:	08c0      	lsrs	r0, r0, #3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4305      	orrs	r5, r0
 8001ab2:	e5dd      	b.n	8001670 <__aeabi_dmul+0xe4>
 8001ab4:	2500      	movs	r5, #0
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	2e0f      	cmp	r6, #15
 8001aba:	d10c      	bne.n	8001ad6 <__aeabi_dmul+0x54a>
 8001abc:	2480      	movs	r4, #128	; 0x80
 8001abe:	465b      	mov	r3, fp
 8001ac0:	0324      	lsls	r4, r4, #12
 8001ac2:	4223      	tst	r3, r4
 8001ac4:	d00e      	beq.n	8001ae4 <__aeabi_dmul+0x558>
 8001ac6:	4221      	tst	r1, r4
 8001ac8:	d10c      	bne.n	8001ae4 <__aeabi_dmul+0x558>
 8001aca:	430c      	orrs	r4, r1
 8001acc:	0324      	lsls	r4, r4, #12
 8001ace:	003a      	movs	r2, r7
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <__aeabi_dmul+0x580>)
 8001ad2:	0b24      	lsrs	r4, r4, #12
 8001ad4:	e5cc      	b.n	8001670 <__aeabi_dmul+0xe4>
 8001ad6:	2e0b      	cmp	r6, #11
 8001ad8:	d000      	beq.n	8001adc <__aeabi_dmul+0x550>
 8001ada:	e5a2      	b.n	8001622 <__aeabi_dmul+0x96>
 8001adc:	468b      	mov	fp, r1
 8001ade:	46aa      	mov	sl, r5
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	e5f7      	b.n	80016d4 <__aeabi_dmul+0x148>
 8001ae4:	2480      	movs	r4, #128	; 0x80
 8001ae6:	465b      	mov	r3, fp
 8001ae8:	0324      	lsls	r4, r4, #12
 8001aea:	431c      	orrs	r4, r3
 8001aec:	0324      	lsls	r4, r4, #12
 8001aee:	4642      	mov	r2, r8
 8001af0:	4655      	mov	r5, sl
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <__aeabi_dmul+0x580>)
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	e5bb      	b.n	8001670 <__aeabi_dmul+0xe4>
 8001af8:	464d      	mov	r5, r9
 8001afa:	0021      	movs	r1, r4
 8001afc:	2303      	movs	r3, #3
 8001afe:	e7db      	b.n	8001ab8 <__aeabi_dmul+0x52c>
 8001b00:	fffffc0d 	.word	0xfffffc0d
 8001b04:	0000043e 	.word	0x0000043e
 8001b08:	0000041e 	.word	0x0000041e
 8001b0c:	000007ff 	.word	0x000007ff

08001b10 <__aeabi_dsub>:
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	4657      	mov	r7, sl
 8001b14:	464e      	mov	r6, r9
 8001b16:	4645      	mov	r5, r8
 8001b18:	46de      	mov	lr, fp
 8001b1a:	b5e0      	push	{r5, r6, r7, lr}
 8001b1c:	000d      	movs	r5, r1
 8001b1e:	0004      	movs	r4, r0
 8001b20:	0019      	movs	r1, r3
 8001b22:	0010      	movs	r0, r2
 8001b24:	032b      	lsls	r3, r5, #12
 8001b26:	0a5b      	lsrs	r3, r3, #9
 8001b28:	0f62      	lsrs	r2, r4, #29
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	00e3      	lsls	r3, r4, #3
 8001b2e:	030c      	lsls	r4, r1, #12
 8001b30:	0a64      	lsrs	r4, r4, #9
 8001b32:	0f47      	lsrs	r7, r0, #29
 8001b34:	4327      	orrs	r7, r4
 8001b36:	4cd0      	ldr	r4, [pc, #832]	; (8001e78 <__aeabi_dsub+0x368>)
 8001b38:	006e      	lsls	r6, r5, #1
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	004a      	lsls	r2, r1, #1
 8001b40:	00c0      	lsls	r0, r0, #3
 8001b42:	4698      	mov	r8, r3
 8001b44:	46a2      	mov	sl, r4
 8001b46:	0d76      	lsrs	r6, r6, #21
 8001b48:	0fed      	lsrs	r5, r5, #31
 8001b4a:	0d52      	lsrs	r2, r2, #21
 8001b4c:	0fc9      	lsrs	r1, r1, #31
 8001b4e:	9001      	str	r0, [sp, #4]
 8001b50:	42a2      	cmp	r2, r4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dsub+0x46>
 8001b54:	e0b9      	b.n	8001cca <__aeabi_dsub+0x1ba>
 8001b56:	2401      	movs	r4, #1
 8001b58:	4061      	eors	r1, r4
 8001b5a:	468b      	mov	fp, r1
 8001b5c:	428d      	cmp	r5, r1
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x52>
 8001b60:	e08d      	b.n	8001c7e <__aeabi_dsub+0x16e>
 8001b62:	1ab4      	subs	r4, r6, r2
 8001b64:	46a4      	mov	ip, r4
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	dc00      	bgt.n	8001b6c <__aeabi_dsub+0x5c>
 8001b6a:	e0b7      	b.n	8001cdc <__aeabi_dsub+0x1cc>
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x62>
 8001b70:	e0cb      	b.n	8001d0a <__aeabi_dsub+0x1fa>
 8001b72:	4ac1      	ldr	r2, [pc, #772]	; (8001e78 <__aeabi_dsub+0x368>)
 8001b74:	4296      	cmp	r6, r2
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dsub+0x6a>
 8001b78:	e186      	b.n	8001e88 <__aeabi_dsub+0x378>
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0412      	lsls	r2, r2, #16
 8001b7e:	4317      	orrs	r7, r2
 8001b80:	4662      	mov	r2, ip
 8001b82:	2a38      	cmp	r2, #56	; 0x38
 8001b84:	dd00      	ble.n	8001b88 <__aeabi_dsub+0x78>
 8001b86:	e1a4      	b.n	8001ed2 <__aeabi_dsub+0x3c2>
 8001b88:	2a1f      	cmp	r2, #31
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dsub+0x7e>
 8001b8c:	e21d      	b.n	8001fca <__aeabi_dsub+0x4ba>
 8001b8e:	4661      	mov	r1, ip
 8001b90:	2220      	movs	r2, #32
 8001b92:	003c      	movs	r4, r7
 8001b94:	1a52      	subs	r2, r2, r1
 8001b96:	0001      	movs	r1, r0
 8001b98:	4090      	lsls	r0, r2
 8001b9a:	4094      	lsls	r4, r2
 8001b9c:	1e42      	subs	r2, r0, #1
 8001b9e:	4190      	sbcs	r0, r2
 8001ba0:	4662      	mov	r2, ip
 8001ba2:	46a0      	mov	r8, r4
 8001ba4:	4664      	mov	r4, ip
 8001ba6:	40d7      	lsrs	r7, r2
 8001ba8:	464a      	mov	r2, r9
 8001baa:	40e1      	lsrs	r1, r4
 8001bac:	4644      	mov	r4, r8
 8001bae:	1bd2      	subs	r2, r2, r7
 8001bb0:	4691      	mov	r9, r2
 8001bb2:	430c      	orrs	r4, r1
 8001bb4:	4304      	orrs	r4, r0
 8001bb6:	1b1c      	subs	r4, r3, r4
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	469a      	mov	sl, r3
 8001bc4:	4653      	mov	r3, sl
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	d400      	bmi.n	8001bcc <__aeabi_dsub+0xbc>
 8001bca:	e12b      	b.n	8001e24 <__aeabi_dsub+0x314>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	025a      	lsls	r2, r3, #9
 8001bd0:	0a53      	lsrs	r3, r2, #9
 8001bd2:	469a      	mov	sl, r3
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0xcc>
 8001bda:	e166      	b.n	8001eaa <__aeabi_dsub+0x39a>
 8001bdc:	4650      	mov	r0, sl
 8001bde:	f000 fbc3 	bl	8002368 <__clzsi2>
 8001be2:	0003      	movs	r3, r0
 8001be4:	3b08      	subs	r3, #8
 8001be6:	2220      	movs	r2, #32
 8001be8:	0020      	movs	r0, r4
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4651      	mov	r1, sl
 8001bee:	40d0      	lsrs	r0, r2
 8001bf0:	4099      	lsls	r1, r3
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	409c      	lsls	r4, r3
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	429e      	cmp	r6, r3
 8001bfa:	dd00      	ble.n	8001bfe <__aeabi_dsub+0xee>
 8001bfc:	e164      	b.n	8001ec8 <__aeabi_dsub+0x3b8>
 8001bfe:	1b9b      	subs	r3, r3, r6
 8001c00:	1c59      	adds	r1, r3, #1
 8001c02:	291f      	cmp	r1, #31
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0xf8>
 8001c06:	e0fe      	b.n	8001e06 <__aeabi_dsub+0x2f6>
 8001c08:	2320      	movs	r3, #32
 8001c0a:	0010      	movs	r0, r2
 8001c0c:	0026      	movs	r6, r4
 8001c0e:	1a5b      	subs	r3, r3, r1
 8001c10:	409c      	lsls	r4, r3
 8001c12:	4098      	lsls	r0, r3
 8001c14:	40ce      	lsrs	r6, r1
 8001c16:	40ca      	lsrs	r2, r1
 8001c18:	1e63      	subs	r3, r4, #1
 8001c1a:	419c      	sbcs	r4, r3
 8001c1c:	4330      	orrs	r0, r6
 8001c1e:	4692      	mov	sl, r2
 8001c20:	2600      	movs	r6, #0
 8001c22:	4304      	orrs	r4, r0
 8001c24:	0763      	lsls	r3, r4, #29
 8001c26:	d009      	beq.n	8001c3c <__aeabi_dsub+0x12c>
 8001c28:	230f      	movs	r3, #15
 8001c2a:	4023      	ands	r3, r4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d005      	beq.n	8001c3c <__aeabi_dsub+0x12c>
 8001c30:	1d23      	adds	r3, r4, #4
 8001c32:	42a3      	cmp	r3, r4
 8001c34:	41a4      	sbcs	r4, r4
 8001c36:	4264      	negs	r4, r4
 8001c38:	44a2      	add	sl, r4
 8001c3a:	001c      	movs	r4, r3
 8001c3c:	4653      	mov	r3, sl
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	d400      	bmi.n	8001c44 <__aeabi_dsub+0x134>
 8001c42:	e0f2      	b.n	8001e2a <__aeabi_dsub+0x31a>
 8001c44:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <__aeabi_dsub+0x368>)
 8001c46:	3601      	adds	r6, #1
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x13e>
 8001c4c:	e10f      	b.n	8001e6e <__aeabi_dsub+0x35e>
 8001c4e:	4653      	mov	r3, sl
 8001c50:	498a      	ldr	r1, [pc, #552]	; (8001e7c <__aeabi_dsub+0x36c>)
 8001c52:	08e4      	lsrs	r4, r4, #3
 8001c54:	400b      	ands	r3, r1
 8001c56:	0019      	movs	r1, r3
 8001c58:	075b      	lsls	r3, r3, #29
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	0572      	lsls	r2, r6, #21
 8001c5e:	024c      	lsls	r4, r1, #9
 8001c60:	0b24      	lsrs	r4, r4, #12
 8001c62:	0d52      	lsrs	r2, r2, #21
 8001c64:	0512      	lsls	r2, r2, #20
 8001c66:	4322      	orrs	r2, r4
 8001c68:	07ed      	lsls	r5, r5, #31
 8001c6a:	432a      	orrs	r2, r5
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	0011      	movs	r1, r2
 8001c70:	b003      	add	sp, #12
 8001c72:	bcf0      	pop	{r4, r5, r6, r7}
 8001c74:	46bb      	mov	fp, r7
 8001c76:	46b2      	mov	sl, r6
 8001c78:	46a9      	mov	r9, r5
 8001c7a:	46a0      	mov	r8, r4
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7e:	1ab4      	subs	r4, r6, r2
 8001c80:	46a4      	mov	ip, r4
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	dd59      	ble.n	8001d3a <__aeabi_dsub+0x22a>
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x17c>
 8001c8a:	e0b0      	b.n	8001dee <__aeabi_dsub+0x2de>
 8001c8c:	4556      	cmp	r6, sl
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x182>
 8001c90:	e0fa      	b.n	8001e88 <__aeabi_dsub+0x378>
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	0412      	lsls	r2, r2, #16
 8001c96:	4317      	orrs	r7, r2
 8001c98:	4662      	mov	r2, ip
 8001c9a:	2a38      	cmp	r2, #56	; 0x38
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dsub+0x190>
 8001c9e:	e0d4      	b.n	8001e4a <__aeabi_dsub+0x33a>
 8001ca0:	2a1f      	cmp	r2, #31
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_dsub+0x196>
 8001ca4:	e1c0      	b.n	8002028 <__aeabi_dsub+0x518>
 8001ca6:	0039      	movs	r1, r7
 8001ca8:	3a20      	subs	r2, #32
 8001caa:	40d1      	lsrs	r1, r2
 8001cac:	4662      	mov	r2, ip
 8001cae:	2a20      	cmp	r2, #32
 8001cb0:	d006      	beq.n	8001cc0 <__aeabi_dsub+0x1b0>
 8001cb2:	4664      	mov	r4, ip
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	1b12      	subs	r2, r2, r4
 8001cb8:	003c      	movs	r4, r7
 8001cba:	4094      	lsls	r4, r2
 8001cbc:	4304      	orrs	r4, r0
 8001cbe:	9401      	str	r4, [sp, #4]
 8001cc0:	9c01      	ldr	r4, [sp, #4]
 8001cc2:	1e62      	subs	r2, r4, #1
 8001cc4:	4194      	sbcs	r4, r2
 8001cc6:	430c      	orrs	r4, r1
 8001cc8:	e0c3      	b.n	8001e52 <__aeabi_dsub+0x342>
 8001cca:	003c      	movs	r4, r7
 8001ccc:	4304      	orrs	r4, r0
 8001cce:	d02b      	beq.n	8001d28 <__aeabi_dsub+0x218>
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d02e      	beq.n	8001d34 <__aeabi_dsub+0x224>
 8001cd6:	4c6a      	ldr	r4, [pc, #424]	; (8001e80 <__aeabi_dsub+0x370>)
 8001cd8:	46a4      	mov	ip, r4
 8001cda:	44b4      	add	ip, r6
 8001cdc:	4664      	mov	r4, ip
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d05f      	beq.n	8001da2 <__aeabi_dsub+0x292>
 8001ce2:	1b94      	subs	r4, r2, r6
 8001ce4:	46a4      	mov	ip, r4
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	d000      	beq.n	8001cec <__aeabi_dsub+0x1dc>
 8001cea:	e120      	b.n	8001f2e <__aeabi_dsub+0x41e>
 8001cec:	464c      	mov	r4, r9
 8001cee:	431c      	orrs	r4, r3
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x1e4>
 8001cf2:	e1c7      	b.n	8002084 <__aeabi_dsub+0x574>
 8001cf4:	4661      	mov	r1, ip
 8001cf6:	1e4c      	subs	r4, r1, #1
 8001cf8:	2901      	cmp	r1, #1
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x1ee>
 8001cfc:	e223      	b.n	8002146 <__aeabi_dsub+0x636>
 8001cfe:	4d5e      	ldr	r5, [pc, #376]	; (8001e78 <__aeabi_dsub+0x368>)
 8001d00:	45ac      	cmp	ip, r5
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x1f6>
 8001d04:	e1d8      	b.n	80020b8 <__aeabi_dsub+0x5a8>
 8001d06:	46a4      	mov	ip, r4
 8001d08:	e11a      	b.n	8001f40 <__aeabi_dsub+0x430>
 8001d0a:	003a      	movs	r2, r7
 8001d0c:	4302      	orrs	r2, r0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x202>
 8001d10:	e0e4      	b.n	8001edc <__aeabi_dsub+0x3cc>
 8001d12:	0022      	movs	r2, r4
 8001d14:	3a01      	subs	r2, #1
 8001d16:	2c01      	cmp	r4, #1
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x20c>
 8001d1a:	e1c3      	b.n	80020a4 <__aeabi_dsub+0x594>
 8001d1c:	4956      	ldr	r1, [pc, #344]	; (8001e78 <__aeabi_dsub+0x368>)
 8001d1e:	428c      	cmp	r4, r1
 8001d20:	d100      	bne.n	8001d24 <__aeabi_dsub+0x214>
 8001d22:	e0b1      	b.n	8001e88 <__aeabi_dsub+0x378>
 8001d24:	4694      	mov	ip, r2
 8001d26:	e72b      	b.n	8001b80 <__aeabi_dsub+0x70>
 8001d28:	2401      	movs	r4, #1
 8001d2a:	4061      	eors	r1, r4
 8001d2c:	468b      	mov	fp, r1
 8001d2e:	428d      	cmp	r5, r1
 8001d30:	d000      	beq.n	8001d34 <__aeabi_dsub+0x224>
 8001d32:	e716      	b.n	8001b62 <__aeabi_dsub+0x52>
 8001d34:	4952      	ldr	r1, [pc, #328]	; (8001e80 <__aeabi_dsub+0x370>)
 8001d36:	468c      	mov	ip, r1
 8001d38:	44b4      	add	ip, r6
 8001d3a:	4664      	mov	r4, ip
 8001d3c:	2c00      	cmp	r4, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x232>
 8001d40:	e0d3      	b.n	8001eea <__aeabi_dsub+0x3da>
 8001d42:	1b91      	subs	r1, r2, r6
 8001d44:	468c      	mov	ip, r1
 8001d46:	2e00      	cmp	r6, #0
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x23c>
 8001d4a:	e15e      	b.n	800200a <__aeabi_dsub+0x4fa>
 8001d4c:	494a      	ldr	r1, [pc, #296]	; (8001e78 <__aeabi_dsub+0x368>)
 8001d4e:	428a      	cmp	r2, r1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x244>
 8001d52:	e1be      	b.n	80020d2 <__aeabi_dsub+0x5c2>
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	464c      	mov	r4, r9
 8001d58:	0409      	lsls	r1, r1, #16
 8001d5a:	430c      	orrs	r4, r1
 8001d5c:	46a1      	mov	r9, r4
 8001d5e:	4661      	mov	r1, ip
 8001d60:	2938      	cmp	r1, #56	; 0x38
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dsub+0x256>
 8001d64:	e1ba      	b.n	80020dc <__aeabi_dsub+0x5cc>
 8001d66:	291f      	cmp	r1, #31
 8001d68:	dd00      	ble.n	8001d6c <__aeabi_dsub+0x25c>
 8001d6a:	e227      	b.n	80021bc <__aeabi_dsub+0x6ac>
 8001d6c:	2420      	movs	r4, #32
 8001d6e:	1a64      	subs	r4, r4, r1
 8001d70:	4649      	mov	r1, r9
 8001d72:	40a1      	lsls	r1, r4
 8001d74:	001e      	movs	r6, r3
 8001d76:	4688      	mov	r8, r1
 8001d78:	4661      	mov	r1, ip
 8001d7a:	40a3      	lsls	r3, r4
 8001d7c:	40ce      	lsrs	r6, r1
 8001d7e:	4641      	mov	r1, r8
 8001d80:	1e5c      	subs	r4, r3, #1
 8001d82:	41a3      	sbcs	r3, r4
 8001d84:	4331      	orrs	r1, r6
 8001d86:	4319      	orrs	r1, r3
 8001d88:	000c      	movs	r4, r1
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	40d9      	lsrs	r1, r3
 8001d90:	187f      	adds	r7, r7, r1
 8001d92:	1824      	adds	r4, r4, r0
 8001d94:	4284      	cmp	r4, r0
 8001d96:	419b      	sbcs	r3, r3
 8001d98:	425b      	negs	r3, r3
 8001d9a:	469a      	mov	sl, r3
 8001d9c:	0016      	movs	r6, r2
 8001d9e:	44ba      	add	sl, r7
 8001da0:	e05d      	b.n	8001e5e <__aeabi_dsub+0x34e>
 8001da2:	4c38      	ldr	r4, [pc, #224]	; (8001e84 <__aeabi_dsub+0x374>)
 8001da4:	1c72      	adds	r2, r6, #1
 8001da6:	4222      	tst	r2, r4
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x29c>
 8001daa:	e0df      	b.n	8001f6c <__aeabi_dsub+0x45c>
 8001dac:	464a      	mov	r2, r9
 8001dae:	431a      	orrs	r2, r3
 8001db0:	2e00      	cmp	r6, #0
 8001db2:	d000      	beq.n	8001db6 <__aeabi_dsub+0x2a6>
 8001db4:	e15c      	b.n	8002070 <__aeabi_dsub+0x560>
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x2ac>
 8001dba:	e1cf      	b.n	800215c <__aeabi_dsub+0x64c>
 8001dbc:	003a      	movs	r2, r7
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x2b4>
 8001dc2:	e17f      	b.n	80020c4 <__aeabi_dsub+0x5b4>
 8001dc4:	1a1c      	subs	r4, r3, r0
 8001dc6:	464a      	mov	r2, r9
 8001dc8:	42a3      	cmp	r3, r4
 8001dca:	4189      	sbcs	r1, r1
 8001dcc:	1bd2      	subs	r2, r2, r7
 8001dce:	4249      	negs	r1, r1
 8001dd0:	1a52      	subs	r2, r2, r1
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	d400      	bmi.n	8001dda <__aeabi_dsub+0x2ca>
 8001dd8:	e20a      	b.n	80021f0 <__aeabi_dsub+0x6e0>
 8001dda:	1ac4      	subs	r4, r0, r3
 8001ddc:	42a0      	cmp	r0, r4
 8001dde:	4180      	sbcs	r0, r0
 8001de0:	464b      	mov	r3, r9
 8001de2:	4240      	negs	r0, r0
 8001de4:	1aff      	subs	r7, r7, r3
 8001de6:	1a3b      	subs	r3, r7, r0
 8001de8:	469a      	mov	sl, r3
 8001dea:	465d      	mov	r5, fp
 8001dec:	e71a      	b.n	8001c24 <__aeabi_dsub+0x114>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d073      	beq.n	8001edc <__aeabi_dsub+0x3cc>
 8001df4:	0022      	movs	r2, r4
 8001df6:	3a01      	subs	r2, #1
 8001df8:	2c01      	cmp	r4, #1
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x2ee>
 8001dfc:	e0cb      	b.n	8001f96 <__aeabi_dsub+0x486>
 8001dfe:	4554      	cmp	r4, sl
 8001e00:	d042      	beq.n	8001e88 <__aeabi_dsub+0x378>
 8001e02:	4694      	mov	ip, r2
 8001e04:	e748      	b.n	8001c98 <__aeabi_dsub+0x188>
 8001e06:	0010      	movs	r0, r2
 8001e08:	3b1f      	subs	r3, #31
 8001e0a:	40d8      	lsrs	r0, r3
 8001e0c:	2920      	cmp	r1, #32
 8001e0e:	d003      	beq.n	8001e18 <__aeabi_dsub+0x308>
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	1a5b      	subs	r3, r3, r1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	4314      	orrs	r4, r2
 8001e18:	1e63      	subs	r3, r4, #1
 8001e1a:	419c      	sbcs	r4, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2600      	movs	r6, #0
 8001e20:	469a      	mov	sl, r3
 8001e22:	4304      	orrs	r4, r0
 8001e24:	0763      	lsls	r3, r4, #29
 8001e26:	d000      	beq.n	8001e2a <__aeabi_dsub+0x31a>
 8001e28:	e6fe      	b.n	8001c28 <__aeabi_dsub+0x118>
 8001e2a:	4652      	mov	r2, sl
 8001e2c:	08e3      	lsrs	r3, r4, #3
 8001e2e:	0752      	lsls	r2, r2, #29
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4652      	mov	r2, sl
 8001e34:	46b4      	mov	ip, r6
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <__aeabi_dsub+0x368>)
 8001e3a:	458c      	cmp	ip, r1
 8001e3c:	d02a      	beq.n	8001e94 <__aeabi_dsub+0x384>
 8001e3e:	0312      	lsls	r2, r2, #12
 8001e40:	0b14      	lsrs	r4, r2, #12
 8001e42:	4662      	mov	r2, ip
 8001e44:	0552      	lsls	r2, r2, #21
 8001e46:	0d52      	lsrs	r2, r2, #21
 8001e48:	e70c      	b.n	8001c64 <__aeabi_dsub+0x154>
 8001e4a:	003c      	movs	r4, r7
 8001e4c:	4304      	orrs	r4, r0
 8001e4e:	1e62      	subs	r2, r4, #1
 8001e50:	4194      	sbcs	r4, r2
 8001e52:	18e4      	adds	r4, r4, r3
 8001e54:	429c      	cmp	r4, r3
 8001e56:	4192      	sbcs	r2, r2
 8001e58:	4252      	negs	r2, r2
 8001e5a:	444a      	add	r2, r9
 8001e5c:	4692      	mov	sl, r2
 8001e5e:	4653      	mov	r3, sl
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	d5df      	bpl.n	8001e24 <__aeabi_dsub+0x314>
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__aeabi_dsub+0x368>)
 8001e66:	3601      	adds	r6, #1
 8001e68:	429e      	cmp	r6, r3
 8001e6a:	d000      	beq.n	8001e6e <__aeabi_dsub+0x35e>
 8001e6c:	e0a0      	b.n	8001fb0 <__aeabi_dsub+0x4a0>
 8001e6e:	0032      	movs	r2, r6
 8001e70:	2400      	movs	r4, #0
 8001e72:	2300      	movs	r3, #0
 8001e74:	e6f6      	b.n	8001c64 <__aeabi_dsub+0x154>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff
 8001e7c:	ff7fffff 	.word	0xff7fffff
 8001e80:	fffff801 	.word	0xfffff801
 8001e84:	000007fe 	.word	0x000007fe
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	0752      	lsls	r2, r2, #29
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	464a      	mov	r2, r9
 8001e92:	08d2      	lsrs	r2, r2, #3
 8001e94:	0019      	movs	r1, r3
 8001e96:	4311      	orrs	r1, r2
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x38c>
 8001e9a:	e1b5      	b.n	8002208 <__aeabi_dsub+0x6f8>
 8001e9c:	2480      	movs	r4, #128	; 0x80
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	4314      	orrs	r4, r2
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4ad5      	ldr	r2, [pc, #852]	; (80021fc <__aeabi_dsub+0x6ec>)
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	e6dc      	b.n	8001c64 <__aeabi_dsub+0x154>
 8001eaa:	0020      	movs	r0, r4
 8001eac:	f000 fa5c 	bl	8002368 <__clzsi2>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	3318      	adds	r3, #24
 8001eb4:	2b1f      	cmp	r3, #31
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_dsub+0x3aa>
 8001eb8:	e695      	b.n	8001be6 <__aeabi_dsub+0xd6>
 8001eba:	0022      	movs	r2, r4
 8001ebc:	3808      	subs	r0, #8
 8001ebe:	4082      	lsls	r2, r0
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	429e      	cmp	r6, r3
 8001ec4:	dc00      	bgt.n	8001ec8 <__aeabi_dsub+0x3b8>
 8001ec6:	e69a      	b.n	8001bfe <__aeabi_dsub+0xee>
 8001ec8:	1af6      	subs	r6, r6, r3
 8001eca:	4bcd      	ldr	r3, [pc, #820]	; (8002200 <__aeabi_dsub+0x6f0>)
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e6a8      	b.n	8001c24 <__aeabi_dsub+0x114>
 8001ed2:	003c      	movs	r4, r7
 8001ed4:	4304      	orrs	r4, r0
 8001ed6:	1e62      	subs	r2, r4, #1
 8001ed8:	4194      	sbcs	r4, r2
 8001eda:	e66c      	b.n	8001bb6 <__aeabi_dsub+0xa6>
 8001edc:	464a      	mov	r2, r9
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	0752      	lsls	r2, r2, #29
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	464a      	mov	r2, r9
 8001ee6:	08d2      	lsrs	r2, r2, #3
 8001ee8:	e7a6      	b.n	8001e38 <__aeabi_dsub+0x328>
 8001eea:	4cc6      	ldr	r4, [pc, #792]	; (8002204 <__aeabi_dsub+0x6f4>)
 8001eec:	1c72      	adds	r2, r6, #1
 8001eee:	4222      	tst	r2, r4
 8001ef0:	d000      	beq.n	8001ef4 <__aeabi_dsub+0x3e4>
 8001ef2:	e0ac      	b.n	800204e <__aeabi_dsub+0x53e>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	2e00      	cmp	r6, #0
 8001efa:	d000      	beq.n	8001efe <__aeabi_dsub+0x3ee>
 8001efc:	e105      	b.n	800210a <__aeabi_dsub+0x5fa>
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x3f4>
 8001f02:	e156      	b.n	80021b2 <__aeabi_dsub+0x6a2>
 8001f04:	003a      	movs	r2, r7
 8001f06:	4302      	orrs	r2, r0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x3fc>
 8001f0a:	e0db      	b.n	80020c4 <__aeabi_dsub+0x5b4>
 8001f0c:	181c      	adds	r4, r3, r0
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	419b      	sbcs	r3, r3
 8001f12:	444f      	add	r7, r9
 8001f14:	46ba      	mov	sl, r7
 8001f16:	425b      	negs	r3, r3
 8001f18:	449a      	add	sl, r3
 8001f1a:	4653      	mov	r3, sl
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	d400      	bmi.n	8001f22 <__aeabi_dsub+0x412>
 8001f20:	e780      	b.n	8001e24 <__aeabi_dsub+0x314>
 8001f22:	4652      	mov	r2, sl
 8001f24:	4bb6      	ldr	r3, [pc, #728]	; (8002200 <__aeabi_dsub+0x6f0>)
 8001f26:	2601      	movs	r6, #1
 8001f28:	401a      	ands	r2, r3
 8001f2a:	4692      	mov	sl, r2
 8001f2c:	e77a      	b.n	8001e24 <__aeabi_dsub+0x314>
 8001f2e:	4cb3      	ldr	r4, [pc, #716]	; (80021fc <__aeabi_dsub+0x6ec>)
 8001f30:	42a2      	cmp	r2, r4
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x426>
 8001f34:	e0c0      	b.n	80020b8 <__aeabi_dsub+0x5a8>
 8001f36:	2480      	movs	r4, #128	; 0x80
 8001f38:	464d      	mov	r5, r9
 8001f3a:	0424      	lsls	r4, r4, #16
 8001f3c:	4325      	orrs	r5, r4
 8001f3e:	46a9      	mov	r9, r5
 8001f40:	4664      	mov	r4, ip
 8001f42:	2c38      	cmp	r4, #56	; 0x38
 8001f44:	dc53      	bgt.n	8001fee <__aeabi_dsub+0x4de>
 8001f46:	4661      	mov	r1, ip
 8001f48:	2c1f      	cmp	r4, #31
 8001f4a:	dd00      	ble.n	8001f4e <__aeabi_dsub+0x43e>
 8001f4c:	e0cd      	b.n	80020ea <__aeabi_dsub+0x5da>
 8001f4e:	2520      	movs	r5, #32
 8001f50:	001e      	movs	r6, r3
 8001f52:	1b2d      	subs	r5, r5, r4
 8001f54:	464c      	mov	r4, r9
 8001f56:	40ab      	lsls	r3, r5
 8001f58:	40ac      	lsls	r4, r5
 8001f5a:	40ce      	lsrs	r6, r1
 8001f5c:	1e5d      	subs	r5, r3, #1
 8001f5e:	41ab      	sbcs	r3, r5
 8001f60:	4334      	orrs	r4, r6
 8001f62:	4323      	orrs	r3, r4
 8001f64:	464c      	mov	r4, r9
 8001f66:	40cc      	lsrs	r4, r1
 8001f68:	1b3f      	subs	r7, r7, r4
 8001f6a:	e045      	b.n	8001ff8 <__aeabi_dsub+0x4e8>
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	1a1c      	subs	r4, r3, r0
 8001f70:	1bd1      	subs	r1, r2, r7
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	4192      	sbcs	r2, r2
 8001f76:	4252      	negs	r2, r2
 8001f78:	4692      	mov	sl, r2
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	1a52      	subs	r2, r2, r1
 8001f80:	4692      	mov	sl, r2
 8001f82:	0212      	lsls	r2, r2, #8
 8001f84:	d500      	bpl.n	8001f88 <__aeabi_dsub+0x478>
 8001f86:	e083      	b.n	8002090 <__aeabi_dsub+0x580>
 8001f88:	4653      	mov	r3, sl
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	d000      	beq.n	8001f90 <__aeabi_dsub+0x480>
 8001f8e:	e621      	b.n	8001bd4 <__aeabi_dsub+0xc4>
 8001f90:	2200      	movs	r2, #0
 8001f92:	2500      	movs	r5, #0
 8001f94:	e753      	b.n	8001e3e <__aeabi_dsub+0x32e>
 8001f96:	181c      	adds	r4, r3, r0
 8001f98:	429c      	cmp	r4, r3
 8001f9a:	419b      	sbcs	r3, r3
 8001f9c:	444f      	add	r7, r9
 8001f9e:	46ba      	mov	sl, r7
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	449a      	add	sl, r3
 8001fa4:	4653      	mov	r3, sl
 8001fa6:	2601      	movs	r6, #1
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	d400      	bmi.n	8001fae <__aeabi_dsub+0x49e>
 8001fac:	e73a      	b.n	8001e24 <__aeabi_dsub+0x314>
 8001fae:	2602      	movs	r6, #2
 8001fb0:	4652      	mov	r2, sl
 8001fb2:	4b93      	ldr	r3, [pc, #588]	; (8002200 <__aeabi_dsub+0x6f0>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	4021      	ands	r1, r4
 8001fbc:	0862      	lsrs	r2, r4, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	07dc      	lsls	r4, r3, #31
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	469a      	mov	sl, r3
 8001fc6:	4314      	orrs	r4, r2
 8001fc8:	e62c      	b.n	8001c24 <__aeabi_dsub+0x114>
 8001fca:	0039      	movs	r1, r7
 8001fcc:	3a20      	subs	r2, #32
 8001fce:	40d1      	lsrs	r1, r2
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	2a20      	cmp	r2, #32
 8001fd4:	d006      	beq.n	8001fe4 <__aeabi_dsub+0x4d4>
 8001fd6:	4664      	mov	r4, ip
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	1b12      	subs	r2, r2, r4
 8001fdc:	003c      	movs	r4, r7
 8001fde:	4094      	lsls	r4, r2
 8001fe0:	4304      	orrs	r4, r0
 8001fe2:	9401      	str	r4, [sp, #4]
 8001fe4:	9c01      	ldr	r4, [sp, #4]
 8001fe6:	1e62      	subs	r2, r4, #1
 8001fe8:	4194      	sbcs	r4, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	e5e3      	b.n	8001bb6 <__aeabi_dsub+0xa6>
 8001fee:	4649      	mov	r1, r9
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	000b      	movs	r3, r1
 8001ff4:	1e5c      	subs	r4, r3, #1
 8001ff6:	41a3      	sbcs	r3, r4
 8001ff8:	1ac4      	subs	r4, r0, r3
 8001ffa:	42a0      	cmp	r0, r4
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	1afb      	subs	r3, r7, r3
 8002002:	469a      	mov	sl, r3
 8002004:	465d      	mov	r5, fp
 8002006:	0016      	movs	r6, r2
 8002008:	e5dc      	b.n	8001bc4 <__aeabi_dsub+0xb4>
 800200a:	4649      	mov	r1, r9
 800200c:	4319      	orrs	r1, r3
 800200e:	d100      	bne.n	8002012 <__aeabi_dsub+0x502>
 8002010:	e0ae      	b.n	8002170 <__aeabi_dsub+0x660>
 8002012:	4661      	mov	r1, ip
 8002014:	4664      	mov	r4, ip
 8002016:	3901      	subs	r1, #1
 8002018:	2c01      	cmp	r4, #1
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x50e>
 800201c:	e0e0      	b.n	80021e0 <__aeabi_dsub+0x6d0>
 800201e:	4c77      	ldr	r4, [pc, #476]	; (80021fc <__aeabi_dsub+0x6ec>)
 8002020:	45a4      	cmp	ip, r4
 8002022:	d056      	beq.n	80020d2 <__aeabi_dsub+0x5c2>
 8002024:	468c      	mov	ip, r1
 8002026:	e69a      	b.n	8001d5e <__aeabi_dsub+0x24e>
 8002028:	4661      	mov	r1, ip
 800202a:	2220      	movs	r2, #32
 800202c:	003c      	movs	r4, r7
 800202e:	1a52      	subs	r2, r2, r1
 8002030:	4094      	lsls	r4, r2
 8002032:	0001      	movs	r1, r0
 8002034:	4090      	lsls	r0, r2
 8002036:	46a0      	mov	r8, r4
 8002038:	4664      	mov	r4, ip
 800203a:	1e42      	subs	r2, r0, #1
 800203c:	4190      	sbcs	r0, r2
 800203e:	4662      	mov	r2, ip
 8002040:	40e1      	lsrs	r1, r4
 8002042:	4644      	mov	r4, r8
 8002044:	40d7      	lsrs	r7, r2
 8002046:	430c      	orrs	r4, r1
 8002048:	4304      	orrs	r4, r0
 800204a:	44b9      	add	r9, r7
 800204c:	e701      	b.n	8001e52 <__aeabi_dsub+0x342>
 800204e:	496b      	ldr	r1, [pc, #428]	; (80021fc <__aeabi_dsub+0x6ec>)
 8002050:	428a      	cmp	r2, r1
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x546>
 8002054:	e70c      	b.n	8001e70 <__aeabi_dsub+0x360>
 8002056:	1818      	adds	r0, r3, r0
 8002058:	4298      	cmp	r0, r3
 800205a:	419b      	sbcs	r3, r3
 800205c:	444f      	add	r7, r9
 800205e:	425b      	negs	r3, r3
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	07dc      	lsls	r4, r3, #31
 8002064:	0840      	lsrs	r0, r0, #1
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	469a      	mov	sl, r3
 800206a:	0016      	movs	r6, r2
 800206c:	4304      	orrs	r4, r0
 800206e:	e6d9      	b.n	8001e24 <__aeabi_dsub+0x314>
 8002070:	2a00      	cmp	r2, #0
 8002072:	d000      	beq.n	8002076 <__aeabi_dsub+0x566>
 8002074:	e081      	b.n	800217a <__aeabi_dsub+0x66a>
 8002076:	003b      	movs	r3, r7
 8002078:	4303      	orrs	r3, r0
 800207a:	d11d      	bne.n	80020b8 <__aeabi_dsub+0x5a8>
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	2500      	movs	r5, #0
 8002080:	0312      	lsls	r2, r2, #12
 8002082:	e70b      	b.n	8001e9c <__aeabi_dsub+0x38c>
 8002084:	08c0      	lsrs	r0, r0, #3
 8002086:	077b      	lsls	r3, r7, #29
 8002088:	465d      	mov	r5, fp
 800208a:	4303      	orrs	r3, r0
 800208c:	08fa      	lsrs	r2, r7, #3
 800208e:	e6d3      	b.n	8001e38 <__aeabi_dsub+0x328>
 8002090:	1ac4      	subs	r4, r0, r3
 8002092:	42a0      	cmp	r0, r4
 8002094:	4180      	sbcs	r0, r0
 8002096:	464b      	mov	r3, r9
 8002098:	4240      	negs	r0, r0
 800209a:	1aff      	subs	r7, r7, r3
 800209c:	1a3b      	subs	r3, r7, r0
 800209e:	469a      	mov	sl, r3
 80020a0:	465d      	mov	r5, fp
 80020a2:	e597      	b.n	8001bd4 <__aeabi_dsub+0xc4>
 80020a4:	1a1c      	subs	r4, r3, r0
 80020a6:	464a      	mov	r2, r9
 80020a8:	42a3      	cmp	r3, r4
 80020aa:	419b      	sbcs	r3, r3
 80020ac:	1bd7      	subs	r7, r2, r7
 80020ae:	425b      	negs	r3, r3
 80020b0:	1afb      	subs	r3, r7, r3
 80020b2:	469a      	mov	sl, r3
 80020b4:	2601      	movs	r6, #1
 80020b6:	e585      	b.n	8001bc4 <__aeabi_dsub+0xb4>
 80020b8:	08c0      	lsrs	r0, r0, #3
 80020ba:	077b      	lsls	r3, r7, #29
 80020bc:	465d      	mov	r5, fp
 80020be:	4303      	orrs	r3, r0
 80020c0:	08fa      	lsrs	r2, r7, #3
 80020c2:	e6e7      	b.n	8001e94 <__aeabi_dsub+0x384>
 80020c4:	464a      	mov	r2, r9
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	0752      	lsls	r2, r2, #29
 80020ca:	4313      	orrs	r3, r2
 80020cc:	464a      	mov	r2, r9
 80020ce:	08d2      	lsrs	r2, r2, #3
 80020d0:	e6b5      	b.n	8001e3e <__aeabi_dsub+0x32e>
 80020d2:	08c0      	lsrs	r0, r0, #3
 80020d4:	077b      	lsls	r3, r7, #29
 80020d6:	4303      	orrs	r3, r0
 80020d8:	08fa      	lsrs	r2, r7, #3
 80020da:	e6db      	b.n	8001e94 <__aeabi_dsub+0x384>
 80020dc:	4649      	mov	r1, r9
 80020de:	4319      	orrs	r1, r3
 80020e0:	000b      	movs	r3, r1
 80020e2:	1e59      	subs	r1, r3, #1
 80020e4:	418b      	sbcs	r3, r1
 80020e6:	001c      	movs	r4, r3
 80020e8:	e653      	b.n	8001d92 <__aeabi_dsub+0x282>
 80020ea:	464d      	mov	r5, r9
 80020ec:	3c20      	subs	r4, #32
 80020ee:	40e5      	lsrs	r5, r4
 80020f0:	2920      	cmp	r1, #32
 80020f2:	d005      	beq.n	8002100 <__aeabi_dsub+0x5f0>
 80020f4:	2440      	movs	r4, #64	; 0x40
 80020f6:	1a64      	subs	r4, r4, r1
 80020f8:	4649      	mov	r1, r9
 80020fa:	40a1      	lsls	r1, r4
 80020fc:	430b      	orrs	r3, r1
 80020fe:	4698      	mov	r8, r3
 8002100:	4643      	mov	r3, r8
 8002102:	1e5c      	subs	r4, r3, #1
 8002104:	41a3      	sbcs	r3, r4
 8002106:	432b      	orrs	r3, r5
 8002108:	e776      	b.n	8001ff8 <__aeabi_dsub+0x4e8>
 800210a:	2a00      	cmp	r2, #0
 800210c:	d0e1      	beq.n	80020d2 <__aeabi_dsub+0x5c2>
 800210e:	003a      	movs	r2, r7
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	4302      	orrs	r2, r0
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x608>
 8002116:	e6b8      	b.n	8001e8a <__aeabi_dsub+0x37a>
 8002118:	464a      	mov	r2, r9
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	2480      	movs	r4, #128	; 0x80
 800211e:	4313      	orrs	r3, r2
 8002120:	464a      	mov	r2, r9
 8002122:	0324      	lsls	r4, r4, #12
 8002124:	08d2      	lsrs	r2, r2, #3
 8002126:	4222      	tst	r2, r4
 8002128:	d007      	beq.n	800213a <__aeabi_dsub+0x62a>
 800212a:	08fe      	lsrs	r6, r7, #3
 800212c:	4226      	tst	r6, r4
 800212e:	d104      	bne.n	800213a <__aeabi_dsub+0x62a>
 8002130:	465d      	mov	r5, fp
 8002132:	0032      	movs	r2, r6
 8002134:	08c3      	lsrs	r3, r0, #3
 8002136:	077f      	lsls	r7, r7, #29
 8002138:	433b      	orrs	r3, r7
 800213a:	0f59      	lsrs	r1, r3, #29
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	0749      	lsls	r1, r1, #29
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	430b      	orrs	r3, r1
 8002144:	e6a6      	b.n	8001e94 <__aeabi_dsub+0x384>
 8002146:	1ac4      	subs	r4, r0, r3
 8002148:	42a0      	cmp	r0, r4
 800214a:	4180      	sbcs	r0, r0
 800214c:	464b      	mov	r3, r9
 800214e:	4240      	negs	r0, r0
 8002150:	1aff      	subs	r7, r7, r3
 8002152:	1a3b      	subs	r3, r7, r0
 8002154:	469a      	mov	sl, r3
 8002156:	465d      	mov	r5, fp
 8002158:	2601      	movs	r6, #1
 800215a:	e533      	b.n	8001bc4 <__aeabi_dsub+0xb4>
 800215c:	003b      	movs	r3, r7
 800215e:	4303      	orrs	r3, r0
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x654>
 8002162:	e715      	b.n	8001f90 <__aeabi_dsub+0x480>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e666      	b.n	8001e3e <__aeabi_dsub+0x32e>
 8002170:	08c0      	lsrs	r0, r0, #3
 8002172:	077b      	lsls	r3, r7, #29
 8002174:	4303      	orrs	r3, r0
 8002176:	08fa      	lsrs	r2, r7, #3
 8002178:	e65e      	b.n	8001e38 <__aeabi_dsub+0x328>
 800217a:	003a      	movs	r2, r7
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	4302      	orrs	r2, r0
 8002180:	d100      	bne.n	8002184 <__aeabi_dsub+0x674>
 8002182:	e682      	b.n	8001e8a <__aeabi_dsub+0x37a>
 8002184:	464a      	mov	r2, r9
 8002186:	0752      	lsls	r2, r2, #29
 8002188:	2480      	movs	r4, #128	; 0x80
 800218a:	4313      	orrs	r3, r2
 800218c:	464a      	mov	r2, r9
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	08d2      	lsrs	r2, r2, #3
 8002192:	4222      	tst	r2, r4
 8002194:	d007      	beq.n	80021a6 <__aeabi_dsub+0x696>
 8002196:	08fe      	lsrs	r6, r7, #3
 8002198:	4226      	tst	r6, r4
 800219a:	d104      	bne.n	80021a6 <__aeabi_dsub+0x696>
 800219c:	465d      	mov	r5, fp
 800219e:	0032      	movs	r2, r6
 80021a0:	08c3      	lsrs	r3, r0, #3
 80021a2:	077f      	lsls	r7, r7, #29
 80021a4:	433b      	orrs	r3, r7
 80021a6:	0f59      	lsrs	r1, r3, #29
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0749      	lsls	r1, r1, #29
 80021ae:	430b      	orrs	r3, r1
 80021b0:	e670      	b.n	8001e94 <__aeabi_dsub+0x384>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e640      	b.n	8001e3e <__aeabi_dsub+0x32e>
 80021bc:	464c      	mov	r4, r9
 80021be:	3920      	subs	r1, #32
 80021c0:	40cc      	lsrs	r4, r1
 80021c2:	4661      	mov	r1, ip
 80021c4:	2920      	cmp	r1, #32
 80021c6:	d006      	beq.n	80021d6 <__aeabi_dsub+0x6c6>
 80021c8:	4666      	mov	r6, ip
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	1b89      	subs	r1, r1, r6
 80021ce:	464e      	mov	r6, r9
 80021d0:	408e      	lsls	r6, r1
 80021d2:	4333      	orrs	r3, r6
 80021d4:	4698      	mov	r8, r3
 80021d6:	4643      	mov	r3, r8
 80021d8:	1e59      	subs	r1, r3, #1
 80021da:	418b      	sbcs	r3, r1
 80021dc:	431c      	orrs	r4, r3
 80021de:	e5d8      	b.n	8001d92 <__aeabi_dsub+0x282>
 80021e0:	181c      	adds	r4, r3, r0
 80021e2:	4284      	cmp	r4, r0
 80021e4:	4180      	sbcs	r0, r0
 80021e6:	444f      	add	r7, r9
 80021e8:	46ba      	mov	sl, r7
 80021ea:	4240      	negs	r0, r0
 80021ec:	4482      	add	sl, r0
 80021ee:	e6d9      	b.n	8001fa4 <__aeabi_dsub+0x494>
 80021f0:	4653      	mov	r3, sl
 80021f2:	4323      	orrs	r3, r4
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x6e8>
 80021f6:	e6cb      	b.n	8001f90 <__aeabi_dsub+0x480>
 80021f8:	e614      	b.n	8001e24 <__aeabi_dsub+0x314>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	000007ff 	.word	0x000007ff
 8002200:	ff7fffff 	.word	0xff7fffff
 8002204:	000007fe 	.word	0x000007fe
 8002208:	2300      	movs	r3, #0
 800220a:	4a01      	ldr	r2, [pc, #4]	; (8002210 <__aeabi_dsub+0x700>)
 800220c:	001c      	movs	r4, r3
 800220e:	e529      	b.n	8001c64 <__aeabi_dsub+0x154>
 8002210:	000007ff 	.word	0x000007ff

08002214 <__aeabi_dcmpun>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	0005      	movs	r5, r0
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <__aeabi_dcmpun+0x38>)
 800221a:	031c      	lsls	r4, r3, #12
 800221c:	0016      	movs	r6, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	030a      	lsls	r2, r1, #12
 8002222:	0049      	lsls	r1, r1, #1
 8002224:	0b12      	lsrs	r2, r2, #12
 8002226:	0d49      	lsrs	r1, r1, #21
 8002228:	0b24      	lsrs	r4, r4, #12
 800222a:	0d5b      	lsrs	r3, r3, #21
 800222c:	4281      	cmp	r1, r0
 800222e:	d008      	beq.n	8002242 <__aeabi_dcmpun+0x2e>
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <__aeabi_dcmpun+0x38>)
 8002232:	2000      	movs	r0, #0
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <__aeabi_dcmpun+0x2c>
 8002238:	0020      	movs	r0, r4
 800223a:	4330      	orrs	r0, r6
 800223c:	1e43      	subs	r3, r0, #1
 800223e:	4198      	sbcs	r0, r3
 8002240:	bd70      	pop	{r4, r5, r6, pc}
 8002242:	2001      	movs	r0, #1
 8002244:	432a      	orrs	r2, r5
 8002246:	d1fb      	bne.n	8002240 <__aeabi_dcmpun+0x2c>
 8002248:	e7f2      	b.n	8002230 <__aeabi_dcmpun+0x1c>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff

08002250 <__aeabi_d2iz>:
 8002250:	000a      	movs	r2, r1
 8002252:	b530      	push	{r4, r5, lr}
 8002254:	4c13      	ldr	r4, [pc, #76]	; (80022a4 <__aeabi_d2iz+0x54>)
 8002256:	0053      	lsls	r3, r2, #1
 8002258:	0309      	lsls	r1, r1, #12
 800225a:	0005      	movs	r5, r0
 800225c:	0b09      	lsrs	r1, r1, #12
 800225e:	2000      	movs	r0, #0
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	0fd2      	lsrs	r2, r2, #31
 8002264:	42a3      	cmp	r3, r4
 8002266:	dd04      	ble.n	8002272 <__aeabi_d2iz+0x22>
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <__aeabi_d2iz+0x58>)
 800226a:	4283      	cmp	r3, r0
 800226c:	dd02      	ble.n	8002274 <__aeabi_d2iz+0x24>
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <__aeabi_d2iz+0x5c>)
 8002270:	18d0      	adds	r0, r2, r3
 8002272:	bd30      	pop	{r4, r5, pc}
 8002274:	2080      	movs	r0, #128	; 0x80
 8002276:	0340      	lsls	r0, r0, #13
 8002278:	4301      	orrs	r1, r0
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <__aeabi_d2iz+0x60>)
 800227c:	1ac0      	subs	r0, r0, r3
 800227e:	281f      	cmp	r0, #31
 8002280:	dd08      	ble.n	8002294 <__aeabi_d2iz+0x44>
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <__aeabi_d2iz+0x64>)
 8002284:	1ac3      	subs	r3, r0, r3
 8002286:	40d9      	lsrs	r1, r3
 8002288:	000b      	movs	r3, r1
 800228a:	4258      	negs	r0, r3
 800228c:	2a00      	cmp	r2, #0
 800228e:	d1f0      	bne.n	8002272 <__aeabi_d2iz+0x22>
 8002290:	0018      	movs	r0, r3
 8002292:	e7ee      	b.n	8002272 <__aeabi_d2iz+0x22>
 8002294:	4c08      	ldr	r4, [pc, #32]	; (80022b8 <__aeabi_d2iz+0x68>)
 8002296:	40c5      	lsrs	r5, r0
 8002298:	46a4      	mov	ip, r4
 800229a:	4463      	add	r3, ip
 800229c:	4099      	lsls	r1, r3
 800229e:	000b      	movs	r3, r1
 80022a0:	432b      	orrs	r3, r5
 80022a2:	e7f2      	b.n	800228a <__aeabi_d2iz+0x3a>
 80022a4:	000003fe 	.word	0x000003fe
 80022a8:	0000041d 	.word	0x0000041d
 80022ac:	7fffffff 	.word	0x7fffffff
 80022b0:	00000433 	.word	0x00000433
 80022b4:	00000413 	.word	0x00000413
 80022b8:	fffffbed 	.word	0xfffffbed

080022bc <__aeabi_i2d>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	2800      	cmp	r0, #0
 80022c0:	d016      	beq.n	80022f0 <__aeabi_i2d+0x34>
 80022c2:	17c3      	asrs	r3, r0, #31
 80022c4:	18c5      	adds	r5, r0, r3
 80022c6:	405d      	eors	r5, r3
 80022c8:	0fc4      	lsrs	r4, r0, #31
 80022ca:	0028      	movs	r0, r5
 80022cc:	f000 f84c 	bl	8002368 <__clzsi2>
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <__aeabi_i2d+0x5c>)
 80022d2:	1a1b      	subs	r3, r3, r0
 80022d4:	280a      	cmp	r0, #10
 80022d6:	dc16      	bgt.n	8002306 <__aeabi_i2d+0x4a>
 80022d8:	0002      	movs	r2, r0
 80022da:	002e      	movs	r6, r5
 80022dc:	3215      	adds	r2, #21
 80022de:	4096      	lsls	r6, r2
 80022e0:	220b      	movs	r2, #11
 80022e2:	1a12      	subs	r2, r2, r0
 80022e4:	40d5      	lsrs	r5, r2
 80022e6:	055b      	lsls	r3, r3, #21
 80022e8:	032d      	lsls	r5, r5, #12
 80022ea:	0b2d      	lsrs	r5, r5, #12
 80022ec:	0d5b      	lsrs	r3, r3, #21
 80022ee:	e003      	b.n	80022f8 <__aeabi_i2d+0x3c>
 80022f0:	2400      	movs	r4, #0
 80022f2:	2300      	movs	r3, #0
 80022f4:	2500      	movs	r5, #0
 80022f6:	2600      	movs	r6, #0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	432b      	orrs	r3, r5
 80022fc:	07e4      	lsls	r4, r4, #31
 80022fe:	4323      	orrs	r3, r4
 8002300:	0030      	movs	r0, r6
 8002302:	0019      	movs	r1, r3
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	380b      	subs	r0, #11
 8002308:	4085      	lsls	r5, r0
 800230a:	055b      	lsls	r3, r3, #21
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	2600      	movs	r6, #0
 8002310:	0b2d      	lsrs	r5, r5, #12
 8002312:	0d5b      	lsrs	r3, r3, #21
 8002314:	e7f0      	b.n	80022f8 <__aeabi_i2d+0x3c>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	0000041e 	.word	0x0000041e

0800231c <__aeabi_ui2d>:
 800231c:	b510      	push	{r4, lr}
 800231e:	1e04      	subs	r4, r0, #0
 8002320:	d010      	beq.n	8002344 <__aeabi_ui2d+0x28>
 8002322:	f000 f821 	bl	8002368 <__clzsi2>
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <__aeabi_ui2d+0x48>)
 8002328:	1a1b      	subs	r3, r3, r0
 800232a:	280a      	cmp	r0, #10
 800232c:	dc11      	bgt.n	8002352 <__aeabi_ui2d+0x36>
 800232e:	220b      	movs	r2, #11
 8002330:	0021      	movs	r1, r4
 8002332:	1a12      	subs	r2, r2, r0
 8002334:	40d1      	lsrs	r1, r2
 8002336:	3015      	adds	r0, #21
 8002338:	030a      	lsls	r2, r1, #12
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	4084      	lsls	r4, r0
 800233e:	0b12      	lsrs	r2, r2, #12
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	e001      	b.n	8002348 <__aeabi_ui2d+0x2c>
 8002344:	2300      	movs	r3, #0
 8002346:	2200      	movs	r2, #0
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	4313      	orrs	r3, r2
 800234c:	0020      	movs	r0, r4
 800234e:	0019      	movs	r1, r3
 8002350:	bd10      	pop	{r4, pc}
 8002352:	0022      	movs	r2, r4
 8002354:	380b      	subs	r0, #11
 8002356:	4082      	lsls	r2, r0
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	0312      	lsls	r2, r2, #12
 800235c:	2400      	movs	r4, #0
 800235e:	0b12      	lsrs	r2, r2, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	e7f1      	b.n	8002348 <__aeabi_ui2d+0x2c>
 8002364:	0000041e 	.word	0x0000041e

08002368 <__clzsi2>:
 8002368:	211c      	movs	r1, #28
 800236a:	2301      	movs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	4298      	cmp	r0, r3
 8002370:	d301      	bcc.n	8002376 <__clzsi2+0xe>
 8002372:	0c00      	lsrs	r0, r0, #16
 8002374:	3910      	subs	r1, #16
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	4298      	cmp	r0, r3
 800237a:	d301      	bcc.n	8002380 <__clzsi2+0x18>
 800237c:	0a00      	lsrs	r0, r0, #8
 800237e:	3908      	subs	r1, #8
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	4298      	cmp	r0, r3
 8002384:	d301      	bcc.n	800238a <__clzsi2+0x22>
 8002386:	0900      	lsrs	r0, r0, #4
 8002388:	3904      	subs	r1, #4
 800238a:	a202      	add	r2, pc, #8	; (adr r2, 8002394 <__clzsi2+0x2c>)
 800238c:	5c10      	ldrb	r0, [r2, r0]
 800238e:	1840      	adds	r0, r0, r1
 8002390:	4770      	bx	lr
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	02020304 	.word	0x02020304
 8002398:	01010101 	.word	0x01010101
	...

080023a4 <__clzdi2>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	2900      	cmp	r1, #0
 80023a8:	d103      	bne.n	80023b2 <__clzdi2+0xe>
 80023aa:	f7ff ffdd 	bl	8002368 <__clzsi2>
 80023ae:	3020      	adds	r0, #32
 80023b0:	e002      	b.n	80023b8 <__clzdi2+0x14>
 80023b2:	0008      	movs	r0, r1
 80023b4:	f7ff ffd8 	bl	8002368 <__clzsi2>
 80023b8:	bd10      	pop	{r4, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)

080023bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint8_t byteData;
	  uint16_t wordData;
	  uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c8:	f000 fbdc 	bl	8002b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023cc:	f000 f852 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d0:	f000 f90c 	bl	80025ec <MX_GPIO_Init>
  MX_I2C2_Init();
 80023d4:	f000 f896 	bl	8002504 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80023d8:	f000 f8d4 	bl	8002584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Dev->I2cHandle = &hi2c2;
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <main+0xa4>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	23e8      	movs	r3, #232	; 0xe8
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	491f      	ldr	r1, [pc, #124]	; (8002464 <main+0xa8>)
 80023e6:	50d1      	str	r1, [r2, r3]
  Dev->I2cDevAddr = 0x52;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <main+0xa4>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	23e6      	movs	r3, #230	; 0xe6
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	2152      	movs	r1, #82	; 0x52
 80023f2:	54d1      	strb	r1, [r2, r3]

  VL53L1_RdByte(Dev, 0x010F, &byteData);
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <main+0xa4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1dba      	adds	r2, r7, #6
 80023fa:	2110      	movs	r1, #16
 80023fc:	31ff      	adds	r1, #255	; 0xff
 80023fe:	0018      	movs	r0, r3
 8002400:	f008 fe34 	bl	800b06c <VL53L1_RdByte>
  printf("VL53L1X Model_ID: %02X\n\r", byteData);
 8002404:	1dbb      	adds	r3, r7, #6
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	001a      	movs	r2, r3
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <main+0xac>)
 800240c:	0011      	movs	r1, r2
 800240e:	0018      	movs	r0, r3
 8002410:	f009 fd00 	bl	800be14 <iprintf>
  VL53L1_RdByte(Dev, 0x0110, &byteData);
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <main+0xa4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1dba      	adds	r2, r7, #6
 800241a:	2188      	movs	r1, #136	; 0x88
 800241c:	0049      	lsls	r1, r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f008 fe24 	bl	800b06c <VL53L1_RdByte>
  printf("VL53L1X Module_Type: %02X\n\r", byteData);
 8002424:	1dbb      	adds	r3, r7, #6
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	001a      	movs	r2, r3
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <main+0xb0>)
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f009 fcf0 	bl	800be14 <iprintf>
  VL53L1_RdWord(Dev, 0x010F, &wordData);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <main+0xa4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1d3a      	adds	r2, r7, #4
 800243a:	2110      	movs	r1, #16
 800243c:	31ff      	adds	r1, #255	; 0xff
 800243e:	0018      	movs	r0, r3
 8002440:	f008 fe58 	bl	800b0f4 <VL53L1_RdWord>
  printf("VL53L1X: %02X\n\r", wordData);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <main+0xb4>)
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f009 fce0 	bl	800be14 <iprintf>

  AutonomousLowPowerRangingTest();
 8002454:	f000 f934 	bl	80026c0 <AutonomousLowPowerRangingTest>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AutonomousLowPowerRangingTest();
 8002458:	f000 f932 	bl	80026c0 <AutonomousLowPowerRangingTest>
 800245c:	e7fc      	b.n	8002458 <main+0x9c>
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	20000000 	.word	0x20000000
 8002464:	2000024c 	.word	0x2000024c
 8002468:	0800e270 	.word	0x0800e270
 800246c:	0800e28c 	.word	0x0800e28c
 8002470:	0800e2a8 	.word	0x0800e2a8

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b093      	sub	sp, #76	; 0x4c
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	2410      	movs	r4, #16
 800247c:	193b      	adds	r3, r7, r4
 800247e:	0018      	movs	r0, r3
 8002480:	2338      	movs	r3, #56	; 0x38
 8002482:	001a      	movs	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	f009 fd41 	bl	800bf0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800248a:	003b      	movs	r3, r7
 800248c:	0018      	movs	r0, r3
 800248e:	2310      	movs	r3, #16
 8002490:	001a      	movs	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	f009 fd3a 	bl	800bf0c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	0018      	movs	r0, r3
 800249e:	f001 fc87 	bl	8003db0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	0052      	lsls	r2, r2, #1
 80024ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2240      	movs	r2, #64	; 0x40
 80024ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	0018      	movs	r0, r3
 80024c6:	f001 fcbf 	bl	8003e48 <HAL_RCC_OscConfig>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80024ce:	f000 f98d 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d2:	003b      	movs	r3, r7
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024d8:	003b      	movs	r3, r7
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024de:	003b      	movs	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024e4:	003b      	movs	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024ea:	003b      	movs	r3, r7
 80024ec:	2100      	movs	r1, #0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f001 ffc4 	bl	800447c <HAL_RCC_ClockConfig>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80024f8:	f000 f978 	bl	80027ec <Error_Handler>
  }
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b013      	add	sp, #76	; 0x4c
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <MX_I2C2_Init+0x74>)
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <MX_I2C2_Init+0x78>)
 800250c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <MX_I2C2_Init+0x74>)
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <MX_I2C2_Init+0x7c>)
 8002512:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_I2C2_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <MX_I2C2_Init+0x74>)
 800251c:	2201      	movs	r2, #1
 800251e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <MX_I2C2_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_I2C2_Init+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_I2C2_Init+0x74>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_I2C2_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_I2C2_Init+0x74>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_I2C2_Init+0x74>)
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fe67 	bl	8003214 <HAL_I2C_Init>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800254a:	f000 f94f 	bl	80027ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <MX_I2C2_Init+0x74>)
 8002550:	2100      	movs	r1, #0
 8002552:	0018      	movs	r0, r3
 8002554:	f001 fb94 	bl	8003c80 <HAL_I2CEx_ConfigAnalogFilter>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d001      	beq.n	8002560 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800255c:	f000 f946 	bl	80027ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <MX_I2C2_Init+0x74>)
 8002562:	2100      	movs	r1, #0
 8002564:	0018      	movs	r0, r3
 8002566:	f001 fbd7 	bl	8003d18 <HAL_I2CEx_ConfigDigitalFilter>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800256e:	f000 f93d 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000024c 	.word	0x2000024c
 800257c:	40005800 	.word	0x40005800
 8002580:	00303d5b 	.word	0x00303d5b

08002584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <MX_USART2_UART_Init+0x64>)
 800258c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 8002590:	22e1      	movs	r2, #225	; 0xe1
 8002592:	0252      	lsls	r2, r2, #9
 8002594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <MX_USART2_UART_Init+0x60>)
 80025ce:	0018      	movs	r0, r3
 80025d0:	f002 f8fe 	bl	80047d0 <HAL_UART_Init>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025d8:	f000 f908 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	200002a0 	.word	0x200002a0
 80025e8:	40004400 	.word	0x40004400

080025ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f2:	240c      	movs	r4, #12
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	0018      	movs	r0, r3
 80025f8:	2314      	movs	r3, #20
 80025fa:	001a      	movs	r2, r3
 80025fc:	2100      	movs	r1, #0
 80025fe:	f009 fc85 	bl	800bf0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002608:	2104      	movs	r1, #4
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2204      	movs	r2, #4
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_GPIO_Init+0xcc>)
 800261c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002620:	2101      	movs	r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002638:	2102      	movs	r1, #2
 800263a:	430a      	orrs	r2, r1
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_GPIO_Init+0xcc>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_GPIO_Init+0xd0>)
 800264c:	2200      	movs	r2, #0
 800264e:	2118      	movs	r1, #24
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fd83 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	2210      	movs	r2, #16
 800265a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	22c4      	movs	r2, #196	; 0xc4
 8002660:	0392      	lsls	r2, r2, #14
 8002662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 800266a:	193a      	adds	r2, r7, r4
 800266c:	23a0      	movs	r3, #160	; 0xa0
 800266e:	05db      	lsls	r3, r3, #23
 8002670:	0011      	movs	r1, r2
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fc0e 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RLY_Pin BUZZ_Pin */
  GPIO_InitStruct.Pin = RLY_Pin|BUZZ_Pin;
 8002678:	0021      	movs	r1, r4
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2218      	movs	r2, #24
 800267e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2201      	movs	r2, #1
 8002684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	187b      	adds	r3, r7, r1
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	187b      	adds	r3, r7, r1
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <MX_GPIO_Init+0xd0>)
 8002696:	0019      	movs	r1, r3
 8002698:	0010      	movs	r0, r2
 800269a:	f000 fbfb 	bl	8002e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2007      	movs	r0, #7
 80026a4:	f000 fbc4 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80026a8:	2007      	movs	r0, #7
 80026aa:	f000 fbd6 	bl	8002e5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b009      	add	sp, #36	; 0x24
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000
 80026bc:	50000400 	.word	0x50000400

080026c0 <AutonomousLowPowerRangingTest>:

/* USER CODE BEGIN 4 */

void AutonomousLowPowerRangingTest(void)
	{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
		static VL53L1_RangingMeasurementData_t RangingData;
		    status = VL53L1_WaitDeviceBooted(Dev);
 80026c4:	4b41      	ldr	r3, [pc, #260]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f002 fe2f 	bl	800532c <VL53L1_WaitDeviceBooted>
 80026ce:	0003      	movs	r3, r0
 80026d0:	001a      	movs	r2, r3
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 80026d4:	601a      	str	r2, [r3, #0]
			status = VL53L1_DataInit(Dev);
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0018      	movs	r0, r3
 80026dc:	f002 fdac 	bl	8005238 <VL53L1_DataInit>
 80026e0:	0003      	movs	r3, r0
 80026e2:	001a      	movs	r2, r3
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 80026e6:	601a      	str	r2, [r3, #0]
			status = VL53L1_StaticInit(Dev);
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f002 fdf3 	bl	80052d8 <VL53L1_StaticInit>
 80026f2:	0003      	movs	r3, r0
 80026f4:	001a      	movs	r2, r3
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 80026f8:	601a      	str	r2, [r3, #0]
			status = VL53L1_SetDistanceMode(Dev, VL53L1_DISTANCEMODE_LONG);
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2103      	movs	r1, #3
 8002700:	0018      	movs	r0, r3
 8002702:	f002 ff97 	bl	8005634 <VL53L1_SetDistanceMode>
 8002706:	0003      	movs	r3, r0
 8002708:	001a      	movs	r2, r3
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 800270c:	601a      	str	r2, [r3, #0]
			status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000);
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <AutonomousLowPowerRangingTest+0x114>)
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f003 f828 	bl	800576c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800271c:	0003      	movs	r3, r0
 800271e:	001a      	movs	r2, r3
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 8002722:	601a      	str	r2, [r3, #0]
			status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev, 500);
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	22fa      	movs	r2, #250	; 0xfa
 800272a:	0052      	lsls	r2, r2, #1
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f003 f9f6 	bl	8005b20 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 800273a:	601a      	str	r2, [r3, #0]
			status = VL53L1_StartMeasurement(Dev);
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f003 fb8f 	bl	8005e64 <VL53L1_StartMeasurement>
 8002746:	0003      	movs	r3, r0
 8002748:	001a      	movs	r2, r3
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 800274c:	601a      	str	r2, [r3, #0]

	  do // polling mode
		{
		  status = VL53L1_WaitMeasurementDataReady(Dev);
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0018      	movs	r0, r3
 8002754:	f003 fc33 	bl	8005fbe <VL53L1_WaitMeasurementDataReady>
 8002758:	0003      	movs	r3, r0
 800275a:	001a      	movs	r2, r3
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 800275e:	601a      	str	r2, [r3, #0]
			if(!status)
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f2      	bne.n	800274e <AutonomousLowPowerRangingTest+0x8e>
			{
				status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <AutonomousLowPowerRangingTest+0x118>)
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f003 fe17 	bl	80063a4 <VL53L1_GetRangingMeasurementData>
 8002776:	0003      	movs	r3, r0
 8002778:	001a      	movs	r2, r3
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 800277c:	601a      	str	r2, [r3, #0]
				if(status==0){
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <AutonomousLowPowerRangingTest+0xf8>

						if(status==0){
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d114      	bne.n	80027b8 <AutonomousLowPowerRangingTest+0xf8>

							sprintf(buff, "%d, %d  \n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter);
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <AutonomousLowPowerRangingTest+0x118>)
 8002790:	7edb      	ldrb	r3, [r3, #27]
 8002792:	001a      	movs	r2, r3
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <AutonomousLowPowerRangingTest+0x118>)
 8002796:	2118      	movs	r1, #24
 8002798:	5e5b      	ldrsh	r3, [r3, r1]
 800279a:	4910      	ldr	r1, [pc, #64]	; (80027dc <AutonomousLowPowerRangingTest+0x11c>)
 800279c:	4810      	ldr	r0, [pc, #64]	; (80027e0 <AutonomousLowPowerRangingTest+0x120>)
 800279e:	f009 fb49 	bl	800be34 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), 0xFFFF);
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <AutonomousLowPowerRangingTest+0x120>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7fd fcad 	bl	8000104 <strlen>
 80027aa:	0003      	movs	r3, r0
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <AutonomousLowPowerRangingTest+0x124>)
 80027b0:	490b      	ldr	r1, [pc, #44]	; (80027e0 <AutonomousLowPowerRangingTest+0x120>)
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <AutonomousLowPowerRangingTest+0x128>)
 80027b4:	f002 f862 	bl	800487c <HAL_UART_Transmit>
				}



				}
				status = VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <AutonomousLowPowerRangingTest+0x10c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f003 fbe0 	bl	8005f82 <VL53L1_ClearInterruptAndStartMeasurement>
 80027c2:	0003      	movs	r3, r0
 80027c4:	001a      	movs	r2, r3
 80027c6:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <AutonomousLowPowerRangingTest+0x110>)
 80027c8:	601a      	str	r2, [r3, #0]
		  status = VL53L1_WaitMeasurementDataReady(Dev);
 80027ca:	e7c0      	b.n	800274e <AutonomousLowPowerRangingTest+0x8e>
 80027cc:	20000000 	.word	0x20000000
 80027d0:	200006d8 	.word	0x200006d8
 80027d4:	0000c350 	.word	0x0000c350
 80027d8:	200006dc 	.word	0x200006dc
 80027dc:	0800e2b8 	.word	0x0800e2b8
 80027e0:	20000224 	.word	0x20000224
 80027e4:	0000ffff 	.word	0x0000ffff
 80027e8:	200002a0 	.word	0x200002a0

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <Error_Handler+0x8>
	...

080027f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_MspInit+0x44>)
 8002800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_MspInit+0x44>)
 8002804:	2101      	movs	r1, #1
 8002806:	430a      	orrs	r2, r1
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_MspInit+0x44>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_MspInit+0x44>)
 8002818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_MspInit+0x44>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0549      	lsls	r1, r1, #21
 8002820:	430a      	orrs	r2, r1
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_MspInit+0x44>)
 8002826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	055b      	lsls	r3, r3, #21
 800282c:	4013      	ands	r3, r2
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2414      	movs	r4, #20
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	2314      	movs	r3, #20
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f009 fb5a 	bl	800bf0c <memset>
  if(hi2c->Instance==I2C2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_I2C_MspInit+0x90>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d131      	bne.n	80028c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	22c0      	movs	r2, #192	; 0xc0
 800287e:	0152      	lsls	r2, r2, #5
 8002880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	0021      	movs	r1, r4
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2212      	movs	r2, #18
 8002888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2206      	movs	r2, #6
 800289a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	187a      	adds	r2, r7, r1
 800289e:	23a0      	movs	r3, #160	; 0xa0
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 faf5 	bl	8002e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 80028ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	03c9      	lsls	r1, r1, #15
 80028b4:	430a      	orrs	r2, r1
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_I2C_MspInit+0x94>)
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	03db      	lsls	r3, r3, #15
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b00b      	add	sp, #44	; 0x2c
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	40005800 	.word	0x40005800
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b08b      	sub	sp, #44	; 0x2c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	2414      	movs	r4, #20
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	0018      	movs	r0, r3
 80028e6:	2314      	movs	r3, #20
 80028e8:	001a      	movs	r2, r3
 80028ea:	2100      	movs	r1, #0
 80028ec:	f009 fb0e 	bl	800bf0c <memset>
  if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_UART_MspInit+0x8c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d130      	bne.n	800295c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_UART_MspInit+0x90>)
 80028fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0289      	lsls	r1, r1, #10
 8002904:	430a      	orrs	r2, r1
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_UART_MspInit+0x90>)
 800290a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_UART_MspInit+0x90>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	; 0x34
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800292e:	0021      	movs	r1, r4
 8002930:	187b      	adds	r3, r7, r1
 8002932:	220c      	movs	r2, #12
 8002934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2202      	movs	r2, #2
 800293a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2201      	movs	r2, #1
 800294c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	187a      	adds	r2, r7, r1
 8002950:	23a0      	movs	r3, #160	; 0xa0
 8002952:	05db      	lsls	r3, r3, #23
 8002954:	0011      	movs	r1, r2
 8002956:	0018      	movs	r0, r3
 8002958:	f000 fa9c 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b00b      	add	sp, #44	; 0x2c
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	40004400 	.word	0x40004400
 8002968:	40021000 	.word	0x40021000

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	e7fe      	b.n	8002970 <NMI_Handler+0x4>

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002990:	f000 f962 	bl	8002c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL53L1X_INT_Pin);
 800299e:	2010      	movs	r0, #16
 80029a0:	f000 fbfa 	bl	8003198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  return 1;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_kill>:

int _kill(int pid, int sig)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029c0:	f009 fb12 	bl	800bfe8 <__errno>
 80029c4:	0003      	movs	r3, r0
 80029c6:	2216      	movs	r2, #22
 80029c8:	601a      	str	r2, [r3, #0]
  return -1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	425b      	negs	r3, r3
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_exit>:

void _exit (int status)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029de:	2301      	movs	r3, #1
 80029e0:	425a      	negs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff ffe5 	bl	80029b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029ec:	e7fe      	b.n	80029ec <_exit+0x16>

080029ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e00a      	b.n	8002a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a00:	e000      	b.n	8002a04 <_read+0x16>
 8002a02:	bf00      	nop
 8002a04:	0001      	movs	r1, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	60ba      	str	r2, [r7, #8]
 8002a0c:	b2ca      	uxtb	r2, r1
 8002a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3301      	adds	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	dbf0      	blt.n	8002a00 <_read+0x12>
  }

  return len;
 8002a1e:	687b      	ldr	r3, [r7, #4]
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e009      	b.n	8002a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	60ba      	str	r2, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	0018      	movs	r0, r3
 8002a44:	e000      	b.n	8002a48 <_write+0x20>
 8002a46:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	dbf1      	blt.n	8002a3a <_write+0x12>
  }
  return len;
 8002a56:	687b      	ldr	r3, [r7, #4]
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_close>:

int _close(int file)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	425b      	negs	r3, r3
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	0192      	lsls	r2, r2, #6
 8002a84:	605a      	str	r2, [r3, #4]
  return 0;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_isatty>:

int _isatty(int file)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b004      	add	sp, #16
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	18d3      	adds	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f009 fa7e 	bl	800bfe8 <__errno>
 8002aec:	0003      	movs	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	425b      	negs	r3, r3
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	18d2      	adds	r2, r2, r3
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <_sbrk+0x64>)
 8002b08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20002000 	.word	0x20002000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	200006f8 	.word	0x200006f8
 8002b20:	20000950 	.word	0x20000950

08002b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b34:	f7ff fff6 	bl	8002b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3a:	490d      	ldr	r1, [pc, #52]	; (8002b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <LoopForever+0xe>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <LoopForever+0x16>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b5e:	f009 fa49 	bl	800bff4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b62:	f7ff fc2b 	bl	80023bc <main>

08002b66 <LoopForever>:

LoopForever:
  b LoopForever
 8002b66:	e7fe      	b.n	8002b66 <LoopForever>
  ldr   r0, =_estack
 8002b68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002b74:	0800e9b4 	.word	0x0800e9b4
  ldr r2, =_sbss
 8002b78:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002b7c:	2000094c 	.word	0x2000094c

08002b80 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_IRQHandler>
	...

08002b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x3c>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_Init+0x3c>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0049      	lsls	r1, r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	f000 f810 	bl	8002bc4 <HAL_InitTick>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e001      	b.n	8002bb4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7ff fe22 	bl	80027f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_InitTick+0x88>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02b      	beq.n	8002c34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_InitTick+0x8c>)
 8002bde:	681c      	ldr	r4, [r3, #0]
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_InitTick+0x88>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	0019      	movs	r1, r3
 8002be6:	23fa      	movs	r3, #250	; 0xfa
 8002be8:	0098      	lsls	r0, r3, #2
 8002bea:	f7fd faa7 	bl	800013c <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f7fd faa2 	bl	800013c <__udivsi3>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f93d 	bl	8002e7a <HAL_SYSTICK_Config>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d112      	bne.n	8002c2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d80a      	bhi.n	8002c20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	425b      	negs	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f90c 	bl	8002e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_InitTick+0x90>)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e00d      	b.n	8002c3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e008      	b.n	8002c3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e003      	b.n	8002c3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b005      	add	sp, #20
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_IncTick+0x1c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_IncTick+0x20>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_IncTick+0x20>)
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	200006fc 	.word	0x200006fc

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_GetTick+0x10>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	200006fc 	.word	0x200006fc

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	f7ff ffe0 	bl	8002c7c <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	2000000c 	.word	0x2000000c

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cea:	d809      	bhi.n	8002d00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	231f      	movs	r3, #31
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_EnableIRQ+0x30>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4091      	lsls	r1, r2
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	0002      	movs	r2, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d20:	d828      	bhi.n	8002d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <__NVIC_SetPriority+0xd4>)
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	33c0      	adds	r3, #192	; 0xc0
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	589b      	ldr	r3, [r3, r2]
 8002d32:	1dfa      	adds	r2, r7, #7
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	0011      	movs	r1, r2
 8002d38:	2203      	movs	r2, #3
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	00d2      	lsls	r2, r2, #3
 8002d3e:	21ff      	movs	r1, #255	; 0xff
 8002d40:	4091      	lsls	r1, r2
 8002d42:	000a      	movs	r2, r1
 8002d44:	43d2      	mvns	r2, r2
 8002d46:	401a      	ands	r2, r3
 8002d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	401a      	ands	r2, r3
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	0018      	movs	r0, r3
 8002d58:	2303      	movs	r3, #3
 8002d5a:	4003      	ands	r3, r0
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d60:	481f      	ldr	r0, [pc, #124]	; (8002de0 <__NVIC_SetPriority+0xd4>)
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	33c0      	adds	r3, #192	; 0xc0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d72:	e031      	b.n	8002dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <__NVIC_SetPriority+0xd8>)
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	230f      	movs	r3, #15
 8002d7e:	400b      	ands	r3, r1
 8002d80:	3b08      	subs	r3, #8
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3306      	adds	r3, #6
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1dfa      	adds	r2, r7, #7
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	0011      	movs	r1, r2
 8002d94:	2203      	movs	r2, #3
 8002d96:	400a      	ands	r2, r1
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	21ff      	movs	r1, #255	; 0xff
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	000a      	movs	r2, r1
 8002da0:	43d2      	mvns	r2, r2
 8002da2:	401a      	ands	r2, r3
 8002da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	22ff      	movs	r2, #255	; 0xff
 8002dac:	401a      	ands	r2, r3
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	0018      	movs	r0, r3
 8002db4:	2303      	movs	r3, #3
 8002db6:	4003      	ands	r3, r0
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <__NVIC_SetPriority+0xd8>)
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	001c      	movs	r4, r3
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	4023      	ands	r3, r4
 8002dc8:	3b08      	subs	r3, #8
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	3306      	adds	r3, #6
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	18c3      	adds	r3, r0, r3
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b003      	add	sp, #12
 8002dde:	bd90      	pop	{r4, r7, pc}
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	045b      	lsls	r3, r3, #17
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d301      	bcc.n	8002e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e010      	b.n	8002e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <SysTick_Config+0x44>)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	3a01      	subs	r2, #1
 8002e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff ff7c 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x44>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x44>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	0002      	movs	r2, r0
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e66:	1dfb      	adds	r3, r7, #7
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ff33 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff ffaf 	bl	8002de8 <SysTick_Config>
 8002e8a:	0003      	movs	r3, r0
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea2:	e147      	b.n	8003134 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4091      	lsls	r1, r2
 8002eae:	000a      	movs	r2, r1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d100      	bne.n	8002ebc <HAL_GPIO_Init+0x28>
 8002eba:	e138      	b.n	800312e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d005      	beq.n	8002ed4 <HAL_GPIO_Init+0x40>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d130      	bne.n	8002f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	0013      	movs	r3, r2
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	0013      	movs	r3, r2
 8002f12:	43da      	mvns	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	2201      	movs	r2, #1
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
 8002f28:	0013      	movs	r3, r2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d017      	beq.n	8002f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	43da      	mvns	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	0092      	lsls	r2, r2, #2
 8002f88:	58d3      	ldr	r3, [r2, r3]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2207      	movs	r2, #7
 8002f90:	4013      	ands	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	409a      	lsls	r2, r3
 8002f98:	0013      	movs	r3, r2
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2107      	movs	r1, #7
 8002faa:	400b      	ands	r3, r1
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	08da      	lsrs	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	6939      	ldr	r1, [r7, #16]
 8002fc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	23c0      	movs	r3, #192	; 0xc0
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	4013      	ands	r3, r2
 8003004:	d100      	bne.n	8003008 <HAL_GPIO_Init+0x174>
 8003006:	e092      	b.n	800312e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_GPIO_Init+0x2b8>)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3318      	adds	r3, #24
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	589b      	ldr	r3, [r3, r2]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2203      	movs	r2, #3
 800301a:	4013      	ands	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	220f      	movs	r2, #15
 8003020:	409a      	lsls	r2, r3
 8003022:	0013      	movs	r3, r2
 8003024:	43da      	mvns	r2, r3
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	23a0      	movs	r3, #160	; 0xa0
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	429a      	cmp	r2, r3
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0x1ca>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a45      	ldr	r2, [pc, #276]	; (8003150 <HAL_GPIO_Init+0x2bc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00d      	beq.n	800305a <HAL_GPIO_Init+0x1c6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a44      	ldr	r2, [pc, #272]	; (8003154 <HAL_GPIO_Init+0x2c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x1c2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a43      	ldr	r2, [pc, #268]	; (8003158 <HAL_GPIO_Init+0x2c4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_GPIO_Init+0x1be>
 800304e:	2303      	movs	r3, #3
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x1cc>
 8003052:	2305      	movs	r3, #5
 8003054:	e004      	b.n	8003060 <HAL_GPIO_Init+0x1cc>
 8003056:	2302      	movs	r3, #2
 8003058:	e002      	b.n	8003060 <HAL_GPIO_Init+0x1cc>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_GPIO_Init+0x1cc>
 800305e:	2300      	movs	r3, #0
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	2103      	movs	r1, #3
 8003064:	400a      	ands	r2, r1
 8003066:	00d2      	lsls	r2, r2, #3
 8003068:	4093      	lsls	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003070:	4936      	ldr	r1, [pc, #216]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3318      	adds	r3, #24
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43da      	mvns	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	035b      	lsls	r3, r3, #13
 8003096:	4013      	ands	r3, r2
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <HAL_GPIO_Init+0x2b8>)
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_GPIO_Init+0x2b8>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	039b      	lsls	r3, r3, #14
 80030c0:	4013      	ands	r3, r2
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_GPIO_Init+0x2b8>)
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_GPIO_Init+0x2b8>)
 80030d4:	2384      	movs	r3, #132	; 0x84
 80030d6:	58d3      	ldr	r3, [r2, r3]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43da      	mvns	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4013      	ands	r3, r2
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <HAL_GPIO_Init+0x2b8>)
 80030fa:	2284      	movs	r2, #132	; 0x84
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	58d3      	ldr	r3, [r2, r3]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43da      	mvns	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	025b      	lsls	r3, r3, #9
 800311a:	4013      	ands	r3, r2
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003126:	4909      	ldr	r1, [pc, #36]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3301      	adds	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	40da      	lsrs	r2, r3
 800313c:	1e13      	subs	r3, r2, #0
 800313e:	d000      	beq.n	8003142 <HAL_GPIO_Init+0x2ae>
 8003140:	e6b0      	b.n	8002ea4 <HAL_GPIO_Init+0x10>
  }
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b006      	add	sp, #24
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021800 	.word	0x40021800
 8003150:	50000400 	.word	0x50000400
 8003154:	50000800 	.word	0x50000800
 8003158:	50000c00 	.word	0x50000c00

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	0008      	movs	r0, r1
 8003166:	0011      	movs	r1, r2
 8003168:	1cbb      	adds	r3, r7, #2
 800316a:	1c02      	adds	r2, r0, #0
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	1c7b      	adds	r3, r7, #1
 8003170:	1c0a      	adds	r2, r1, #0
 8003172:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003174:	1c7b      	adds	r3, r7, #1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317c:	1cbb      	adds	r3, r7, #2
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e003      	b.n	800318e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003186:	1cbb      	adds	r3, r7, #2
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	0002      	movs	r2, r0
 80031a0:	1dbb      	adds	r3, r7, #6
 80031a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	1dba      	adds	r2, r7, #6
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	4013      	ands	r3, r2
 80031ae:	d008      	beq.n	80031c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031b2:	1dba      	adds	r2, r7, #6
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031b8:	1dbb      	adds	r3, r7, #6
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f815 	bl	80031ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	1dba      	adds	r2, r7, #6
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	4013      	ands	r3, r2
 80031cc:	d008      	beq.n	80031e0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031d0:	1dba      	adds	r2, r7, #6
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031d6:	1dbb      	adds	r3, r7, #6
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f810 	bl	8003200 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021800 	.word	0x40021800

080031ec <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	0002      	movs	r2, r0
 80031f4:	1dbb      	adds	r3, r7, #6
 80031f6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	1dbb      	adds	r3, r7, #6
 800320a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e082      	b.n	800332c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2241      	movs	r2, #65	; 0x41
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff faff 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2241      	movs	r2, #65	; 0x41
 8003246:	2124      	movs	r1, #36	; 0x24
 8003248:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	438a      	bics	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_I2C_Init+0x120>)
 8003264:	400a      	ands	r2, r1
 8003266:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4931      	ldr	r1, [pc, #196]	; (8003338 <HAL_I2C_Init+0x124>)
 8003274:	400a      	ands	r2, r1
 8003276:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0209      	lsls	r1, r1, #8
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	e007      	b.n	80032a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2184      	movs	r1, #132	; 0x84
 800329c:	0209      	lsls	r1, r1, #8
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d104      	bne.n	80032b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	491f      	ldr	r1, [pc, #124]	; (800333c <HAL_I2C_Init+0x128>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <HAL_I2C_Init+0x124>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	431a      	orrs	r2, r3
 80032de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69d9      	ldr	r1, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2241      	movs	r2, #65	; 0x41
 8003318:	2120      	movs	r1, #32
 800331a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2242      	movs	r2, #66	; 0x42
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}
 8003334:	f0ffffff 	.word	0xf0ffffff
 8003338:	ffff7fff 	.word	0xffff7fff
 800333c:	02008000 	.word	0x02008000

08003340 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	0008      	movs	r0, r1
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	0019      	movs	r1, r3
 800334e:	230a      	movs	r3, #10
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	1c02      	adds	r2, r0, #0
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	2308      	movs	r3, #8
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	1c0a      	adds	r2, r1, #0
 800335c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2241      	movs	r2, #65	; 0x41
 8003362:	5c9b      	ldrb	r3, [r3, r2]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	d000      	beq.n	800336c <HAL_I2C_Master_Transmit+0x2c>
 800336a:	e0e7      	b.n	800353c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	; 0x40
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2C_Master_Transmit+0x3a>
 8003376:	2302      	movs	r3, #2
 8003378:	e0e1      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003382:	f7ff fc7b 	bl	8002c7c <HAL_GetTick>
 8003386:	0003      	movs	r3, r0
 8003388:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	0219      	lsls	r1, r3, #8
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2319      	movs	r3, #25
 8003396:	2201      	movs	r2, #1
 8003398:	f000 fa04 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cc      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2241      	movs	r2, #65	; 0x41
 80033a8:	2121      	movs	r1, #33	; 0x21
 80033aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2242      	movs	r2, #66	; 0x42
 80033b0:	2110      	movs	r1, #16
 80033b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2208      	movs	r2, #8
 80033c4:	18ba      	adds	r2, r7, r2
 80033c6:	8812      	ldrh	r2, [r2, #0]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d911      	bls.n	80033fe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	045c      	lsls	r4, r3, #17
 80033ea:	230a      	movs	r3, #10
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	8819      	ldrh	r1, [r3, #0]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_I2C_Master_Transmit+0x208>)
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	0023      	movs	r3, r4
 80033f8:	f000 fc08 	bl	8003c0c <I2C_TransferConfig>
 80033fc:	e075      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	049c      	lsls	r4, r3, #18
 8003412:	230a      	movs	r3, #10
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	8819      	ldrh	r1, [r3, #0]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_I2C_Master_Transmit+0x208>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	0023      	movs	r3, r4
 8003420:	f000 fbf4 	bl	8003c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003424:	e061      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f9f8 	bl	8003822 <I2C_WaitOnTXISFlagUntilTimeout>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e081      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03a      	beq.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d136      	bne.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800347c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	0013      	movs	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	f000 f98b 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e053      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2bff      	cmp	r3, #255	; 0xff
 800349e:	d911      	bls.n	80034c4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	045c      	lsls	r4, r3, #17
 80034b0:	230a      	movs	r3, #10
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	8819      	ldrh	r1, [r3, #0]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	0023      	movs	r3, r4
 80034be:	f000 fba5 	bl	8003c0c <I2C_TransferConfig>
 80034c2:	e012      	b.n	80034ea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	049c      	lsls	r4, r3, #18
 80034d8:	230a      	movs	r3, #10
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	8819      	ldrh	r1, [r3, #0]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	0023      	movs	r3, r4
 80034e6:	f000 fb91 	bl	8003c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d198      	bne.n	8003426 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f9d0 	bl	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e01a      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2220      	movs	r2, #32
 800350e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	490c      	ldr	r1, [pc, #48]	; (800354c <HAL_I2C_Master_Transmit+0x20c>)
 800351c:	400a      	ands	r2, r1
 800351e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2241      	movs	r2, #65	; 0x41
 8003524:	2120      	movs	r1, #32
 8003526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2242      	movs	r2, #66	; 0x42
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b007      	add	sp, #28
 8003544:	bd90      	pop	{r4, r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	80002000 	.word	0x80002000
 800354c:	fe00e800 	.word	0xfe00e800

08003550 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	0008      	movs	r0, r1
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	0019      	movs	r1, r3
 800355e:	230a      	movs	r3, #10
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	1c02      	adds	r2, r0, #0
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	2308      	movs	r3, #8
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	1c0a      	adds	r2, r1, #0
 800356c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2241      	movs	r2, #65	; 0x41
 8003572:	5c9b      	ldrb	r3, [r3, r2]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	d000      	beq.n	800357c <HAL_I2C_Master_Receive+0x2c>
 800357a:	e0e8      	b.n	800374e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2C_Master_Receive+0x3a>
 8003586:	2302      	movs	r3, #2
 8003588:	e0e2      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003592:	f7ff fb73 	bl	8002c7c <HAL_GetTick>
 8003596:	0003      	movs	r3, r0
 8003598:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	0219      	lsls	r1, r3, #8
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	f000 f8fc 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cd      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2241      	movs	r2, #65	; 0x41
 80035b8:	2122      	movs	r1, #34	; 0x22
 80035ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2242      	movs	r2, #66	; 0x42
 80035c0:	2110      	movs	r1, #16
 80035c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2208      	movs	r2, #8
 80035d4:	18ba      	adds	r2, r7, r2
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d911      	bls.n	800360e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	; 0xff
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	045c      	lsls	r4, r3, #17
 80035fa:	230a      	movs	r3, #10
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	8819      	ldrh	r1, [r3, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	4b55      	ldr	r3, [pc, #340]	; (8003758 <HAL_I2C_Master_Receive+0x208>)
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	0023      	movs	r3, r4
 8003608:	f000 fb00 	bl	8003c0c <I2C_TransferConfig>
 800360c:	e076      	b.n	80036fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	b2da      	uxtb	r2, r3
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	049c      	lsls	r4, r3, #18
 8003622:	230a      	movs	r3, #10
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	8819      	ldrh	r1, [r3, #0]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_I2C_Master_Receive+0x208>)
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	0023      	movs	r3, r4
 8003630:	f000 faec 	bl	8003c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003634:	e062      	b.n	80036fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f96b 	bl	8003918 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003642:	1e03      	subs	r3, r0, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e082      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03a      	beq.n	80036fc <HAL_I2C_Master_Receive+0x1ac>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d136      	bne.n	80036fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800368e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	0013      	movs	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	f000 f882 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e053      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2bff      	cmp	r3, #255	; 0xff
 80036b0:	d911      	bls.n	80036d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	045c      	lsls	r4, r3, #17
 80036c2:	230a      	movs	r3, #10
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	8819      	ldrh	r1, [r3, #0]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	0023      	movs	r3, r4
 80036d0:	f000 fa9c 	bl	8003c0c <I2C_TransferConfig>
 80036d4:	e012      	b.n	80036fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	049c      	lsls	r4, r3, #18
 80036ea:	230a      	movs	r3, #10
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	0023      	movs	r3, r4
 80036f8:	f000 fa88 	bl	8003c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d197      	bne.n	8003636 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f8c7 	bl	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e01a      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2220      	movs	r2, #32
 8003720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	490b      	ldr	r1, [pc, #44]	; (800375c <HAL_I2C_Master_Receive+0x20c>)
 800372e:	400a      	ands	r2, r1
 8003730:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2241      	movs	r2, #65	; 0x41
 8003736:	2120      	movs	r1, #32
 8003738:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2242      	movs	r2, #66	; 0x42
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2240      	movs	r2, #64	; 0x40
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
  }
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b007      	add	sp, #28
 8003756:	bd90      	pop	{r4, r7, pc}
 8003758:	80002400 	.word	0x80002400
 800375c:	fe00e800 	.word	0xfe00e800

08003760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2202      	movs	r2, #2
 8003770:	4013      	ands	r3, r2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d103      	bne.n	800377e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2201      	movs	r2, #1
 8003786:	4013      	ands	r3, r2
 8003788:	2b01      	cmp	r3, #1
 800378a:	d007      	beq.n	800379c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2101      	movs	r1, #1
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
  }
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	e021      	b.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	d01e      	beq.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	f7ff fa5e 	bl	8002c7c <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d302      	bcc.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	2220      	movs	r2, #32
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2241      	movs	r2, #65	; 0x41
 80037e2:	2120      	movs	r1, #32
 80037e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2242      	movs	r2, #66	; 0x42
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00f      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	425a      	negs	r2, r3
 800380a:	4153      	adcs	r3, r2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	001a      	movs	r2, r3
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d0ce      	beq.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800382e:	e02b      	b.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f8e8 	bl	8003a0c <I2C_IsErrorOccurred>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e029      	b.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3301      	adds	r3, #1
 8003848:	d01e      	beq.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7ff fa17 	bl	8002c7c <HAL_GetTick>
 800384e:	0002      	movs	r2, r0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d113      	bne.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	2220      	movs	r2, #32
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2241      	movs	r2, #65	; 0x41
 8003870:	2120      	movs	r1, #32
 8003872:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2242      	movs	r2, #66	; 0x42
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2202      	movs	r2, #2
 8003890:	4013      	ands	r3, r2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d1cc      	bne.n	8003830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b004      	add	sp, #16
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	e028      	b.n	8003900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f8a9 	bl	8003a0c <I2C_IsErrorOccurred>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e026      	b.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7ff f9db 	bl	8002c7c <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d113      	bne.n	8003900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	2220      	movs	r2, #32
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2241      	movs	r2, #65	; 0x41
 80038e8:	2120      	movs	r1, #32
 80038ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2242      	movs	r2, #66	; 0x42
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e007      	b.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	2b20      	cmp	r3, #32
 800390c:	d1cf      	bne.n	80038ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003924:	e064      	b.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f86d 	bl	8003a0c <I2C_IsErrorOccurred>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e062      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2220      	movs	r2, #32
 8003942:	4013      	ands	r3, r2
 8003944:	2b20      	cmp	r3, #32
 8003946:	d138      	bne.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2204      	movs	r2, #4
 8003950:	4013      	ands	r3, r2
 8003952:	2b04      	cmp	r3, #4
 8003954:	d105      	bne.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e04e      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2210      	movs	r2, #16
 800396a:	4013      	ands	r3, r2
 800396c:	2b10      	cmp	r3, #16
 800396e:	d107      	bne.n	8003980 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2204      	movs	r2, #4
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
 800397e:	e002      	b.n	8003986 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2220      	movs	r2, #32
 800398c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	491b      	ldr	r1, [pc, #108]	; (8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800399a:	400a      	ands	r2, r1
 800399c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2241      	movs	r2, #65	; 0x41
 80039a2:	2120      	movs	r1, #32
 80039a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2242      	movs	r2, #66	; 0x42
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2240      	movs	r2, #64	; 0x40
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e022      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7ff f95f 	bl	8002c7c <HAL_GetTick>
 80039be:	0002      	movs	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	2220      	movs	r2, #32
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2241      	movs	r2, #65	; 0x41
 80039e0:	2120      	movs	r1, #32
 80039e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e007      	b.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2204      	movs	r2, #4
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d193      	bne.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fe00e800 	.word	0xfe00e800

08003a0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b08b      	sub	sp, #44	; 0x2c
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2327      	movs	r3, #39	; 0x27
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	d100      	bne.n	8003a3a <I2C_IsErrorOccurred+0x2e>
 8003a38:	e082      	b.n	8003b40 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a42:	e060      	b.n	8003b06 <I2C_IsErrorOccurred+0xfa>
 8003a44:	2427      	movs	r4, #39	; 0x27
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	193a      	adds	r2, r7, r4
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	d058      	beq.n	8003b06 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7ff f912 	bl	8002c7c <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d306      	bcc.n	8003a72 <I2C_IsErrorOccurred+0x66>
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	193a      	adds	r2, r7, r4
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d149      	bne.n	8003b06 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a80:	2013      	movs	r0, #19
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	2142      	movs	r1, #66	; 0x42
 8003a88:	5c52      	ldrb	r2, [r2, r1]
 8003a8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	401a      	ands	r2, r3
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d126      	bne.n	8003aee <I2C_IsErrorOccurred+0xe2>
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	01db      	lsls	r3, r3, #7
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d021      	beq.n	8003aee <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d01d      	beq.n	8003aee <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	01c9      	lsls	r1, r1, #7
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ac4:	f7ff f8da 	bl	8002c7c <HAL_GetTick>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003acc:	e00f      	b.n	8003aee <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ace:	f7ff f8d5 	bl	8002c7c <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b19      	cmp	r3, #25
 8003ada:	d908      	bls.n	8003aee <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ae4:	2327      	movs	r3, #39	; 0x27
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]

              break;
 8003aec:	e00b      	b.n	8003b06 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2220      	movs	r2, #32
 8003af6:	4013      	ands	r3, r2
 8003af8:	2127      	movs	r1, #39	; 0x27
 8003afa:	187a      	adds	r2, r7, r1
 8003afc:	1879      	adds	r1, r7, r1
 8003afe:	7809      	ldrb	r1, [r1, #0]
 8003b00:	7011      	strb	r1, [r2, #0]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d1e3      	bne.n	8003ace <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d004      	beq.n	8003b1e <I2C_IsErrorOccurred+0x112>
 8003b14:	2327      	movs	r3, #39	; 0x27
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d092      	beq.n	8003a44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b1e:	2327      	movs	r3, #39	; 0x27
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2204      	movs	r2, #4
 8003b34:	4313      	orrs	r3, r2
 8003b36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b38:	2327      	movs	r3, #39	; 0x27
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d00c      	beq.n	8003b6c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2201      	movs	r2, #1
 8003b56:	4313      	orrs	r3, r2
 8003b58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	0052      	lsls	r2, r2, #1
 8003b62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b64:	2327      	movs	r3, #39	; 0x27
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	d00c      	beq.n	8003b90 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	00d2      	lsls	r2, r2, #3
 8003b86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b88:	2327      	movs	r3, #39	; 0x27
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4013      	ands	r3, r2
 8003b98:	d00c      	beq.n	8003bb4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	0092      	lsls	r2, r2, #2
 8003baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bac:	2327      	movs	r3, #39	; 0x27
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003bb4:	2327      	movs	r3, #39	; 0x27
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01d      	beq.n	8003bfa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff fdcd 	bl	8003760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	490d      	ldr	r1, [pc, #52]	; (8003c08 <I2C_IsErrorOccurred+0x1fc>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2241      	movs	r2, #65	; 0x41
 8003be6:	2120      	movs	r1, #32
 8003be8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2242      	movs	r2, #66	; 0x42
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003bfa:	2327      	movs	r3, #39	; 0x27
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	781b      	ldrb	r3, [r3, #0]
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b00b      	add	sp, #44	; 0x2c
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	fe00e800 	.word	0xfe00e800

08003c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	0008      	movs	r0, r1
 8003c16:	0011      	movs	r1, r2
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	240a      	movs	r4, #10
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	1c02      	adds	r2, r0, #0
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	2009      	movs	r0, #9
 8003c24:	183b      	adds	r3, r7, r0
 8003c26:	1c0a      	adds	r2, r1, #0
 8003c28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	059b      	lsls	r3, r3, #22
 8003c30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	0419      	lsls	r1, r3, #16
 8003c38:	23ff      	movs	r3, #255	; 0xff
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	4313      	orrs	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c56:	0d51      	lsrs	r1, r2, #21
 8003c58:	2280      	movs	r2, #128	; 0x80
 8003c5a:	00d2      	lsls	r2, r2, #3
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	4907      	ldr	r1, [pc, #28]	; (8003c7c <I2C_TransferConfig+0x70>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	43d2      	mvns	r2, r2
 8003c64:	401a      	ands	r2, r3
 8003c66:	0011      	movs	r1, r2
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b007      	add	sp, #28
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	03ff63ff 	.word	0x03ff63ff

08003c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2241      	movs	r2, #65	; 0x41
 8003c8e:	5c9b      	ldrb	r3, [r3, r2]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d138      	bne.n	8003d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2240      	movs	r2, #64	; 0x40
 8003c9a:	5c9b      	ldrb	r3, [r3, r2]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e032      	b.n	8003d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	2101      	movs	r1, #1
 8003caa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2124      	movs	r1, #36	; 0x24
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4911      	ldr	r1, [pc, #68]	; (8003d14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2241      	movs	r2, #65	; 0x41
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2240      	movs	r2, #64	; 0x40
 8003d00:	2100      	movs	r1, #0
 8003d02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	ffffefff 	.word	0xffffefff

08003d18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2241      	movs	r2, #65	; 0x41
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d139      	bne.n	8003da2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2240      	movs	r2, #64	; 0x40
 8003d32:	5c9b      	ldrb	r3, [r3, r2]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e033      	b.n	8003da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	2101      	movs	r1, #1
 8003d42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2241      	movs	r2, #65	; 0x41
 8003d48:	2124      	movs	r1, #36	; 0x24
 8003d4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a11      	ldr	r2, [pc, #68]	; (8003dac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2241      	movs	r2, #65	; 0x41
 8003d92:	2120      	movs	r1, #32
 8003d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b004      	add	sp, #16
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	fffff0ff 	.word	0xfffff0ff

08003db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d11f      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	0013      	movs	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4912      	ldr	r1, [pc, #72]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fc f9aa 	bl	800013c <__udivsi3>
 8003de8:	0003      	movs	r3, r0
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dee:	e008      	b.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e001      	b.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e009      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0ed      	beq.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	40007000 	.word	0x40007000
 8003e24:	fffff9ff 	.word	0xfffff9ff
 8003e28:	20000004 	.word	0x20000004
 8003e2c:	000f4240 	.word	0x000f4240

08003e30 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	23e0      	movs	r3, #224	; 0xe0
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	4013      	ands	r3, r2
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e2fe      	b.n	8004458 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	d100      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1e>
 8003e64:	e07c      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e66:	4bc3      	ldr	r3, [pc, #780]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2238      	movs	r2, #56	; 0x38
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e70:	4bc0      	ldr	r3, [pc, #768]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3e>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	4bb9      	ldr	r3, [pc, #740]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	4013      	ands	r3, r2
 8003e96:	d062      	beq.n	8003f5e <HAL_RCC_OscConfig+0x116>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d15e      	bne.n	8003f5e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e2d9      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	025b      	lsls	r3, r3, #9
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x78>
 8003eb0:	4bb0      	ldr	r3, [pc, #704]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4baf      	ldr	r3, [pc, #700]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	0249      	lsls	r1, r1, #9
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e020      	b.n	8003f02 <HAL_RCC_OscConfig+0xba>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	23a0      	movs	r3, #160	; 0xa0
 8003ec6:	02db      	lsls	r3, r3, #11
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d10e      	bne.n	8003eea <HAL_RCC_OscConfig+0xa2>
 8003ecc:	4ba9      	ldr	r3, [pc, #676]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4ba8      	ldr	r3, [pc, #672]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	02c9      	lsls	r1, r1, #11
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4ba6      	ldr	r3, [pc, #664]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4ba5      	ldr	r3, [pc, #660]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	0249      	lsls	r1, r1, #9
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCC_OscConfig+0xba>
 8003eea:	4ba2      	ldr	r3, [pc, #648]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4ba1      	ldr	r3, [pc, #644]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	49a1      	ldr	r1, [pc, #644]	; (8004178 <HAL_RCC_OscConfig+0x330>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	4b9f      	ldr	r3, [pc, #636]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b9e      	ldr	r3, [pc, #632]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	499f      	ldr	r1, [pc, #636]	; (800417c <HAL_RCC_OscConfig+0x334>)
 8003efe:	400a      	ands	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe feb7 	bl	8002c7c <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe feb2 	bl	8002c7c <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e298      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b93      	ldr	r3, [pc, #588]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xcc>
 8003f32:	e015      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fea2 	bl	8002c7c <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3e:	f7fe fe9d 	bl	8002c7c <HAL_GetTick>
 8003f42:	0002      	movs	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e283      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f50:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0xf6>
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d100      	bne.n	8003f6c <HAL_RCC_OscConfig+0x124>
 8003f6a:	e099      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6c:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2238      	movs	r2, #56	; 0x38
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f76:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x144>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d002      	beq.n	8003f92 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d135      	bne.n	8003ffe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f92:	4b78      	ldr	r3, [pc, #480]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x162>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e256      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a74      	ldr	r2, [pc, #464]	; (8004180 <HAL_RCC_OscConfig+0x338>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	021a      	lsls	r2, r3, #8
 8003fba:	4b6e      	ldr	r3, [pc, #440]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d112      	bne.n	8003fec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fc6:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	4b67      	ldr	r3, [pc, #412]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003fda:	4b66      	ldr	r3, [pc, #408]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0adb      	lsrs	r3, r3, #11
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	4a68      	ldr	r2, [pc, #416]	; (8004188 <HAL_RCC_OscConfig+0x340>)
 8003fe6:	40da      	lsrs	r2, r3
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x344>)
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x348>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fe fde7 	bl	8002bc4 <HAL_InitTick>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d051      	beq.n	800409e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e22c      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d030      	beq.n	8004068 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004006:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5e      	ldr	r2, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x33c>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b57      	ldr	r3, [pc, #348]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0049      	lsls	r1, r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fe28 	bl	8002c7c <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7fe fe23 	bl	8002c7c <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e209      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4013      	ands	r3, r2
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a4a      	ldr	r2, [pc, #296]	; (8004180 <HAL_RCC_OscConfig+0x338>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e01b      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b42      	ldr	r3, [pc, #264]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800406e:	4949      	ldr	r1, [pc, #292]	; (8004194 <HAL_RCC_OscConfig+0x34c>)
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe fe02 	bl	8002c7c <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407e:	f7fe fdfd 	bl	8002c7c <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1e3      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4013      	ands	r3, r2
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x236>
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2208      	movs	r2, #8
 80040a6:	4013      	ands	r3, r2
 80040a8:	d047      	beq.n	800413a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040aa:	4b32      	ldr	r3, [pc, #200]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2238      	movs	r2, #56	; 0x38
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b18      	cmp	r3, #24
 80040b4:	d10a      	bne.n	80040cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040b6:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d03c      	beq.n	800413a <HAL_RCC_OscConfig+0x2f2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d138      	bne.n	800413a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e1c5      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040d8:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040da:	2101      	movs	r1, #1
 80040dc:	430a      	orrs	r2, r1
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fdcc 	bl	8002c7c <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ea:	f7fe fdc7 	bl	8002c7c <HAL_GetTick>
 80040ee:	0002      	movs	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1ad      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d0f1      	beq.n	80040ea <HAL_RCC_OscConfig+0x2a2>
 8004106:	e018      	b.n	800413a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800410a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fdb2 	bl	8002c7c <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe fdad 	bl	8002c7c <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e193      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	2202      	movs	r2, #2
 8004136:	4013      	ands	r3, r2
 8004138:	d1f1      	bne.n	800411e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2204      	movs	r2, #4
 8004140:	4013      	ands	r3, r2
 8004142:	d100      	bne.n	8004146 <HAL_RCC_OscConfig+0x2fe>
 8004144:	e0c6      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	231f      	movs	r3, #31
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	; 0x38
 8004154:	4013      	ands	r3, r2
 8004156:	2b20      	cmp	r3, #32
 8004158:	d11e      	bne.n	8004198 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_OscConfig+0x32c>)
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2202      	movs	r2, #2
 8004160:	4013      	ands	r3, r2
 8004162:	d100      	bne.n	8004166 <HAL_RCC_OscConfig+0x31e>
 8004164:	e0b6      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d000      	beq.n	8004170 <HAL_RCC_OscConfig+0x328>
 800416e:	e0b1      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e171      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
 8004174:	40021000 	.word	0x40021000
 8004178:	fffeffff 	.word	0xfffeffff
 800417c:	fffbffff 	.word	0xfffbffff
 8004180:	ffff80ff 	.word	0xffff80ff
 8004184:	ffffc7ff 	.word	0xffffc7ff
 8004188:	00f42400 	.word	0x00f42400
 800418c:	20000004 	.word	0x20000004
 8004190:	20000008 	.word	0x20000008
 8004194:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004198:	4bb1      	ldr	r3, [pc, #708]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800419a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x360>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x362>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4bac      	ldr	r3, [pc, #688]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80041b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b2:	4bab      	ldr	r3, [pc, #684]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0549      	lsls	r1, r1, #21
 80041b8:	430a      	orrs	r2, r1
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80041bc:	4ba8      	ldr	r3, [pc, #672]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80041be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	055b      	lsls	r3, r3, #21
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041ca:	231f      	movs	r3, #31
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d2:	4ba4      	ldr	r3, [pc, #656]	; (8004464 <HAL_RCC_OscConfig+0x61c>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d11a      	bne.n	8004214 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041de:	4ba1      	ldr	r3, [pc, #644]	; (8004464 <HAL_RCC_OscConfig+0x61c>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4ba0      	ldr	r3, [pc, #640]	; (8004464 <HAL_RCC_OscConfig+0x61c>)
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0049      	lsls	r1, r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041ec:	f7fe fd46 	bl	8002c7c <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fe fd41 	bl	8002c7c <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e127      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	4b96      	ldr	r3, [pc, #600]	; (8004464 <HAL_RCC_OscConfig+0x61c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x3e2>
 800421c:	4b90      	ldr	r3, [pc, #576]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800421e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004220:	4b8f      	ldr	r3, [pc, #572]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004222:	2101      	movs	r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c
 8004228:	e01c      	b.n	8004264 <HAL_RCC_OscConfig+0x41c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x404>
 8004232:	4b8b      	ldr	r3, [pc, #556]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004236:	4b8a      	ldr	r3, [pc, #552]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004238:	2104      	movs	r1, #4
 800423a:	430a      	orrs	r2, r1
 800423c:	65da      	str	r2, [r3, #92]	; 0x5c
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004240:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004242:	4b87      	ldr	r3, [pc, #540]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004244:	2101      	movs	r1, #1
 8004246:	430a      	orrs	r2, r1
 8004248:	65da      	str	r2, [r3, #92]	; 0x5c
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x41c>
 800424c:	4b84      	ldr	r3, [pc, #528]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800424e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004250:	4b83      	ldr	r3, [pc, #524]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c
 8004258:	4b81      	ldr	r3, [pc, #516]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800425a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800425c:	4b80      	ldr	r3, [pc, #512]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800425e:	2104      	movs	r1, #4
 8004260:	438a      	bics	r2, r1
 8004262:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d014      	beq.n	8004296 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe fd06 	bl	8002c7c <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004274:	e009      	b.n	800428a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fe fd01 	bl	8002c7c <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	4a79      	ldr	r2, [pc, #484]	; (8004468 <HAL_RCC_OscConfig+0x620>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0e6      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428a:	4b75      	ldr	r3, [pc, #468]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x42e>
 8004294:	e013      	b.n	80042be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fe fcf1 	bl	8002c7c <HAL_GetTick>
 800429a:	0003      	movs	r3, r0
 800429c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800429e:	e009      	b.n	80042b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fe fcec 	bl	8002c7c <HAL_GetTick>
 80042a4:	0002      	movs	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	4a6f      	ldr	r2, [pc, #444]	; (8004468 <HAL_RCC_OscConfig+0x620>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0d1      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b4:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	2202      	movs	r2, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042be:	231f      	movs	r3, #31
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042cc:	4b64      	ldr	r3, [pc, #400]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042ce:	4967      	ldr	r1, [pc, #412]	; (800446c <HAL_RCC_OscConfig+0x624>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d100      	bne.n	80042de <HAL_RCC_OscConfig+0x496>
 80042dc:	e0bb      	b.n	8004456 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042de:	4b60      	ldr	r3, [pc, #384]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2238      	movs	r2, #56	; 0x38
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d100      	bne.n	80042ec <HAL_RCC_OscConfig+0x4a4>
 80042ea:	e07b      	b.n	80043e4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d156      	bne.n	80043a2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b5a      	ldr	r3, [pc, #360]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80042fa:	495d      	ldr	r1, [pc, #372]	; (8004470 <HAL_RCC_OscConfig+0x628>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fcbc 	bl	8002c7c <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fcb7 	bl	8002c7c <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e09d      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b50      	ldr	r3, [pc, #320]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	049b      	lsls	r3, r3, #18
 8004324:	4013      	ands	r3, r2
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a51      	ldr	r2, [pc, #324]	; (8004474 <HAL_RCC_OscConfig+0x62c>)
 800432e:	4013      	ands	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	431a      	orrs	r2, r3
 8004356:	4b42      	ldr	r3, [pc, #264]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004358:	430a      	orrs	r2, r1
 800435a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0449      	lsls	r1, r1, #17
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	0549      	lsls	r1, r1, #21
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe fc80 	bl	8002c7c <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fe fc7b 	bl	8002c7c <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e061      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	049b      	lsls	r3, r3, #18
 800439c:	4013      	ands	r3, r2
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x53a>
 80043a0:	e059      	b.n	8004456 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043a8:	4931      	ldr	r1, [pc, #196]	; (8004470 <HAL_RCC_OscConfig+0x628>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fe fc65 	bl	8002c7c <HAL_GetTick>
 80043b2:	0003      	movs	r3, r0
 80043b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fc60 	bl	8002c7c <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e046      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ca:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	049b      	lsls	r3, r3, #18
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043dc:	4926      	ldr	r1, [pc, #152]	; (8004478 <HAL_RCC_OscConfig+0x630>)
 80043de:	400a      	ands	r2, r1
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	e038      	b.n	8004456 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e033      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x618>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2203      	movs	r2, #3
 80043fa:	401a      	ands	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	429a      	cmp	r2, r3
 8004402:	d126      	bne.n	8004452 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2270      	movs	r2, #112	; 0x70
 8004408:	401a      	ands	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d11f      	bne.n	8004452 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	23fe      	movs	r3, #254	; 0xfe
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	401a      	ands	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d116      	bne.n	8004452 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	23f8      	movs	r3, #248	; 0xf8
 8004428:	039b      	lsls	r3, r3, #14
 800442a:	401a      	ands	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d10e      	bne.n	8004452 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	23e0      	movs	r3, #224	; 0xe0
 8004438:	051b      	lsls	r3, r3, #20
 800443a:	401a      	ands	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	0f5b      	lsrs	r3, r3, #29
 8004448:	075a      	lsls	r2, r3, #29
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b008      	add	sp, #32
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	00001388 	.word	0x00001388
 800446c:	efffffff 	.word	0xefffffff
 8004470:	feffffff 	.word	0xfeffffff
 8004474:	11c1808c 	.word	0x11c1808c
 8004478:	eefefffc 	.word	0xeefefffc

0800447c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0e9      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004490:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2207      	movs	r2, #7
 8004496:	4013      	ands	r3, r2
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d91e      	bls.n	80044dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2207      	movs	r2, #7
 80044a4:	4393      	bics	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	4b70      	ldr	r3, [pc, #448]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044b0:	f7fe fbe4 	bl	8002c7c <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044b8:	e009      	b.n	80044ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ba:	f7fe fbdf 	bl	8002c7c <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	4a6a      	ldr	r2, [pc, #424]	; (8004670 <HAL_RCC_ClockConfig+0x1f4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0ca      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044ce:	4b67      	ldr	r3, [pc, #412]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2207      	movs	r2, #7
 80044d4:	4013      	ands	r3, r2
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1ee      	bne.n	80044ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2202      	movs	r2, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d015      	beq.n	8004512 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	d006      	beq.n	80044fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044f0:	4b60      	ldr	r3, [pc, #384]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 80044f6:	21e0      	movs	r1, #224	; 0xe0
 80044f8:	01c9      	lsls	r1, r1, #7
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fe:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4a5d      	ldr	r2, [pc, #372]	; (8004678 <HAL_RCC_ClockConfig+0x1fc>)
 8004504:	4013      	ands	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2201      	movs	r2, #1
 8004518:	4013      	ands	r3, r2
 800451a:	d057      	beq.n	80045cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004524:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	4013      	ands	r3, r2
 800452e:	d12b      	bne.n	8004588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e097      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	049b      	lsls	r3, r3, #18
 8004544:	4013      	ands	r3, r2
 8004546:	d11f      	bne.n	8004588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e08b      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004554:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4013      	ands	r3, r2
 800455e:	d113      	bne.n	8004588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e07f      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d106      	bne.n	800457a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	2202      	movs	r2, #2
 8004572:	4013      	ands	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e074      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800457a:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	2202      	movs	r2, #2
 8004580:	4013      	ands	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e06d      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004588:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2207      	movs	r2, #7
 800458e:	4393      	bics	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004598:	430a      	orrs	r2, r1
 800459a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fe fb6e 	bl	8002c7c <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a4:	e009      	b.n	80045ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a6:	f7fe fb69 	bl	8002c7c <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <HAL_RCC_ClockConfig+0x1f4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e054      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2238      	movs	r2, #56	; 0x38
 80045c0:	401a      	ands	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1ec      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2207      	movs	r2, #7
 80045d2:	4013      	ands	r3, r2
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d21e      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2207      	movs	r2, #7
 80045e0:	4393      	bics	r3, r2
 80045e2:	0019      	movs	r1, r3
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fb46 	bl	8002c7c <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045f4:	e009      	b.n	800460a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f6:	f7fe fb41 	bl	8002c7c <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_RCC_ClockConfig+0x1f4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e02c      	b.n	8004664 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800460a:	4b18      	ldr	r3, [pc, #96]	; (800466c <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2207      	movs	r2, #7
 8004610:	4013      	ands	r3, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d1ee      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2204      	movs	r2, #4
 800461e:	4013      	ands	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <HAL_RCC_ClockConfig+0x200>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004636:	f000 f829 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800463a:	0001      	movs	r1, r0
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_ClockConfig+0x1f8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	220f      	movs	r2, #15
 8004644:	401a      	ands	r2, r3
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <HAL_RCC_ClockConfig+0x204>)
 8004648:	0092      	lsls	r2, r2, #2
 800464a:	58d3      	ldr	r3, [r2, r3]
 800464c:	221f      	movs	r2, #31
 800464e:	4013      	ands	r3, r2
 8004650:	000a      	movs	r2, r1
 8004652:	40da      	lsrs	r2, r3
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_ClockConfig+0x208>)
 8004656:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_ClockConfig+0x20c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0018      	movs	r0, r3
 800465e:	f7fe fab1 	bl	8002bc4 <HAL_InitTick>
 8004662:	0003      	movs	r3, r0
}
 8004664:	0018      	movs	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	b004      	add	sp, #16
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40022000 	.word	0x40022000
 8004670:	00001388 	.word	0x00001388
 8004674:	40021000 	.word	0x40021000
 8004678:	fffff0ff 	.word	0xfffff0ff
 800467c:	ffff8fff 	.word	0xffff8fff
 8004680:	0800e340 	.word	0x0800e340
 8004684:	20000004 	.word	0x20000004
 8004688:	20000008 	.word	0x20000008

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004692:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2238      	movs	r2, #56	; 0x38
 8004698:	4013      	ands	r3, r2
 800469a:	d10f      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800469c:	4b39      	ldr	r3, [pc, #228]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0adb      	lsrs	r3, r3, #11
 80046a2:	2207      	movs	r2, #7
 80046a4:	4013      	ands	r3, r2
 80046a6:	2201      	movs	r2, #1
 80046a8:	409a      	lsls	r2, r3
 80046aa:	0013      	movs	r3, r2
 80046ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	4835      	ldr	r0, [pc, #212]	; (8004788 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046b2:	f7fb fd43 	bl	800013c <__udivsi3>
 80046b6:	0003      	movs	r3, r0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e05d      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046bc:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2238      	movs	r2, #56	; 0x38
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d102      	bne.n	80046ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c8:	4b30      	ldr	r3, [pc, #192]	; (800478c <HAL_RCC_GetSysClockFreq+0x100>)
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e054      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ce:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2238      	movs	r2, #56	; 0x38
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d138      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2203      	movs	r2, #3
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	3301      	adds	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d10d      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4824      	ldr	r0, [pc, #144]	; (800478c <HAL_RCC_GetSysClockFreq+0x100>)
 80046fc:	f7fb fd1e 	bl	800013c <__udivsi3>
 8004700:	0003      	movs	r3, r0
 8004702:	0019      	movs	r1, r3
 8004704:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	227f      	movs	r2, #127	; 0x7f
 800470c:	4013      	ands	r3, r2
 800470e:	434b      	muls	r3, r1
 8004710:	617b      	str	r3, [r7, #20]
        break;
 8004712:	e00d      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	481c      	ldr	r0, [pc, #112]	; (8004788 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004718:	f7fb fd10 	bl	800013c <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	0019      	movs	r1, r3
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	227f      	movs	r2, #127	; 0x7f
 8004728:	4013      	ands	r3, r2
 800472a:	434b      	muls	r3, r1
 800472c:	617b      	str	r3, [r7, #20]
        break;
 800472e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0f5b      	lsrs	r3, r3, #29
 8004736:	2207      	movs	r2, #7
 8004738:	4013      	ands	r3, r2
 800473a:	3301      	adds	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f7fb fcfb 	bl	800013c <__udivsi3>
 8004746:	0003      	movs	r3, r0
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e015      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2238      	movs	r2, #56	; 0x38
 8004752:	4013      	ands	r3, r2
 8004754:	2b20      	cmp	r3, #32
 8004756:	d103      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e00b      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2238      	movs	r2, #56	; 0x38
 8004766:	4013      	ands	r3, r2
 8004768:	2b18      	cmp	r3, #24
 800476a:	d103      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800476c:	23fa      	movs	r3, #250	; 0xfa
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e001      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004778:	693b      	ldr	r3, [r7, #16]
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b006      	add	sp, #24
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40021000 	.word	0x40021000
 8004788:	00f42400 	.word	0x00f42400
 800478c:	007a1200 	.word	0x007a1200

08004790 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b02      	ldr	r3, [pc, #8]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000004 	.word	0x20000004

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047a8:	f7ff fff2 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047ac:	0004      	movs	r4, r0
 80047ae:	f7ff fb3f 	bl	8003e30 <LL_RCC_GetAPB1Prescaler>
 80047b2:	0003      	movs	r3, r0
 80047b4:	0b1a      	lsrs	r2, r3, #12
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	58d3      	ldr	r3, [r2, r3]
 80047bc:	221f      	movs	r2, #31
 80047be:	4013      	ands	r3, r2
 80047c0:	40dc      	lsrs	r4, r3
 80047c2:	0023      	movs	r3, r4
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	0800e380 	.word	0x0800e380

080047d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e046      	b.n	8004870 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2288      	movs	r2, #136	; 0x88
 80047e6:	589b      	ldr	r3, [r3, r2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2284      	movs	r2, #132	; 0x84
 80047f0:	2100      	movs	r1, #0
 80047f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7fe f86e 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2288      	movs	r2, #136	; 0x88
 8004800:	2124      	movs	r1, #36	; 0x24
 8004802:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	438a      	bics	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0018      	movs	r0, r3
 8004818:	f000 f8cc 	bl	80049b4 <UART_SetConfig>
 800481c:	0003      	movs	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e024      	b.n	8004870 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 fb37 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	490d      	ldr	r1, [pc, #52]	; (8004878 <HAL_UART_Init+0xa8>)
 8004842:	400a      	ands	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	212a      	movs	r1, #42	; 0x2a
 8004852:	438a      	bics	r2, r1
 8004854:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2101      	movs	r1, #1
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 fbcf 	bl	800500c <UART_CheckIdleState>
 800486e:	0003      	movs	r3, r0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	ffffb7ff 	.word	0xffffb7ff

0800487c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	1dbb      	adds	r3, r7, #6
 800488a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2288      	movs	r2, #136	; 0x88
 8004890:	589b      	ldr	r3, [r3, r2]
 8004892:	2b20      	cmp	r3, #32
 8004894:	d000      	beq.n	8004898 <HAL_UART_Transmit+0x1c>
 8004896:	e088      	b.n	80049aa <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_UART_Transmit+0x2a>
 800489e:	1dbb      	adds	r3, r7, #6
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e080      	b.n	80049ac <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	015b      	lsls	r3, r3, #5
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d109      	bne.n	80048ca <HAL_UART_Transmit+0x4e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	d001      	beq.n	80048ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e070      	b.n	80049ac <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2290      	movs	r2, #144	; 0x90
 80048ce:	2100      	movs	r1, #0
 80048d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2288      	movs	r2, #136	; 0x88
 80048d6:	2121      	movs	r1, #33	; 0x21
 80048d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048da:	f7fe f9cf 	bl	8002c7c <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1dba      	adds	r2, r7, #6
 80048e6:	2154      	movs	r1, #84	; 0x54
 80048e8:	8812      	ldrh	r2, [r2, #0]
 80048ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1dba      	adds	r2, r7, #6
 80048f0:	2156      	movs	r1, #86	; 0x56
 80048f2:	8812      	ldrh	r2, [r2, #0]
 80048f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	015b      	lsls	r3, r3, #5
 80048fe:	429a      	cmp	r2, r3
 8004900:	d108      	bne.n	8004914 <HAL_UART_Transmit+0x98>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	e003      	b.n	800491c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800491c:	e02c      	b.n	8004978 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	0013      	movs	r3, r2
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	f000 fbbc 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004930:	1e03      	subs	r3, r0, #0
 8004932:	d001      	beq.n	8004938 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e039      	b.n	80049ac <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	001a      	movs	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	05d2      	lsls	r2, r2, #23
 800494a:	0dd2      	lsrs	r2, r2, #23
 800494c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3302      	adds	r3, #2
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e007      	b.n	8004966 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2256      	movs	r2, #86	; 0x56
 800496a:	5a9b      	ldrh	r3, [r3, r2]
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b299      	uxth	r1, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2256      	movs	r2, #86	; 0x56
 8004976:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2256      	movs	r2, #86	; 0x56
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cc      	bne.n	800491e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	0013      	movs	r3, r2
 800498e:	2200      	movs	r2, #0
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	f000 fb89 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004996:	1e03      	subs	r3, r0, #0
 8004998:	d001      	beq.n	800499e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e006      	b.n	80049ac <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2288      	movs	r2, #136	; 0x88
 80049a2:	2120      	movs	r1, #32
 80049a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b008      	add	sp, #32
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	b090      	sub	sp, #64	; 0x40
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049bc:	231a      	movs	r3, #26
 80049be:	2220      	movs	r2, #32
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	19db      	adds	r3, r3, r7
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4313      	orrs	r3, r2
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4ac4      	ldr	r2, [pc, #784]	; (8004cf8 <UART_SetConfig+0x344>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4abf      	ldr	r2, [pc, #764]	; (8004cfc <UART_SetConfig+0x348>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	68d9      	ldr	r1, [r3, #12]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4ab9      	ldr	r2, [pc, #740]	; (8004d00 <UART_SetConfig+0x34c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a26:	4313      	orrs	r3, r2
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4ab4      	ldr	r2, [pc, #720]	; (8004d04 <UART_SetConfig+0x350>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	220f      	movs	r2, #15
 8004a48:	4393      	bics	r3, r2
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	0003      	movs	r3, r0
 8004a56:	430b      	orrs	r3, r1
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4aaa      	ldr	r2, [pc, #680]	; (8004d08 <UART_SetConfig+0x354>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d131      	bne.n	8004ac8 <UART_SetConfig+0x114>
 8004a64:	4ba9      	ldr	r3, [pc, #676]	; (8004d0c <UART_SetConfig+0x358>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	2203      	movs	r2, #3
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d01d      	beq.n	8004aac <UART_SetConfig+0xf8>
 8004a70:	d823      	bhi.n	8004aba <UART_SetConfig+0x106>
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d00c      	beq.n	8004a90 <UART_SetConfig+0xdc>
 8004a76:	d820      	bhi.n	8004aba <UART_SetConfig+0x106>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <UART_SetConfig+0xce>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00e      	beq.n	8004a9e <UART_SetConfig+0xea>
 8004a80:	e01b      	b.n	8004aba <UART_SetConfig+0x106>
 8004a82:	231b      	movs	r3, #27
 8004a84:	2220      	movs	r2, #32
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	19db      	adds	r3, r3, r7
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e071      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004a90:	231b      	movs	r3, #27
 8004a92:	2220      	movs	r2, #32
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	19db      	adds	r3, r3, r7
 8004a98:	2202      	movs	r2, #2
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e06a      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004a9e:	231b      	movs	r3, #27
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	19db      	adds	r3, r3, r7
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	e063      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004aac:	231b      	movs	r3, #27
 8004aae:	2220      	movs	r2, #32
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	19db      	adds	r3, r3, r7
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e05c      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004aba:	231b      	movs	r3, #27
 8004abc:	2220      	movs	r2, #32
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	19db      	adds	r3, r3, r7
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e055      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a90      	ldr	r2, [pc, #576]	; (8004d10 <UART_SetConfig+0x35c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d106      	bne.n	8004ae0 <UART_SetConfig+0x12c>
 8004ad2:	231b      	movs	r3, #27
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	19db      	adds	r3, r3, r7
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e049      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a86      	ldr	r2, [pc, #536]	; (8004d00 <UART_SetConfig+0x34c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d13e      	bne.n	8004b68 <UART_SetConfig+0x1b4>
 8004aea:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <UART_SetConfig+0x358>)
 8004aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aee:	23c0      	movs	r3, #192	; 0xc0
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	4013      	ands	r3, r2
 8004af4:	22c0      	movs	r2, #192	; 0xc0
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d027      	beq.n	8004b4c <UART_SetConfig+0x198>
 8004afc:	22c0      	movs	r2, #192	; 0xc0
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d82a      	bhi.n	8004b5a <UART_SetConfig+0x1a6>
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d011      	beq.n	8004b30 <UART_SetConfig+0x17c>
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d822      	bhi.n	8004b5a <UART_SetConfig+0x1a6>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <UART_SetConfig+0x16e>
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	00d2      	lsls	r2, r2, #3
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <UART_SetConfig+0x18a>
 8004b20:	e01b      	b.n	8004b5a <UART_SetConfig+0x1a6>
 8004b22:	231b      	movs	r3, #27
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e021      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004b30:	231b      	movs	r3, #27
 8004b32:	2220      	movs	r2, #32
 8004b34:	189b      	adds	r3, r3, r2
 8004b36:	19db      	adds	r3, r3, r7
 8004b38:	2202      	movs	r2, #2
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e01a      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004b3e:	231b      	movs	r3, #27
 8004b40:	2220      	movs	r2, #32
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	19db      	adds	r3, r3, r7
 8004b46:	2204      	movs	r2, #4
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e013      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004b4c:	231b      	movs	r3, #27
 8004b4e:	2220      	movs	r2, #32
 8004b50:	189b      	adds	r3, r3, r2
 8004b52:	19db      	adds	r3, r3, r7
 8004b54:	2208      	movs	r2, #8
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e00c      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004b5a:	231b      	movs	r3, #27
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	19db      	adds	r3, r3, r7
 8004b62:	2210      	movs	r2, #16
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e005      	b.n	8004b74 <UART_SetConfig+0x1c0>
 8004b68:	231b      	movs	r3, #27
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	189b      	adds	r3, r3, r2
 8004b6e:	19db      	adds	r3, r3, r7
 8004b70:	2210      	movs	r2, #16
 8004b72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a61      	ldr	r2, [pc, #388]	; (8004d00 <UART_SetConfig+0x34c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d000      	beq.n	8004b80 <UART_SetConfig+0x1cc>
 8004b7e:	e092      	b.n	8004ca6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b80:	231b      	movs	r3, #27
 8004b82:	2220      	movs	r2, #32
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d015      	beq.n	8004bba <UART_SetConfig+0x206>
 8004b8e:	dc18      	bgt.n	8004bc2 <UART_SetConfig+0x20e>
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d00d      	beq.n	8004bb0 <UART_SetConfig+0x1fc>
 8004b94:	dc15      	bgt.n	8004bc2 <UART_SetConfig+0x20e>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <UART_SetConfig+0x1ec>
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d005      	beq.n	8004baa <UART_SetConfig+0x1f6>
 8004b9e:	e010      	b.n	8004bc2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7ff fe00 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ba8:	e014      	b.n	8004bd4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004baa:	4b5a      	ldr	r3, [pc, #360]	; (8004d14 <UART_SetConfig+0x360>)
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bae:	e011      	b.n	8004bd4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb0:	f7ff fd6c 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bb8:	e00c      	b.n	8004bd4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bc0:	e008      	b.n	8004bd4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004bc6:	231a      	movs	r3, #26
 8004bc8:	2220      	movs	r2, #32
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
        break;
 8004bd2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d100      	bne.n	8004bdc <UART_SetConfig+0x228>
 8004bda:	e147      	b.n	8004e6c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <UART_SetConfig+0x364>)
 8004be2:	0052      	lsls	r2, r2, #1
 8004be4:	5ad3      	ldrh	r3, [r2, r3]
 8004be6:	0019      	movs	r1, r3
 8004be8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bea:	f7fb faa7 	bl	800013c <__udivsi3>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	0013      	movs	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d305      	bcc.n	8004c0e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d906      	bls.n	8004c1c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004c0e:	231a      	movs	r3, #26
 8004c10:	2220      	movs	r2, #32
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	19db      	adds	r3, r3, r7
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e127      	b.n	8004e6c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <UART_SetConfig+0x364>)
 8004c2a:	0052      	lsls	r2, r2, #1
 8004c2c:	5ad3      	ldrh	r3, [r2, r3]
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	69b8      	ldr	r0, [r7, #24]
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	f7fb fc32 	bl	80004a4 <__aeabi_uldivmod>
 8004c40:	0002      	movs	r2, r0
 8004c42:	000b      	movs	r3, r1
 8004c44:	0e11      	lsrs	r1, r2, #24
 8004c46:	021d      	lsls	r5, r3, #8
 8004c48:	430d      	orrs	r5, r1
 8004c4a:	0214      	lsls	r4, r2, #8
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68b8      	ldr	r0, [r7, #8]
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	1900      	adds	r0, r0, r4
 8004c5e:	4169      	adcs	r1, r5
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f7fb fc19 	bl	80004a4 <__aeabi_uldivmod>
 8004c72:	0002      	movs	r2, r0
 8004c74:	000b      	movs	r3, r1
 8004c76:	0013      	movs	r3, r2
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7c:	23c0      	movs	r3, #192	; 0xc0
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d309      	bcc.n	8004c98 <UART_SetConfig+0x2e4>
 8004c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	035b      	lsls	r3, r3, #13
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d204      	bcs.n	8004c98 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e0e9      	b.n	8004e6c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c98:	231a      	movs	r3, #26
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	19db      	adds	r3, r3, r7
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e0e2      	b.n	8004e6c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d000      	beq.n	8004cb4 <UART_SetConfig+0x300>
 8004cb2:	e083      	b.n	8004dbc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004cb4:	231b      	movs	r3, #27
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d015      	beq.n	8004cee <UART_SetConfig+0x33a>
 8004cc2:	dc2b      	bgt.n	8004d1c <UART_SetConfig+0x368>
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00d      	beq.n	8004ce4 <UART_SetConfig+0x330>
 8004cc8:	dc28      	bgt.n	8004d1c <UART_SetConfig+0x368>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x320>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d005      	beq.n	8004cde <UART_SetConfig+0x32a>
 8004cd2:	e023      	b.n	8004d1c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7ff fd66 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cdc:	e027      	b.n	8004d2e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <UART_SetConfig+0x360>)
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ce2:	e024      	b.n	8004d2e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce4:	f7ff fcd2 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cec:	e01f      	b.n	8004d2e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cf4:	e01b      	b.n	8004d2e <UART_SetConfig+0x37a>
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	cfff69f3 	.word	0xcfff69f3
 8004cfc:	ffffcfff 	.word	0xffffcfff
 8004d00:	40008000 	.word	0x40008000
 8004d04:	11fff4ff 	.word	0x11fff4ff
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40004400 	.word	0x40004400
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	0800e3a0 	.word	0x0800e3a0
      default:
        pclk = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004d20:	231a      	movs	r3, #26
 8004d22:	2220      	movs	r2, #32
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	19db      	adds	r3, r3, r7
 8004d28:	2201      	movs	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
        break;
 8004d2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d100      	bne.n	8004d36 <UART_SetConfig+0x382>
 8004d34:	e09a      	b.n	8004e6c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <UART_SetConfig+0x4e8>)
 8004d3c:	0052      	lsls	r2, r2, #1
 8004d3e:	5ad3      	ldrh	r3, [r2, r3]
 8004d40:	0019      	movs	r1, r3
 8004d42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d44:	f7fb f9fa 	bl	800013c <__udivsi3>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	005a      	lsls	r2, r3, #1
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	18d2      	adds	r2, r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fb f9ee 	bl	800013c <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d921      	bls.n	8004dae <UART_SetConfig+0x3fa>
 8004d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	025b      	lsls	r3, r3, #9
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d21c      	bcs.n	8004dae <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	200e      	movs	r0, #14
 8004d7a:	2420      	movs	r4, #32
 8004d7c:	1903      	adds	r3, r0, r4
 8004d7e:	19db      	adds	r3, r3, r7
 8004d80:	210f      	movs	r1, #15
 8004d82:	438a      	bics	r2, r1
 8004d84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	4013      	ands	r3, r2
 8004d90:	b299      	uxth	r1, r3
 8004d92:	1903      	adds	r3, r0, r4
 8004d94:	19db      	adds	r3, r3, r7
 8004d96:	1902      	adds	r2, r0, r4
 8004d98:	19d2      	adds	r2, r2, r7
 8004d9a:	8812      	ldrh	r2, [r2, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	1902      	adds	r2, r0, r4
 8004da6:	19d2      	adds	r2, r2, r7
 8004da8:	8812      	ldrh	r2, [r2, #0]
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	e05e      	b.n	8004e6c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004dae:	231a      	movs	r3, #26
 8004db0:	2220      	movs	r2, #32
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	19db      	adds	r3, r3, r7
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e057      	b.n	8004e6c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dbc:	231b      	movs	r3, #27
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	189b      	adds	r3, r3, r2
 8004dc2:	19db      	adds	r3, r3, r7
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d015      	beq.n	8004df6 <UART_SetConfig+0x442>
 8004dca:	dc18      	bgt.n	8004dfe <UART_SetConfig+0x44a>
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d00d      	beq.n	8004dec <UART_SetConfig+0x438>
 8004dd0:	dc15      	bgt.n	8004dfe <UART_SetConfig+0x44a>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <UART_SetConfig+0x428>
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d005      	beq.n	8004de6 <UART_SetConfig+0x432>
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7ff fce2 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8004de0:	0003      	movs	r3, r0
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004de4:	e014      	b.n	8004e10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <UART_SetConfig+0x4ec>)
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dea:	e011      	b.n	8004e10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dec:	f7ff fc4e 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004df0:	0003      	movs	r3, r0
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004df4:	e00c      	b.n	8004e10 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dfc:	e008      	b.n	8004e10 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004e02:	231a      	movs	r3, #26
 8004e04:	2220      	movs	r2, #32
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	19db      	adds	r3, r3, r7
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
        break;
 8004e0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02a      	beq.n	8004e6c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <UART_SetConfig+0x4e8>)
 8004e1c:	0052      	lsls	r2, r2, #1
 8004e1e:	5ad3      	ldrh	r3, [r2, r3]
 8004e20:	0019      	movs	r1, r3
 8004e22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e24:	f7fb f98a 	bl	800013c <__udivsi3>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	18d2      	adds	r2, r2, r3
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	0019      	movs	r1, r3
 8004e3a:	0010      	movs	r0, r2
 8004e3c:	f7fb f97e 	bl	800013c <__udivsi3>
 8004e40:	0003      	movs	r3, r0
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d90a      	bls.n	8004e60 <UART_SetConfig+0x4ac>
 8004e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	025b      	lsls	r3, r3, #9
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d205      	bcs.n	8004e60 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	e005      	b.n	8004e6c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e60:	231a      	movs	r3, #26
 8004e62:	2220      	movs	r2, #32
 8004e64:	189b      	adds	r3, r3, r2
 8004e66:	19db      	adds	r3, r3, r7
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	226a      	movs	r2, #106	; 0x6a
 8004e70:	2101      	movs	r1, #1
 8004e72:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2268      	movs	r2, #104	; 0x68
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	2200      	movs	r2, #0
 8004e80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	2200      	movs	r2, #0
 8004e86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e88:	231a      	movs	r3, #26
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	19db      	adds	r3, r3, r7
 8004e90:	781b      	ldrb	r3, [r3, #0]
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b010      	add	sp, #64	; 0x40
 8004e98:	bdb0      	pop	{r4, r5, r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	0800e3a0 	.word	0x0800e3a0
 8004ea0:	00f42400 	.word	0x00f42400

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <UART_AdvFeatureConfig+0x144>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4a43      	ldr	r2, [pc, #268]	; (8004fec <UART_AdvFeatureConfig+0x148>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <UART_AdvFeatureConfig+0x14c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2208      	movs	r2, #8
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <UART_AdvFeatureConfig+0x150>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	2210      	movs	r2, #16
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <UART_AdvFeatureConfig+0x154>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	0019      	movs	r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <UART_AdvFeatureConfig+0x158>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2240      	movs	r2, #64	; 0x40
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <UART_AdvFeatureConfig+0x15c>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	035b      	lsls	r3, r3, #13
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d10b      	bne.n	8004fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <UART_AdvFeatureConfig+0x160>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <UART_AdvFeatureConfig+0x164>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fffdffff 	.word	0xfffdffff
 8004fec:	fffeffff 	.word	0xfffeffff
 8004ff0:	fffbffff 	.word	0xfffbffff
 8004ff4:	ffff7fff 	.word	0xffff7fff
 8004ff8:	ffffefff 	.word	0xffffefff
 8004ffc:	ffffdfff 	.word	0xffffdfff
 8005000:	ffefffff 	.word	0xffefffff
 8005004:	ff9fffff 	.word	0xff9fffff
 8005008:	fff7ffff 	.word	0xfff7ffff

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2290      	movs	r2, #144	; 0x90
 8005018:	2100      	movs	r1, #0
 800501a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800501c:	f7fd fe2e 	bl	8002c7c <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4013      	ands	r3, r2
 800502e:	2b08      	cmp	r3, #8
 8005030:	d10c      	bne.n	800504c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	0391      	lsls	r1, r2, #14
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <UART_CheckIdleState+0x98>)
 800503c:	9200      	str	r2, [sp, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	f000 f832 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e026      	b.n	800509a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	2b04      	cmp	r3, #4
 8005058:	d10c      	bne.n	8005074 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	03d1      	lsls	r1, r2, #15
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <UART_CheckIdleState+0x98>)
 8005064:	9200      	str	r2, [sp, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f81e 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 800506c:	1e03      	subs	r3, r0, #0
 800506e:	d001      	beq.n	8005074 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e012      	b.n	800509a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2288      	movs	r2, #136	; 0x88
 8005078:	2120      	movs	r1, #32
 800507a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	228c      	movs	r2, #140	; 0x8c
 8005080:	2120      	movs	r1, #32
 8005082:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2284      	movs	r2, #132	; 0x84
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	01ffffff 	.word	0x01ffffff

080050a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b094      	sub	sp, #80	; 0x50
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	e0a7      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050bc:	3301      	adds	r3, #1
 80050be:	d100      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80050c0:	e0a3      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fd fddb 	bl	8002c7c <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13f      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050e0:	647b      	str	r3, [r7, #68]	; 0x44
 80050e2:	2301      	movs	r3, #1
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	494e      	ldr	r1, [pc, #312]	; (8005234 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510a:	f3ef 8310 	mrs	r3, PRIMASK
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
 8005114:	2301      	movs	r3, #1
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2101      	movs	r1, #1
 800512c:	438a      	bics	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2288      	movs	r2, #136	; 0x88
 8005140:	2120      	movs	r1, #32
 8005142:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	228c      	movs	r2, #140	; 0x8c
 8005148:	2120      	movs	r1, #32
 800514a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2284      	movs	r2, #132	; 0x84
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e069      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	d052      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	401a      	ands	r2, r3
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	429a      	cmp	r2, r3
 8005176:	d148      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005182:	f3ef 8310 	mrs	r3, PRIMASK
 8005186:	613b      	str	r3, [r7, #16]
  return(result);
 8005188:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4924      	ldr	r1, [pc, #144]	; (8005234 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80051ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051be:	2301      	movs	r3, #1
 80051c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2101      	movs	r1, #1
 80051d6:	438a      	bics	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2288      	movs	r2, #136	; 0x88
 80051ea:	2120      	movs	r1, #32
 80051ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	228c      	movs	r2, #140	; 0x8c
 80051f2:	2120      	movs	r1, #32
 80051f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2290      	movs	r2, #144	; 0x90
 80051fa:	2120      	movs	r1, #32
 80051fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2284      	movs	r2, #132	; 0x84
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e010      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	425a      	negs	r2, r3
 800521a:	4153      	adcs	r3, r2
 800521c:	b2db      	uxtb	r3, r3
 800521e:	001a      	movs	r2, r3
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d100      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x182>
 8005228:	e747      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b014      	add	sp, #80	; 0x50
 8005232:	bd80      	pop	{r7, pc}
 8005234:	fffffe5f 	.word	0xfffffe5f

08005238 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8005238:	b5b0      	push	{r4, r5, r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005240:	210f      	movs	r1, #15
 8005242:	187b      	adds	r3, r7, r1
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8005248:	000a      	movs	r2, r1
 800524a:	18bb      	adds	r3, r7, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b25b      	sxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d107      	bne.n	8005264 <VL53L1_DataInit+0x2c>
		Status = VL53L1_data_init(Dev, 1);
 8005254:	18bc      	adds	r4, r7, r2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2101      	movs	r1, #1
 800525a:	0018      	movs	r0, r3
 800525c:	f001 fa22 	bl	80066a4 <VL53L1_data_init>
 8005260:	0003      	movs	r3, r0
 8005262:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L1_ERROR_NONE)
 8005264:	230f      	movs	r3, #15
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b25b      	sxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <VL53L1_DataInit+0x42>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	23de      	movs	r3, #222	; 0xde
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	2101      	movs	r1, #1
 8005278:	54d1      	strb	r1, [r2, r3]

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800527a:	230e      	movs	r3, #14
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e01a      	b.n	80052ba <VL53L1_DataInit+0x82>
		if (Status == VL53L1_ERROR_NONE)
 8005284:	250f      	movs	r5, #15
 8005286:	197b      	adds	r3, r7, r5
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b25b      	sxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11a      	bne.n	80052c6 <VL53L1_DataInit+0x8e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8005290:	240e      	movs	r4, #14
 8005292:	193b      	adds	r3, r7, r4
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b299      	uxth	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fcc9 	bl	8005c34 <VL53L1_SetLimitCheckEnable>
 80052a2:	0003      	movs	r3, r0
 80052a4:	0019      	movs	r1, r3
 80052a6:	197b      	adds	r3, r7, r5
 80052a8:	197a      	adds	r2, r7, r5
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80052b0:	193b      	adds	r3, r7, r4
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	193b      	adds	r3, r7, r4
 80052b6:	3201      	adds	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	230e      	movs	r3, #14
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d9df      	bls.n	8005284 <VL53L1_DataInit+0x4c>
 80052c4:	e000      	b.n	80052c8 <VL53L1_DataInit+0x90>
		else
			break;
 80052c6:	46c0      	nop			; (mov r8, r8)

	}


	LOG_FUNCTION_END(Status);
	return Status;
 80052c8:	230f      	movs	r3, #15
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b25b      	sxtb	r3, r3
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bdb0      	pop	{r4, r5, r7, pc}

080052d8 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80052e0:	200f      	movs	r0, #15
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	23de      	movs	r3, #222	; 0xde
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	2103      	movs	r1, #3
 80052f0:	54d1      	strb	r1, [r2, r3]

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80052f2:	210e      	movs	r1, #14
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	2220      	movs	r2, #32
 80052f8:	701a      	strb	r2, [r3, #0]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	187a      	adds	r2, r7, r1
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8005302:	0005      	movs	r5, r0
 8005304:	183c      	adds	r4, r7, r0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2108      	movs	r1, #8
 800530a:	0018      	movs	r0, r3
 800530c:	f000 f92c 	bl	8005568 <VL53L1_SetPresetMode>
 8005310:	0003      	movs	r3, r0
 8005312:	7023      	strb	r3, [r4, #0]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	23df      	movs	r3, #223	; 0xdf
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	2108      	movs	r1, #8
 800531c:	54d1      	strb	r1, [r2, r3]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800531e:	197b      	adds	r3, r7, r5
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	b25b      	sxtb	r3, r3
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b004      	add	sp, #16
 800532a:	bdb0      	pop	{r4, r5, r7, pc}

0800532c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800532c:	b5b0      	push	{r4, r5, r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005334:	250f      	movs	r5, #15
 8005336:	197b      	adds	r3, r7, r5
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800533c:	197c      	adds	r4, r7, r5
 800533e:	23fa      	movs	r3, #250	; 0xfa
 8005340:	005a      	lsls	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0011      	movs	r1, r2
 8005346:	0018      	movs	r0, r3
 8005348:	f005 fd12 	bl	800ad70 <VL53L1_poll_for_boot_completion>
 800534c:	0003      	movs	r3, r0
 800534e:	7023      	strb	r3, [r4, #0]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8005350:	197b      	adds	r3, r7, r5
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b25b      	sxtb	r3, r3
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005360 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	603a      	str	r2, [r7, #0]
 8005368:	1dfb      	adds	r3, r7, #7
 800536a:	1c02      	adds	r2, r0, #0
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	1c0a      	adds	r2, r1, #0
 8005372:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005374:	2317      	movs	r3, #23
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800537c:	2310      	movs	r3, #16
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <ComputeDevicePresetMode+0xd8>)
 8005382:	8811      	ldrh	r1, [r2, #0]
 8005384:	8019      	strh	r1, [r3, #0]
 8005386:	7892      	ldrb	r2, [r2, #2]
 8005388:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800538a:	230c      	movs	r3, #12
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	4a2b      	ldr	r2, [pc, #172]	; (800543c <ComputeDevicePresetMode+0xdc>)
 8005390:	8811      	ldrh	r1, [r2, #0]
 8005392:	8019      	strh	r1, [r3, #0]
 8005394:	7892      	ldrb	r2, [r2, #2]
 8005396:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8005398:	2308      	movs	r3, #8
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	4a28      	ldr	r2, [pc, #160]	; (8005440 <ComputeDevicePresetMode+0xe0>)
 800539e:	8811      	ldrh	r1, [r2, #0]
 80053a0:	8019      	strh	r1, [r3, #0]
 80053a2:	7892      	ldrb	r2, [r2, #2]
 80053a4:	709a      	strb	r2, [r3, #2]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80053ac:	1dbb      	adds	r3, r7, #6
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d002      	beq.n	80053ba <ComputeDevicePresetMode+0x5a>
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d005      	beq.n	80053c4 <ComputeDevicePresetMode+0x64>
 80053b8:	e009      	b.n	80053ce <ComputeDevicePresetMode+0x6e>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80053ba:	2316      	movs	r3, #22
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
		break;
 80053c2:	e008      	b.n	80053d6 <ComputeDevicePresetMode+0x76>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80053c4:	2316      	movs	r3, #22
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
		break;
 80053cc:	e003      	b.n	80053d6 <ComputeDevicePresetMode+0x76>
	default:
		DistIdx = 2;
 80053ce:	2316      	movs	r3, #22
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]
	}

	switch (PresetMode) {
 80053d6:	1dfb      	adds	r3, r7, #7
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d016      	beq.n	800540c <ComputeDevicePresetMode+0xac>
 80053de:	dc1e      	bgt.n	800541e <ComputeDevicePresetMode+0xbe>
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d00a      	beq.n	80053fa <ComputeDevicePresetMode+0x9a>
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d11a      	bne.n	800541e <ComputeDevicePresetMode+0xbe>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80053e8:	2316      	movs	r3, #22
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	18ba      	adds	r2, r7, r2
 80053f2:	5cd2      	ldrb	r2, [r2, r3]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	701a      	strb	r2, [r3, #0]
		break;
 80053f8:	e015      	b.n	8005426 <ComputeDevicePresetMode+0xc6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80053fa:	2316      	movs	r3, #22
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	220c      	movs	r2, #12
 8005402:	18ba      	adds	r2, r7, r2
 8005404:	5cd2      	ldrb	r2, [r2, r3]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	701a      	strb	r2, [r3, #0]
		break;
 800540a:	e00c      	b.n	8005426 <ComputeDevicePresetMode+0xc6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800540c:	2316      	movs	r3, #22
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2208      	movs	r2, #8
 8005414:	18ba      	adds	r2, r7, r2
 8005416:	5cd2      	ldrb	r2, [r2, r3]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	701a      	strb	r2, [r3, #0]
		break;
 800541c:	e003      	b.n	8005426 <ComputeDevicePresetMode+0xc6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800541e:	2317      	movs	r3, #23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	22f8      	movs	r2, #248	; 0xf8
 8005424:	701a      	strb	r2, [r3, #0]
	}

	return Status;
 8005426:	2317      	movs	r3, #23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	b25b      	sxtb	r3, r3
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b006      	add	sp, #24
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	0800e2f0 	.word	0x0800e2f0
 800543c:	0800e2f4 	.word	0x0800e2f4
 8005440:	0800e2f8 	.word	0x0800e2f8

08005444 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8005444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005446:	b08f      	sub	sp, #60	; 0x3c
 8005448:	af04      	add	r7, sp, #16
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	0008      	movs	r0, r1
 800544e:	0011      	movs	r1, r2
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	240b      	movs	r4, #11
 8005454:	193b      	adds	r3, r7, r4
 8005456:	1c02      	adds	r2, r0, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	230a      	movs	r3, #10
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	1c0a      	adds	r2, r1, #0
 8005460:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005462:	2327      	movs	r3, #39	; 0x27
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800546a:	2322      	movs	r3, #34	; 0x22
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]
	uint32_t phasecal_config_timeout_us = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800547e:	193b      	adds	r3, r7, r4
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d003      	beq.n	800548e <SetPresetMode+0x4a>
 8005486:	193b      	adds	r3, r7, r4
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d104      	bne.n	8005498 <SetPresetMode+0x54>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800548e:	2326      	movs	r3, #38	; 0x26
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e003      	b.n	80054a0 <SetPresetMode+0x5c>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8005498:	2326      	movs	r3, #38	; 0x26
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2220      	movs	r2, #32
 800549e:	701a      	strb	r2, [r3, #0]


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80054a0:	2527      	movs	r5, #39	; 0x27
 80054a2:	197c      	adds	r4, r7, r5
 80054a4:	2625      	movs	r6, #37	; 0x25
 80054a6:	19ba      	adds	r2, r7, r6
 80054a8:	230a      	movs	r3, #10
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	7819      	ldrb	r1, [r3, #0]
 80054ae:	230b      	movs	r3, #11
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff ff53 	bl	8005360 <ComputeDevicePresetMode>
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80054be:	197b      	adds	r3, r7, r5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	b25b      	sxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d112      	bne.n	80054ee <SetPresetMode+0xaa>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80054c8:	19bb      	adds	r3, r7, r6
 80054ca:	7819      	ldrb	r1, [r3, #0]
 80054cc:	197c      	adds	r4, r7, r5
 80054ce:	231c      	movs	r3, #28
 80054d0:	18fd      	adds	r5, r7, r3
 80054d2:	2322      	movs	r3, #34	; 0x22
 80054d4:	18fa      	adds	r2, r7, r3
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	2314      	movs	r3, #20
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	2318      	movs	r3, #24
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	002b      	movs	r3, r5
 80054e6:	f001 fc45 	bl	8006d74 <VL53L1_get_preset_mode_timing_cfg>
 80054ea:	0003      	movs	r3, r0
 80054ec:	7023      	strb	r3, [r4, #0]
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80054ee:	2127      	movs	r1, #39	; 0x27
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d116      	bne.n	8005528 <SetPresetMode+0xe4>
		Status = VL53L1_set_preset_mode(
 80054fa:	2325      	movs	r3, #37	; 0x25
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	781d      	ldrb	r5, [r3, #0]
 8005500:	2322      	movs	r3, #34	; 0x22
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	881e      	ldrh	r6, [r3, #0]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	469c      	mov	ip, r3
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	187c      	adds	r4, r7, r1
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	9102      	str	r1, [sp, #8]
 8005516:	9201      	str	r2, [sp, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	4663      	mov	r3, ip
 800551c:	0032      	movs	r2, r6
 800551e:	0029      	movs	r1, r5
 8005520:	f001 fc90 	bl	8006e44 <VL53L1_set_preset_mode>
 8005524:	0003      	movs	r3, r0
 8005526:	7023      	strb	r3, [r4, #0]
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8005528:	2327      	movs	r3, #39	; 0x27
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b25b      	sxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <SetPresetMode+0xfa>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2226      	movs	r2, #38	; 0x26
 8005538:	18ba      	adds	r2, r7, r2
 800553a:	7812      	ldrb	r2, [r2, #0]
 800553c:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800553e:	2327      	movs	r3, #39	; 0x27
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	b25b      	sxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <SetPresetMode+0x114>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	230b      	movs	r3, #11
 800554e:	18f9      	adds	r1, r7, r3
 8005550:	23df      	movs	r3, #223	; 0xdf
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	7809      	ldrb	r1, [r1, #0]
 8005556:	54d1      	strb	r1, [r2, r3]

	LOG_FUNCTION_END(Status);
	return Status;
 8005558:	2327      	movs	r3, #39	; 0x27
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b25b      	sxtb	r3, r3
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b00b      	add	sp, #44	; 0x2c
 8005566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005568 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8005568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	000a      	movs	r2, r1
 8005572:	1cfb      	adds	r3, r7, #3
 8005574:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005576:	260f      	movs	r6, #15
 8005578:	19bb      	adds	r3, r7, r6
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800557e:	230e      	movs	r3, #14
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	2203      	movs	r2, #3
 8005584:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8005586:	19bc      	adds	r4, r7, r6
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f004 f986 	bl	800989c <VL53L1_low_power_auto_data_init>
 8005590:	0003      	movs	r3, r0
 8005592:	7023      	strb	r3, [r4, #0]

	Status = SetPresetMode(Dev,
 8005594:	19bc      	adds	r4, r7, r6
 8005596:	23fa      	movs	r3, #250	; 0xfa
 8005598:	009d      	lsls	r5, r3, #2
 800559a:	230e      	movs	r3, #14
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	1cfb      	adds	r3, r7, #3
 80055a2:	7819      	ldrb	r1, [r3, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	002b      	movs	r3, r5
 80055a8:	f7ff ff4c 	bl	8005444 <SetPresetMode>
 80055ac:	0003      	movs	r3, r0
 80055ae:	7023      	strb	r3, [r4, #0]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80055b0:	19bb      	adds	r3, r7, r6
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d120      	bne.n	80055fc <VL53L1_SetPresetMode+0x94>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80055ba:	1cfb      	adds	r3, r7, #3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d007      	beq.n	80055d2 <VL53L1_SetPresetMode+0x6a>
 80055c2:	1cfb      	adds	r3, r7, #3
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d003      	beq.n	80055d2 <VL53L1_SetPresetMode+0x6a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80055ca:	1cfb      	adds	r3, r7, #3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d10a      	bne.n	80055e8 <VL53L1_SetPresetMode+0x80>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80055d2:	230f      	movs	r3, #15
 80055d4:	18fc      	adds	r4, r7, r3
 80055d6:	4a15      	ldr	r2, [pc, #84]	; (800562c <VL53L1_SetPresetMode+0xc4>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f000 f8c5 	bl	800576c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80055e2:	0003      	movs	r3, r0
 80055e4:	7023      	strb	r3, [r4, #0]
 80055e6:	e009      	b.n	80055fc <VL53L1_SetPresetMode+0x94>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80055e8:	230f      	movs	r3, #15
 80055ea:	18fc      	adds	r4, r7, r3
 80055ec:	4a10      	ldr	r2, [pc, #64]	; (8005630 <VL53L1_SetPresetMode+0xc8>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0011      	movs	r1, r2
 80055f2:	0018      	movs	r0, r3
 80055f4:	f000 f8ba 	bl	800576c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80055f8:	0003      	movs	r3, r0
 80055fa:	7023      	strb	r3, [r4, #0]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80055fc:	220f      	movs	r2, #15
 80055fe:	18bb      	adds	r3, r7, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <VL53L1_SetPresetMode+0xb4>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8005608:	18bc      	adds	r4, r7, r2
 800560a:	23fa      	movs	r3, #250	; 0xfa
 800560c:	009a      	lsls	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0011      	movs	r1, r2
 8005612:	0018      	movs	r0, r3
 8005614:	f000 fa84 	bl	8005b20 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8005618:	0003      	movs	r3, r0
 800561a:	7023      	strb	r3, [r4, #0]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800561c:	230f      	movs	r3, #15
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b25b      	sxtb	r3, r3
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b005      	add	sp, #20
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562c:	0000a028 	.word	0x0000a028
 8005630:	00008235 	.word	0x00008235

08005634 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8005634:	b5b0      	push	{r4, r5, r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	000a      	movs	r2, r1
 800563e:	1cfb      	adds	r3, r7, #3
 8005640:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005642:	231f      	movs	r3, #31
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8005656:	231e      	movs	r3, #30
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	22df      	movs	r2, #223	; 0xdf
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	5c8a      	ldrb	r2, [r1, r2]
 8005662:	701a      	strb	r2, [r3, #0]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8005664:	1cfb      	adds	r3, r7, #3
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d00a      	beq.n	8005682 <VL53L1_SetDistanceMode+0x4e>
 800566c:	1cfb      	adds	r3, r7, #3
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d006      	beq.n	8005682 <VL53L1_SetDistanceMode+0x4e>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8005674:	1cfb      	adds	r3, r7, #3
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d002      	beq.n	8005682 <VL53L1_SetDistanceMode+0x4e>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800567c:	2304      	movs	r3, #4
 800567e:	425b      	negs	r3, r3
 8005680:	e06d      	b.n	800575e <VL53L1_SetDistanceMode+0x12a>

	if (Status == VL53L1_ERROR_NONE)
 8005682:	221f      	movs	r2, #31
 8005684:	18bb      	adds	r3, r7, r2
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	b25b      	sxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <VL53L1_SetDistanceMode+0x6e>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800568e:	18bc      	adds	r4, r7, r2
 8005690:	2308      	movs	r3, #8
 8005692:	18fa      	adds	r2, r7, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0011      	movs	r1, r2
 8005698:	0018      	movs	r0, r3
 800569a:	f001 fafb 	bl	8006c94 <VL53L1_get_user_zone>
 800569e:	0003      	movs	r3, r0
 80056a0:	7023      	strb	r3, [r4, #0]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80056a8:	221f      	movs	r2, #31
 80056aa:	18bb      	adds	r3, r7, r2
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <VL53L1_SetDistanceMode+0x98>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80056b4:	18bc      	adds	r4, r7, r2
 80056b6:	2314      	movs	r3, #20
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2210      	movs	r2, #16
 80056bc:	18ba      	adds	r2, r7, r2
 80056be:	210c      	movs	r1, #12
 80056c0:	1879      	adds	r1, r7, r1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f9ed 	bl	8006aa2 <VL53L1_get_timeouts_us>
 80056c8:	0003      	movs	r3, r0
 80056ca:	7023      	strb	r3, [r4, #0]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80056cc:	221f      	movs	r2, #31
 80056ce:	18bb      	adds	r3, r7, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10c      	bne.n	80056f2 <VL53L1_SetDistanceMode+0xbe>
		Status = SetPresetMode(Dev,
 80056d8:	18bc      	adds	r4, r7, r2
 80056da:	69bd      	ldr	r5, [r7, #24]
 80056dc:	1cfb      	adds	r3, r7, #3
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	231e      	movs	r3, #30
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	7819      	ldrb	r1, [r3, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	002b      	movs	r3, r5
 80056ea:	f7ff feab 	bl	8005444 <SetPresetMode>
 80056ee:	0003      	movs	r3, r0
 80056f0:	7023      	strb	r3, [r4, #0]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80056f2:	231f      	movs	r3, #31
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <VL53L1_SetDistanceMode+0xd4>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1cfa      	adds	r2, r7, #3
 8005702:	4919      	ldr	r1, [pc, #100]	; (8005768 <VL53L1_SetDistanceMode+0x134>)
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	545a      	strb	r2, [r3, r1]
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005708:	251f      	movs	r5, #31
 800570a:	197b      	adds	r3, r7, r5
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b25b      	sxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <VL53L1_SetDistanceMode+0x102>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	197c      	adds	r4, r7, r5
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f97d 	bl	8006a1c <VL53L1_set_timeouts_us>
 8005722:	0003      	movs	r3, r0
 8005724:	7023      	strb	r3, [r4, #0]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8005726:	197b      	adds	r3, r7, r5
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	b25b      	sxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <VL53L1_SetDistanceMode+0x102>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8005736:	221f      	movs	r2, #31
 8005738:	18bb      	adds	r3, r7, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b25b      	sxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <VL53L1_SetDistanceMode+0x122>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8005742:	18bc      	adds	r4, r7, r2
 8005744:	2308      	movs	r3, #8
 8005746:	18fa      	adds	r2, r7, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	0011      	movs	r1, r2
 800574c:	0018      	movs	r0, r3
 800574e:	f001 fa7b 	bl	8006c48 <VL53L1_set_user_zone>
 8005752:	0003      	movs	r3, r0
 8005754:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005756:	231f      	movs	r3, #31
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b25b      	sxtb	r3, r3
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b008      	add	sp, #32
 8005764:	bdb0      	pop	{r4, r5, r7, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	0000037d 	.word	0x0000037d

0800576c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b08d      	sub	sp, #52	; 0x34
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005776:	212f      	movs	r1, #47	; 0x2f
 8005778:	187b      	adds	r3, r7, r1
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
	uint8_t Mm1Enabled = 0;
 800577e:	231a      	movs	r3, #26
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
	uint8_t Mm2Enabled = 0;
 8005786:	2319      	movs	r3, #25
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800579a:	4b73      	ldr	r3, [pc, #460]	; (8005968 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 800579c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4a72      	ldr	r2, [pc, #456]	; (800596c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d902      	bls.n	80057ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x40>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	22fc      	movs	r2, #252	; 0xfc
 80057aa:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE) {
 80057ac:	222f      	movs	r2, #47	; 0x2f
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	b25b      	sxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d109      	bne.n	80057cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x60>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80057b8:	18bc      	adds	r4, r7, r2
 80057ba:	231a      	movs	r3, #26
 80057bc:	18fa      	adds	r2, r7, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2105      	movs	r1, #5
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 fb30 	bl	8005e28 <VL53L1_GetSequenceStepEnable>
 80057c8:	0003      	movs	r3, r0
 80057ca:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80057cc:	222f      	movs	r2, #47	; 0x2f
 80057ce:	18bb      	adds	r3, r7, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x80>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80057d8:	18bc      	adds	r4, r7, r2
 80057da:	2319      	movs	r3, #25
 80057dc:	18fa      	adds	r2, r7, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2106      	movs	r1, #6
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 fb20 	bl	8005e28 <VL53L1_GetSequenceStepEnable>
 80057e8:	0003      	movs	r3, r0
 80057ea:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80057ec:	222f      	movs	r2, #47	; 0x2f
 80057ee:	18bb      	adds	r3, r7, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa4>
		Status = VL53L1_get_timeouts_us(Dev,
 80057f8:	18bc      	adds	r4, r7, r2
 80057fa:	2314      	movs	r3, #20
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2210      	movs	r2, #16
 8005800:	18ba      	adds	r2, r7, r2
 8005802:	210c      	movs	r1, #12
 8005804:	1879      	adds	r1, r7, r1
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 f94b 	bl	8006aa2 <VL53L1_get_timeouts_us>
 800580c:	0003      	movs	r3, r0
 800580e:	7023      	strb	r3, [r4, #0]
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8005810:	232f      	movs	r3, #47	; 0x2f
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b25b      	sxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d000      	beq.n	800581e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb2>
 800581c:	e090      	b.n	8005940 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d4>
		PresetMode = VL53L1DevDataGet(Dev,
 800581e:	201b      	movs	r0, #27
 8005820:	183b      	adds	r3, r7, r0
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	22df      	movs	r2, #223	; 0xdf
 8005826:	0092      	lsls	r2, r2, #2
 8005828:	5c8a      	ldrb	r2, [r1, r2]
 800582a:	701a      	strb	r2, [r3, #0]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8005830:	2301      	movs	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8005834:	183b      	adds	r3, r7, r0
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d02a      	beq.n	8005892 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 800583c:	dc47      	bgt.n	80058ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x162>
 800583e:	2b03      	cmp	r3, #3
 8005840:	d012      	beq.n	8005868 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8005842:	2b04      	cmp	r3, #4
 8005844:	d143      	bne.n	80058ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x162>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8005846:	231a      	movs	r3, #26
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d004      	beq.n	800585a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xee>
 8005850:	2319      	movs	r3, #25
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d102      	bne.n	8005860 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 800585a:	4b45      	ldr	r3, [pc, #276]	; (8005970 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x204>)
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 800585e:	e03a      	b.n	80058d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16a>
				TimingGuard = 1000;
 8005860:	23fa      	movs	r3, #250	; 0xfa
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8005866:	e036      	b.n	80058d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800586e:	231a      	movs	r3, #26
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d004      	beq.n	8005882 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
 8005878:	2319      	movs	r3, #25
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d102      	bne.n	8005888 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
				TimingGuard = 26600;
 8005882:	4b3c      	ldr	r3, [pc, #240]	; (8005974 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x208>)
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
 8005886:	e001      	b.n	800588c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x120>
			else
				TimingGuard = 21600;
 8005888:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x20c>)
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800588c:	2302      	movs	r3, #2
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8005890:	e021      	b.n	80058d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8005898:	23f5      	movs	r3, #245	; 0xf5
 800589a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800589c:	2308      	movs	r3, #8
 800589e:	18fa      	adds	r2, r7, r3
 80058a0:	4936      	ldr	r1, [pc, #216]	; (800597c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x210>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f002 fa85 	bl	8007db4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd06      	ble.n	80058be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	22f5      	movs	r2, #245	; 0xf5
 80058b4:	4353      	muls	r3, r2
 80058b6:	001a      	movs	r2, r3
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x214>)
 80058c2:	4694      	mov	ip, r2
 80058c4:	4463      	add	r3, ip
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80058c8:	2302      	movs	r3, #2
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80058cc:	e003      	b.n	80058d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80058ce:	232f      	movs	r3, #47	; 0x2f
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	22f8      	movs	r2, #248	; 0xf8
 80058d4:	701a      	strb	r2, [r3, #0]
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	429a      	cmp	r2, r3
 80058dc:	d804      	bhi.n	80058e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80058de:	232f      	movs	r3, #47	; 0x2f
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	22fc      	movs	r2, #252	; 0xfc
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e003      	b.n	80058f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x184>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80058ee:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80058f0:	212f      	movs	r1, #47	; 0x2f
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d121      	bne.n	8005940 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d4>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	429a      	cmp	r2, r3
 8005902:	d203      	bcs.n	800590c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8005904:	187b      	adds	r3, r7, r1
 8005906:	22fc      	movs	r2, #252	; 0xfc
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	e010      	b.n	800592e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1c2>
			else {
				TimingBudget /= divisor;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005910:	0018      	movs	r0, r3
 8005912:	f7fa fc13 	bl	800013c <__udivsi3>
 8005916:	0003      	movs	r3, r0
 8005918:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	202f      	movs	r0, #47	; 0x2f
 8005922:	183c      	adds	r4, r7, r0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 f879 	bl	8006a1c <VL53L1_set_timeouts_us>
 800592a:	0003      	movs	r3, r0
 800592c:	7023      	strb	r3, [r4, #0]
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800592e:	232f      	movs	r3, #47	; 0x2f
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b25b      	sxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d4>
				VL53L1DevDataSet(Dev,
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8005940:	232f      	movs	r3, #47	; 0x2f
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b25b      	sxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ea>
		VL53L1DevDataSet(Dev,
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	23e0      	movs	r3, #224	; 0xe0
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	50d1      	str	r1, [r2, r3]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005956:	232f      	movs	r3, #47	; 0x2f
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b25b      	sxtb	r3, r3
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b00d      	add	sp, #52	; 0x34
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	00086470 	.word	0x00086470
 800596c:	00989680 	.word	0x00989680
 8005970:	00001388 	.word	0x00001388
 8005974:	000067e8 	.word	0x000067e8
 8005978:	00005460 	.word	0x00005460
 800597c:	00008036 	.word	0x00008036
 8005980:	00000ddc 	.word	0x00000ddc

08005984 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b08d      	sub	sp, #52	; 0x34
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800598e:	212f      	movs	r1, #47	; 0x2f
 8005990:	187b      	adds	r3, r7, r1
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
	uint8_t Mm1Enabled = 0;
 8005996:	201b      	movs	r0, #27
 8005998:	183b      	adds	r3, r7, r0
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
	uint8_t Mm2Enabled = 0;
 800599e:	231a      	movs	r3, #26
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
	uint32_t  MmTimeoutUs = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d108      	bne.n	80059d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x54>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80059c6:	187c      	adds	r4, r7, r1
 80059c8:	183a      	adds	r2, r7, r0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2105      	movs	r1, #5
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fa2a 	bl	8005e28 <VL53L1_GetSequenceStepEnable>
 80059d4:	0003      	movs	r3, r0
 80059d6:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80059d8:	222f      	movs	r2, #47	; 0x2f
 80059da:	18bb      	adds	r3, r7, r2
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x74>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80059e4:	18bc      	adds	r4, r7, r2
 80059e6:	231a      	movs	r3, #26
 80059e8:	18fa      	adds	r2, r7, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2106      	movs	r1, #6
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fa1a 	bl	8005e28 <VL53L1_GetSequenceStepEnable>
 80059f4:	0003      	movs	r3, r0
 80059f6:	7023      	strb	r3, [r4, #0]
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80059f8:	222f      	movs	r2, #47	; 0x2f
 80059fa:	18bb      	adds	r3, r7, r2
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x98>
		Status = VL53L1_get_timeouts_us(Dev,
 8005a04:	18bc      	adds	r4, r7, r2
 8005a06:	2310      	movs	r3, #16
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2214      	movs	r2, #20
 8005a0c:	18ba      	adds	r2, r7, r2
 8005a0e:	210c      	movs	r1, #12
 8005a10:	1879      	adds	r1, r7, r1
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 f845 	bl	8006aa2 <VL53L1_get_timeouts_us>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	7023      	strb	r3, [r4, #0]
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8005a1c:	232f      	movs	r3, #47	; 0x2f
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d160      	bne.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>
		PresetMode = VL53L1DevDataGet(Dev,
 8005a28:	2023      	movs	r0, #35	; 0x23
 8005a2a:	183b      	adds	r3, r7, r0
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	22df      	movs	r2, #223	; 0xdf
 8005a30:	0092      	lsls	r2, r2, #2
 8005a32:	5c8a      	ldrb	r2, [r1, r2]
 8005a34:	701a      	strb	r2, [r3, #0]
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d033      	beq.n	8005aa6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x122>
 8005a3e:	dc50      	bgt.n	8005ae2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x15e>
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d018      	beq.n	8005a76 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf2>
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d14c      	bne.n	8005ae2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x15e>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8005a48:	231b      	movs	r3, #27
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d004      	beq.n	8005a5c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 8005a52:	231a      	movs	r3, #26
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d105      	bne.n	8005a68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x188>)
 8005a60:	4694      	mov	ip, r2
 8005a62:	4463      	add	r3, ip
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8005a66:	e040      	b.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	22fa      	movs	r2, #250	; 0xfa
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	4694      	mov	ip, r2
 8005a70:	4463      	add	r3, ip
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8005a74:	e039      	b.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8005a76:	231b      	movs	r3, #27
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d004      	beq.n	8005a8a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x106>
 8005a80:	231a      	movs	r3, #26
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d106      	bne.n	8005a98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x114>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x18c>)
 8005a8e:	4694      	mov	ip, r2
 8005a90:	4463      	add	r3, ip
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8005a96:	e028      	b.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x190>)
 8005a9c:	4694      	mov	ip, r2
 8005a9e:	4463      	add	r3, ip
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8005aa4:	e021      	b.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8005aa6:	23f5      	movs	r3, #245	; 0xf5
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8005aaa:	2308      	movs	r3, #8
 8005aac:	18fa      	adds	r2, r7, r3
 8005aae:	491a      	ldr	r1, [pc, #104]	; (8005b18 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x194>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f002 f97e 	bl	8007db4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dd06      	ble.n	8005acc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
				vhv += vhv_loops *
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	22f5      	movs	r2, #245	; 0xf5
 8005ac2:	4353      	muls	r3, r2
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x198>)
 8005ad0:	4694      	mov	ip, r2
 8005ad2:	4463      	add	r3, ip
 8005ad4:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8005ae0:	e003      	b.n	8005aea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x166>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8005ae2:	232f      	movs	r3, #47	; 0x2f
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	22f8      	movs	r2, #248	; 0xf8
 8005ae8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8005aea:	232f      	movs	r3, #47	; 0x2f
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x178>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005afc:	232f      	movs	r3, #47	; 0x2f
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b25b      	sxtb	r3, r3
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b00d      	add	sp, #52	; 0x34
 8005b0a:	bd90      	pop	{r4, r7, pc}
 8005b0c:	00001388 	.word	0x00001388
 8005b10:	000033f4 	.word	0x000033f4
 8005b14:	00002a30 	.word	0x00002a30
 8005b18:	00008036 	.word	0x00008036
 8005b1c:	00000ddc 	.word	0x00000ddc

08005b20 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005b2a:	240f      	movs	r4, #15
 8005b2c:	193b      	adds	r3, r7, r4
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	22fa      	movs	r2, #250	; 0xfa
 8005b3c:	0091      	lsls	r1, r2, #2
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7fa fafc 	bl	800013c <__udivsi3>
 8005b44:	0003      	movs	r3, r0
 8005b46:	001a      	movs	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8005b4e:	0025      	movs	r5, r4
 8005b50:	193c      	adds	r4, r7, r4
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0011      	movs	r1, r2
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 fefd 	bl	8006958 <VL53L1_set_inter_measurement_period_ms>
 8005b5e:	0003      	movs	r3, r0
 8005b60:	7023      	strb	r3, [r4, #0]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8005b62:	197b      	adds	r3, r7, r5
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b25b      	sxtb	r3, r3
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b004      	add	sp, #16
 8005b6e:	bdb0      	pop	{r4, r5, r7, pc}

08005b70 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005b7a:	250f      	movs	r5, #15
 8005b7c:	197b      	adds	r3, r7, r5
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8005b82:	197c      	adds	r4, r7, r5
 8005b84:	2308      	movs	r3, #8
 8005b86:	18fa      	adds	r2, r7, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 ff14 	bl	80069ba <VL53L1_get_inter_measurement_period_ms>
 8005b92:	0003      	movs	r3, r0
 8005b94:	7023      	strb	r3, [r4, #0]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8005b96:	68bc      	ldr	r4, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	019b      	lsls	r3, r3, #6
 8005b9c:	22fa      	movs	r2, #250	; 0xfa
 8005b9e:	0091      	lsls	r1, r2, #2
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7fa facb 	bl	800013c <__udivsi3>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	1ae3      	subs	r3, r4, r3
 8005baa:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8005bb2:	197b      	adds	r3, r7, r5
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b25b      	sxtb	r3, r3
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bdb0      	pop	{r4, r5, r7, pc}

08005bc0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	200a      	movs	r0, #10
 8005bcc:	183b      	adds	r3, r7, r0
 8005bce:	1c0a      	adds	r2, r1, #0
 8005bd0:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005bd2:	2317      	movs	r3, #23
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005bda:	183b      	adds	r3, r7, r0
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <SetLimitValue+0x28>
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d00d      	beq.n	8005c02 <SetLimitValue+0x42>
 8005be6:	e019      	b.n	8005c1c <SetLimitValue+0x5c>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0b9a      	lsrs	r2, r3, #14
 8005bec:	2114      	movs	r1, #20
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	801a      	strh	r2, [r3, #0]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0011      	movs	r1, r2
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f001 fa9a 	bl	8007134 <VL53L1_set_lite_sigma_threshold>
		break;
 8005c00:	e010      	b.n	8005c24 <SetLimitValue+0x64>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	0a5a      	lsrs	r2, r3, #9
 8005c06:	2114      	movs	r1, #20
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	801a      	strh	r2, [r3, #0]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	0011      	movs	r1, r2
 8005c14:	0018      	movs	r0, r3
 8005c16:	f001 fabf 	bl	8007198 <VL53L1_set_lite_min_count_rate>
		break;
 8005c1a:	e003      	b.n	8005c24 <SetLimitValue+0x64>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	22fc      	movs	r2, #252	; 0xfc
 8005c22:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c24:	2317      	movs	r3, #23
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b25b      	sxtb	r3, r3
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b006      	add	sp, #24
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	0008      	movs	r0, r1
 8005c3e:	0011      	movs	r1, r2
 8005c40:	1cbb      	adds	r3, r7, #2
 8005c42:	1c02      	adds	r2, r0, #0
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	1c7b      	adds	r3, r7, #1
 8005c48:	1c0a      	adds	r2, r1, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005c4c:	210f      	movs	r1, #15
 8005c4e:	187b      	adds	r3, r7, r1
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c58:	1cbb      	adds	r3, r7, #2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d903      	bls.n	8005c68 <VL53L1_SetLimitCheckEnable+0x34>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	22fc      	movs	r2, #252	; 0xfc
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e01a      	b.n	8005c9e <VL53L1_SetLimitCheckEnable+0x6a>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8005c68:	1c7b      	adds	r3, r7, #1
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <VL53L1_SetLimitCheckEnable+0x42>
			TempFix1616 = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e008      	b.n	8005c88 <VL53L1_SetLimitCheckEnable+0x54>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c76:	1cbb      	adds	r3, r7, #2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	33e0      	adds	r3, #224	; 0xe0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	18d3      	adds	r3, r2, r3
 8005c82:	3308      	adds	r3, #8
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8005c88:	230f      	movs	r3, #15
 8005c8a:	18fc      	adds	r4, r7, r3
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	1cbb      	adds	r3, r7, #2
 8005c90:	8819      	ldrh	r1, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7ff ff93 	bl	8005bc0 <SetLimitValue>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	7023      	strb	r3, [r4, #0]
	}

	if (Status == VL53L1_ERROR_NONE)
 8005c9e:	230f      	movs	r3, #15
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10e      	bne.n	8005cc8 <VL53L1_SetLimitCheckEnable+0x94>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005caa:	1c7b      	adds	r3, r7, #1
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	4193      	sbcs	r3, r2
 8005cb2:	b2d9      	uxtb	r1, r3
 8005cb4:	1cbb      	adds	r3, r7, #2
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	0008      	movs	r0, r1
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	23e1      	movs	r3, #225	; 0xe1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	188a      	adds	r2, r1, r2
 8005cc2:	18d3      	adds	r3, r2, r3
 8005cc4:	1c02      	adds	r2, r0, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8005cc8:	230f      	movs	r3, #15
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b25b      	sxtb	r3, r3
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b005      	add	sp, #20
 8005cd6:	bd90      	pop	{r4, r7, pc}

08005cd8 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	200a      	movs	r0, #10
 8005ce4:	183b      	adds	r3, r7, r0
 8005ce6:	1c0a      	adds	r2, r1, #0
 8005ce8:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005cea:	2117      	movs	r1, #23
 8005cec:	187b      	adds	r3, r7, r1
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005cf2:	183b      	adds	r3, r7, r0
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d906      	bls.n	8005d08 <VL53L1_GetLimitCheckEnable+0x30>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	22fc      	movs	r2, #252	; 0xfc
 8005cfe:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e00f      	b.n	8005d28 <VL53L1_GetLimitCheckEnable+0x50>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d08:	230a      	movs	r3, #10
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	8819      	ldrh	r1, [r3, #0]
 8005d0e:	2416      	movs	r4, #22
 8005d10:	193b      	adds	r3, r7, r4
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	22e1      	movs	r2, #225	; 0xe1
 8005d16:	0092      	lsls	r2, r2, #2
 8005d18:	1841      	adds	r1, r0, r1
 8005d1a:	188a      	adds	r2, r1, r2
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	193a      	adds	r2, r7, r4
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d28:	2317      	movs	r3, #23
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b25b      	sxtb	r3, r3
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b007      	add	sp, #28
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005d38:	b5b0      	push	{r4, r5, r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	200a      	movs	r0, #10
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	1c0a      	adds	r2, r1, #0
 8005d48:	801a      	strh	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005d4a:	231f      	movs	r3, #31
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005d56:	183b      	adds	r3, r7, r0
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <VL53L1_GetLimitCheckValue+0x2c>
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d010      	beq.n	8005d84 <VL53L1_GetLimitCheckValue+0x4c>
 8005d62:	e01f      	b.n	8005da4 <VL53L1_GetLimitCheckValue+0x6c>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8005d64:	231f      	movs	r3, #31
 8005d66:	18fc      	adds	r4, r7, r3
 8005d68:	2514      	movs	r5, #20
 8005d6a:	197a      	adds	r2, r7, r5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	0011      	movs	r1, r2
 8005d70:	0018      	movs	r0, r3
 8005d72:	f001 f9c7 	bl	8007104 <VL53L1_get_lite_sigma_threshold>
 8005d76:	0003      	movs	r3, r0
 8005d78:	7023      	strb	r3, [r4, #0]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8005d7a:	197b      	adds	r3, r7, r5
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	039b      	lsls	r3, r3, #14
 8005d80:	61bb      	str	r3, [r7, #24]
		break;
 8005d82:	e013      	b.n	8005dac <VL53L1_GetLimitCheckValue+0x74>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8005d84:	231f      	movs	r3, #31
 8005d86:	18fc      	adds	r4, r7, r3
 8005d88:	2516      	movs	r5, #22
 8005d8a:	197a      	adds	r2, r7, r5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	0011      	movs	r1, r2
 8005d90:	0018      	movs	r0, r3
 8005d92:	f001 f9e9 	bl	8007168 <VL53L1_get_lite_min_count_rate>
 8005d96:	0003      	movs	r3, r0
 8005d98:	7023      	strb	r3, [r4, #0]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8005d9a:	197b      	adds	r3, r7, r5
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	025b      	lsls	r3, r3, #9
 8005da0:	61bb      	str	r3, [r7, #24]
		break;
 8005da2:	e003      	b.n	8005dac <VL53L1_GetLimitCheckValue+0x74>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005da4:	231f      	movs	r3, #31
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	22fc      	movs	r2, #252	; 0xfc
 8005daa:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005dac:	231f      	movs	r3, #31
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d12f      	bne.n	8005e18 <VL53L1_GetLimitCheckValue+0xe0>

		if (TempFix1616 == 0) {
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d116      	bne.n	8005dec <VL53L1_GetLimitCheckValue+0xb4>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8005dbe:	210a      	movs	r1, #10
 8005dc0:	187b      	adds	r3, r7, r1
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	33e0      	adds	r3, #224	; 0xe0
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	3308      	adds	r3, #8
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	68f9      	ldr	r1, [r7, #12]
 8005dde:	23e1      	movs	r3, #225	; 0xe1
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	188a      	adds	r2, r1, r2
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e015      	b.n	8005e18 <VL53L1_GetLimitCheckValue+0xe0>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005df2:	210a      	movs	r1, #10
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	33e0      	adds	r3, #224	; 0xe0
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	3308      	adds	r3, #8
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	601a      	str	r2, [r3, #0]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	23e1      	movs	r3, #225	; 0xe1
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	188a      	adds	r2, r1, r2
 8005e12:	18d3      	adds	r3, r2, r3
 8005e14:	2201      	movs	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8005e18:	231f      	movs	r3, #31
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b25b      	sxtb	r3, r3

}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b008      	add	sp, #32
 8005e26:	bdb0      	pop	{r4, r5, r7, pc}

08005e28 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	200b      	movs	r0, #11
 8005e34:	183b      	adds	r3, r7, r0
 8005e36:	1c0a      	adds	r2, r1, #0
 8005e38:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e3a:	2517      	movs	r5, #23
 8005e3c:	197b      	adds	r3, r7, r5
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8005e42:	197c      	adds	r4, r7, r5
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	183b      	adds	r3, r7, r0
 8005e48:	7819      	ldrb	r1, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 feb3 	bl	8006bb8 <VL53L1_get_sequence_config_bit>
 8005e52:	0003      	movs	r3, r0
 8005e54:	7023      	strb	r3, [r4, #0]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e56:	197b      	adds	r3, r7, r5
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b25b      	sxtb	r3, r3
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b006      	add	sp, #24
 8005e62:	bdb0      	pop	{r4, r5, r7, pc}

08005e64 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8005e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e6c:	2317      	movs	r3, #23
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8005e74:	2116      	movs	r1, #22
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	7892      	ldrb	r2, [r2, #2]
 8005e7c:	701a      	strb	r2, [r3, #0]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8005e7e:	187b      	adds	r3, r7, r1
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d003      	beq.n	8005e8e <VL53L1_StartMeasurement+0x2a>
		VL53L1_LoadPatch(Dev);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fad1 	bl	8006430 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8005e8e:	2015      	movs	r0, #21
 8005e90:	183b      	adds	r3, r7, r0
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	22de      	movs	r2, #222	; 0xde
 8005e96:	0092      	lsls	r2, r2, #2
 8005e98:	5c8a      	ldrb	r2, [r1, r2]
 8005e9a:	701a      	strb	r2, [r3, #0]
	switch (CurrPalState) {
 8005e9c:	183b      	adds	r3, r7, r0
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b63      	cmp	r3, #99	; 0x63
 8005ea2:	dc16      	bgt.n	8005ed2 <VL53L1_StartMeasurement+0x6e>
 8005ea4:	2b62      	cmp	r3, #98	; 0x62
 8005ea6:	da0f      	bge.n	8005ec8 <VL53L1_StartMeasurement+0x64>
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	dc12      	bgt.n	8005ed2 <VL53L1_StartMeasurement+0x6e>
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	da0b      	bge.n	8005ec8 <VL53L1_StartMeasurement+0x64>
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	dc02      	bgt.n	8005eba <VL53L1_StartMeasurement+0x56>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da07      	bge.n	8005ec8 <VL53L1_StartMeasurement+0x64>
 8005eb8:	e00b      	b.n	8005ed2 <VL53L1_StartMeasurement+0x6e>
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d109      	bne.n	8005ed2 <VL53L1_StartMeasurement+0x6e>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8005ebe:	2317      	movs	r3, #23
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
		break;
 8005ec6:	e008      	b.n	8005eda <VL53L1_StartMeasurement+0x76>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8005ec8:	2317      	movs	r3, #23
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	22f2      	movs	r2, #242	; 0xf2
 8005ece:	701a      	strb	r2, [r3, #0]
		break;
 8005ed0:	e003      	b.n	8005eda <VL53L1_StartMeasurement+0x76>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8005ed2:	2317      	movs	r3, #23
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	22fd      	movs	r2, #253	; 0xfd
 8005ed8:	701a      	strb	r2, [r3, #0]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8005eda:	2517      	movs	r5, #23
 8005edc:	197b      	adds	r3, r7, r5
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d129      	bne.n	8005f3a <VL53L1_StartMeasurement+0xd6>
 8005ee6:	2316      	movs	r3, #22
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d124      	bne.n	8005f3a <VL53L1_StartMeasurement+0xd6>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005ef0:	2614      	movs	r6, #20
 8005ef2:	19bc      	adds	r4, r7, r6
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	18fa      	adds	r2, r7, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0011      	movs	r1, r2
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff fd41 	bl	8005984 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8005f02:	0003      	movs	r3, r0
 8005f04:	7023      	strb	r3, [r4, #0]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	22fa      	movs	r2, #250	; 0xfa
 8005f0a:	0091      	lsls	r1, r2, #2
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fa f915 	bl	800013c <__udivsi3>
 8005f12:	0003      	movs	r3, r0
 8005f14:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005f16:	19bc      	adds	r4, r7, r6
 8005f18:	230c      	movs	r3, #12
 8005f1a:	18fa      	adds	r2, r7, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	0011      	movs	r1, r2
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff fe25 	bl	8005b70 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8005f26:	0003      	movs	r3, r0
 8005f28:	7023      	strb	r3, [r4, #0]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d902      	bls.n	8005f3a <VL53L1_StartMeasurement+0xd6>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8005f34:	197b      	adds	r3, r7, r5
 8005f36:	22fc      	movs	r2, #252	; 0xfc
 8005f38:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L1_ERROR_NONE)
 8005f3a:	2217      	movs	r2, #23
 8005f3c:	18bb      	adds	r3, r7, r2
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <VL53L1_StartMeasurement+0xf8>
		Status = VL53L1_init_and_start_range(
 8005f46:	18bc      	adds	r4, r7, r2
 8005f48:	2316      	movs	r3, #22
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2206      	movs	r2, #6
 8005f52:	0018      	movs	r0, r3
 8005f54:	f001 f960 	bl	8007218 <VL53L1_init_and_start_range>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	7023      	strb	r3, [r4, #0]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8005f5c:	2317      	movs	r3, #23
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <VL53L1_StartMeasurement+0x10e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	23de      	movs	r3, #222	; 0xde
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	2104      	movs	r1, #4
 8005f70:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 8005f72:	2317      	movs	r3, #23
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b25b      	sxtb	r3, r3
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b007      	add	sp, #28
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f82 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8005f82:	b5b0      	push	{r4, r5, r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f8a:	250f      	movs	r5, #15
 8005f8c:	197b      	adds	r3, r7, r5
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8005f92:	210e      	movs	r1, #14
 8005f94:	187b      	adds	r3, r7, r1
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	7892      	ldrb	r2, [r2, #2]
 8005f9a:	701a      	strb	r2, [r3, #0]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8005f9c:	197c      	adds	r4, r7, r5
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f001 fdb4 	bl	8007b14 <VL53L1_clear_interrupt_and_enable_next_range>
 8005fac:	0003      	movs	r3, r0
 8005fae:	7023      	strb	r3, [r4, #0]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8005fb0:	197b      	adds	r3, r7, r5
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b25b      	sxtb	r3, r3
}
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b004      	add	sp, #16
 8005fbc:	bdb0      	pop	{r4, r5, r7, pc}

08005fbe <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8005fbe:	b5b0      	push	{r4, r5, r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005fc6:	250f      	movs	r5, #15
 8005fc8:	197b      	adds	r3, r7, r5
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	23fa      	movs	r3, #250	; 0xfa
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	0011      	movs	r1, r2
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f004 ff01 	bl	800ade0 <VL53L1_poll_for_range_completion>
 8005fde:	0003      	movs	r3, r0
 8005fe0:	7023      	strb	r3, [r4, #0]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8005fe2:	197b      	adds	r3, r7, r5
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b25b      	sxtb	r3, r3
}
 8005fe8:	0018      	movs	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b004      	add	sp, #16
 8005fee:	bdb0      	pop	{r4, r5, r7, pc}

08005ff0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	; 0x30
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	603a      	str	r2, [r7, #0]
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	1c02      	adds	r2, r0, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	1dbb      	adds	r3, r7, #6
 8006000:	1c0a      	adds	r2, r1, #0
 8006002:	701a      	strb	r2, [r3, #0]
	int16_t SRL = 300;
 8006004:	2324      	movs	r3, #36	; 0x24
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2296      	movs	r2, #150	; 0x96
 800600a:	0052      	lsls	r2, r2, #1
 800600c:	801a      	strh	r2, [r3, #0]
	uint16_t SRAS = 30;
 800600e:	2322      	movs	r3, #34	; 0x22
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	221e      	movs	r2, #30
 8006014:	801a      	strh	r2, [r3, #0]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <ComputeRQL+0x10c>)
 8006018:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800601a:	4b39      	ldr	r3, [pc, #228]	; (8006100 <ComputeRQL+0x110>)
 800601c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800601e:	4b39      	ldr	r3, [pc, #228]	; (8006104 <ComputeRQL+0x114>)
 8006020:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8006022:	1dfb      	adds	r3, r7, #7
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <ComputeRQL+0x44>
		returnvalue = 0;
 800602a:	2327      	movs	r3, #39	; 0x27
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e05b      	b.n	80060ec <ComputeRQL+0xfc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8006034:	1dbb      	adds	r3, r7, #6
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b07      	cmp	r3, #7
 800603a:	d104      	bne.n	8006046 <ComputeRQL+0x56>
		returnvalue = 50;
 800603c:	2327      	movs	r3, #39	; 0x27
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	2232      	movs	r2, #50	; 0x32
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e052      	b.n	80060ec <ComputeRQL+0xfc>
	else {
		if (presults_data->median_range_mm < SRL)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	223c      	movs	r2, #60	; 0x3c
 800604a:	5e9b      	ldrsh	r3, [r3, r2]
 800604c:	2224      	movs	r2, #36	; 0x24
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	2100      	movs	r1, #0
 8006052:	5e52      	ldrsh	r2, [r2, r1]
 8006054:	429a      	cmp	r2, r3
 8006056:	dd05      	ble.n	8006064 <ComputeRQL+0x74>
			RAS = SRAS * 65536;
 8006058:	2322      	movs	r3, #34	; 0x22
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006062:	e006      	b.n	8006072 <ComputeRQL+0x82>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	223c      	movs	r2, #60	; 0x3c
 8006068:	5e9b      	ldrsh	r3, [r3, r2]
 800606a:	001a      	movs	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4353      	muls	r3, r2
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <ComputeRQL+0xca>
			partial = (GGm * presults_data->sigma_mm);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800607c:	001a      	movs	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4353      	muls	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	18d3      	adds	r3, r2, r3
 800608c:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800608e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f7fa f853 	bl	800013c <__udivsi3>
 8006096:	0003      	movs	r3, r0
 8006098:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d804      	bhi.n	80060b2 <ComputeRQL+0xc2>
				SRQL = GI - partial;
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b0:	e006      	b.n	80060c0 <ComputeRQL+0xd0>
			else
				SRQL = 50 * 65536;
 80060b2:	23c8      	movs	r3, #200	; 0xc8
 80060b4:	039b      	lsls	r3, r3, #14
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b8:	e002      	b.n	80060c0 <ComputeRQL+0xd0>
		} else
			SRQL = 100 * 65536;
 80060ba:	23c8      	movs	r3, #200	; 0xc8
 80060bc:	03db      	lsls	r3, r3, #15
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	0c1a      	lsrs	r2, r3, #16
 80060c4:	210f      	movs	r1, #15
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	701a      	strb	r2, [r3, #0]
		returnvalue = MAX(50, MIN(100, finalvalue));
 80060ca:	000a      	movs	r2, r1
 80060cc:	18bb      	adds	r3, r7, r2
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b32      	cmp	r3, #50	; 0x32
 80060d2:	d907      	bls.n	80060e4 <ComputeRQL+0xf4>
 80060d4:	18bb      	adds	r3, r7, r2
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	2a64      	cmp	r2, #100	; 0x64
 80060dc:	d900      	bls.n	80060e0 <ComputeRQL+0xf0>
 80060de:	2364      	movs	r3, #100	; 0x64
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	e000      	b.n	80060e6 <ComputeRQL+0xf6>
 80060e4:	2232      	movs	r2, #50	; 0x32
 80060e6:	2327      	movs	r3, #39	; 0x27
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	701a      	strb	r2, [r3, #0]
	}

	return returnvalue;
 80060ec:	2327      	movs	r3, #39	; 0x27
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b00c      	add	sp, #48	; 0x30
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	0075b333 	.word	0x0075b333
 8006100:	0030cccd 	.word	0x0030cccd
 8006104:	0000199a 	.word	0x0000199a

08006108 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	0002      	movs	r2, r0
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	701a      	strb	r2, [r3, #0]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8006114:	1dfb      	adds	r3, r7, #7
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	3b04      	subs	r3, #4
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d831      	bhi.n	8006182 <ConvertStatusLite+0x7a>
 800611e:	009a      	lsls	r2, r3, #2
 8006120:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <ConvertStatusLite+0x90>)
 8006122:	18d3      	adds	r3, r2, r3
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	469f      	mov	pc, r3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8006128:	230f      	movs	r3, #15
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	220a      	movs	r2, #10
 800612e:	701a      	strb	r2, [r3, #0]
		break;
 8006130:	e02b      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8006132:	230f      	movs	r3, #15
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2206      	movs	r2, #6
 8006138:	701a      	strb	r2, [r3, #0]
		break;
 800613a:	e026      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 800613c:	230f      	movs	r3, #15
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2204      	movs	r2, #4
 8006142:	701a      	strb	r2, [r3, #0]
		break;
 8006144:	e021      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8006146:	230f      	movs	r3, #15
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
		break;
 800614e:	e01c      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8006150:	230f      	movs	r3, #15
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
		break;
 8006158:	e017      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800615a:	230f      	movs	r3, #15
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	2207      	movs	r2, #7
 8006160:	701a      	strb	r2, [r3, #0]
		break;
 8006162:	e012      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8006164:	230f      	movs	r3, #15
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2209      	movs	r2, #9
 800616a:	701a      	strb	r2, [r3, #0]
		break;
 800616c:	e00d      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 800616e:	230f      	movs	r3, #15
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	2203      	movs	r2, #3
 8006174:	701a      	strb	r2, [r3, #0]
		break;
 8006176:	e008      	b.n	800618a <ConvertStatusLite+0x82>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8006178:	230f      	movs	r3, #15
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
		break;
 8006180:	e003      	b.n	800618a <ConvertStatusLite+0x82>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8006182:	230f      	movs	r3, #15
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	701a      	strb	r2, [r3, #0]
	}

	return RangeStatus;
 800618a:	230f      	movs	r3, #15
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b004      	add	sp, #16
 8006196:	bd80      	pop	{r7, pc}
 8006198:	0800e3b8 	.word	0x0800e3b8

0800619c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800619c:	b5b0      	push	{r4, r5, r7, lr}
 800619e:	b08c      	sub	sp, #48	; 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	0008      	movs	r0, r1
 80061a6:	0011      	movs	r1, r2
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	240b      	movs	r4, #11
 80061ac:	193b      	adds	r3, r7, r4
 80061ae:	1c02      	adds	r2, r0, #0
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	250a      	movs	r5, #10
 80061b4:	197b      	adds	r3, r7, r5
 80061b6:	1c0a      	adds	r2, r1, #0
 80061b8:	701a      	strb	r2, [r3, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80061ba:	232f      	movs	r3, #47	; 0x2f
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	223e      	movs	r2, #62	; 0x3e
 80061ce:	5c9a      	ldrb	r2, [r3, r2]
 80061d0:	202e      	movs	r0, #46	; 0x2e
 80061d2:	183b      	adds	r3, r7, r0
 80061d4:	211f      	movs	r1, #31
 80061d6:	400a      	ands	r2, r1
 80061d8:	701a      	strb	r2, [r3, #0]

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	183b      	adds	r3, r7, r0
 80061de:	7819      	ldrb	r1, [r3, #0]
 80061e0:	193b      	adds	r3, r7, r4
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	0018      	movs	r0, r3
 80061e6:	f7ff ff03 	bl	8005ff0 <ComputeRQL>
 80061ea:	0003      	movs	r3, r0
 80061ec:	001a      	movs	r2, r3
 80061ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f0:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061f6:	025b      	lsls	r3, r3, #9
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80061fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fe:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006204:	025b      	lsls	r3, r3, #9
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8006208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8006212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006214:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800621a:	025b      	lsls	r3, r3, #9
 800621c:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800621e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	223c      	movs	r2, #60	; 0x3c
 8006228:	5e9a      	ldrsh	r2, [r3, r2]
 800622a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622c:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800622e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006230:	2200      	movs	r2, #0
 8006232:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8006234:	197b      	adds	r3, r7, r5
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b11      	cmp	r3, #17
 800623a:	d008      	beq.n	800624e <SetSimpleData+0xb2>
 800623c:	dc0f      	bgt.n	800625e <SetSimpleData+0xc2>
 800623e:	2b03      	cmp	r3, #3
 8006240:	dc02      	bgt.n	8006248 <SetSimpleData+0xac>
 8006242:	2b00      	cmp	r3, #0
 8006244:	dc03      	bgt.n	800624e <SetSimpleData+0xb2>
 8006246:	e00a      	b.n	800625e <SetSimpleData+0xc2>
 8006248:	2b0d      	cmp	r3, #13
 800624a:	d004      	beq.n	8006256 <SetSimpleData+0xba>
 800624c:	e007      	b.n	800625e <SetSimpleData+0xc2>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800624e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006250:	2205      	movs	r2, #5
 8006252:	76da      	strb	r2, [r3, #27]
		break;
 8006254:	e006      	b.n	8006264 <SetSimpleData+0xc8>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	220d      	movs	r2, #13
 800625a:	76da      	strb	r2, [r3, #27]
		break;
 800625c:	e002      	b.n	8006264 <SetSimpleData+0xc8>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800625e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006260:	2200      	movs	r2, #0
 8006262:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	7edb      	ldrb	r3, [r3, #27]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <SetSimpleData+0xe4>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 800626c:	232e      	movs	r3, #46	; 0x2e
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	0018      	movs	r0, r3
 8006274:	f7ff ff48 	bl	8006108 <ConvertStatusLite>
 8006278:	0003      	movs	r3, r0
 800627a:	001a      	movs	r2, r3
			pRangeData->RangeStatus =
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006284:	025b      	lsls	r3, r3, #9
 8006286:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	23e4      	movs	r3, #228	; 0xe4
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	6a39      	ldr	r1, [r7, #32]
 8006290:	50d1      	str	r1, [r2, r3]
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006296:	025b      	lsls	r3, r3, #9
 8006298:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	23e5      	movs	r3, #229	; 0xe5
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	50d1      	str	r1, [r2, r3]
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80062a4:	2314      	movs	r3, #20
 80062a6:	18fa      	adds	r2, r7, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2100      	movs	r1, #0
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff fd43 	bl	8005d38 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80062b2:	232e      	movs	r3, #46	; 0x2e
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	3b06      	subs	r3, #6
 80062ba:	425a      	negs	r2, r3
 80062bc:	4153      	adcs	r3, r2
 80062be:	b2da      	uxtb	r2, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80062c0:	241f      	movs	r4, #31
 80062c2:	193b      	adds	r3, r7, r4
 80062c4:	701a      	strb	r2, [r3, #0]

	VL53L1_GetLimitCheckEnable(Dev,
 80062c6:	2519      	movs	r5, #25
 80062c8:	197a      	adds	r2, r7, r5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2100      	movs	r1, #0
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff fd02 	bl	8005cd8 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80062d4:	197b      	adds	r3, r7, r5
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <SetSimpleData+0x14c>
 80062dc:	193b      	adds	r3, r7, r4
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <SetSimpleData+0x14c>
 80062e4:	2201      	movs	r2, #1
 80062e6:	e000      	b.n	80062ea <SetSimpleData+0x14e>
 80062e8:	2200      	movs	r2, #0
 80062ea:	211e      	movs	r1, #30
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	701a      	strb	r2, [r3, #0]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	187a      	adds	r2, r7, r1
 80062f4:	4928      	ldr	r1, [pc, #160]	; (8006398 <SetSimpleData+0x1fc>)
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	545a      	strb	r2, [r3, r1]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 80062fa:	2314      	movs	r3, #20
 80062fc:	18fa      	adds	r2, r7, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2101      	movs	r1, #1
 8006302:	0018      	movs	r0, r3
 8006304:	f7ff fd18 	bl	8005d38 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8006308:	232e      	movs	r3, #46	; 0x2e
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	3b04      	subs	r3, #4
 8006310:	425a      	negs	r2, r3
 8006312:	4153      	adcs	r3, r2
 8006314:	b2da      	uxtb	r2, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8006316:	241d      	movs	r4, #29
 8006318:	193b      	adds	r3, r7, r4
 800631a:	701a      	strb	r2, [r3, #0]

	VL53L1_GetLimitCheckEnable(Dev,
 800631c:	2519      	movs	r5, #25
 800631e:	197a      	adds	r2, r7, r5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2101      	movs	r1, #1
 8006324:	0018      	movs	r0, r3
 8006326:	f7ff fcd7 	bl	8005cd8 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800632a:	197b      	adds	r3, r7, r5
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d105      	bne.n	800633e <SetSimpleData+0x1a2>
 8006332:	193b      	adds	r3, r7, r4
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <SetSimpleData+0x1a2>
 800633a:	2201      	movs	r2, #1
 800633c:	e000      	b.n	8006340 <SetSimpleData+0x1a4>
 800633e:	2200      	movs	r2, #0
 8006340:	211e      	movs	r1, #30
 8006342:	187b      	adds	r3, r7, r1
 8006344:	701a      	strb	r2, [r3, #0]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	187a      	adds	r2, r7, r1
 800634a:	4914      	ldr	r1, [pc, #80]	; (800639c <SetSimpleData+0x200>)
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	545a      	strb	r2, [r3, r1]
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8006350:	211a      	movs	r1, #26
 8006352:	187b      	adds	r3, r7, r1
 8006354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006356:	8b12      	ldrh	r2, [r2, #24]
 8006358:	801a      	strh	r2, [r3, #0]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800635a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635c:	7edb      	ldrb	r3, [r3, #27]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d112      	bne.n	8006388 <SetSimpleData+0x1ec>
 8006362:	187b      	adds	r3, r7, r1
 8006364:	2200      	movs	r2, #0
 8006366:	5e9b      	ldrsh	r3, [r3, r2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da0d      	bge.n	8006388 <SetSimpleData+0x1ec>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800636c:	187b      	adds	r3, r7, r1
 800636e:	2200      	movs	r2, #0
 8006370:	5e9a      	ldrsh	r2, [r3, r2]
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <SetSimpleData+0x204>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	da03      	bge.n	8006382 <SetSimpleData+0x1e6>
			pRangeData->RangeStatus =
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	220e      	movs	r2, #14
 800637e:	76da      	strb	r2, [r3, #27]
 8006380:	e002      	b.n	8006388 <SetSimpleData+0x1ec>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8006382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006384:	2200      	movs	r2, #0
 8006386:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8006388:	232f      	movs	r3, #47	; 0x2f
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b25b      	sxtb	r3, r3
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b00c      	add	sp, #48	; 0x30
 8006396:	bdb0      	pop	{r4, r5, r7, pc}
 8006398:	00000386 	.word	0x00000386
 800639c:	00000387 	.word	0x00000387
 80063a0:	20000010 	.word	0x20000010

080063a4 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80063a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a6:	b0a9      	sub	sp, #164	; 0xa4
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80063ae:	2697      	movs	r6, #151	; 0x97
 80063b0:	19bb      	adds	r3, r7, r6
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80063b6:	2308      	movs	r3, #8
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	2590      	movs	r5, #144	; 0x90
 80063bc:	197a      	adds	r2, r7, r5
 80063be:	6013      	str	r3, [r2, #0]

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	221c      	movs	r2, #28
 80063c4:	21ff      	movs	r1, #255	; 0xff
 80063c6:	0018      	movs	r0, r3
 80063c8:	f005 fda0 	bl	800bf0c <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80063cc:	19bc      	adds	r4, r7, r6
 80063ce:	197b      	adds	r3, r7, r5
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2102      	movs	r1, #2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f001 fb0c 	bl	80079f4 <VL53L1_get_device_results>
 80063dc:	0003      	movs	r3, r0
 80063de:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80063e0:	0031      	movs	r1, r6
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d119      	bne.n	8006420 <VL53L1_GetRangingMeasurementData+0x7c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80063ec:	197b      	adds	r3, r7, r5
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	789a      	ldrb	r2, [r3, #2]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80063f6:	197b      	adds	r3, r7, r5
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	208c      	movs	r0, #140	; 0x8c
 80063fe:	183a      	adds	r2, r7, r0
 8006400:	6013      	str	r3, [r2, #0]
		Status = SetSimpleData(Dev, 1,
 8006402:	197b      	adds	r3, r7, r5
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	78da      	ldrb	r2, [r3, #3]
 8006408:	187c      	adds	r4, r7, r1
 800640a:	183b      	adds	r3, r7, r0
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	000b      	movs	r3, r1
 8006416:	2101      	movs	r1, #1
 8006418:	f7ff fec0 	bl	800619c <SetSimpleData>
 800641c:	0003      	movs	r3, r0
 800641e:	7023      	strb	r3, [r4, #0]
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006420:	2397      	movs	r3, #151	; 0x97
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b25b      	sxtb	r3, r3
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	b027      	add	sp, #156	; 0x9c
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006430 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b0c7      	sub	sp, #284	; 0x11c
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006438:	2118      	movs	r1, #24
 800643a:	31ff      	adds	r1, #255	; 0xff
 800643c:	187b      	adds	r3, r7, r1
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
	uint32_t patch_tuning = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	2286      	movs	r2, #134	; 0x86
 8006446:	0052      	lsls	r2, r2, #1
 8006448:	18ba      	adds	r2, r7, r2
 800644a:	6013      	str	r3, [r2, #0]
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800644c:	187b      	adds	r3, r7, r1
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b25b      	sxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <VL53L1_LoadPatch+0x38>
		status = VL53L1_WrByte(
 8006456:	187c      	adds	r4, r7, r1
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	2185      	movs	r1, #133	; 0x85
 800645e:	0018      	movs	r0, r3
 8006460:	f004 fdcc 	bl	800affc <VL53L1_WrByte>
 8006464:	0003      	movs	r3, r0
 8006466:	7023      	strb	r3, [r4, #0]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8006468:	2318      	movs	r3, #24
 800646a:	33ff      	adds	r3, #255	; 0xff
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b25b      	sxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <VL53L1_LoadPatch+0x4e>
		VL53L1_enable_powerforce(Dev);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f002 ff66 	bl	800934a <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800647e:	4b83      	ldr	r3, [pc, #524]	; (800668c <VL53L1_LoadPatch+0x25c>)
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	2286      	movs	r2, #134	; 0x86
 8006484:	0052      	lsls	r2, r2, #1
 8006486:	18b9      	adds	r1, r7, r2
 8006488:	600b      	str	r3, [r1, #0]

	switch(patch_tuning) {
 800648a:	18bb      	adds	r3, r7, r2
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b03      	cmp	r3, #3
 8006490:	d026      	beq.n	80064e0 <VL53L1_LoadPatch+0xb0>
 8006492:	18bb      	adds	r3, r7, r2
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d828      	bhi.n	80064ec <VL53L1_LoadPatch+0xbc>
 800649a:	18bb      	adds	r3, r7, r2
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d018      	beq.n	80064d4 <VL53L1_LoadPatch+0xa4>
 80064a2:	18bb      	adds	r3, r7, r2
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d820      	bhi.n	80064ec <VL53L1_LoadPatch+0xbc>
 80064aa:	18bb      	adds	r3, r7, r2
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <VL53L1_LoadPatch+0x8c>
 80064b2:	18bb      	adds	r3, r7, r2
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d006      	beq.n	80064c8 <VL53L1_LoadPatch+0x98>
 80064ba:	e017      	b.n	80064ec <VL53L1_LoadPatch+0xbc>
	case 0:
		patch_power = 0x00;
 80064bc:	2300      	movs	r3, #0
 80064be:	2288      	movs	r2, #136	; 0x88
 80064c0:	0052      	lsls	r2, r2, #1
 80064c2:	18ba      	adds	r2, r7, r2
 80064c4:	6013      	str	r3, [r2, #0]
		break;
 80064c6:	e016      	b.n	80064f6 <VL53L1_LoadPatch+0xc6>
	case 1:
		patch_power = 0x10;
 80064c8:	2310      	movs	r3, #16
 80064ca:	2288      	movs	r2, #136	; 0x88
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	18ba      	adds	r2, r7, r2
 80064d0:	6013      	str	r3, [r2, #0]
		break;
 80064d2:	e010      	b.n	80064f6 <VL53L1_LoadPatch+0xc6>
	case 2:
		patch_power = 0x20;
 80064d4:	2320      	movs	r3, #32
 80064d6:	2288      	movs	r2, #136	; 0x88
 80064d8:	0052      	lsls	r2, r2, #1
 80064da:	18ba      	adds	r2, r7, r2
 80064dc:	6013      	str	r3, [r2, #0]
		break;
 80064de:	e00a      	b.n	80064f6 <VL53L1_LoadPatch+0xc6>
	case 3:
		patch_power = 0x40;
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	2288      	movs	r2, #136	; 0x88
 80064e4:	0052      	lsls	r2, r2, #1
 80064e6:	18ba      	adds	r2, r7, r2
 80064e8:	6013      	str	r3, [r2, #0]
		break;
 80064ea:	e004      	b.n	80064f6 <VL53L1_LoadPatch+0xc6>
	default:
		patch_power = 0x00;
 80064ec:	2300      	movs	r3, #0
 80064ee:	2288      	movs	r2, #136	; 0x88
 80064f0:	0052      	lsls	r2, r2, #1
 80064f2:	18ba      	adds	r2, r7, r2
 80064f4:	6013      	str	r3, [r2, #0]
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80064f6:	2018      	movs	r0, #24
 80064f8:	30ff      	adds	r0, #255	; 0xff
 80064fa:	183b      	adds	r3, r7, r0
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d12d      	bne.n	8006560 <VL53L1_LoadPatch+0x130>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8006504:	4b62      	ldr	r3, [pc, #392]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006506:	218c      	movs	r1, #140	; 0x8c
 8006508:	0049      	lsls	r1, r1, #1
 800650a:	185b      	adds	r3, r3, r1
 800650c:	19db      	adds	r3, r3, r7
 800650e:	2229      	movs	r2, #41	; 0x29
 8006510:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8006512:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006514:	185b      	adds	r3, r3, r1
 8006516:	19db      	adds	r3, r3, r7
 8006518:	22c9      	movs	r2, #201	; 0xc9
 800651a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800651c:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <VL53L1_LoadPatch+0x260>)
 800651e:	185b      	adds	r3, r3, r1
 8006520:	19db      	adds	r3, r3, r7
 8006522:	220e      	movs	r2, #14
 8006524:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8006526:	4b5a      	ldr	r3, [pc, #360]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006528:	185b      	adds	r3, r3, r1
 800652a:	19db      	adds	r3, r3, r7
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8006530:	4b57      	ldr	r3, [pc, #348]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006532:	185b      	adds	r3, r3, r1
 8006534:	19db      	adds	r3, r3, r7
 8006536:	2228      	movs	r2, #40	; 0x28
 8006538:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800653a:	2388      	movs	r3, #136	; 0x88
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b52      	ldr	r3, [pc, #328]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006546:	185b      	adds	r3, r3, r1
 8006548:	19db      	adds	r3, r3, r7
 800654a:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800654c:	183c      	adds	r4, r7, r0
 800654e:	230c      	movs	r3, #12
 8006550:	18fa      	adds	r2, r7, r3
 8006552:	4950      	ldr	r1, [pc, #320]	; (8006694 <VL53L1_LoadPatch+0x264>)
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	2306      	movs	r3, #6
 8006558:	f004 fcc6 	bl	800aee8 <VL53L1_WriteMulti>
 800655c:	0003      	movs	r3, r0
 800655e:	7023      	strb	r3, [r4, #0]
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8006560:	2018      	movs	r0, #24
 8006562:	30ff      	adds	r0, #255	; 0xff
 8006564:	183b      	adds	r3, r7, r0
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d129      	bne.n	80065c2 <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x03;
 800656e:	4b48      	ldr	r3, [pc, #288]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006570:	218c      	movs	r1, #140	; 0x8c
 8006572:	0049      	lsls	r1, r1, #1
 8006574:	185b      	adds	r3, r3, r1
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2203      	movs	r2, #3
 800657a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800657c:	4b44      	ldr	r3, [pc, #272]	; (8006690 <VL53L1_LoadPatch+0x260>)
 800657e:	185b      	adds	r3, r3, r1
 8006580:	19db      	adds	r3, r3, r7
 8006582:	226d      	movs	r2, #109	; 0x6d
 8006584:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8006586:	4b42      	ldr	r3, [pc, #264]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006588:	185b      	adds	r3, r3, r1
 800658a:	19db      	adds	r3, r3, r7
 800658c:	2203      	movs	r2, #3
 800658e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8006590:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <VL53L1_LoadPatch+0x260>)
 8006592:	185b      	adds	r3, r3, r1
 8006594:	19db      	adds	r3, r3, r7
 8006596:	226f      	movs	r2, #111	; 0x6f
 8006598:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800659a:	4b3d      	ldr	r3, [pc, #244]	; (8006690 <VL53L1_LoadPatch+0x260>)
 800659c:	185b      	adds	r3, r3, r1
 800659e:	19db      	adds	r3, r3, r7
 80065a0:	2207      	movs	r2, #7
 80065a2:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80065a4:	4b3a      	ldr	r3, [pc, #232]	; (8006690 <VL53L1_LoadPatch+0x260>)
 80065a6:	185b      	adds	r3, r3, r1
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	2229      	movs	r2, #41	; 0x29
 80065ac:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80065ae:	183c      	adds	r4, r7, r0
 80065b0:	230c      	movs	r3, #12
 80065b2:	18fa      	adds	r2, r7, r3
 80065b4:	4938      	ldr	r1, [pc, #224]	; (8006698 <VL53L1_LoadPatch+0x268>)
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	2306      	movs	r3, #6
 80065ba:	f004 fc95 	bl	800aee8 <VL53L1_WriteMulti>
 80065be:	0003      	movs	r3, r0
 80065c0:	7023      	strb	r3, [r4, #0]
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80065c2:	2118      	movs	r1, #24
 80065c4:	31ff      	adds	r1, #255	; 0xff
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b25b      	sxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d115      	bne.n	80065fc <VL53L1_LoadPatch+0x1cc>
		comms_buffer[0] = 0x00;
 80065d0:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <VL53L1_LoadPatch+0x260>)
 80065d2:	208c      	movs	r0, #140	; 0x8c
 80065d4:	0040      	lsls	r0, r0, #1
 80065d6:	181b      	adds	r3, r3, r0
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80065de:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <VL53L1_LoadPatch+0x260>)
 80065e0:	181b      	adds	r3, r3, r0
 80065e2:	19db      	adds	r3, r3, r7
 80065e4:	2207      	movs	r2, #7
 80065e6:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80065e8:	187c      	adds	r4, r7, r1
 80065ea:	230c      	movs	r3, #12
 80065ec:	18fa      	adds	r2, r7, r3
 80065ee:	492b      	ldr	r1, [pc, #172]	; (800669c <VL53L1_LoadPatch+0x26c>)
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	2302      	movs	r3, #2
 80065f4:	f004 fc78 	bl	800aee8 <VL53L1_WriteMulti>
 80065f8:	0003      	movs	r3, r0
 80065fa:	7023      	strb	r3, [r4, #0]
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80065fc:	2118      	movs	r1, #24
 80065fe:	31ff      	adds	r1, #255	; 0xff
 8006600:	187b      	adds	r3, r7, r1
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d115      	bne.n	8006636 <VL53L1_LoadPatch+0x206>
		comms_buffer[0] = 0x00;
 800660a:	4b21      	ldr	r3, [pc, #132]	; (8006690 <VL53L1_LoadPatch+0x260>)
 800660c:	208c      	movs	r0, #140	; 0x8c
 800660e:	0040      	lsls	r0, r0, #1
 8006610:	181b      	adds	r3, r3, r0
 8006612:	19db      	adds	r3, r3, r7
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <VL53L1_LoadPatch+0x260>)
 800661a:	181b      	adds	r3, r3, r0
 800661c:	19db      	adds	r3, r3, r7
 800661e:	2207      	movs	r2, #7
 8006620:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8006622:	187c      	adds	r4, r7, r1
 8006624:	230c      	movs	r3, #12
 8006626:	18fa      	adds	r2, r7, r3
 8006628:	491d      	ldr	r1, [pc, #116]	; (80066a0 <VL53L1_LoadPatch+0x270>)
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	2302      	movs	r3, #2
 800662e:	f004 fc5b 	bl	800aee8 <VL53L1_WriteMulti>
 8006632:	0003      	movs	r3, r0
 8006634:	7023      	strb	r3, [r4, #0]
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8006636:	2218      	movs	r2, #24
 8006638:	32ff      	adds	r2, #255	; 0xff
 800663a:	18bb      	adds	r3, r7, r2
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b25b      	sxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <VL53L1_LoadPatch+0x228>
		status = VL53L1_WrByte(
 8006644:	18bc      	adds	r4, r7, r2
 8006646:	238e      	movs	r3, #142	; 0x8e
 8006648:	00d9      	lsls	r1, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	0018      	movs	r0, r3
 8006650:	f004 fcd4 	bl	800affc <VL53L1_WrByte>
 8006654:	0003      	movs	r3, r0
 8006656:	7023      	strb	r3, [r4, #0]
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8006658:	2218      	movs	r2, #24
 800665a:	32ff      	adds	r2, #255	; 0xff
 800665c:	18bb      	adds	r3, r7, r2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b25b      	sxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <VL53L1_LoadPatch+0x248>
		status = VL53L1_WrByte(
 8006666:	18bc      	adds	r4, r7, r2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	2185      	movs	r1, #133	; 0x85
 800666e:	0018      	movs	r0, r3
 8006670:	f004 fcc4 	bl	800affc <VL53L1_WrByte>
 8006674:	0003      	movs	r3, r0
 8006676:	7023      	strb	r3, [r4, #0]
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8006678:	2318      	movs	r3, #24
 800667a:	33ff      	adds	r3, #255	; 0xff
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b25b      	sxtb	r3, r3
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b047      	add	sp, #284	; 0x11c
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	20000010 	.word	0x20000010
 8006690:	fffffef4 	.word	0xfffffef4
 8006694:	00000476 	.word	0x00000476
 8006698:	00000496 	.word	0x00000496
 800669c:	00000472 	.word	0x00000472
 80066a0:	00000474 	.word	0x00000474

080066a4 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b089      	sub	sp, #36	; 0x24
 80066a8:	af04      	add	r7, sp, #16
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	000a      	movs	r2, r1
 80066ae:	1cfb      	adds	r3, r7, #3
 80066b0:	701a      	strb	r2, [r3, #0]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80066b2:	240f      	movs	r4, #15
 80066b4:	193b      	adds	r3, r7, r4
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t    *pdev =
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2162      	movs	r1, #98	; 0x62
 80066c2:	0018      	movs	r0, r3
 80066c4:	f002 fa96 	bl	8008bf4 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2201      	movs	r2, #1
 80066d2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2201      	movs	r2, #1
 80066de:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2201      	movs	r2, #1
 80066e4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	22fa      	movs	r2, #250	; 0xfa
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	22fa      	movs	r2, #250	; 0xfa
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a44      	ldr	r2, [pc, #272]	; (800680c <VL53L1_data_init+0x168>)
 80066fa:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2264      	movs	r2, #100	; 0x64
 8006700:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	22a0      	movs	r2, #160	; 0xa0
 8006706:	0112      	lsls	r2, r2, #4
 8006708:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2221      	movs	r2, #33	; 0x21
 800670e:	2100      	movs	r1, #0
 8006710:	5499      	strb	r1, [r3, r2]

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	229c      	movs	r2, #156	; 0x9c
 8006716:	493e      	ldr	r1, [pc, #248]	; (8006810 <VL53L1_data_init+0x16c>)
 8006718:	5299      	strh	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	0018      	movs	r0, r3
 800671e:	f002 fa4d 	bl	8008bbc <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006722:	1cfb      	adds	r3, r7, #3
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <VL53L1_data_init+0x9e>
 800672a:	193b      	adds	r3, r7, r4
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b25b      	sxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <VL53L1_data_init+0x9e>
			status = VL53L1_read_p2p_data(Dev);
 8006734:	193c      	adds	r4, r7, r4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f000 f86b 	bl	8006814 <VL53L1_read_p2p_data>
 800673e:	0003      	movs	r3, r0
 8006740:	7023      	strb	r3, [r4, #0]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3311      	adds	r3, #17
 8006746:	33ff      	adds	r3, #255	; 0xff
 8006748:	250f      	movs	r5, #15
 800674a:	197c      	adds	r4, r7, r5
 800674c:	0018      	movs	r0, r3
 800674e:	f001 fd07 	bl	8008160 <VL53L1_init_refspadchar_config_struct>
 8006752:	0003      	movs	r3, r0
 8006754:	7023      	strb	r3, [r4, #0]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	3321      	adds	r3, #33	; 0x21
 800675a:	33ff      	adds	r3, #255	; 0xff
 800675c:	197c      	adds	r4, r7, r5
 800675e:	0018      	movs	r0, r3
 8006760:	f001 fd24 	bl	80081ac <VL53L1_init_ssc_config_struct>
 8006764:	0003      	movs	r3, r0
 8006766:	7023      	strb	r3, [r4, #0]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	3342      	adds	r3, #66	; 0x42
 800676c:	001a      	movs	r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	332d      	adds	r3, #45	; 0x2d
 8006772:	33ff      	adds	r3, #255	; 0xff
 8006774:	197c      	adds	r4, r7, r5
 8006776:	0019      	movs	r1, r3
 8006778:	0010      	movs	r0, r2
 800677a:	f001 fd3b 	bl	80081f4 <VL53L1_init_xtalk_config_struct>
 800677e:	0003      	movs	r3, r0
 8006780:	7023      	strb	r3, [r4, #0]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3345      	adds	r3, #69	; 0x45
 8006786:	33ff      	adds	r3, #255	; 0xff
 8006788:	197c      	adds	r4, r7, r5
 800678a:	0018      	movs	r0, r3
 800678c:	f001 fd9a 	bl	80082c4 <VL53L1_init_offset_cal_config_struct>
 8006790:	0003      	movs	r3, r0
 8006792:	7023      	strb	r3, [r4, #0]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	33a4      	adds	r3, #164	; 0xa4
 8006798:	197c      	adds	r4, r7, r5
 800679a:	0018      	movs	r0, r3
 800679c:	f001 fdba 	bl	8008314 <VL53L1_init_tuning_parm_storage_struct>
 80067a0:	0003      	movs	r3, r0
 80067a2:	7023      	strb	r3, [r4, #0]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 80067a4:	197c      	adds	r4, r7, r5
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2120      	movs	r1, #32
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 fd0e 	bl	80071cc <VL53L1_set_vhv_loopbound>
 80067b0:	0003      	movs	r3, r0
 80067b2:	7023      	strb	r3, [r4, #0]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 80067b4:	0028      	movs	r0, r5
 80067b6:	197b      	adds	r3, r7, r5
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d118      	bne.n	80067f2 <VL53L1_data_init+0x14e>
		status = VL53L1_set_preset_mode(
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	785d      	ldrb	r5, [r3, #1]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	8b1e      	ldrh	r6, [r3, #24]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	469c      	mov	ip, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6919      	ldr	r1, [r3, #16]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	183c      	adds	r4, r7, r0
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	9302      	str	r3, [sp, #8]
 80067e0:	9101      	str	r1, [sp, #4]
 80067e2:	9200      	str	r2, [sp, #0]
 80067e4:	4663      	mov	r3, ip
 80067e6:	0032      	movs	r2, r6
 80067e8:	0029      	movs	r1, r5
 80067ea:	f000 fb2b 	bl	8006e44 <VL53L1_set_preset_mode>
 80067ee:	0003      	movs	r3, r0
 80067f0:	7023      	strb	r3, [r4, #0]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f003 f851 	bl	800989c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80067fa:	230f      	movs	r3, #15
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b25b      	sxtb	r3, r3
}
 8006802:	0018      	movs	r0, r3
 8006804:	46bd      	mov	sp, r7
 8006806:	b005      	add	sp, #20
 8006808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	000032c8 	.word	0x000032c8
 8006810:	000007db 	.word	0x000007db

08006814 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800681c:	210f      	movs	r1, #15
 800681e:	187b      	adds	r3, r7, r1
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8006828:	187b      	adds	r3, r7, r1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b25b      	sxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <VL53L1_read_p2p_data+0x36>
		status = VL53L1_get_static_nvm_managed(
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	3359      	adds	r3, #89	; 0x59
 8006836:	33ff      	adds	r3, #255	; 0xff
 8006838:	001a      	movs	r2, r3
 800683a:	187c      	adds	r4, r7, r1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	0011      	movs	r1, r2
 8006840:	0018      	movs	r0, r3
 8006842:	f003 fa04 	bl	8009c4e <VL53L1_get_static_nvm_managed>
 8006846:	0003      	movs	r3, r0
 8006848:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800684a:	210f      	movs	r1, #15
 800684c:	187b      	adds	r3, r7, r1
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	b25b      	sxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <VL53L1_read_p2p_data+0x58>
		status = VL53L1_get_customer_nvm_managed(
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3342      	adds	r3, #66	; 0x42
 800685a:	001a      	movs	r2, r3
 800685c:	187c      	adds	r4, r7, r1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	0011      	movs	r1, r2
 8006862:	0018      	movs	r0, r3
 8006864:	f003 fb49 	bl	8009efa <VL53L1_get_customer_nvm_managed>
 8006868:	0003      	movs	r3, r0
 800686a:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800686c:	210f      	movs	r1, #15
 800686e:	187b      	adds	r3, r7, r1
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b25b      	sxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11b      	bne.n	80068b0 <VL53L1_read_p2p_data+0x9c>

		status = VL53L1_get_nvm_copy_data(
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	33fb      	adds	r3, #251	; 0xfb
 800687c:	33ff      	adds	r3, #255	; 0xff
 800687e:	001a      	movs	r2, r3
 8006880:	000d      	movs	r5, r1
 8006882:	187c      	adds	r4, r7, r1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0011      	movs	r1, r2
 8006888:	0018      	movs	r0, r3
 800688a:	f004 fa3e 	bl	800ad0a <VL53L1_get_nvm_copy_data>
 800688e:	0003      	movs	r3, r0
 8006890:	7023      	strb	r3, [r4, #0]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8006892:	197b      	adds	r3, r7, r5
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b25b      	sxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <VL53L1_read_p2p_data+0x9c>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	33fb      	adds	r3, #251	; 0xfb
 80068a0:	33ff      	adds	r3, #255	; 0xff
 80068a2:	001a      	movs	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	33f0      	adds	r3, #240	; 0xf0
 80068a8:	0019      	movs	r1, r3
 80068aa:	0010      	movs	r0, r2
 80068ac:	f002 fb1c 	bl	8008ee8 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80068b0:	210f      	movs	r1, #15
 80068b2:	187b      	adds	r3, r7, r1
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_RdWord(
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	22ad      	movs	r2, #173	; 0xad
 80068c0:	0092      	lsls	r2, r2, #2
 80068c2:	189a      	adds	r2, r3, r2
 80068c4:	187c      	adds	r4, r7, r1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	21de      	movs	r1, #222	; 0xde
 80068ca:	0018      	movs	r0, r3
 80068cc:	f004 fc12 	bl	800b0f4 <VL53L1_RdWord>
 80068d0:	0003      	movs	r3, r0
 80068d2:	7023      	strb	r3, [r4, #0]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	23af      	movs	r3, #175	; 0xaf
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	5ad2      	ldrh	r2, [r2, r3]
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	015b      	lsls	r3, r3, #5
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d204      	bcs.n	80068ee <VL53L1_read_p2p_data+0xda>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	23af      	movs	r3, #175	; 0xaf
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	491a      	ldr	r1, [pc, #104]	; (8006954 <VL53L1_read_p2p_data+0x140>)
 80068ec:	52d1      	strh	r1, [r2, r3]

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 80068ee:	210f      	movs	r1, #15
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <VL53L1_read_p2p_data+0xfc>
		status =
			VL53L1_get_mode_mitigation_roi(
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	339e      	adds	r3, #158	; 0x9e
 80068fe:	001a      	movs	r2, r3
 8006900:	187c      	adds	r4, r7, r1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0011      	movs	r1, r2
 8006906:	0018      	movs	r0, r3
 8006908:	f000 f9ec 	bl	8006ce4 <VL53L1_get_mode_mitigation_roi>
 800690c:	0003      	movs	r3, r0
 800690e:	7023      	strb	r3, [r4, #0]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	22a2      	movs	r2, #162	; 0xa2
 8006914:	5c9b      	ldrb	r3, [r3, r2]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d114      	bne.n	8006944 <VL53L1_read_p2p_data+0x130>
		pdev->optical_centre.y_centre == 0) {
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	22a3      	movs	r2, #163	; 0xa3
 800691e:	5c9b      	ldrb	r3, [r3, r2]
	if (pdev->optical_centre.x_centre == 0 &&
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10f      	bne.n	8006944 <VL53L1_read_p2p_data+0x130>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	229e      	movs	r2, #158	; 0x9e
 8006928:	5c9b      	ldrb	r3, [r3, r2]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	b2d9      	uxtb	r1, r3
		pdev->optical_centre.x_centre =
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	22a2      	movs	r2, #162	; 0xa2
 8006932:	5499      	strb	r1, [r3, r2]
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	229f      	movs	r2, #159	; 0x9f
 8006938:	5c9b      	ldrb	r3, [r3, r2]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	b2d9      	uxtb	r1, r3
		pdev->optical_centre.y_centre =
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	22a3      	movs	r2, #163	; 0xa3
 8006942:	5499      	strb	r1, [r3, r2]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006944:	230f      	movs	r3, #15
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b25b      	sxtb	r3, r3
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b004      	add	sp, #16
 8006952:	bdb0      	pop	{r4, r5, r7, pc}
 8006954:	ffffbccc 	.word	0xffffbccc

08006958 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006962:	210f      	movs	r1, #15
 8006964:	187b      	adds	r3, r7, r1
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	23ad      	movs	r3, #173	; 0xad
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	5ad3      	ldrh	r3, [r2, r3]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <VL53L1_set_inter_measurement_period_ms+0x28>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800697a:	187b      	adds	r3, r7, r1
 800697c:	22f1      	movs	r2, #241	; 0xf1
 800697e:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8006980:	230f      	movs	r3, #15
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b25b      	sxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <VL53L1_set_inter_measurement_period_ms+0x52>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	23ad      	movs	r3, #173	; 0xad
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	5ad3      	ldrh	r3, [r2, r3]
 800699a:	001a      	movs	r2, r3
			inter_measurement_period_ms *
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	4353      	muls	r3, r2
 80069a0:	0019      	movs	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	23d6      	movs	r3, #214	; 0xd6
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	50d1      	str	r1, [r2, r3]
	}

	LOG_FUNCTION_END(status);

	return status;
 80069aa:	230f      	movs	r3, #15
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b25b      	sxtb	r3, r3
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b004      	add	sp, #16
 80069b8:	bd80      	pop	{r7, pc}

080069ba <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069c4:	210f      	movs	r1, #15
 80069c6:	187b      	adds	r3, r7, r1
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	23ad      	movs	r3, #173	; 0xad
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	5ad3      	ldrh	r3, [r2, r3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <VL53L1_get_inter_measurement_period_ms+0x28>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	22f1      	movs	r2, #241	; 0xf1
 80069e0:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE)
 80069e2:	230f      	movs	r3, #15
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b25b      	sxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10e      	bne.n	8006a0c <VL53L1_get_inter_measurement_period_ms+0x52>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	23d6      	movs	r3, #214	; 0xd6
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	58d0      	ldr	r0, [r2, r3]
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	23ad      	movs	r3, #173	; 0xad
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	5ad3      	ldrh	r3, [r2, r3]
			pdev->tim_cfg.system__intermeasurement_period /
 80069fe:	0019      	movs	r1, r3
 8006a00:	f7f9 fb9c 	bl	800013c <__udivsi3>
 8006a04:	0003      	movs	r3, r0
 8006a06:	001a      	movs	r2, r3
		*pinter_measurement_period_ms = \
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8006a0c:	230f      	movs	r3, #15
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b25b      	sxtb	r3, r3
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8006a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a2a:	2117      	movs	r1, #23
 8006a2c:	187b      	adds	r3, r7, r1
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	23af      	movs	r3, #175	; 0xaf
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	5ad3      	ldrh	r3, [r2, r3]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <VL53L1_set_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	22f1      	movs	r2, #241	; 0xf1
 8006a46:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8006a48:	2117      	movs	r1, #23
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11e      	bne.n	8006a92 <VL53L1_set_timeouts_us+0x76>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	23af      	movs	r3, #175	; 0xaf
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	5ad6      	ldrh	r6, [r2, r3]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3385      	adds	r3, #133	; 0x85
 8006a72:	33ff      	adds	r3, #255	; 0xff
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	329d      	adds	r2, #157	; 0x9d
 8006a78:	32ff      	adds	r2, #255	; 0xff
 8006a7a:	187c      	adds	r4, r7, r1
 8006a7c:	683d      	ldr	r5, [r7, #0]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	9201      	str	r2, [sp, #4]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	0033      	movs	r3, r6
 8006a88:	002a      	movs	r2, r5
 8006a8a:	f002 fe02 	bl	8009692 <VL53L1_calc_timeout_register_values>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	7023      	strb	r3, [r4, #0]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a92:	2317      	movs	r3, #23
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b25b      	sxtb	r3, r3
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b007      	add	sp, #28
 8006aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006aa2 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b089      	sub	sp, #36	; 0x24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ab0:	211f      	movs	r1, #31
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8006ac0:	2312      	movs	r3, #18
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	23af      	movs	r3, #175	; 0xaf
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	5ad3      	ldrh	r3, [r2, r3]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <VL53L1_get_timeouts_us+0x38>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	22f1      	movs	r2, #241	; 0xf1
 8006ad8:	701a      	strb	r2, [r3, #0]

	if (status == VL53L1_ERROR_NONE) {
 8006ada:	231f      	movs	r3, #31
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b25b      	sxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d160      	bne.n	8006ba8 <VL53L1_get_timeouts_us+0x106>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	23af      	movs	r3, #175	; 0xaf
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	5ad0      	ldrh	r0, [r2, r3]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	23d1      	movs	r3, #209	; 0xd1
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	5cd3      	ldrb	r3, [r2, r3]
 8006af6:	0019      	movs	r1, r3
 8006af8:	f002 fc3e 	bl	8009378 <VL53L1_calc_macro_period_us>
 8006afc:	0003      	movs	r3, r0
 8006afe:	617b      	str	r3, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	238c      	movs	r3, #140	; 0x8c
 8006b04:	33ff      	adds	r3, #255	; 0xff
 8006b06:	5cd3      	ldrb	r3, [r2, r3]
			VL53L1_calc_timeout_us(
 8006b08:	001a      	movs	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	0010      	movs	r0, r2
 8006b10:	f002 fd1b 	bl	800954a <VL53L1_calc_timeout_us>
 8006b14:	0002      	movs	r2, r0
		*pphasecal_config_timeout_us =
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	23ce      	movs	r3, #206	; 0xce
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	5cd2      	ldrb	r2, [r2, r3]
		timeout_encoded =
 8006b22:	2012      	movs	r0, #18
 8006b24:	183b      	adds	r3, r7, r0
 8006b26:	801a      	strh	r2, [r3, #0]
		timeout_encoded = (timeout_encoded << 8) +
 8006b28:	183b      	adds	r3, r7, r0
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	b299      	uxth	r1, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	239e      	movs	r3, #158	; 0x9e
 8006b34:	33ff      	adds	r3, #255	; 0xff
 8006b36:	5cd3      	ldrb	r3, [r2, r3]
 8006b38:	b29a      	uxth	r2, r3
		timeout_encoded = (timeout_encoded << 8) +
 8006b3a:	183b      	adds	r3, r7, r0
 8006b3c:	188a      	adds	r2, r1, r2
 8006b3e:	801a      	strh	r2, [r3, #0]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	0004      	movs	r4, r0
 8006b44:	183b      	adds	r3, r7, r0
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	0011      	movs	r1, r2
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f002 fd33 	bl	80095b6 <VL53L1_calc_decoded_timeout_us>
 8006b50:	0002      	movs	r2, r0
		*pmm_config_timeout_us =
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	23d0      	movs	r3, #208	; 0xd0
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	5cd2      	ldrb	r2, [r2, r3]
		timeout_encoded =
 8006b5e:	0020      	movs	r0, r4
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	801a      	strh	r2, [r3, #0]
		timeout_encoded = (timeout_encoded << 8) +
 8006b64:	183b      	adds	r3, r7, r0
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	b299      	uxth	r1, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	23a2      	movs	r3, #162	; 0xa2
 8006b70:	33ff      	adds	r3, #255	; 0xff
 8006b72:	5cd3      	ldrb	r3, [r2, r3]
 8006b74:	b29a      	uxth	r2, r3
		timeout_encoded = (timeout_encoded << 8) +
 8006b76:	183b      	adds	r3, r7, r0
 8006b78:	188a      	adds	r2, r1, r2
 8006b7a:	801a      	strh	r2, [r3, #0]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	183b      	adds	r3, r7, r0
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	0011      	movs	r1, r2
 8006b84:	0018      	movs	r0, r3
 8006b86:	f002 fd16 	bl	80095b6 <VL53L1_calc_decoded_timeout_us>
 8006b8a:	0002      	movs	r2, r0
		*prange_config_timeout_us =
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8006ba8:	231f      	movs	r3, #31
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b25b      	sxtb	r3, r3
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b009      	add	sp, #36	; 0x24
 8006bb6:	bd90      	pop	{r4, r7, pc}

08006bb8 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	200b      	movs	r0, #11
 8006bc4:	183b      	adds	r3, r7, r0
 8006bc6:	1c0a      	adds	r2, r1, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006bca:	2317      	movs	r3, #23
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8006bd6:	2116      	movs	r1, #22
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	2201      	movs	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8006bde:	183b      	adds	r3, r7, r0
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	d824      	bhi.n	8006c30 <VL53L1_get_sequence_config_bit+0x78>

		if (bit_id > 0) {
 8006be6:	183b      	adds	r3, r7, r0
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <VL53L1_get_sequence_config_bit+0x42>
			bit_mask  = 0x01 << bit_id;
 8006bee:	183b      	adds	r3, r7, r0
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	187b      	adds	r3, r7, r1
 8006bf8:	701a      	strb	r2, [r3, #0]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	23c6      	movs	r3, #198	; 0xc6
 8006bfe:	33ff      	adds	r3, #255	; 0xff
 8006c00:	5cd3      	ldrb	r3, [r2, r3]
		*pvalue =
 8006c02:	2216      	movs	r2, #22
 8006c04:	18ba      	adds	r2, r7, r2
 8006c06:	7812      	ldrb	r2, [r2, #0]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8006c10:	210b      	movs	r1, #11
 8006c12:	187b      	adds	r3, r7, r1
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <VL53L1_get_sequence_config_bit+0x80>
			*pvalue  = *pvalue >> bit_id;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	001a      	movs	r2, r3
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	411a      	asrs	r2, r3
 8006c26:	0013      	movs	r3, r2
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e003      	b.n	8006c38 <VL53L1_get_sequence_config_bit+0x80>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006c30:	2317      	movs	r3, #23
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	22fc      	movs	r2, #252	; 0xfc
 8006c36:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8006c38:	2317      	movs	r3, #23
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b25b      	sxtb	r3, r3
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b006      	add	sp, #24
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c52:	240f      	movs	r4, #15
 8006c54:	193b      	adds	r3, r7, r4
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	7858      	ldrb	r0, [r3, #1]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	7819      	ldrb	r1, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	33c4      	adds	r3, #196	; 0xc4
 8006c6a:	33ff      	adds	r3, #255	; 0xff
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	f002 fdb6 	bl	80097de <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	7898      	ldrb	r0, [r3, #2]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	78d9      	ldrb	r1, [r3, #3]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	33c5      	adds	r3, #197	; 0xc5
 8006c7e:	33ff      	adds	r3, #255	; 0xff
 8006c80:	001a      	movs	r2, r3
 8006c82:	f002 fdf2 	bl	800986a <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8006c86:	193b      	adds	r3, r7, r4
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b25b      	sxtb	r3, r3
}
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b005      	add	sp, #20
 8006c92:	bd90      	pop	{r4, r7, pc}

08006c94 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006c9e:	240f      	movs	r4, #15
 8006ca0:	193b      	adds	r3, r7, r4
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	23c4      	movs	r3, #196	; 0xc4
 8006cae:	33ff      	adds	r3, #255	; 0xff
 8006cb0:	5cd0      	ldrb	r0, [r2, r3]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	0019      	movs	r1, r3
 8006cba:	f002 fed0 	bl	8009a5e <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	23e2      	movs	r3, #226	; 0xe2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	5cd0      	ldrb	r0, [r2, r3]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	1c99      	adds	r1, r3, #2
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	001a      	movs	r2, r3
 8006cd0:	f002 fdb1 	bl	8009836 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8006cd4:	193b      	adds	r3, r7, r4
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	b25b      	sxtb	r3, r3
}
 8006cda:	0018      	movs	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b005      	add	sp, #20
 8006ce0:	bd90      	pop	{r4, r7, pc}
	...

08006ce4 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cee:	2317      	movs	r3, #23
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8006cfa:	210e      	movs	r1, #14
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
	uint8_t  y       = 0;
 8006d02:	200d      	movs	r0, #13
 8006d04:	183b      	adds	r3, r7, r0
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
	uint8_t  xy_size = 0;
 8006d0a:	240f      	movs	r4, #15
 8006d0c:	193b      	adds	r3, r7, r4
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <VL53L1_get_mode_mitigation_roi+0x88>)
 8006d16:	5c9b      	ldrb	r3, [r3, r2]
 8006d18:	000d      	movs	r5, r1
 8006d1a:	187a      	adds	r2, r7, r1
 8006d1c:	0006      	movs	r6, r0
 8006d1e:	1839      	adds	r1, r7, r0
 8006d20:	0018      	movs	r0, r3
 8006d22:	f002 fe9c 	bl	8009a5e <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8006d26:	197b      	adds	r3, r7, r5
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8006d2e:	19bb      	adds	r3, r7, r6
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8006d36:	193b      	adds	r3, r7, r4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	490d      	ldr	r1, [pc, #52]	; (8006d70 <VL53L1_get_mode_mitigation_roi+0x8c>)
 8006d3c:	5c52      	ldrb	r2, [r2, r1]
 8006d3e:	701a      	strb	r2, [r3, #0]

	pmm_roi->height = xy_size >> 4;
 8006d40:	193b      	adds	r3, r7, r4
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8006d4c:	193b      	adds	r3, r7, r4
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	220f      	movs	r2, #15
 8006d52:	4013      	ands	r3, r2
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8006d5a:	2317      	movs	r3, #23
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b25b      	sxtb	r3, r3
}
 8006d62:	0018      	movs	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b007      	add	sp, #28
 8006d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	0000022a 	.word	0x0000022a
 8006d70:	0000022b 	.word	0x0000022b

08006d74 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	200b      	movs	r0, #11
 8006d82:	183b      	adds	r3, r7, r0
 8006d84:	1c0a      	adds	r2, r1, #0
 8006d86:	701a      	strb	r2, [r3, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d88:	2317      	movs	r3, #23
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8006d94:	183b      	adds	r3, r7, r0
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b26      	cmp	r3, #38	; 0x26
 8006d9a:	d843      	bhi.n	8006e24 <VL53L1_get_preset_mode_timing_cfg+0xb0>
 8006d9c:	009a      	lsls	r2, r3, #2
 8006d9e:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <VL53L1_get_preset_mode_timing_cfg+0xcc>)
 8006da0:	18d3      	adds	r3, r2, r3
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	469f      	mov	pc, r3
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	22ca      	movs	r2, #202	; 0xca
 8006daa:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	22d0      	movs	r2, #208	; 0xd0
 8006db4:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	22d8      	movs	r2, #216	; 0xd8
 8006dbe:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	22e4      	movs	r2, #228	; 0xe4
 8006dc8:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	601a      	str	r2, [r3, #0]
	break;
 8006dce:	e02e      	b.n	8006e2e <VL53L1_get_preset_mode_timing_cfg+0xba>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	22cc      	movs	r2, #204	; 0xcc
 8006dd4:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	22d4      	movs	r2, #212	; 0xd4
 8006dde:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	22dc      	movs	r2, #220	; 0xdc
 8006de8:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	22e8      	movs	r2, #232	; 0xe8
 8006df2:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	601a      	str	r2, [r3, #0]
	break;
 8006df8:	e019      	b.n	8006e2e <VL53L1_get_preset_mode_timing_cfg+0xba>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	22cc      	movs	r2, #204	; 0xcc
 8006dfe:	5a9a      	ldrh	r2, [r3, r2]
		*pdss_config__target_total_rate_mcps =
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	22d4      	movs	r2, #212	; 0xd4
 8006e08:	589a      	ldr	r2, [r3, r2]
		*pphasecal_config_timeout_us =
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	22e0      	movs	r2, #224	; 0xe0
 8006e12:	589a      	ldr	r2, [r3, r2]
		*pmm_config_timeout_us =
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	22ec      	movs	r2, #236	; 0xec
 8006e1c:	589a      	ldr	r2, [r3, r2]
		*prange_config_timeout_us =
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	601a      	str	r2, [r3, #0]
	break;
 8006e22:	e004      	b.n	8006e2e <VL53L1_get_preset_mode_timing_cfg+0xba>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006e24:	2317      	movs	r3, #23
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	22fc      	movs	r2, #252	; 0xfc
 8006e2a:	701a      	strb	r2, [r3, #0]
		break;
 8006e2c:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(status);

	return status;
 8006e2e:	2317      	movs	r3, #23
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b25b      	sxtb	r3, r3
}
 8006e36:	0018      	movs	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b006      	add	sp, #24
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	0800e3f8 	.word	0x0800e3f8

08006e44 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8006e44:	b5b0      	push	{r4, r5, r7, lr}
 8006e46:	b092      	sub	sp, #72	; 0x48
 8006e48:	af04      	add	r7, sp, #16
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	0008      	movs	r0, r1
 8006e4e:	0011      	movs	r1, r2
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	240b      	movs	r4, #11
 8006e54:	193b      	adds	r3, r7, r4
 8006e56:	1c02      	adds	r2, r0, #0
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	18fb      	adds	r3, r7, r3
 8006e5e:	1c0a      	adds	r2, r1, #0
 8006e60:	801a      	strh	r2, [r3, #0]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e62:	2337      	movs	r3, #55	; 0x37
 8006e64:	18fb      	adds	r3, r7, r3
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev =
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	3365      	adds	r3, #101	; 0x65
 8006e72:	33ff      	adds	r3, #255	; 0xff
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	3385      	adds	r3, #133	; 0x85
 8006e7a:	33ff      	adds	r3, #255	; 0xff
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	339d      	adds	r3, #157	; 0x9d
 8006e82:	33ff      	adds	r3, #255	; 0xff
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	33b5      	adds	r3, #181	; 0xb5
 8006e8a:	33ff      	adds	r3, #255	; 0xff
 8006e8c:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	33c9      	adds	r3, #201	; 0xc9
 8006e92:	33ff      	adds	r3, #255	; 0xff
 8006e94:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	33a4      	adds	r3, #164	; 0xa4
 8006e9a:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	22b9      	movs	r2, #185	; 0xb9
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	4694      	mov	ip, r2
 8006ea4:	4463      	add	r3, ip
 8006ea6:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	193a      	adds	r2, r7, r4
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eba:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ec0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2103      	movs	r1, #3
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f001 fe94 	bl	8008bf4 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8006ecc:	193b      	adds	r3, r7, r4
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b26      	cmp	r3, #38	; 0x26
 8006ed2:	d900      	bls.n	8006ed6 <VL53L1_set_preset_mode+0x92>
 8006ed4:	e0da      	b.n	800708c <VL53L1_set_preset_mode+0x248>
 8006ed6:	009a      	lsls	r2, r3, #2
 8006ed8:	4b89      	ldr	r3, [pc, #548]	; (8007100 <VL53L1_set_preset_mode+0x2bc>)
 8006eda:	18d3      	adds	r3, r2, r3
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	469f      	mov	pc, r3

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8006ee0:	2337      	movs	r3, #55	; 0x37
 8006ee2:	18fc      	adds	r4, r7, r3
 8006ee4:	6a3d      	ldr	r5, [r7, #32]
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	002b      	movs	r3, r5
 8006ef6:	f001 faa3 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 8006efa:	0003      	movs	r3, r0
 8006efc:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006efe:	e0ca      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8006f00:	2337      	movs	r3, #55	; 0x37
 8006f02:	18fc      	adds	r4, r7, r3
 8006f04:	6a3d      	ldr	r5, [r7, #32]
 8006f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	002b      	movs	r3, r5
 8006f16:	f001 fbb3 	bl	8008680 <VL53L1_preset_mode_standard_ranging_short_range>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006f1e:	e0ba      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006f20:	2337      	movs	r3, #55	; 0x37
 8006f22:	18fc      	adds	r4, r7, r3
 8006f24:	6a3d      	ldr	r5, [r7, #32]
 8006f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	002b      	movs	r3, r5
 8006f36:	f001 fbeb 	bl	8008710 <VL53L1_preset_mode_standard_ranging_long_range>
 8006f3a:	0003      	movs	r3, r0
 8006f3c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006f3e:	e0aa      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8006f40:	2337      	movs	r3, #55	; 0x37
 8006f42:	18fc      	adds	r4, r7, r3
 8006f44:	6a3d      	ldr	r5, [r7, #32]
 8006f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	002b      	movs	r3, r5
 8006f56:	f001 fc23 	bl	80087a0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006f5e:	e09a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8006f60:	2337      	movs	r3, #55	; 0x37
 8006f62:	18fc      	adds	r4, r7, r3
 8006f64:	6a3d      	ldr	r5, [r7, #32]
 8006f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	002b      	movs	r3, r5
 8006f76:	f001 fc3f 	bl	80087f8 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006f7e:	e08a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8006f80:	2337      	movs	r3, #55	; 0x37
 8006f82:	18fc      	adds	r4, r7, r3
 8006f84:	6a3d      	ldr	r5, [r7, #32]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	002b      	movs	r3, r5
 8006f96:	f001 fc5b 	bl	8008850 <VL53L1_preset_mode_timed_ranging>
 8006f9a:	0003      	movs	r3, r0
 8006f9c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006f9e:	e07a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8006fa0:	2337      	movs	r3, #55	; 0x37
 8006fa2:	18fc      	adds	r4, r7, r3
 8006fa4:	6a3d      	ldr	r5, [r7, #32]
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	002b      	movs	r3, r5
 8006fb6:	f001 fc8c 	bl	80088d2 <VL53L1_preset_mode_timed_ranging_short_range>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006fbe:	e06a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8006fc0:	2337      	movs	r3, #55	; 0x37
 8006fc2:	18fc      	adds	r4, r7, r3
 8006fc4:	6a3d      	ldr	r5, [r7, #32]
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	002b      	movs	r3, r5
 8006fd6:	f001 fcbd 	bl	8008954 <VL53L1_preset_mode_timed_ranging_long_range>
 8006fda:	0003      	movs	r3, r0
 8006fdc:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006fde:	e05a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8006fe0:	2337      	movs	r3, #55	; 0x37
 8006fe2:	18fc      	adds	r4, r7, r3
 8006fe4:	6a3d      	ldr	r5, [r7, #32]
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	002b      	movs	r3, r5
 8006ff6:	f001 fdb8 	bl	8008b6a <VL53L1_preset_mode_olt>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006ffe:	e04a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8007000:	2337      	movs	r3, #55	; 0x37
 8007002:	18fc      	adds	r4, r7, r3
 8007004:	6a3d      	ldr	r5, [r7, #32]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	002b      	movs	r3, r5
 8007016:	f001 fd6b 	bl	8008af0 <VL53L1_preset_mode_singleshot_ranging>
 800701a:	0003      	movs	r3, r0
 800701c:	7023      	strb	r3, [r4, #0]
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800701e:	e03a      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8007020:	2337      	movs	r3, #55	; 0x37
 8007022:	18fc      	adds	r4, r7, r3
 8007024:	6a3d      	ldr	r5, [r7, #32]
 8007026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800702a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	9302      	str	r3, [sp, #8]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	002b      	movs	r3, r5
 800703a:	f001 fcfb 	bl	8008a34 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800703e:	0003      	movs	r3, r0
 8007040:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8007042:	e028      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8007044:	2337      	movs	r3, #55	; 0x37
 8007046:	18fc      	adds	r4, r7, r3
 8007048:	6a3d      	ldr	r5, [r7, #32]
 800704a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800704e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	9302      	str	r3, [sp, #8]
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	002b      	movs	r3, r5
 800705e:	f001 fcba 	bl	80089d6 <VL53L1_preset_mode_low_power_auto_ranging>
 8007062:	0003      	movs	r3, r0
 8007064:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8007066:	e016      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8007068:	2337      	movs	r3, #55	; 0x37
 800706a:	18fc      	adds	r4, r7, r3
 800706c:	6a3d      	ldr	r5, [r7, #32]
 800706e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	002b      	movs	r3, r5
 8007082:	f001 fd06 	bl	8008a92 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8007086:	0003      	movs	r3, r0
 8007088:	7023      	strb	r3, [r4, #0]
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800708a:	e004      	b.n	8007096 <VL53L1_set_preset_mode+0x252>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800708c:	2337      	movs	r3, #55	; 0x37
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	22fc      	movs	r2, #252	; 0xfc
 8007092:	701a      	strb	r2, [r3, #0]
		break;
 8007094:	46c0      	nop			; (mov r8, r8)

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8007096:	2337      	movs	r3, #55	; 0x37
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b25b      	sxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <VL53L1_set_preset_mode+0x270>

		pstatic->dss_config__target_total_rate_mcps =
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	2108      	movs	r1, #8
 80070a6:	187a      	adds	r2, r7, r1
 80070a8:	8812      	ldrh	r2, [r2, #0]
 80070aa:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	187a      	adds	r2, r7, r1
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80070b4:	2237      	movs	r2, #55	; 0x37
 80070b6:	18bb      	adds	r3, r7, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d108      	bne.n	80070d2 <VL53L1_set_preset_mode+0x28e>
		status =
			VL53L1_set_timeouts_us(
 80070c0:	18bc      	adds	r4, r7, r2
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff fca7 	bl	8006a1c <VL53L1_set_timeouts_us>
 80070ce:	0003      	movs	r3, r0
 80070d0:	7023      	strb	r3, [r4, #0]
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80070d2:	2237      	movs	r2, #55	; 0x37
 80070d4:	18bb      	adds	r3, r7, r2
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <VL53L1_set_preset_mode+0x2ac>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80070de:	18bc      	adds	r4, r7, r2
 80070e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	0011      	movs	r1, r2
 80070e6:	0018      	movs	r0, r3
 80070e8:	f7ff fc36 	bl	8006958 <VL53L1_set_inter_measurement_period_ms>
 80070ec:	0003      	movs	r3, r0
 80070ee:	7023      	strb	r3, [r4, #0]
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 80070f0:	2337      	movs	r3, #55	; 0x37
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b25b      	sxtb	r3, r3
}
 80070f8:	0018      	movs	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b00e      	add	sp, #56	; 0x38
 80070fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007100:	0800e494 	.word	0x0800e494

08007104 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800710e:	210f      	movs	r1, #15
 8007110:	187b      	adds	r3, r7, r1
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	23d3      	movs	r3, #211	; 0xd3
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	5ad2      	ldrh	r2, [r2, r3]
	*plite_sigma =
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007126:	187b      	adds	r3, r7, r1
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b25b      	sxtb	r3, r3

}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b004      	add	sp, #16
 8007132:	bd80      	pop	{r7, pc}

08007134 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	000a      	movs	r2, r1
 800713e:	1cbb      	adds	r3, r7, #2
 8007140:	801a      	strh	r2, [r3, #0]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007142:	200f      	movs	r0, #15
 8007144:	183b      	adds	r3, r7, r0
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	1cb9      	adds	r1, r7, #2
 8007152:	23d3      	movs	r3, #211	; 0xd3
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	8809      	ldrh	r1, [r1, #0]
 8007158:	52d1      	strh	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 800715a:	183b      	adds	r3, r7, r0
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b25b      	sxtb	r3, r3

}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b004      	add	sp, #16
 8007166:	bd80      	pop	{r7, pc}

08007168 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007172:	210f      	movs	r1, #15
 8007174:	187b      	adds	r3, r7, r1
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	23d4      	movs	r3, #212	; 0xd4
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	5ad2      	ldrh	r2, [r2, r3]
	*plite_mincountrate =
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b25b      	sxtb	r3, r3

}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b004      	add	sp, #16
 8007196:	bd80      	pop	{r7, pc}

08007198 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	000a      	movs	r2, r1
 80071a2:	1cbb      	adds	r3, r7, #2
 80071a4:	801a      	strh	r2, [r3, #0]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071a6:	200f      	movs	r0, #15
 80071a8:	183b      	adds	r3, r7, r0
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	1cb9      	adds	r1, r7, #2
 80071b6:	23d4      	movs	r3, #212	; 0xd4
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	8809      	ldrh	r1, [r1, #0]
 80071bc:	52d1      	strh	r1, [r2, r3]
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80071be:	183b      	adds	r3, r7, r0
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b25b      	sxtb	r3, r3

}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b004      	add	sp, #16
 80071ca:	bd80      	pop	{r7, pc}

080071cc <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	000a      	movs	r2, r1
 80071d6:	1cfb      	adds	r3, r7, #3
 80071d8:	701a      	strb	r2, [r3, #0]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071da:	200f      	movs	r0, #15
 80071dc:	183b      	adds	r3, r7, r0
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	23b0      	movs	r3, #176	; 0xb0
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	5cd3      	ldrb	r3, [r2, r3]
 80071ee:	2203      	movs	r2, #3
 80071f0:	4013      	ands	r3, r2
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	1cfb      	adds	r3, r7, #3
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	18d3      	adds	r3, r2, r3
 80071fe:	b2d9      	uxtb	r1, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	23b0      	movs	r3, #176	; 0xb0
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	54d1      	strb	r1, [r2, r3]
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8007208:	183b      	adds	r3, r7, r0
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b25b      	sxtb	r3, r3

}
 800720e:	0018      	movs	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	b004      	add	sp, #16
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8007218:	b5b0      	push	{r4, r5, r7, lr}
 800721a:	b0d0      	sub	sp, #320	; 0x140
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	0008      	movs	r0, r1
 8007222:	0011      	movs	r1, r2
 8007224:	4ba7      	ldr	r3, [pc, #668]	; (80074c4 <VL53L1_init_and_start_range+0x2ac>)
 8007226:	24a0      	movs	r4, #160	; 0xa0
 8007228:	0064      	lsls	r4, r4, #1
 800722a:	191b      	adds	r3, r3, r4
 800722c:	19db      	adds	r3, r3, r7
 800722e:	1c02      	adds	r2, r0, #0
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	4ba5      	ldr	r3, [pc, #660]	; (80074c8 <VL53L1_init_and_start_range+0x2b0>)
 8007234:	0020      	movs	r0, r4
 8007236:	181b      	adds	r3, r3, r0
 8007238:	19db      	adds	r3, r3, r7
 800723a:	1c0a      	adds	r2, r1, #0
 800723c:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	33ff      	adds	r3, #255	; 0xff
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2198      	movs	r1, #152	; 0x98
 800724c:	0049      	lsls	r1, r1, #1
 800724e:	187a      	adds	r2, r7, r1
 8007250:	6013      	str	r3, [r2, #0]

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8007252:	187b      	adds	r3, r7, r1
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3359      	adds	r3, #89	; 0x59
 8007258:	33ff      	adds	r3, #255	; 0xff
 800725a:	2296      	movs	r2, #150	; 0x96
 800725c:	0052      	lsls	r2, r2, #1
 800725e:	18ba      	adds	r2, r7, r2
 8007260:	6013      	str	r3, [r2, #0]
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8007262:	187b      	adds	r3, r7, r1
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3342      	adds	r3, #66	; 0x42
 8007268:	2294      	movs	r2, #148	; 0x94
 800726a:	0052      	lsls	r2, r2, #1
 800726c:	18ba      	adds	r2, r7, r2
 800726e:	6013      	str	r3, [r2, #0]
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8007270:	187b      	adds	r3, r7, r1
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3365      	adds	r3, #101	; 0x65
 8007276:	33ff      	adds	r3, #255	; 0xff
 8007278:	2292      	movs	r2, #146	; 0x92
 800727a:	0052      	lsls	r2, r2, #1
 800727c:	18ba      	adds	r2, r7, r2
 800727e:	6013      	str	r3, [r2, #0]
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8007280:	187b      	adds	r3, r7, r1
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3385      	adds	r3, #133	; 0x85
 8007286:	33ff      	adds	r3, #255	; 0xff
 8007288:	2290      	movs	r2, #144	; 0x90
 800728a:	0052      	lsls	r2, r2, #1
 800728c:	18ba      	adds	r2, r7, r2
 800728e:	6013      	str	r3, [r2, #0]
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8007290:	187b      	adds	r3, r7, r1
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	339d      	adds	r3, #157	; 0x9d
 8007296:	33ff      	adds	r3, #255	; 0xff
 8007298:	228e      	movs	r2, #142	; 0x8e
 800729a:	0052      	lsls	r2, r2, #1
 800729c:	18ba      	adds	r2, r7, r2
 800729e:	6013      	str	r3, [r2, #0]
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	33b5      	adds	r3, #181	; 0xb5
 80072a6:	33ff      	adds	r3, #255	; 0xff
 80072a8:	228c      	movs	r2, #140	; 0x8c
 80072aa:	0052      	lsls	r2, r2, #1
 80072ac:	18ba      	adds	r2, r7, r2
 80072ae:	6013      	str	r3, [r2, #0]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	33c9      	adds	r3, #201	; 0xc9
 80072b6:	33ff      	adds	r3, #255	; 0xff
 80072b8:	248a      	movs	r4, #138	; 0x8a
 80072ba:	0064      	lsls	r4, r4, #1
 80072bc:	193a      	adds	r2, r7, r4
 80072be:	6013      	str	r3, [r2, #0]

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	332c      	adds	r3, #44	; 0x2c
 80072c6:	2288      	movs	r2, #136	; 0x88
 80072c8:	0052      	lsls	r2, r2, #1
 80072ca:	18ba      	adds	r2, r7, r2
 80072cc:	6013      	str	r3, [r2, #0]

	uint8_t  *pbuffer                   = &buffer[0];
 80072ce:	230c      	movs	r3, #12
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	229c      	movs	r2, #156	; 0x9c
 80072d4:	0052      	lsls	r2, r2, #1
 80072d6:	18ba      	adds	r2, r7, r2
 80072d8:	6013      	str	r3, [r2, #0]
	uint16_t i                          = 0;
 80072da:	239b      	movs	r3, #155	; 0x9b
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	2200      	movs	r2, #0
 80072e2:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_index                  = 0;
 80072e4:	239a      	movs	r3, #154	; 0x9a
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	2200      	movs	r2, #0
 80072ec:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_offset_bytes    = 0;
 80072ee:	2387      	movs	r3, #135	; 0x87
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	2200      	movs	r2, #0
 80072f6:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_size_bytes      = 0;
 80072f8:	2386      	movs	r3, #134	; 0x86
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	2200      	movs	r2, #0
 8007300:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8007302:	187b      	adds	r3, r7, r1
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a6f      	ldr	r2, [pc, #444]	; (80074c4 <VL53L1_init_and_start_range+0x2ac>)
 8007308:	1812      	adds	r2, r2, r0
 800730a:	19d2      	adds	r2, r2, r7
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8007310:	193b      	adds	r3, r7, r4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	791b      	ldrb	r3, [r3, #4]
 8007316:	b25b      	sxtb	r3, r3
 8007318:	220f      	movs	r2, #15
 800731a:	4013      	ands	r3, r2
 800731c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800731e:	4b69      	ldr	r3, [pc, #420]	; (80074c4 <VL53L1_init_and_start_range+0x2ac>)
 8007320:	181b      	adds	r3, r3, r0
 8007322:	19db      	adds	r3, r3, r7
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b25b      	sxtb	r3, r3
 8007328:	4313      	orrs	r3, r2
 800732a:	b25b      	sxtb	r3, r3
 800732c:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800732e:	193b      	adds	r3, r7, r4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8007334:	0008      	movs	r0, r1
 8007336:	183b      	adds	r3, r7, r0
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	23a1      	movs	r3, #161	; 0xa1
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	5ad1      	ldrh	r1, [r2, r3]
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8007340:	183b      	adds	r3, r7, r0
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	23be      	movs	r3, #190	; 0xbe
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	52d1      	strh	r1, [r2, r3]
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800734a:	183b      	adds	r3, r7, r0
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a5f      	ldr	r2, [pc, #380]	; (80074cc <VL53L1_init_and_start_range+0x2b4>)
 8007350:	5c9b      	ldrb	r3, [r3, r2]
 8007352:	2bff      	cmp	r3, #255	; 0xff
 8007354:	d104      	bne.n	8007360 <VL53L1_init_and_start_range+0x148>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8007356:	183b      	adds	r3, r7, r0
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a5c      	ldr	r2, [pc, #368]	; (80074cc <VL53L1_init_and_start_range+0x2b4>)
 800735c:	2100      	movs	r1, #0
 800735e:	5499      	strb	r1, [r3, r2]
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007360:	2098      	movs	r0, #152	; 0x98
 8007362:	0040      	lsls	r0, r0, #1
 8007364:	183b      	adds	r3, r7, r0
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a59      	ldr	r2, [pc, #356]	; (80074d0 <VL53L1_init_and_start_range+0x2b8>)
 800736a:	5c9b      	ldrb	r3, [r3, r2]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d13e      	bne.n	80073ee <VL53L1_init_and_start_range+0x1d6>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8007370:	183b      	adds	r3, r7, r0
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a55      	ldr	r2, [pc, #340]	; (80074cc <VL53L1_init_and_start_range+0x2b4>)
 8007376:	5c9b      	ldrb	r3, [r3, r2]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007378:	2b00      	cmp	r3, #0
 800737a:	d138      	bne.n	80073ee <VL53L1_init_and_start_range+0x1d6>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800737c:	183b      	adds	r3, r7, r0
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	23c3      	movs	r3, #195	; 0xc3
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	5cd1      	ldrb	r1, [r2, r3]
		pdev->low_power_auto_data.saved_interrupt_config =
 8007386:	183b      	adds	r3, r7, r0
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a52      	ldr	r2, [pc, #328]	; (80074d4 <VL53L1_init_and_start_range+0x2bc>)
 800738c:	5499      	strb	r1, [r3, r2]
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800738e:	183b      	adds	r3, r7, r0
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	23c3      	movs	r3, #195	; 0xc3
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	2120      	movs	r1, #32
 8007398:	54d1      	strb	r1, [r2, r3]
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800739a:	183b      	adds	r3, r7, r0
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	23c6      	movs	r3, #198	; 0xc6
 80073a0:	33ff      	adds	r3, #255	; 0xff
 80073a2:	5cd3      	ldrb	r3, [r2, r3]
 80073a4:	001a      	movs	r2, r3
 80073a6:	2360      	movs	r3, #96	; 0x60
 80073a8:	4013      	ands	r3, r2
 80073aa:	d10c      	bne.n	80073c6 <VL53L1_init_and_start_range+0x1ae>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80073ac:	183b      	adds	r3, r7, r0
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2258      	movs	r2, #88	; 0x58
 80073b2:	5e9b      	ldrsh	r3, [r3, r2]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	b219      	sxth	r1, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80073bc:	183b      	adds	r3, r7, r0
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2254      	movs	r2, #84	; 0x54
 80073c2:	5299      	strh	r1, [r3, r2]
 80073c4:	e006      	b.n	80073d4 <VL53L1_init_and_start_range+0x1bc>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80073c6:	2398      	movs	r3, #152	; 0x98
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2254      	movs	r2, #84	; 0x54
 80073d0:	2100      	movs	r1, #0
 80073d2:	5299      	strh	r1, [r3, r2]
		}

		/* make sure config gets written out */
		if (device_config_level <
 80073d4:	4b3c      	ldr	r3, [pc, #240]	; (80074c8 <VL53L1_init_and_start_range+0x2b0>)
 80073d6:	22a0      	movs	r2, #160	; 0xa0
 80073d8:	0052      	lsls	r2, r2, #1
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	19db      	adds	r3, r3, r7
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d804      	bhi.n	80073ee <VL53L1_init_and_start_range+0x1d6>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80073e4:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <VL53L1_init_and_start_range+0x2b0>)
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	19db      	adds	r3, r3, r7
 80073ea:	2205      	movs	r2, #5
 80073ec:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80073ee:	2098      	movs	r0, #152	; 0x98
 80073f0:	0040      	lsls	r0, r0, #1
 80073f2:	183b      	adds	r3, r7, r0
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a36      	ldr	r2, [pc, #216]	; (80074d0 <VL53L1_init_and_start_range+0x2b8>)
 80073f8:	5c9b      	ldrb	r3, [r3, r2]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d115      	bne.n	800742a <VL53L1_init_and_start_range+0x212>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80073fe:	183b      	adds	r3, r7, r0
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a32      	ldr	r2, [pc, #200]	; (80074cc <VL53L1_init_and_start_range+0x2b4>)
 8007404:	5c9b      	ldrb	r3, [r3, r2]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8007406:	2b01      	cmp	r3, #1
 8007408:	d10f      	bne.n	800742a <VL53L1_init_and_start_range+0x212>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800740a:	183b      	adds	r3, r7, r0
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a31      	ldr	r2, [pc, #196]	; (80074d4 <VL53L1_init_and_start_range+0x2bc>)
 8007410:	5c99      	ldrb	r1, [r3, r2]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8007412:	183b      	adds	r3, r7, r0
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	23c3      	movs	r3, #195	; 0xc3
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	54d1      	strb	r1, [r2, r3]

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800741c:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <VL53L1_init_and_start_range+0x2b0>)
 800741e:	22a0      	movs	r2, #160	; 0xa0
 8007420:	0052      	lsls	r2, r2, #1
 8007422:	189b      	adds	r3, r3, r2
 8007424:	19db      	adds	r3, r3, r7
 8007426:	2206      	movs	r2, #6
 8007428:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800742a:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <VL53L1_init_and_start_range+0x2b0>)
 800742c:	22a0      	movs	r2, #160	; 0xa0
 800742e:	0052      	lsls	r2, r2, #1
 8007430:	189b      	adds	r3, r3, r2
 8007432:	19db      	adds	r3, r3, r7
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b06      	cmp	r3, #6
 8007438:	d828      	bhi.n	800748c <VL53L1_init_and_start_range+0x274>
 800743a:	009a      	lsls	r2, r3, #2
 800743c:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <VL53L1_init_and_start_range+0x2c0>)
 800743e:	18d3      	adds	r3, r2, r3
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	469f      	mov	pc, r3
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8007444:	239a      	movs	r3, #154	; 0x9a
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	2201      	movs	r2, #1
 800744c:	801a      	strh	r2, [r3, #0]
		break;
 800744e:	e023      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8007450:	239a      	movs	r3, #154	; 0x9a
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	18fb      	adds	r3, r7, r3
 8007456:	220d      	movs	r2, #13
 8007458:	801a      	strh	r2, [r3, #0]
		break;
 800745a:	e01d      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800745c:	239a      	movs	r3, #154	; 0x9a
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	18fb      	adds	r3, r7, r3
 8007462:	2224      	movs	r2, #36	; 0x24
 8007464:	801a      	strh	r2, [r3, #0]
		break;
 8007466:	e017      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8007468:	239a      	movs	r3, #154	; 0x9a
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2244      	movs	r2, #68	; 0x44
 8007470:	801a      	strh	r2, [r3, #0]
		break;
 8007472:	e011      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8007474:	239a      	movs	r3, #154	; 0x9a
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	225a      	movs	r2, #90	; 0x5a
 800747c:	801a      	strh	r2, [r3, #0]
		break;
 800747e:	e00b      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8007480:	239a      	movs	r3, #154	; 0x9a
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	2271      	movs	r2, #113	; 0x71
 8007488:	801a      	strh	r2, [r3, #0]
		break;
 800748a:	e005      	b.n	8007498 <VL53L1_init_and_start_range+0x280>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800748c:	239a      	movs	r3, #154	; 0x9a
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	2283      	movs	r2, #131	; 0x83
 8007494:	801a      	strh	r2, [r3, #0]
		break;
 8007496:	46c0      	nop			; (mov r8, r8)
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8007498:	2386      	movs	r3, #134	; 0x86
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	229a      	movs	r2, #154	; 0x9a
 80074a0:	0052      	lsls	r2, r2, #1
 80074a2:	18ba      	adds	r2, r7, r2
 80074a4:	8812      	ldrh	r2, [r2, #0]
 80074a6:	2188      	movs	r1, #136	; 0x88
 80074a8:	1a8a      	subs	r2, r1, r2
 80074aa:	801a      	strh	r2, [r3, #0]
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80074ac:	230c      	movs	r3, #12
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	229c      	movs	r2, #156	; 0x9c
 80074b2:	0052      	lsls	r2, r2, #1
 80074b4:	18ba      	adds	r2, r7, r2
 80074b6:	6013      	str	r3, [r2, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80074b8:	239b      	movs	r3, #155	; 0x9b
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	2200      	movs	r2, #0
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	e01b      	b.n	80074fc <VL53L1_init_and_start_range+0x2e4>
 80074c4:	fffffec3 	.word	0xfffffec3
 80074c8:	fffffec2 	.word	0xfffffec2
 80074cc:	000002e6 	.word	0x000002e6
 80074d0:	000002e5 	.word	0x000002e5
 80074d4:	000002e7 	.word	0x000002e7
 80074d8:	0800e530 	.word	0x0800e530
		*pbuffer++ = 0;
 80074dc:	219c      	movs	r1, #156	; 0x9c
 80074de:	0049      	lsls	r1, r1, #1
 80074e0:	187b      	adds	r3, r7, r1
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	1879      	adds	r1, r7, r1
 80074e8:	600a      	str	r2, [r1, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80074ee:	219b      	movs	r1, #155	; 0x9b
 80074f0:	0049      	lsls	r1, r1, #1
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	881a      	ldrh	r2, [r3, #0]
 80074f6:	187b      	adds	r3, r7, r1
 80074f8:	3201      	adds	r2, #1
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	239b      	movs	r3, #155	; 0x9b
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	18fa      	adds	r2, r7, r3
 8007502:	2386      	movs	r3, #134	; 0x86
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	8812      	ldrh	r2, [r2, #0]
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d3e5      	bcc.n	80074dc <VL53L1_init_and_start_range+0x2c4>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8007510:	4bbe      	ldr	r3, [pc, #760]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 8007512:	22a0      	movs	r2, #160	; 0xa0
 8007514:	0052      	lsls	r2, r2, #1
 8007516:	189b      	adds	r3, r3, r2
 8007518:	19db      	adds	r3, r3, r7
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b05      	cmp	r3, #5
 800751e:	d920      	bls.n	8007562 <VL53L1_init_and_start_range+0x34a>
 8007520:	2040      	movs	r0, #64	; 0x40
 8007522:	30ff      	adds	r0, #255	; 0xff
 8007524:	183b      	adds	r3, r7, r0
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d119      	bne.n	8007562 <VL53L1_init_and_start_range+0x34a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800752e:	2487      	movs	r4, #135	; 0x87
 8007530:	0064      	lsls	r4, r4, #1
 8007532:	193b      	adds	r3, r7, r4
 8007534:	229a      	movs	r2, #154	; 0x9a
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	18ba      	adds	r2, r7, r2
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	2101      	movs	r1, #1
 800753e:	1a8a      	subs	r2, r1, r2
 8007540:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007542:	193b      	adds	r3, r7, r4
 8007544:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_static_nvm_managed(
 8007546:	220c      	movs	r2, #12
 8007548:	18ba      	adds	r2, r7, r2
 800754a:	18d2      	adds	r2, r2, r3
 800754c:	183c      	adds	r4, r7, r0
 800754e:	2396      	movs	r3, #150	; 0x96
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	210b      	movs	r1, #11
 8007558:	0018      	movs	r0, r3
 800755a:	f002 fab5 	bl	8009ac8 <VL53L1_i2c_encode_static_nvm_managed>
 800755e:	0003      	movs	r3, r0
 8007560:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8007562:	4baa      	ldr	r3, [pc, #680]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 8007564:	22a0      	movs	r2, #160	; 0xa0
 8007566:	0052      	lsls	r2, r2, #1
 8007568:	189b      	adds	r3, r3, r2
 800756a:	19db      	adds	r3, r3, r7
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d920      	bls.n	80075b4 <VL53L1_init_and_start_range+0x39c>
 8007572:	2040      	movs	r0, #64	; 0x40
 8007574:	30ff      	adds	r0, #255	; 0xff
 8007576:	183b      	adds	r3, r7, r0
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b25b      	sxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d119      	bne.n	80075b4 <VL53L1_init_and_start_range+0x39c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8007580:	2487      	movs	r4, #135	; 0x87
 8007582:	0064      	lsls	r4, r4, #1
 8007584:	193b      	adds	r3, r7, r4
 8007586:	229a      	movs	r2, #154	; 0x9a
 8007588:	0052      	lsls	r2, r2, #1
 800758a:	18ba      	adds	r2, r7, r2
 800758c:	8812      	ldrh	r2, [r2, #0]
 800758e:	210d      	movs	r1, #13
 8007590:	1a8a      	subs	r2, r1, r2
 8007592:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007594:	193b      	adds	r3, r7, r4
 8007596:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_customer_nvm_managed(
 8007598:	220c      	movs	r2, #12
 800759a:	18ba      	adds	r2, r7, r2
 800759c:	18d2      	adds	r2, r2, r3
 800759e:	183c      	adds	r4, r7, r0
 80075a0:	2394      	movs	r3, #148	; 0x94
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2117      	movs	r1, #23
 80075aa:	0018      	movs	r0, r3
 80075ac:	f002 fb80 	bl	8009cb0 <VL53L1_i2c_encode_customer_nvm_managed>
 80075b0:	0003      	movs	r3, r0
 80075b2:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80075b4:	4b95      	ldr	r3, [pc, #596]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 80075b6:	22a0      	movs	r2, #160	; 0xa0
 80075b8:	0052      	lsls	r2, r2, #1
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	19db      	adds	r3, r3, r7
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d920      	bls.n	8007606 <VL53L1_init_and_start_range+0x3ee>
 80075c4:	2040      	movs	r0, #64	; 0x40
 80075c6:	30ff      	adds	r0, #255	; 0xff
 80075c8:	183b      	adds	r3, r7, r0
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b25b      	sxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d119      	bne.n	8007606 <VL53L1_init_and_start_range+0x3ee>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80075d2:	2487      	movs	r4, #135	; 0x87
 80075d4:	0064      	lsls	r4, r4, #1
 80075d6:	193b      	adds	r3, r7, r4
 80075d8:	229a      	movs	r2, #154	; 0x9a
 80075da:	0052      	lsls	r2, r2, #1
 80075dc:	18ba      	adds	r2, r7, r2
 80075de:	8812      	ldrh	r2, [r2, #0]
 80075e0:	2124      	movs	r1, #36	; 0x24
 80075e2:	1a8a      	subs	r2, r1, r2
 80075e4:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_static_config(
 80075ea:	220c      	movs	r2, #12
 80075ec:	18ba      	adds	r2, r7, r2
 80075ee:	18d2      	adds	r2, r2, r3
 80075f0:	183c      	adds	r4, r7, r0
 80075f2:	2392      	movs	r3, #146	; 0x92
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2120      	movs	r1, #32
 80075fc:	0018      	movs	r0, r3
 80075fe:	f002 fcad 	bl	8009f5c <VL53L1_i2c_encode_static_config>
 8007602:	0003      	movs	r3, r0
 8007604:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8007606:	4b81      	ldr	r3, [pc, #516]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 8007608:	22a0      	movs	r2, #160	; 0xa0
 800760a:	0052      	lsls	r2, r2, #1
 800760c:	189b      	adds	r3, r3, r2
 800760e:	19db      	adds	r3, r3, r7
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d920      	bls.n	8007658 <VL53L1_init_and_start_range+0x440>
 8007616:	2040      	movs	r0, #64	; 0x40
 8007618:	30ff      	adds	r0, #255	; 0xff
 800761a:	183b      	adds	r3, r7, r0
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b25b      	sxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d119      	bne.n	8007658 <VL53L1_init_and_start_range+0x440>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007624:	2487      	movs	r4, #135	; 0x87
 8007626:	0064      	lsls	r4, r4, #1
 8007628:	193b      	adds	r3, r7, r4
 800762a:	229a      	movs	r2, #154	; 0x9a
 800762c:	0052      	lsls	r2, r2, #1
 800762e:	18ba      	adds	r2, r7, r2
 8007630:	8812      	ldrh	r2, [r2, #0]
 8007632:	2144      	movs	r1, #68	; 0x44
 8007634:	1a8a      	subs	r2, r1, r2
 8007636:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007638:	193b      	adds	r3, r7, r4
 800763a:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_general_config(
 800763c:	220c      	movs	r2, #12
 800763e:	18ba      	adds	r2, r7, r2
 8007640:	18d2      	adds	r2, r2, r3
 8007642:	183c      	adds	r4, r7, r0
 8007644:	2390      	movs	r3, #144	; 0x90
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2116      	movs	r1, #22
 800764e:	0018      	movs	r0, r3
 8007650:	f002 fd6e 	bl	800a130 <VL53L1_i2c_encode_general_config>
 8007654:	0003      	movs	r3, r0
 8007656:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8007658:	4b6c      	ldr	r3, [pc, #432]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 800765a:	22a0      	movs	r2, #160	; 0xa0
 800765c:	0052      	lsls	r2, r2, #1
 800765e:	189b      	adds	r3, r3, r2
 8007660:	19db      	adds	r3, r3, r7
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d920      	bls.n	80076aa <VL53L1_init_and_start_range+0x492>
 8007668:	2040      	movs	r0, #64	; 0x40
 800766a:	30ff      	adds	r0, #255	; 0xff
 800766c:	183b      	adds	r3, r7, r0
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b25b      	sxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d119      	bne.n	80076aa <VL53L1_init_and_start_range+0x492>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8007676:	2487      	movs	r4, #135	; 0x87
 8007678:	0064      	lsls	r4, r4, #1
 800767a:	193b      	adds	r3, r7, r4
 800767c:	229a      	movs	r2, #154	; 0x9a
 800767e:	0052      	lsls	r2, r2, #1
 8007680:	18ba      	adds	r2, r7, r2
 8007682:	8812      	ldrh	r2, [r2, #0]
 8007684:	215a      	movs	r1, #90	; 0x5a
 8007686:	1a8a      	subs	r2, r1, r2
 8007688:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800768a:	193b      	adds	r3, r7, r4
 800768c:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_timing_config(
 800768e:	220c      	movs	r2, #12
 8007690:	18ba      	adds	r2, r7, r2
 8007692:	18d2      	adds	r2, r2, r3
 8007694:	183c      	adds	r4, r7, r0
 8007696:	238e      	movs	r3, #142	; 0x8e
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2117      	movs	r1, #23
 80076a0:	0018      	movs	r0, r3
 80076a2:	f002 fdd0 	bl	800a246 <VL53L1_i2c_encode_timing_config>
 80076a6:	0003      	movs	r3, r0
 80076a8:	7023      	strb	r3, [r4, #0]
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80076aa:	4b58      	ldr	r3, [pc, #352]	; (800780c <VL53L1_init_and_start_range+0x5f4>)
 80076ac:	22a0      	movs	r2, #160	; 0xa0
 80076ae:	0052      	lsls	r2, r2, #1
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	19db      	adds	r3, r3, r7
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d049      	beq.n	800774e <VL53L1_init_and_start_range+0x536>
 80076ba:	2340      	movs	r3, #64	; 0x40
 80076bc:	33ff      	adds	r3, #255	; 0xff
 80076be:	18fb      	adds	r3, r7, r3
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b25b      	sxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d142      	bne.n	800774e <VL53L1_init_and_start_range+0x536>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80076c8:	2387      	movs	r3, #135	; 0x87
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	229a      	movs	r2, #154	; 0x9a
 80076d0:	0052      	lsls	r2, r2, #1
 80076d2:	18ba      	adds	r2, r7, r2
 80076d4:	8812      	ldrh	r2, [r2, #0]
 80076d6:	2171      	movs	r1, #113	; 0x71
 80076d8:	1a8a      	subs	r2, r1, r2
 80076da:	801a      	strh	r2, [r3, #0]
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80076dc:	238a      	movs	r3, #138	; 0x8a
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	791b      	ldrb	r3, [r3, #4]
 80076e6:	001a      	movs	r2, r3
 80076e8:	2320      	movs	r3, #32
 80076ea:	4013      	ands	r3, r2
 80076ec:	d01b      	beq.n	8007726 <VL53L1_init_and_start_range+0x50e>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80076ee:	2188      	movs	r1, #136	; 0x88
 80076f0:	0049      	lsls	r1, r1, #1
 80076f2:	187b      	adds	r3, r7, r1
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	789b      	ldrb	r3, [r3, #2]
 80076f8:	2201      	movs	r2, #1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	208c      	movs	r0, #140	; 0x8c
 8007700:	0040      	lsls	r0, r0, #1
 8007702:	183b      	adds	r3, r7, r0
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8007708:	187b      	adds	r3, r7, r1
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	789b      	ldrb	r3, [r3, #2]
 800770e:	2201      	movs	r2, #1
 8007710:	4313      	orrs	r3, r2
 8007712:	b2da      	uxtb	r2, r3
 8007714:	183b      	adds	r3, r7, r0
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800771a:	187b      	adds	r3, r7, r1
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	789a      	ldrb	r2, [r3, #2]
 8007720:	183b      	adds	r3, r7, r0
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007726:	2387      	movs	r3, #135	; 0x87
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_dynamic_config(
 800772e:	220c      	movs	r2, #12
 8007730:	18ba      	adds	r2, r7, r2
 8007732:	18d2      	adds	r2, r2, r3
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	33ff      	adds	r3, #255	; 0xff
 8007738:	18fc      	adds	r4, r7, r3
 800773a:	238c      	movs	r3, #140	; 0x8c
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2112      	movs	r1, #18
 8007744:	0018      	movs	r0, r3
 8007746:	f002 fe07 	bl	800a358 <VL53L1_i2c_encode_dynamic_config>
 800774a:	0003      	movs	r3, r0
 800774c:	7023      	strb	r3, [r4, #0]
	}

	if (status == VL53L1_ERROR_NONE) {
 800774e:	2040      	movs	r0, #64	; 0x40
 8007750:	30ff      	adds	r0, #255	; 0xff
 8007752:	183b      	adds	r3, r7, r0
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b25b      	sxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d119      	bne.n	8007790 <VL53L1_init_and_start_range+0x578>

		i2c_buffer_offset_bytes = \
 800775c:	2487      	movs	r4, #135	; 0x87
 800775e:	0064      	lsls	r4, r4, #1
 8007760:	193b      	adds	r3, r7, r4
 8007762:	229a      	movs	r2, #154	; 0x9a
 8007764:	0052      	lsls	r2, r2, #1
 8007766:	18ba      	adds	r2, r7, r2
 8007768:	8812      	ldrh	r2, [r2, #0]
 800776a:	2183      	movs	r1, #131	; 0x83
 800776c:	1a8a      	subs	r2, r1, r2
 800776e:	801a      	strh	r2, [r3, #0]

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8007770:	193b      	adds	r3, r7, r4
 8007772:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_encode_system_control(
 8007774:	220c      	movs	r2, #12
 8007776:	18ba      	adds	r2, r7, r2
 8007778:	18d2      	adds	r2, r2, r3
 800777a:	183c      	adds	r4, r7, r0
 800777c:	238a      	movs	r3, #138	; 0x8a
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2105      	movs	r1, #5
 8007786:	0018      	movs	r0, r3
 8007788:	f002 fe72 	bl	800a470 <VL53L1_i2c_encode_system_control>
 800778c:	0003      	movs	r3, r0
 800778e:	7023      	strb	r3, [r4, #0]
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8007790:	2240      	movs	r2, #64	; 0x40
 8007792:	32ff      	adds	r2, #255	; 0xff
 8007794:	18bb      	adds	r3, r7, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b25b      	sxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d110      	bne.n	80077c0 <VL53L1_init_and_start_range+0x5a8>
		status =
			VL53L1_WriteMulti(
 800779e:	2386      	movs	r3, #134	; 0x86
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	18fb      	adds	r3, r7, r3
 80077a4:	881d      	ldrh	r5, [r3, #0]
 80077a6:	18bc      	adds	r4, r7, r2
 80077a8:	230c      	movs	r3, #12
 80077aa:	18fa      	adds	r2, r7, r3
 80077ac:	239a      	movs	r3, #154	; 0x9a
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	8819      	ldrh	r1, [r3, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	002b      	movs	r3, r5
 80077b8:	f003 fb96 	bl	800aee8 <VL53L1_WriteMulti>
 80077bc:	0003      	movs	r3, r0
 80077be:	7023      	strb	r3, [r4, #0]
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80077c0:	2240      	movs	r2, #64	; 0x40
 80077c2:	32ff      	adds	r2, #255	; 0xff
 80077c4:	18bb      	adds	r3, r7, r2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b25b      	sxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <VL53L1_init_and_start_range+0x5c4>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80077ce:	18bc      	adds	r4, r7, r2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f001 fa38 	bl	8008c48 <VL53L1_update_ll_driver_rd_state>
 80077d8:	0003      	movs	r3, r0
 80077da:	7023      	strb	r3, [r4, #0]

	if (status == VL53L1_ERROR_NONE)
 80077dc:	2240      	movs	r2, #64	; 0x40
 80077de:	32ff      	adds	r2, #255	; 0xff
 80077e0:	18bb      	adds	r3, r7, r2
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <VL53L1_init_and_start_range+0x5e0>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80077ea:	18bc      	adds	r4, r7, r2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0018      	movs	r0, r3
 80077f0:	f001 fb11 	bl	8008e16 <VL53L1_update_ll_driver_cfg_state>
 80077f4:	0003      	movs	r3, r0
 80077f6:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(status);

	return status;
 80077f8:	2340      	movs	r3, #64	; 0x40
 80077fa:	33ff      	adds	r3, #255	; 0xff
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b25b      	sxtb	r3, r3
}
 8007802:	0018      	movs	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	b050      	add	sp, #320	; 0x140
 8007808:	bdb0      	pop	{r4, r5, r7, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	fffffec2 	.word	0xfffffec2

08007810 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8007810:	b5b0      	push	{r4, r5, r7, lr}
 8007812:	b0c8      	sub	sp, #288	; 0x120
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	000a      	movs	r2, r1
 800781a:	4b75      	ldr	r3, [pc, #468]	; (80079f0 <VL53L1_get_measurement_results+0x1e0>)
 800781c:	2190      	movs	r1, #144	; 0x90
 800781e:	0049      	lsls	r1, r1, #1
 8007820:	185b      	adds	r3, r3, r1
 8007822:	19db      	adds	r3, r3, r7
 8007824:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007826:	2320      	movs	r3, #32
 8007828:	33ff      	adds	r3, #255	; 0xff
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	228c      	movs	r2, #140	; 0x8c
 8007834:	0052      	lsls	r2, r2, #1
 8007836:	18b8      	adds	r0, r7, r2
 8007838:	6003      	str	r3, [r0, #0]

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800783a:	18bb      	adds	r3, r7, r2
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	33cf      	adds	r3, #207	; 0xcf
 8007840:	33ff      	adds	r3, #255	; 0xff
 8007842:	208a      	movs	r0, #138	; 0x8a
 8007844:	0040      	lsls	r0, r0, #1
 8007846:	1838      	adds	r0, r7, r0
 8007848:	6003      	str	r3, [r0, #0]
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800784a:	18bb      	adds	r3, r7, r2
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	20a2      	movs	r0, #162	; 0xa2
 8007850:	0080      	lsls	r0, r0, #2
 8007852:	4684      	mov	ip, r0
 8007854:	4463      	add	r3, ip
 8007856:	2088      	movs	r0, #136	; 0x88
 8007858:	0040      	lsls	r0, r0, #1
 800785a:	1838      	adds	r0, r7, r0
 800785c:	6003      	str	r3, [r0, #0]
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800785e:	18bb      	adds	r3, r7, r2
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	22ab      	movs	r2, #171	; 0xab
 8007864:	0092      	lsls	r2, r2, #2
 8007866:	4694      	mov	ip, r2
 8007868:	4463      	add	r3, ip
 800786a:	2286      	movs	r2, #134	; 0x86
 800786c:	0052      	lsls	r2, r2, #1
 800786e:	18ba      	adds	r2, r7, r2
 8007870:	6013      	str	r3, [r2, #0]

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8007872:	2085      	movs	r0, #133	; 0x85
 8007874:	0040      	lsls	r0, r0, #1
 8007876:	183b      	adds	r3, r7, r0
 8007878:	2288      	movs	r2, #136	; 0x88
 800787a:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_offset_bytes = 0;
 800787c:	2384      	movs	r3, #132	; 0x84
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	2200      	movs	r2, #0
 8007884:	801a      	strh	r2, [r3, #0]
	uint16_t i2c_buffer_size_bytes   = 0;
 8007886:	248e      	movs	r4, #142	; 0x8e
 8007888:	0064      	lsls	r4, r4, #1
 800788a:	193b      	adds	r3, r7, r4
 800788c:	2200      	movs	r2, #0
 800788e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8007890:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <VL53L1_get_measurement_results+0x1e0>)
 8007892:	185b      	adds	r3, r3, r1
 8007894:	19db      	adds	r3, r3, r7
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d009      	beq.n	80078b0 <VL53L1_get_measurement_results+0xa0>
 800789c:	2b02      	cmp	r3, #2
 800789e:	d112      	bne.n	80078c6 <VL53L1_get_measurement_results+0xb6>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80078a0:	193b      	adds	r3, r7, r4
 80078a2:	183a      	adds	r2, r7, r0
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	2187      	movs	r1, #135	; 0x87
 80078a8:	0049      	lsls	r1, r1, #1
 80078aa:	1a8a      	subs	r2, r1, r2
 80078ac:	801a      	strh	r2, [r3, #0]
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80078ae:	e010      	b.n	80078d2 <VL53L1_get_measurement_results+0xc2>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80078b0:	238e      	movs	r3, #142	; 0x8e
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	2285      	movs	r2, #133	; 0x85
 80078b8:	0052      	lsls	r2, r2, #1
 80078ba:	18ba      	adds	r2, r7, r2
 80078bc:	8812      	ldrh	r2, [r2, #0]
 80078be:	21d5      	movs	r1, #213	; 0xd5
 80078c0:	1a8a      	subs	r2, r1, r2
 80078c2:	801a      	strh	r2, [r3, #0]
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80078c4:	e005      	b.n	80078d2 <VL53L1_get_measurement_results+0xc2>
	default:
		i2c_buffer_size_bytes =
 80078c6:	238e      	movs	r3, #142	; 0x8e
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	222c      	movs	r2, #44	; 0x2c
 80078ce:	801a      	strh	r2, [r3, #0]
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80078d0:	46c0      	nop			; (mov r8, r8)
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80078d2:	2220      	movs	r2, #32
 80078d4:	32ff      	adds	r2, #255	; 0xff
 80078d6:	18bb      	adds	r3, r7, r2
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d110      	bne.n	8007902 <VL53L1_get_measurement_results+0xf2>
		status =
			VL53L1_ReadMulti(
 80078e0:	238e      	movs	r3, #142	; 0x8e
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	881d      	ldrh	r5, [r3, #0]
 80078e8:	18bc      	adds	r4, r7, r2
 80078ea:	2308      	movs	r3, #8
 80078ec:	18fa      	adds	r2, r7, r3
 80078ee:	2385      	movs	r3, #133	; 0x85
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	8819      	ldrh	r1, [r3, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	002b      	movs	r3, r5
 80078fa:	f003 fb39 	bl	800af70 <VL53L1_ReadMulti>
 80078fe:	0003      	movs	r3, r0
 8007900:	7023      	strb	r3, [r4, #0]
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <VL53L1_get_measurement_results+0x1e0>)
 8007904:	2290      	movs	r2, #144	; 0x90
 8007906:	0052      	lsls	r2, r2, #1
 8007908:	189b      	adds	r3, r3, r2
 800790a:	19db      	adds	r3, r3, r7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d920      	bls.n	8007954 <VL53L1_get_measurement_results+0x144>
 8007912:	2020      	movs	r0, #32
 8007914:	30ff      	adds	r0, #255	; 0xff
 8007916:	183b      	adds	r3, r7, r0
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b25b      	sxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d119      	bne.n	8007954 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007920:	2484      	movs	r4, #132	; 0x84
 8007922:	0064      	lsls	r4, r4, #1
 8007924:	193b      	adds	r3, r7, r4
 8007926:	2285      	movs	r2, #133	; 0x85
 8007928:	0052      	lsls	r2, r2, #1
 800792a:	18ba      	adds	r2, r7, r2
 800792c:	8812      	ldrh	r2, [r2, #0]
 800792e:	21d6      	movs	r1, #214	; 0xd6
 8007930:	1a8a      	subs	r2, r1, r2
 8007932:	801a      	strh	r2, [r3, #0]
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007934:	193b      	adds	r3, r7, r4
 8007936:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_debug_results(
 8007938:	2208      	movs	r2, #8
 800793a:	18ba      	adds	r2, r7, r2
 800793c:	18d3      	adds	r3, r2, r3
 800793e:	183c      	adds	r4, r7, r0
 8007940:	2286      	movs	r2, #134	; 0x86
 8007942:	0052      	lsls	r2, r2, #1
 8007944:	18ba      	adds	r2, r7, r2
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	0019      	movs	r1, r3
 800794a:	2038      	movs	r0, #56	; 0x38
 800794c:	f002 ff36 	bl	800a7bc <VL53L1_i2c_decode_debug_results>
 8007950:	0003      	movs	r3, r0
 8007952:	7023      	strb	r3, [r4, #0]
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8007954:	4b26      	ldr	r3, [pc, #152]	; (80079f0 <VL53L1_get_measurement_results+0x1e0>)
 8007956:	2290      	movs	r2, #144	; 0x90
 8007958:	0052      	lsls	r2, r2, #1
 800795a:	189b      	adds	r3, r3, r2
 800795c:	19db      	adds	r3, r3, r7
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d020      	beq.n	80079a6 <VL53L1_get_measurement_results+0x196>
 8007964:	2020      	movs	r0, #32
 8007966:	30ff      	adds	r0, #255	; 0xff
 8007968:	183b      	adds	r3, r7, r0
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b25b      	sxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d119      	bne.n	80079a6 <VL53L1_get_measurement_results+0x196>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8007972:	2484      	movs	r4, #132	; 0x84
 8007974:	0064      	lsls	r4, r4, #1
 8007976:	193b      	adds	r3, r7, r4
 8007978:	2285      	movs	r2, #133	; 0x85
 800797a:	0052      	lsls	r2, r2, #1
 800797c:	18ba      	adds	r2, r7, r2
 800797e:	8812      	ldrh	r2, [r2, #0]
 8007980:	21b4      	movs	r1, #180	; 0xb4
 8007982:	1a8a      	subs	r2, r1, r2
 8007984:	801a      	strh	r2, [r3, #0]
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8007986:	193b      	adds	r3, r7, r4
 8007988:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_core_results(
 800798a:	2208      	movs	r2, #8
 800798c:	18ba      	adds	r2, r7, r2
 800798e:	18d3      	adds	r3, r2, r3
 8007990:	183c      	adds	r4, r7, r0
 8007992:	2288      	movs	r2, #136	; 0x88
 8007994:	0052      	lsls	r2, r2, #1
 8007996:	18ba      	adds	r2, r7, r2
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	0019      	movs	r1, r3
 800799c:	2021      	movs	r0, #33	; 0x21
 800799e:	f002 fea4 	bl	800a6ea <VL53L1_i2c_decode_core_results>
 80079a2:	0003      	movs	r3, r0
 80079a4:	7023      	strb	r3, [r4, #0]
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80079a6:	2120      	movs	r1, #32
 80079a8:	31ff      	adds	r1, #255	; 0xff
 80079aa:	187b      	adds	r3, r7, r1
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d114      	bne.n	80079de <VL53L1_get_measurement_results+0x1ce>

		i2c_buffer_offset_bytes = 0;
 80079b4:	2084      	movs	r0, #132	; 0x84
 80079b6:	0040      	lsls	r0, r0, #1
 80079b8:	183b      	adds	r3, r7, r0
 80079ba:	2200      	movs	r2, #0
 80079bc:	801a      	strh	r2, [r3, #0]
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80079be:	183b      	adds	r3, r7, r0
 80079c0:	881b      	ldrh	r3, [r3, #0]
			VL53L1_i2c_decode_system_results(
 80079c2:	2208      	movs	r2, #8
 80079c4:	18ba      	adds	r2, r7, r2
 80079c6:	18d3      	adds	r3, r2, r3
 80079c8:	187c      	adds	r4, r7, r1
 80079ca:	228a      	movs	r2, #138	; 0x8a
 80079cc:	0052      	lsls	r2, r2, #1
 80079ce:	18ba      	adds	r2, r7, r2
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	0019      	movs	r1, r3
 80079d4:	202c      	movs	r0, #44	; 0x2c
 80079d6:	f002 fd8b 	bl	800a4f0 <VL53L1_i2c_decode_system_results>
 80079da:	0003      	movs	r3, r0
 80079dc:	7023      	strb	r3, [r4, #0]
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80079de:	2320      	movs	r3, #32
 80079e0:	33ff      	adds	r3, #255	; 0xff
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b25b      	sxtb	r3, r3
}
 80079e8:	0018      	movs	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b048      	add	sp, #288	; 0x120
 80079ee:	bdb0      	pop	{r4, r5, r7, pc}
 80079f0:	fffffee3 	.word	0xfffffee3

080079f4 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	200b      	movs	r0, #11
 8007a00:	183b      	adds	r3, r7, r0
 8007a02:	1c0a      	adds	r2, r1, #0
 8007a04:	701a      	strb	r2, [r3, #0]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007a06:	211f      	movs	r1, #31
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev =
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22bd      	movs	r2, #189	; 0xbd
 8007a16:	0092      	lsls	r2, r2, #2
 8007a18:	4694      	mov	ip, r2
 8007a1a:	4463      	add	r3, ip
 8007a1c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007a22:	187b      	adds	r3, r7, r1
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b25b      	sxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <VL53L1_get_device_results+0x4c>
		status = VL53L1_get_measurement_results(
 8007a2c:	187c      	adds	r4, r7, r1
 8007a2e:	183b      	adds	r3, r7, r0
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	0011      	movs	r1, r2
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff feea 	bl	8007810 <VL53L1_get_measurement_results>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	7023      	strb	r3, [r4, #0]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8007a40:	231f      	movs	r3, #31
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10e      	bne.n	8007a6a <VL53L1_get_device_results+0x76>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	229c      	movs	r2, #156	; 0x9c
 8007a50:	5a9b      	ldrh	r3, [r3, r2]
		VL53L1_copy_sys_and_core_results_to_range_results(
 8007a52:	0018      	movs	r0, r3
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	33cf      	adds	r3, #207	; 0xcf
 8007a58:	33ff      	adds	r3, #255	; 0xff
 8007a5a:	0019      	movs	r1, r3
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	22a2      	movs	r2, #162	; 0xa2
 8007a60:	0092      	lsls	r2, r2, #2
 8007a62:	189a      	adds	r2, r3, r2
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f000 f879 	bl	8007b5c <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <VL53L1_get_device_results+0x118>)
 8007a6e:	5c9b      	ldrb	r3, [r3, r2]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d125      	bne.n	8007ac0 <VL53L1_get_device_results+0xcc>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8007a74:	211f      	movs	r1, #31
 8007a76:	187b      	adds	r3, r7, r1
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b25b      	sxtb	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <VL53L1_get_device_results+0xae>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	4a23      	ldr	r2, [pc, #140]	; (8007b10 <VL53L1_get_device_results+0x11c>)
 8007a84:	5c9b      	ldrb	r3, [r3, r2]
		if ((status == VL53L1_ERROR_NONE) &&
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <VL53L1_get_device_results+0xae>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8007a8a:	187c      	adds	r4, r7, r1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f001 ff62 	bl	8009958 <VL53L1_low_power_auto_setup_manual_calibration>
 8007a94:	0003      	movs	r3, r0
 8007a96:	7023      	strb	r3, [r4, #0]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <VL53L1_get_device_results+0x11c>)
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	5499      	strb	r1, [r3, r2]
 8007aa0:	e00e      	b.n	8007ac0 <VL53L1_get_device_results+0xcc>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8007aa2:	231f      	movs	r3, #31
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	b25b      	sxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d108      	bne.n	8007ac0 <VL53L1_get_device_results+0xcc>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <VL53L1_get_device_results+0x11c>)
 8007ab2:	5c9b      	ldrb	r3, [r3, r2]
		} else if ((status == VL53L1_ERROR_NONE) &&
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d103      	bne.n	8007ac0 <VL53L1_get_device_results+0xcc>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <VL53L1_get_device_results+0x11c>)
 8007abc:	2102      	movs	r1, #2
 8007abe:	5499      	strb	r1, [r3, r2]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	222c      	movs	r2, #44	; 0x2c
 8007ac4:	5c9a      	ldrb	r2, [r3, r2]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2230      	movs	r2, #48	; 0x30
 8007ace:	5c9a      	ldrb	r2, [r3, r2]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8007ad4:	6939      	ldr	r1, [r7, #16]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2284      	movs	r2, #132	; 0x84
 8007ada:	0018      	movs	r0, r3
 8007adc:	f004 fabc 	bl	800c058 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8007ae0:	221f      	movs	r2, #31
 8007ae2:	18bb      	adds	r3, r7, r2
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b25b      	sxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <VL53L1_get_device_results+0x106>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8007aec:	18bc      	adds	r4, r7, r2
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f001 f92f 	bl	8008d54 <VL53L1_check_ll_driver_rd_state>
 8007af6:	0003      	movs	r3, r0
 8007af8:	7023      	strb	r3, [r4, #0]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007afa:	231f      	movs	r3, #31
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b25b      	sxtb	r3, r3
}
 8007b02:	0018      	movs	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b009      	add	sp, #36	; 0x24
 8007b08:	bd90      	pop	{r4, r7, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	000002e5 	.word	0x000002e5
 8007b10:	000002e6 	.word	0x000002e6

08007b14 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	000a      	movs	r2, r1
 8007b1e:	1cfb      	adds	r3, r7, #3
 8007b20:	701a      	strb	r2, [r3, #0]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b22:	210f      	movs	r1, #15
 8007b24:	187b      	adds	r3, r7, r1
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007b2a:	000a      	movs	r2, r1
 8007b2c:	18bb      	adds	r3, r7, r2
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b25b      	sxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <VL53L1_clear_interrupt_and_enable_next_range+0x36>
		status = VL53L1_init_and_start_range(
 8007b36:	18bc      	adds	r4, r7, r2
 8007b38:	1cfb      	adds	r3, r7, #3
 8007b3a:	7819      	ldrb	r1, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	0018      	movs	r0, r3
 8007b42:	f7ff fb69 	bl	8007218 <VL53L1_init_and_start_range>
 8007b46:	0003      	movs	r3, r0
 8007b48:	7023      	strb	r3, [r4, #0]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8007b4a:	230f      	movs	r3, #15
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b25b      	sxtb	r3, r3
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b005      	add	sp, #20
 8007b58:	bd90      	pop	{r4, r7, pc}
	...

08007b5c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8007b6a:	211f      	movs	r1, #31
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	78da      	ldrb	r2, [r3, #3]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8007b88:	187b      	adds	r3, r7, r1
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e0dc      	b.n	8007d4a <VL53L1_copy_sys_and_core_results_to_range_results+0x1ee>

		pdata->range_id     = i;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	221f      	movs	r2, #31
 8007b94:	18ba      	adds	r2, r7, r2
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	001a      	movs	r2, r3
 8007bae:	231f      	movs	r3, #31
 8007bb0:	4013      	ands	r3, r2
		if ((psys->result__stream_count == 0) &&
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	d104      	bne.n	8007bc0 <VL53L1_copy_sys_and_core_results_to_range_results+0x64>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	223e      	movs	r2, #62	; 0x3e
 8007bba:	2113      	movs	r1, #19
 8007bbc:	5499      	strb	r1, [r3, r2]
 8007bbe:	e007      	b.n	8007bd0 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	221f      	movs	r2, #31
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	b2d9      	uxtb	r1, r3
			pdata->range_status =
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	223e      	movs	r2, #62	; 0x3e
 8007bce:	5499      	strb	r1, [r3, r2]
		}

		switch (i) {
 8007bd0:	231f      	movs	r3, #31
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d05f      	beq.n	8007c9e <VL53L1_copy_sys_and_core_results_to_range_results+0x142>
 8007bde:	e0ab      	b.n	8007d38 <VL53L1_copy_sys_and_core_results_to_range_results+0x1dc>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	789b      	ldrb	r3, [r3, #2]
 8007be4:	2b07      	cmp	r3, #7
 8007be6:	d104      	bne.n	8007bf2 <VL53L1_copy_sys_and_core_results_to_range_results+0x96>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	821a      	strh	r2, [r3, #16]
 8007bf0:	e00c      	b.n	8007c0c <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	789b      	ldrb	r3, [r3, #2]
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d104      	bne.n	8007c04 <VL53L1_copy_sys_and_core_results_to_range_results+0xa8>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	821a      	strh	r2, [r3, #16]
 8007c02:	e003      	b.n	8007c0c <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	895b      	ldrh	r3, [r3, #10]
 8007c28:	015b      	lsls	r3, r3, #5
 8007c2a:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	2380      	movs	r3, #128	; 0x80
 8007c30:	025b      	lsls	r3, r3, #9
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d301      	bcc.n	8007c3a <VL53L1_copy_sys_and_core_results_to_range_results+0xde>
				tmpu32 = 0xFFFF;
 8007c36:	4b5c      	ldr	r3, [pc, #368]	; (8007da8 <VL53L1_copy_sys_and_core_results_to_range_results+0x24c>)
 8007c38:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8007c4e:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4353      	muls	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2280      	movs	r2, #128	; 0x80
 8007c5c:	00d2      	lsls	r2, r2, #3
 8007c5e:	4694      	mov	ip, r2
 8007c60:	4463      	add	r3, ip
 8007c62:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	da02      	bge.n	8007c70 <VL53L1_copy_sys_and_core_results_to_range_results+0x114>
 8007c6a:	4a50      	ldr	r2, [pc, #320]	; (8007dac <VL53L1_copy_sys_and_core_results_to_range_results+0x250>)
 8007c6c:	4694      	mov	ip, r2
 8007c6e:	4463      	add	r3, ip
 8007c70:	12db      	asrs	r3, r3, #11
 8007c72:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	b21a      	sxth	r2, r3
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	621a      	str	r2, [r3, #32]

			break;
 8007c9c:	e04c      	b.n	8007d38 <VL53L1_copy_sys_and_core_results_to_range_results+0x1dc>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4252      	negs	r2, r2
 8007cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	8bdb      	ldrh	r3, [r3, #30]
 8007cc2:	015b      	lsls	r3, r3, #5
 8007cc4:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d301      	bcc.n	8007cd4 <VL53L1_copy_sys_and_core_results_to_range_results+0x178>
				tmpu32 = 0xFFFF;
 8007cd0:	4b35      	ldr	r3, [pc, #212]	; (8007da8 <VL53L1_copy_sys_and_core_results_to_range_results+0x24c>)
 8007cd2:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8007ce8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4353      	muls	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2280      	movs	r2, #128	; 0x80
 8007cf6:	00d2      	lsls	r2, r2, #3
 8007cf8:	4694      	mov	ip, r2
 8007cfa:	4463      	add	r3, ip
 8007cfc:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da02      	bge.n	8007d0a <VL53L1_copy_sys_and_core_results_to_range_results+0x1ae>
 8007d04:	4a29      	ldr	r2, [pc, #164]	; (8007dac <VL53L1_copy_sys_and_core_results_to_range_results+0x250>)
 8007d06:	4694      	mov	ip, r2
 8007d08:	4463      	add	r3, ip
 8007d0a:	12db      	asrs	r3, r3, #11
 8007d0c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	b21a      	sxth	r2, r3
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	621a      	str	r2, [r3, #32]

			break;
 8007d36:	46c0      	nop			; (mov r8, r8)
		}

		pdata++;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	3340      	adds	r3, #64	; 0x40
 8007d3c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8007d3e:	211f      	movs	r1, #31
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	187b      	adds	r3, r7, r1
 8007d46:	3201      	adds	r2, #1
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	231f      	movs	r3, #31
 8007d4c:	18fb      	adds	r3, r7, r3
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d800      	bhi.n	8007d56 <VL53L1_copy_sys_and_core_results_to_range_results+0x1fa>
 8007d54:	e71c      	b.n	8007b90 <VL53L1_copy_sys_and_core_results_to_range_results+0x34>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	001a      	movs	r2, r3
 8007d62:	231f      	movs	r3, #31
 8007d64:	4013      	ands	r3, r2
 8007d66:	2211      	movs	r2, #17
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	4192      	sbcs	r2, r2
 8007d6c:	4252      	negs	r2, r2
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	d115      	bne.n	8007da0 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
 8007d74:	4a0e      	ldr	r2, [pc, #56]	; (8007db0 <VL53L1_copy_sys_and_core_results_to_range_results+0x254>)
 8007d76:	40da      	lsrs	r2, r3
 8007d78:	0013      	movs	r3, r2
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	1e5a      	subs	r2, r3, #1
 8007d80:	4193      	sbcs	r3, r2
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	221f      	movs	r2, #31
 8007d8e:	4013      	ands	r3, r2
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2242      	movs	r2, #66	; 0x42
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	5499      	strb	r1, [r3, r2]
	break;
 8007d9e:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(0);
}
 8007da0:	46c0      	nop			; (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b008      	add	sp, #32
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	0000ffff 	.word	0x0000ffff
 8007dac:	000007ff 	.word	0x000007ff
 8007db0:	0002200e 	.word	0x0002200e

08007db4 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	200a      	movs	r0, #10
 8007dc0:	183b      	adds	r3, r7, r0
 8007dc2:	1c0a      	adds	r2, r1, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007dc6:	2317      	movs	r3, #23
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8007dd2:	183b      	adds	r3, r7, r0
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	4ad7      	ldr	r2, [pc, #860]	; (8008134 <VL53L1_get_tuning_parm+0x380>)
 8007dd8:	4694      	mov	ip, r2
 8007dda:	4463      	add	r3, ip
 8007ddc:	2b38      	cmp	r3, #56	; 0x38
 8007dde:	d900      	bls.n	8007de2 <VL53L1_get_tuning_parm+0x2e>
 8007de0:	e1ac      	b.n	800813c <VL53L1_get_tuning_parm+0x388>
 8007de2:	009a      	lsls	r2, r3, #2
 8007de4:	4bd4      	ldr	r3, [pc, #848]	; (8008138 <VL53L1_get_tuning_parm+0x384>)
 8007de6:	18d3      	adds	r3, r2, r3
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	469f      	mov	pc, r3

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	22a4      	movs	r2, #164	; 0xa4
 8007df0:	5a9b      	ldrh	r3, [r3, r2]
 8007df2:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
	break;
 8007df8:	e1a8      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	22a6      	movs	r2, #166	; 0xa6
 8007dfe:	5a9b      	ldrh	r3, [r3, r2]
 8007e00:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	break;
 8007e06:	e1a1      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	22a8      	movs	r2, #168	; 0xa8
 8007e0c:	5a9b      	ldrh	r3, [r3, r2]
 8007e0e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
	break;
 8007e14:	e19a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	22b0      	movs	r2, #176	; 0xb0
 8007e1a:	5c9b      	ldrb	r3, [r3, r2]
 8007e1c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
	break;
 8007e22:	e193      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	22b1      	movs	r2, #177	; 0xb1
 8007e28:	5c9b      	ldrb	r3, [r3, r2]
 8007e2a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	601a      	str	r2, [r3, #0]
	break;
 8007e30:	e18c      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	22b2      	movs	r2, #178	; 0xb2
 8007e36:	5a9b      	ldrh	r3, [r3, r2]
 8007e38:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
	break;
 8007e3e:	e185      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	229c      	movs	r2, #156	; 0x9c
 8007e44:	5a9b      	ldrh	r3, [r3, r2]
 8007e46:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
	break;
 8007e4c:	e17e      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	22b4      	movs	r2, #180	; 0xb4
 8007e52:	5c9b      	ldrb	r3, [r3, r2]
 8007e54:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	601a      	str	r2, [r3, #0]
	break;
 8007e5a:	e177      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	22b6      	movs	r2, #182	; 0xb6
 8007e60:	5a9b      	ldrh	r3, [r3, r2]
 8007e62:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]
	break;
 8007e68:	e170      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	22b8      	movs	r2, #184	; 0xb8
 8007e6e:	5a9b      	ldrh	r3, [r3, r2]
 8007e70:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	break;
 8007e76:	e169      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	22ba      	movs	r2, #186	; 0xba
 8007e7c:	5a9b      	ldrh	r3, [r3, r2]
 8007e7e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
	break;
 8007e84:	e162      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	22bc      	movs	r2, #188	; 0xbc
 8007e8a:	5a9b      	ldrh	r3, [r3, r2]
 8007e8c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
	break;
 8007e92:	e15b      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	22be      	movs	r2, #190	; 0xbe
 8007e98:	5a9b      	ldrh	r3, [r3, r2]
 8007e9a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
	break;
 8007ea0:	e154      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	22c0      	movs	r2, #192	; 0xc0
 8007ea6:	5a9b      	ldrh	r3, [r3, r2]
 8007ea8:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
	break;
 8007eae:	e14d      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	22c2      	movs	r2, #194	; 0xc2
 8007eb4:	5c9b      	ldrb	r3, [r3, r2]
 8007eb6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
	break;
 8007ebc:	e146      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	22c3      	movs	r2, #195	; 0xc3
 8007ec2:	5c9b      	ldrb	r3, [r3, r2]
 8007ec4:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
	break;
 8007eca:	e13f      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	22c4      	movs	r2, #196	; 0xc4
 8007ed0:	5c9b      	ldrb	r3, [r3, r2]
 8007ed2:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
	break;
 8007ed8:	e138      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	23a0      	movs	r3, #160	; 0xa0
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	5cd3      	ldrb	r3, [r2, r3]
 8007ee2:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]
	break;
 8007ee8:	e130      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	22c5      	movs	r2, #197	; 0xc5
 8007eee:	5c9b      	ldrb	r3, [r3, r2]
 8007ef0:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	break;
 8007ef6:	e129      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	22c7      	movs	r2, #199	; 0xc7
 8007efc:	5c9b      	ldrb	r3, [r3, r2]
 8007efe:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
	break;
 8007f04:	e122      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	22c8      	movs	r2, #200	; 0xc8
 8007f0a:	5c9b      	ldrb	r3, [r3, r2]
 8007f0c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
	break;
 8007f12:	e11b      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	239f      	movs	r3, #159	; 0x9f
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	5ed3      	ldrsh	r3, [r2, r3]
 8007f1c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
	break;
 8007f22:	e113      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	22aa      	movs	r2, #170	; 0xaa
 8007f28:	5c9b      	ldrb	r3, [r3, r2]
 8007f2a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	break;
 8007f30:	e10c      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	22ab      	movs	r2, #171	; 0xab
 8007f36:	5c9b      	ldrb	r3, [r3, r2]
 8007f38:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
	break;
 8007f3e:	e105      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	22ac      	movs	r2, #172	; 0xac
 8007f44:	5c9b      	ldrb	r3, [r3, r2]
 8007f46:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
	break;
 8007f4c:	e0fe      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	22ad      	movs	r2, #173	; 0xad
 8007f52:	5c9b      	ldrb	r3, [r3, r2]
 8007f54:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
	break;
 8007f5a:	e0f7      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	22ae      	movs	r2, #174	; 0xae
 8007f60:	5c9b      	ldrb	r3, [r3, r2]
 8007f62:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
	break;
 8007f68:	e0f0      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	22af      	movs	r2, #175	; 0xaf
 8007f6e:	5c9b      	ldrb	r3, [r3, r2]
 8007f70:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
	break;
 8007f76:	e0e9      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	22c6      	movs	r2, #198	; 0xc6
 8007f7c:	5c9b      	ldrb	r3, [r3, r2]
 8007f7e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	601a      	str	r2, [r3, #0]
	break;
 8007f84:	e0e2      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	23b0      	movs	r3, #176	; 0xb0
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	5cd3      	ldrb	r3, [r2, r3]
 8007f8e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
	break;
 8007f94:	e0da      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	2388      	movs	r3, #136	; 0x88
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	5cd3      	ldrb	r3, [r2, r3]
 8007f9e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
	break;
 8007fa4:	e0d2      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	2312      	movs	r3, #18
 8007faa:	33ff      	adds	r3, #255	; 0xff
 8007fac:	5cd3      	ldrb	r3, [r2, r3]
 8007fae:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
	break;
 8007fb4:	e0ca      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	238a      	movs	r3, #138	; 0x8a
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	58d3      	ldr	r3, [r2, r3]
 8007fbe:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
	break;
 8007fc4:	e0c2      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	238c      	movs	r3, #140	; 0x8c
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	5ad3      	ldrh	r3, [r2, r3]
 8007fce:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
	break;
 8007fd4:	e0ba      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	238d      	movs	r3, #141	; 0x8d
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	5ad3      	ldrh	r3, [r2, r3]
 8007fde:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
	break;
 8007fe4:	e0b2      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	238e      	movs	r3, #142	; 0x8e
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	5ad3      	ldrh	r3, [r2, r3]
 8007fee:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
	break;
 8007ff4:	e0aa      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	23a2      	movs	r3, #162	; 0xa2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	5ad3      	ldrh	r3, [r2, r3]
 8007ffe:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	break;
 8008004:	e0a2      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	23a4      	movs	r3, #164	; 0xa4
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	58d3      	ldr	r3, [r2, r3]
 800800e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
	break;
 8008014:	e09a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	23a8      	movs	r3, #168	; 0xa8
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	58d3      	ldr	r3, [r2, r3]
 800801e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
	break;
 8008024:	e092      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	23a6      	movs	r3, #166	; 0xa6
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	58d3      	ldr	r3, [r2, r3]
 800802e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	601a      	str	r2, [r3, #0]
	break;
 8008034:	e08a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	23aa      	movs	r3, #170	; 0xaa
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	5cd3      	ldrb	r3, [r2, r3]
 800803e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	break;
 8008044:	e082      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	2356      	movs	r3, #86	; 0x56
 800804a:	33ff      	adds	r3, #255	; 0xff
 800804c:	5cd3      	ldrb	r3, [r2, r3]
 800804e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
	break;
 8008054:	e07a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	23ab      	movs	r3, #171	; 0xab
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	5cd3      	ldrb	r3, [r2, r3]
 800805e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	break;
 8008064:	e072      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	2322      	movs	r3, #34	; 0x22
 800806a:	33ff      	adds	r3, #255	; 0xff
 800806c:	5cd3      	ldrb	r3, [r2, r3]
 800806e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	break;
 8008074:	e06a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	2391      	movs	r3, #145	; 0x91
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	5cd3      	ldrb	r3, [r2, r3]
 800807e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
	break;
 8008084:	e062      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	2394      	movs	r3, #148	; 0x94
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	5ad3      	ldrh	r3, [r2, r3]
 800808e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
	break;
 8008094:	e05a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	22ca      	movs	r2, #202	; 0xca
 800809a:	5a9b      	ldrh	r3, [r3, r2]
 800809c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
	break;
 80080a2:	e053      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	22cc      	movs	r2, #204	; 0xcc
 80080a8:	5a9b      	ldrh	r3, [r3, r2]
 80080aa:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
	break;
 80080b0:	e04c      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	22d0      	movs	r2, #208	; 0xd0
 80080b6:	589b      	ldr	r3, [r3, r2]
 80080b8:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
	break;
 80080be:	e045      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	22d4      	movs	r2, #212	; 0xd4
 80080c4:	589b      	ldr	r3, [r3, r2]
 80080c6:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
	break;
 80080cc:	e03e      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	22d8      	movs	r2, #216	; 0xd8
 80080d2:	589b      	ldr	r3, [r3, r2]
 80080d4:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
	break;
 80080da:	e037      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	22dc      	movs	r2, #220	; 0xdc
 80080e0:	589b      	ldr	r3, [r3, r2]
 80080e2:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
	break;
 80080e8:	e030      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	22e4      	movs	r2, #228	; 0xe4
 80080ee:	589b      	ldr	r3, [r3, r2]
 80080f0:	001a      	movs	r2, r3
		*ptuning_parm_value =
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
	break;
 80080f6:	e029      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	22e8      	movs	r2, #232	; 0xe8
 80080fc:	589b      	ldr	r3, [r3, r2]
 80080fe:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
	break;
 8008104:	e022      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	23b9      	movs	r3, #185	; 0xb9
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	5cd3      	ldrb	r3, [r2, r3]
 800810e:	001a      	movs	r2, r3
		*ptuning_parm_value =
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
	break;
 8008114:	e01a      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	22e0      	movs	r2, #224	; 0xe0
 800811a:	589b      	ldr	r3, [r3, r2]
 800811c:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
	break;
 8008122:	e013      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	22ec      	movs	r2, #236	; 0xec
 8008128:	589b      	ldr	r3, [r3, r2]
 800812a:	001a      	movs	r2, r3
		*ptuning_parm_value =
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
	break;
 8008130:	e00c      	b.n	800814c <VL53L1_get_tuning_parm+0x398>
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	ffff8000 	.word	0xffff8000
 8008138:	0800e54c 	.word	0x0800e54c


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a07      	ldr	r2, [pc, #28]	; (800815c <VL53L1_get_tuning_parm+0x3a8>)
 8008140:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008142:	2317      	movs	r3, #23
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	22fc      	movs	r2, #252	; 0xfc
 8008148:	701a      	strb	r2, [r3, #0]
	break;
 800814a:	46c0      	nop			; (mov r8, r8)

	}

	LOG_FUNCTION_END(status);

	return status;
 800814c:	2317      	movs	r3, #23
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b25b      	sxtb	r3, r3
}
 8008154:	0018      	movs	r0, r3
 8008156:	46bd      	mov	sp, r7
 8008158:	b006      	add	sp, #24
 800815a:	bd80      	pop	{r7, pc}
 800815c:	7fffffff 	.word	0x7fffffff

08008160 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008168:	210f      	movs	r1, #15
 800816a:	187b      	adds	r3, r7, r1
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2208      	movs	r2, #8
 8008174:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220b      	movs	r2, #11
 800817a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	22fa      	movs	r2, #250	; 0xfa
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	22a0      	movs	r2, #160	; 0xa0
 8008188:	0112      	lsls	r2, r2, #4
 800818a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	22a0      	movs	r2, #160	; 0xa0
 8008190:	00d2      	lsls	r2, r2, #3
 8008192:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	22a0      	movs	r2, #160	; 0xa0
 8008198:	0152      	lsls	r2, r2, #5
 800819a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800819c:	187b      	adds	r3, r7, r1
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b25b      	sxtb	r3, r3
}
 80081a2:	0018      	movs	r0, r3
 80081a4:	46bd      	mov	sp, r7
 80081a6:	b004      	add	sp, #16
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081b4:	210f      	movs	r1, #15
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2212      	movs	r2, #18
 80081c6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	220f      	movs	r2, #15
 80081cc:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <VL53L1_init_ssc_config_struct+0x44>)
 80081d8:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	220c      	movs	r2, #12
 80081de:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b25b      	sxtb	r3, r3
}
 80081e6:	0018      	movs	r0, r3
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b004      	add	sp, #16
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	00008ca0 	.word	0x00008ca0

080081f4 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081fe:	230f      	movs	r3, #15
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	895b      	ldrh	r3, [r3, #10]
 800820a:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	220c      	movs	r2, #12
 8008214:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	220e      	movs	r2, #14
 800821e:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	895b      	ldrh	r3, [r3, #10]
 8008228:	001a      	movs	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	220c      	movs	r2, #12
 8008232:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	220e      	movs	r2, #14
 800823c:	5e9a      	ldrsh	r2, [r3, r2]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10d      	bne.n	8008272 <VL53L1_init_xtalk_config_struct+0x7e>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2204      	movs	r2, #4
 800825a:	5e9b      	ldrsh	r3, [r3, r2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d108      	bne.n	8008272 <VL53L1_init_xtalk_config_struct+0x7e>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2206      	movs	r2, #6
 8008264:	5e9b      	ldrsh	r3, [r3, r2]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <VL53L1_init_xtalk_config_struct+0x7e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	741a      	strb	r2, [r3, #16]
 8008270:	e002      	b.n	8008278 <VL53L1_init_xtalk_config_struct+0x84>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2201      	movs	r2, #1
 8008276:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8008278:	230f      	movs	r3, #15
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b25b      	sxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d114      	bne.n	80082ae <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8008288:	2b01      	cmp	r3, #1
 800828a:	d110      	bne.n	80082ae <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2104      	movs	r1, #4
 8008294:	5e59      	ldrsh	r1, [r3, r1]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2206      	movs	r2, #6
 800829a:	5e9a      	ldrsh	r2, [r3, r2]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	7d1b      	ldrb	r3, [r3, #20]
 80082a0:	f001 f8a0 	bl	80093e4 <VL53L1_calc_range_ignore_threshold>
 80082a4:	0003      	movs	r3, r0
 80082a6:	001a      	movs	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	82da      	strh	r2, [r3, #22]
 80082ac:	e002      	b.n	80082b4 <VL53L1_init_xtalk_config_struct+0xc0>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2200      	movs	r2, #0
 80082b2:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 80082b4:	230f      	movs	r3, #15
 80082b6:	18fb      	adds	r3, r7, r3
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b25b      	sxtb	r3, r3
}
 80082bc:	0018      	movs	r0, r3
 80082be:	46bd      	mov	sp, r7
 80082c0:	b004      	add	sp, #16
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082cc:	210f      	movs	r1, #15
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	22a0      	movs	r2, #160	; 0xa0
 80082d8:	0112      	lsls	r2, r2, #4
 80082da:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	22fa      	movs	r2, #250	; 0xfa
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <VL53L1_init_offset_cal_config_struct+0x4c>)
 80082e8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a08      	ldr	r2, [pc, #32]	; (8008310 <VL53L1_init_offset_cal_config_struct+0x4c>)
 80082ee:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2208      	movs	r2, #8
 80082f4:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2228      	movs	r2, #40	; 0x28
 80082fa:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2209      	movs	r2, #9
 8008300:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008302:	187b      	adds	r3, r7, r1
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b25b      	sxtb	r3, r3
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b004      	add	sp, #16
 800830e:	bd80      	pop	{r7, pc}
 8008310:	000032c8 	.word	0x000032c8

08008314 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800831c:	200f      	movs	r0, #15
 800831e:	183b      	adds	r3, r7, r0
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a40      	ldr	r2, [pc, #256]	; (8008428 <VL53L1_init_tuning_parm_storage_struct+0x114>)
 8008328:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a3f      	ldr	r2, [pc, #252]	; (800842c <VL53L1_init_tuning_parm_storage_struct+0x118>)
 800832e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <VL53L1_init_tuning_parm_storage_struct+0x11c>)
 8008334:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	220e      	movs	r2, #14
 800833a:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	220a      	movs	r2, #10
 8008340:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2206      	movs	r2, #6
 8008346:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	220e      	movs	r2, #14
 800834c:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	220a      	movs	r2, #10
 8008352:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2206      	movs	r2, #6
 8008358:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2221      	movs	r2, #33	; 0x21
 8008364:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	22b4      	movs	r2, #180	; 0xb4
 8008376:	0052      	lsls	r2, r2, #1
 8008378:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	22b4      	movs	r2, #180	; 0xb4
 800837e:	0052      	lsls	r2, r2, #1
 8008380:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	22b4      	movs	r2, #180	; 0xb4
 8008386:	0052      	lsls	r2, r2, #1
 8008388:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	22c0      	movs	r2, #192	; 0xc0
 800838e:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	22c0      	movs	r2, #192	; 0xc0
 8008394:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	22c0      	movs	r2, #192	; 0xc0
 800839a:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2208      	movs	r2, #8
 80083a0:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2210      	movs	r2, #16
 80083a6:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	2101      	movs	r1, #1
 80083ae:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2221      	movs	r2, #33	; 0x21
 80083b4:	2102      	movs	r1, #2
 80083b6:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2222      	movs	r2, #34	; 0x22
 80083bc:	2101      	movs	r1, #1
 80083be:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2223      	movs	r2, #35	; 0x23
 80083c4:	2102      	movs	r1, #2
 80083c6:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2224      	movs	r2, #36	; 0x24
 80083cc:	2100      	movs	r1, #0
 80083ce:	5499      	strb	r1, [r3, r2]
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	22a0      	movs	r2, #160	; 0xa0
 80083d4:	0112      	lsls	r2, r2, #4
 80083d6:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	22a0      	movs	r2, #160	; 0xa0
 80083dc:	0112      	lsls	r2, r2, #4
 80083de:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a14      	ldr	r2, [pc, #80]	; (8008434 <VL53L1_init_tuning_parm_storage_struct+0x120>)
 80083e4:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	22fa      	movs	r2, #250	; 0xfa
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	22fa      	movs	r2, #250	; 0xfa
 80083f2:	00d2      	lsls	r2, r2, #3
 80083f4:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	22fa      	movs	r2, #250	; 0xfa
 80083fa:	00d2      	lsls	r2, r2, #3
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a0d      	ldr	r2, [pc, #52]	; (8008438 <VL53L1_init_tuning_parm_storage_struct+0x124>)
 8008402:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a0d      	ldr	r2, [pc, #52]	; (800843c <VL53L1_init_tuning_parm_storage_struct+0x128>)
 8008408:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	22af      	movs	r2, #175	; 0xaf
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	22fa      	movs	r2, #250	; 0xfa
 8008416:	0152      	lsls	r2, r2, #5
 8008418:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800841a:	183b      	adds	r3, r7, r0
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b25b      	sxtb	r3, r3
}
 8008420:	0018      	movs	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	b004      	add	sp, #16
 8008426:	bd80      	pop	{r7, pc}
 8008428:	ffff8003 	.word	0xffff8003
 800842c:	ffff8001 	.word	0xffff8001
 8008430:	ffff8041 	.word	0xffff8041
 8008434:	00008030 	.word	0x00008030
 8008438:	0000f618 	.word	0x0000f618
 800843c:	000032c8 	.word	0x000032c8

08008440 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800844e:	2117      	movs	r1, #23
 8008450:	187b      	adds	r3, r7, r1
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	22a0      	movs	r2, #160	; 0xa0
 800845a:	0112      	lsls	r2, r2, #4
 800845c:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2211      	movs	r2, #17
 800849e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2202      	movs	r2, #2
 80084a4:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2202      	movs	r2, #2
 80084b0:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2208      	movs	r2, #8
 80084b6:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2220      	movs	r2, #32
 80084d2:	5c9a      	ldrb	r2, [r3, r2]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	22ff      	movs	r2, #255	; 0xff
 80084f4:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2220      	movs	r2, #32
 8008528:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	220b      	movs	r2, #11
 800852e:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2202      	movs	r2, #2
 800853c:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	220d      	movs	r2, #13
 8008542:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2200      	movs	r2, #0
 8008550:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2201      	movs	r2, #1
 8008556:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4a45      	ldr	r2, [pc, #276]	; (800867c <VL53L1_preset_mode_standard_ranging+0x23c>)
 8008568:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2238      	movs	r2, #56	; 0x38
 8008574:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	22ff      	movs	r2, #255	; 0xff
 800857a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2201      	movs	r2, #1
 8008580:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	221a      	movs	r2, #26
 800858c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	22cc      	movs	r2, #204	; 0xcc
 80085a4:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	220b      	movs	r2, #11
 80085aa:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	22f5      	movs	r2, #245	; 0xf5
 80085b6:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2209      	movs	r2, #9
 80085bc:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2208      	movs	r2, #8
 80085d2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2278      	movs	r2, #120	; 0x78
 80085d8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2200      	movs	r2, #0
 80085f6:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	2221      	movs	r2, #33	; 0x21
 8008602:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->system__seed_config =
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	220b      	movs	r2, #11
 800860c:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2209      	movs	r2, #9
 8008612:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	2224      	movs	r2, #36	; 0x24
 800862e:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->sd_config__first_order_select =
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	2223      	movs	r2, #35	; 0x23
 8008638:	5c9a      	ldrb	r2, [r3, r2]
	pdynamic->sd_config__quantifier         =
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	22c7      	movs	r2, #199	; 0xc7
 8008642:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	22ff      	movs	r2, #255	; 0xff
 8008648:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	22db      	movs	r2, #219	; 0xdb
 800864e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2202      	movs	r2, #2
 8008654:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	2200      	movs	r2, #0
 800865a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	2201      	movs	r2, #1
 8008660:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	2201      	movs	r2, #1
 8008666:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	2221      	movs	r2, #33	; 0x21
 800866c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800866e:	187b      	adds	r3, r7, r1
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	b25b      	sxtb	r3, r3
}
 8008674:	0018      	movs	r0, r3
 8008676:	46bd      	mov	sp, r7
 8008678:	b006      	add	sp, #24
 800867a:	bd80      	pop	{r7, pc}
 800867c:	ffff8c00 	.word	0xffff8c00

08008680 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008682:	b089      	sub	sp, #36	; 0x24
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800868e:	2617      	movs	r6, #23
 8008690:	19bb      	adds	r3, r7, r6
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8008696:	19bc      	adds	r4, r7, r6
 8008698:	683d      	ldr	r5, [r7, #0]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	002b      	movs	r3, r5
 80086aa:	f7ff fec9 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 80086ae:	0003      	movs	r3, r0
 80086b0:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80086b2:	19bb      	adds	r3, r7, r6
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b25b      	sxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d121      	bne.n	8008700 <VL53L1_preset_mode_standard_ranging_short_range+0x80>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2207      	movs	r2, #7
 80086c0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2205      	movs	r2, #5
 80086c6:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2208      	movs	r2, #8
 80086dc:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2238      	movs	r2, #56	; 0x38
 80086e2:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2207      	movs	r2, #7
 80086e8:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2205      	movs	r2, #5
 80086ee:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80086f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fa:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008700:	2317      	movs	r3, #23
 8008702:	18fb      	adds	r3, r7, r3
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	b25b      	sxtb	r3, r3
}
 8008708:	0018      	movs	r0, r3
 800870a:	46bd      	mov	sp, r7
 800870c:	b007      	add	sp, #28
 800870e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008710 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b089      	sub	sp, #36	; 0x24
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800871e:	2617      	movs	r6, #23
 8008720:	19bb      	adds	r3, r7, r6
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8008726:	19bc      	adds	r4, r7, r6
 8008728:	683d      	ldr	r5, [r7, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	002b      	movs	r3, r5
 800873a:	f7ff fe81 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 800873e:	0003      	movs	r3, r0
 8008740:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008742:	19bb      	adds	r3, r7, r6
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b25b      	sxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d121      	bne.n	8008790 <VL53L1_preset_mode_standard_ranging_long_range+0x80>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	220f      	movs	r2, #15
 8008750:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	220d      	movs	r2, #13
 8008756:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008762:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2208      	movs	r2, #8
 800876c:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	22b8      	movs	r2, #184	; 0xb8
 8008772:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	220f      	movs	r2, #15
 8008778:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	220d      	movs	r2, #13
 800877e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008790:	2317      	movs	r3, #23
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b25b      	sxtb	r3, r3
}
 8008798:	0018      	movs	r0, r3
 800879a:	46bd      	mov	sp, r7
 800879c:	b007      	add	sp, #28
 800879e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087a0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a2:	b089      	sub	sp, #36	; 0x24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80087ae:	2617      	movs	r6, #23
 80087b0:	19bb      	adds	r3, r7, r6
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80087b6:	19bc      	adds	r4, r7, r6
 80087b8:	683d      	ldr	r5, [r7, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	002b      	movs	r3, r5
 80087ca:	f7ff fe39 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 80087ce:	0003      	movs	r3, r0
 80087d0:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80087d2:	19bb      	adds	r3, r7, r6
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b25b      	sxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x48>

		pgeneral->dss_config__roi_mode_control =
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2202      	movs	r2, #2
 80087e0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	223b      	movs	r2, #59	; 0x3b
 80087e6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80087e8:	2317      	movs	r3, #23
 80087ea:	18fb      	adds	r3, r7, r3
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b25b      	sxtb	r3, r3
}
 80087f0:	0018      	movs	r0, r3
 80087f2:	46bd      	mov	sp, r7
 80087f4:	b007      	add	sp, #28
 80087f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087f8 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	b089      	sub	sp, #36	; 0x24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008806:	2617      	movs	r6, #23
 8008808:	19bb      	adds	r3, r7, r6
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800880e:	19bc      	adds	r4, r7, r6
 8008810:	683d      	ldr	r5, [r7, #0]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	002b      	movs	r3, r5
 8008822:	f7ff fe0d 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 8008826:	0003      	movs	r3, r0
 8008828:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800882a:	19bb      	adds	r3, r7, r6
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b25b      	sxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x48>

		pgeneral->dss_config__roi_mode_control =
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2202      	movs	r2, #2
 8008838:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	225b      	movs	r2, #91	; 0x5b
 800883e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008840:	2317      	movs	r3, #23
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b25b      	sxtb	r3, r3
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b007      	add	sp, #28
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008850 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008852:	b089      	sub	sp, #36	; 0x24
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800885e:	2617      	movs	r6, #23
 8008860:	19bb      	adds	r3, r7, r6
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8008866:	19bc      	adds	r4, r7, r6
 8008868:	683d      	ldr	r5, [r7, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	002b      	movs	r3, r5
 800887a:	f7ff fde1 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 800887e:	0003      	movs	r3, r0
 8008880:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008882:	19bb      	adds	r3, r7, r6
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b25b      	sxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11a      	bne.n	80088c2 <VL53L1_preset_mode_timed_ranging+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	22b1      	movs	r2, #177	; 0xb1
 800889c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	22d4      	movs	r2, #212	; 0xd4
 80088a8:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	22c0      	movs	r2, #192	; 0xc0
 80088ae:	00d2      	lsls	r2, r2, #3
 80088b0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	2222      	movs	r2, #34	; 0x22
 80088b6:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2240      	movs	r2, #64	; 0x40
 80088c0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80088c2:	2317      	movs	r3, #23
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b25b      	sxtb	r3, r3
}
 80088ca:	0018      	movs	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b007      	add	sp, #28
 80088d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088d2 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80088d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d4:	b089      	sub	sp, #36	; 0x24
 80088d6:	af02      	add	r7, sp, #8
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80088e0:	2617      	movs	r6, #23
 80088e2:	19bb      	adds	r3, r7, r6
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80088e8:	19bc      	adds	r4, r7, r6
 80088ea:	683d      	ldr	r5, [r7, #0]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	002b      	movs	r3, r5
 80088fc:	f7ff fec0 	bl	8008680 <VL53L1_preset_mode_standard_ranging_short_range>
 8008900:	0003      	movs	r3, r0
 8008902:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008904:	19bb      	adds	r3, r7, r6
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	b25b      	sxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d11a      	bne.n	8008944 <VL53L1_preset_mode_timed_ranging_short_range+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2284      	movs	r2, #132	; 0x84
 800891e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	22b1      	movs	r2, #177	; 0xb1
 800892a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	22c0      	movs	r2, #192	; 0xc0
 8008930:	00d2      	lsls	r2, r2, #3
 8008932:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008936:	2222      	movs	r2, #34	; 0x22
 8008938:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2240      	movs	r2, #64	; 0x40
 8008942:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008944:	2317      	movs	r3, #23
 8008946:	18fb      	adds	r3, r7, r3
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b25b      	sxtb	r3, r3
}
 800894c:	0018      	movs	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	b007      	add	sp, #28
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008954 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008956:	b089      	sub	sp, #36	; 0x24
 8008958:	af02      	add	r7, sp, #8
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008962:	2617      	movs	r6, #23
 8008964:	19bb      	adds	r3, r7, r6
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800896a:	19bc      	adds	r4, r7, r6
 800896c:	683d      	ldr	r5, [r7, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	002b      	movs	r3, r5
 800897e:	f7ff fec7 	bl	8008710 <VL53L1_preset_mode_standard_ranging_long_range>
 8008982:	0003      	movs	r3, r0
 8008984:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008986:	19bb      	adds	r3, r7, r6
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b25b      	sxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11a      	bne.n	80089c6 <VL53L1_preset_mode_timed_ranging_long_range+0x72>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2200      	movs	r2, #0
 8008994:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2297      	movs	r2, #151	; 0x97
 80089a0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	22b1      	movs	r2, #177	; 0xb1
 80089ac:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	22c0      	movs	r2, #192	; 0xc0
 80089b2:	00d2      	lsls	r2, r2, #3
 80089b4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	2222      	movs	r2, #34	; 0x22
 80089ba:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2240      	movs	r2, #64	; 0x40
 80089c4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80089c6:	2317      	movs	r3, #23
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	b25b      	sxtb	r3, r3
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b007      	add	sp, #28
 80089d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089d6 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80089d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d8:	b089      	sub	sp, #36	; 0x24
 80089da:	af02      	add	r7, sp, #8
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80089e4:	2617      	movs	r6, #23
 80089e6:	19bb      	adds	r3, r7, r6
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80089ec:	19bc      	adds	r4, r7, r6
 80089ee:	683d      	ldr	r5, [r7, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	002b      	movs	r3, r5
 8008a00:	f7ff ff26 	bl	8008850 <VL53L1_preset_mode_timed_ranging>
 8008a04:	0003      	movs	r3, r0
 8008a06:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8008a08:	19bb      	adds	r3, r7, r6
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d108      	bne.n	8008a24 <VL53L1_preset_mode_low_power_auto_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 8008a12:	19bc      	adds	r4, r7, r6
 8008a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 ff82 	bl	8009924 <VL53L1_config_low_power_auto_mode>
 8008a20:	0003      	movs	r3, r0
 8008a22:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008a24:	2317      	movs	r3, #23
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b25b      	sxtb	r3, r3
}
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	b007      	add	sp, #28
 8008a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a34 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a42:	2617      	movs	r6, #23
 8008a44:	19bb      	adds	r3, r7, r6
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008a4a:	19bc      	adds	r4, r7, r6
 8008a4c:	683d      	ldr	r5, [r7, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	002b      	movs	r3, r5
 8008a5e:	f7ff ff38 	bl	80088d2 <VL53L1_preset_mode_timed_ranging_short_range>
 8008a62:	0003      	movs	r3, r0
 8008a64:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8008a66:	19bb      	adds	r3, r7, r6
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b25b      	sxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d108      	bne.n	8008a82 <VL53L1_preset_mode_low_power_auto_short_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 8008a70:	19bc      	adds	r4, r7, r6
 8008a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f000 ff53 	bl	8009924 <VL53L1_config_low_power_auto_mode>
 8008a7e:	0003      	movs	r3, r0
 8008a80:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008a82:	2317      	movs	r3, #23
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	b25b      	sxtb	r3, r3
}
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	b007      	add	sp, #28
 8008a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a92 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a94:	b089      	sub	sp, #36	; 0x24
 8008a96:	af02      	add	r7, sp, #8
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008aa0:	2617      	movs	r6, #23
 8008aa2:	19bb      	adds	r3, r7, r6
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8008aa8:	19bc      	adds	r4, r7, r6
 8008aaa:	683d      	ldr	r5, [r7, #0]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	002b      	movs	r3, r5
 8008abc:	f7ff ff4a 	bl	8008954 <VL53L1_preset_mode_timed_ranging_long_range>
 8008ac0:	0003      	movs	r3, r0
 8008ac2:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8008ac4:	19bb      	adds	r3, r7, r6
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d108      	bne.n	8008ae0 <VL53L1_preset_mode_low_power_auto_long_ranging+0x4e>
		status = VL53L1_config_low_power_auto_mode(
 8008ace:	19bc      	adds	r4, r7, r6
 8008ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f000 ff24 	bl	8009924 <VL53L1_config_low_power_auto_mode>
 8008adc:	0003      	movs	r3, r0
 8008ade:	7023      	strb	r3, [r4, #0]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ae0:	2317      	movs	r3, #23
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b25b      	sxtb	r3, r3
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b007      	add	sp, #28
 8008aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008af0 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b089      	sub	sp, #36	; 0x24
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008afe:	2617      	movs	r6, #23
 8008b00:	19bb      	adds	r3, r7, r6
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8008b06:	19bc      	adds	r4, r7, r6
 8008b08:	683d      	ldr	r5, [r7, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	002b      	movs	r3, r5
 8008b1a:	f7ff fc91 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	7023      	strb	r3, [r4, #0]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008b22:	19bb      	adds	r3, r7, r6
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d116      	bne.n	8008b5a <VL53L1_preset_mode_singleshot_ranging+0x6a>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	22b1      	movs	r2, #177	; 0xb1
 8008b3c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	22d4      	movs	r2, #212	; 0xd4
 8008b48:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	2222      	movs	r2, #34	; 0x22
 8008b4e:	5c9a      	ldrb	r2, [r3, r2]
		pdynamic->system__seed_config =
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	2210      	movs	r2, #16
 8008b58:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b5a:	2317      	movs	r3, #23
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b25b      	sxtb	r3, r3
}
 8008b62:	0018      	movs	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	b007      	add	sp, #28
 8008b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b6a <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8008b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b6c:	b089      	sub	sp, #36	; 0x24
 8008b6e:	af02      	add	r7, sp, #8
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b78:	2617      	movs	r6, #23
 8008b7a:	19bb      	adds	r3, r7, r6
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8008b80:	19bc      	adds	r4, r7, r6
 8008b82:	683d      	ldr	r5, [r7, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	002b      	movs	r3, r5
 8008b94:	f7ff fc54 	bl	8008440 <VL53L1_preset_mode_standard_ranging>
 8008b98:	0003      	movs	r3, r0
 8008b9a:	7023      	strb	r3, [r4, #0]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8008b9c:	19bb      	adds	r3, r7, r6
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <VL53L1_preset_mode_olt+0x42>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2201      	movs	r2, #1
 8008baa:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008bac:	2317      	movs	r3, #23
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	b25b      	sxtb	r3, r3
}
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b007      	add	sp, #28
 8008bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bbc <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2228      	movs	r2, #40	; 0x28
 8008bcc:	2101      	movs	r1, #1
 8008bce:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2229      	movs	r2, #41	; 0x29
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	222a      	movs	r2, #42	; 0x2a
 8008bdc:	210d      	movs	r1, #13
 8008bde:	5499      	strb	r1, [r3, r2]
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4a03      	ldr	r2, [pc, #12]	; (8008bf0 <VL53L1_init_version+0x34>)
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b004      	add	sp, #16
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	0000088e 	.word	0x0000088e

08008bf4 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	000a      	movs	r2, r1
 8008bfe:	1cfb      	adds	r3, r7, #3
 8008c00:	701a      	strb	r2, [r3, #0]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	332c      	adds	r3, #44	; 0x2c
 8008c0a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	1cfa      	adds	r2, r7, #3
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	1cfa      	adds	r2, r7, #3
 8008c2a:	7812      	ldrb	r2, [r2, #0]
 8008c2c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2202      	movs	r2, #2
 8008c38:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	71da      	strb	r2, [r3, #7]

}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b004      	add	sp, #16
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8008c50:	2317      	movs	r3, #23
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	332c      	adds	r3, #44	; 0x2c
 8008c60:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	23e6      	movs	r3, #230	; 0xe6
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	5cd3      	ldrb	r3, [r2, r3]
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	23f0      	movs	r3, #240	; 0xf0
 8008c6e:	4013      	ands	r3, r2
 8008c70:	d10c      	bne.n	8008c8c <VL53L1_update_ll_driver_rd_state+0x44>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2203      	movs	r2, #3
 8008c76:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2202      	movs	r2, #2
 8008c82:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	71da      	strb	r2, [r3, #7]
 8008c8a:	e05b      	b.n	8008d44 <VL53L1_update_ll_driver_rd_state+0xfc>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	795b      	ldrb	r3, [r3, #5]
 8008c90:	2bff      	cmp	r3, #255	; 0xff
 8008c92:	d103      	bne.n	8008c9c <VL53L1_update_ll_driver_rd_state+0x54>
			pstate->rd_stream_count = 0x80;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2280      	movs	r2, #128	; 0x80
 8008c98:	715a      	strb	r2, [r3, #5]
 8008c9a:	e005      	b.n	8008ca8 <VL53L1_update_ll_driver_rd_state+0x60>
		} else {
			pstate->rd_stream_count++;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	795b      	ldrb	r3, [r3, #5]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	799b      	ldrb	r3, [r3, #6]
 8008cac:	2202      	movs	r2, #2
 8008cae:	4053      	eors	r3, r2
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d02a      	beq.n	8008d14 <VL53L1_update_ll_driver_rd_state+0xcc>
 8008cbe:	dc34      	bgt.n	8008d2a <VL53L1_update_ll_driver_rd_state+0xe2>
 8008cc0:	2b07      	cmp	r3, #7
 8008cc2:	d023      	beq.n	8008d0c <VL53L1_update_ll_driver_rd_state+0xc4>
 8008cc4:	dc31      	bgt.n	8008d2a <VL53L1_update_ll_driver_rd_state+0xe2>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d002      	beq.n	8008cd0 <VL53L1_update_ll_driver_rd_state+0x88>
 8008cca:	2b06      	cmp	r3, #6
 8008ccc:	d017      	beq.n	8008cfe <VL53L1_update_ll_driver_rd_state+0xb6>
 8008cce:	e02c      	b.n	8008d2a <VL53L1_update_ll_driver_rd_state+0xe2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	23e3      	movs	r3, #227	; 0xe3
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	5cd3      	ldrb	r3, [r2, r3]
 8008cd8:	001a      	movs	r2, r3
 8008cda:	2302      	movs	r3, #2
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd03      	ble.n	8008cea <VL53L1_update_ll_driver_rd_state+0xa2>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2206      	movs	r2, #6
 8008ce6:	711a      	strb	r2, [r3, #4]
 8008ce8:	e002      	b.n	8008cf0 <VL53L1_update_ll_driver_rd_state+0xa8>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2208      	movs	r2, #8
 8008cee:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	71da      	strb	r2, [r3, #7]

		break;
 8008cfc:	e022      	b.n	8008d44 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2208      	movs	r2, #8
 8008d08:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8008d0a:	e01b      	b.n	8008d44 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2208      	movs	r2, #8
 8008d10:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8008d12:	e017      	b.n	8008d44 <VL53L1_update_ll_driver_rd_state+0xfc>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	79db      	ldrb	r3, [r3, #7]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4053      	eors	r3, r2
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2208      	movs	r2, #8
 8008d26:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8008d28:	e00c      	b.n	8008d44 <VL53L1_update_ll_driver_rd_state+0xfc>

		default:

			pstate->rd_device_state  =
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	71da      	strb	r2, [r3, #7]

		break;
 8008d42:	46c0      	nop			; (mov r8, r8)
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8008d44:	2317      	movs	r3, #23
 8008d46:	18fb      	adds	r3, r7, r3
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	b25b      	sxtb	r3, r3
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b006      	add	sp, #24
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8008d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d56:	b089      	sub	sp, #36	; 0x24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8008d5c:	241f      	movs	r4, #31
 8008d5e:	193b      	adds	r3, r7, r4
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t  *pdev =
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	332c      	adds	r3, #44	; 0x2c
 8008d6c:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	33cf      	adds	r3, #207	; 0xcf
 8008d72:	33ff      	adds	r3, #255	; 0xff
 8008d74:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8008d76:	200f      	movs	r0, #15
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
	uint8_t   device_stream_count   = 0;
 8008d7e:	250e      	movs	r5, #14
 8008d80:	197b      	adds	r3, r7, r5
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
	uint8_t   device_gph_id         = 0;
 8008d86:	260d      	movs	r6, #13
 8008d88:	19bb      	adds	r3, r7, r6
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	785a      	ldrb	r2, [r3, #1]
	device_range_status =
 8008d92:	183b      	adds	r3, r7, r0
 8008d94:	211f      	movs	r1, #31
 8008d96:	400a      	ands	r2, r1
 8008d98:	701a      	strb	r2, [r3, #0]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8008d9a:	197b      	adds	r3, r7, r5
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	78d2      	ldrb	r2, [r2, #3]
 8008da0:	701a      	strb	r2, [r3, #0]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8008da6:	111b      	asrs	r3, r3, #4
 8008da8:	b2da      	uxtb	r2, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8008daa:	19bb      	adds	r3, r7, r6
 8008dac:	2102      	movs	r1, #2
 8008dae:	400a      	ands	r2, r1
 8008db0:	701a      	strb	r2, [r3, #0]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	23e6      	movs	r3, #230	; 0xe6
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	5cd3      	ldrb	r3, [r2, r3]
 8008dba:	001a      	movs	r2, r3
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d021      	beq.n	8008e06 <VL53L1_check_ll_driver_rd_state+0xb2>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	2b06      	cmp	r3, #6
 8008dc8:	d107      	bne.n	8008dda <VL53L1_check_ll_driver_rd_state+0x86>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8008dca:	183b      	adds	r3, r7, r0
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b12      	cmp	r3, #18
 8008dd0:	d019      	beq.n	8008e06 <VL53L1_check_ll_driver_rd_state+0xb2>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8008dd2:	193b      	adds	r3, r7, r4
 8008dd4:	22ef      	movs	r2, #239	; 0xef
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	e015      	b.n	8008e06 <VL53L1_check_ll_driver_rd_state+0xb2>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	795b      	ldrb	r3, [r3, #5]
 8008dde:	220e      	movs	r2, #14
 8008de0:	18ba      	adds	r2, r7, r2
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d003      	beq.n	8008df0 <VL53L1_check_ll_driver_rd_state+0x9c>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8008de8:	231f      	movs	r3, #31
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	22ee      	movs	r2, #238	; 0xee
 8008dee:	701a      	strb	r2, [r3, #0]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	799b      	ldrb	r3, [r3, #6]
 8008df4:	220d      	movs	r2, #13
 8008df6:	18ba      	adds	r2, r7, r2
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d003      	beq.n	8008e06 <VL53L1_check_ll_driver_rd_state+0xb2>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8008dfe:	231f      	movs	r3, #31
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	22ed      	movs	r2, #237	; 0xed
 8008e04:	701a      	strb	r2, [r3, #0]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8008e06:	231f      	movs	r3, #31
 8008e08:	18fb      	adds	r3, r7, r3
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	b25b      	sxtb	r3, r3
}
 8008e0e:	0018      	movs	r0, r3
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b009      	add	sp, #36	; 0x24
 8008e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e16 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8008e1e:	2317      	movs	r3, #23
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t  *pdev =
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	332c      	adds	r3, #44	; 0x2c
 8008e2e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	23e6      	movs	r3, #230	; 0xe6
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	5cd3      	ldrb	r3, [r2, r3]
 8008e38:	001a      	movs	r2, r3
 8008e3a:	23f0      	movs	r3, #240	; 0xf0
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d10c      	bne.n	8008e5a <VL53L1_update_ll_driver_cfg_state+0x44>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2203      	movs	r2, #3
 8008e44:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	70da      	strb	r2, [r3, #3]
 8008e58:	e03e      	b.n	8008ed8 <VL53L1_update_ll_driver_cfg_state+0xc2>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2bff      	cmp	r3, #255	; 0xff
 8008e60:	d103      	bne.n	8008e6a <VL53L1_update_ll_driver_cfg_state+0x54>
			pstate->cfg_stream_count = 0x80;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2280      	movs	r2, #128	; 0x80
 8008e66:	705a      	strb	r2, [r3, #1]
 8008e68:	e005      	b.n	8008e76 <VL53L1_update_ll_driver_cfg_state+0x60>
		} else {
			pstate->cfg_stream_count++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	789b      	ldrb	r3, [r3, #2]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	4053      	eors	r3, r2
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d002      	beq.n	8008e92 <VL53L1_update_ll_driver_cfg_state+0x7c>
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d00e      	beq.n	8008eae <VL53L1_update_ll_driver_cfg_state+0x98>
 8008e90:	e015      	b.n	8008ebe <VL53L1_update_ll_driver_cfg_state+0xa8>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	78db      	ldrb	r3, [r3, #3]
 8008e96:	2201      	movs	r2, #1
 8008e98:	4053      	eors	r3, r2
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	701a      	strb	r2, [r3, #0]
		break;
 8008eac:	e014      	b.n	8008ed8 <VL53L1_update_ll_driver_cfg_state+0xc2>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	4053      	eors	r3, r2
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	70da      	strb	r2, [r3, #3]

		break;
 8008ebc:	e00c      	b.n	8008ed8 <VL53L1_update_ll_driver_cfg_state+0xc2>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	70da      	strb	r2, [r3, #3]

		break;
 8008ed6:	46c0      	nop			; (mov r8, r8)
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8008ed8:	2317      	movs	r3, #23
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b25b      	sxtb	r3, r3
}
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b006      	add	sp, #24
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7c1a      	ldrb	r2, [r3, #16]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	7c52      	ldrb	r2, [r2, #17]
 8008f02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	3302      	adds	r3, #2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7c92      	ldrb	r2, [r2, #18]
 8008f0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	3303      	adds	r3, #3
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	7cd2      	ldrb	r2, [r2, #19]
 8008f16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	7d12      	ldrb	r2, [r2, #20]
 8008f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	3305      	adds	r3, #5
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	7d52      	ldrb	r2, [r2, #21]
 8008f2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	3306      	adds	r3, #6
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7d92      	ldrb	r2, [r2, #22]
 8008f34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	3307      	adds	r3, #7
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	7dd2      	ldrb	r2, [r2, #23]
 8008f3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7e12      	ldrb	r2, [r2, #24]
 8008f48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	3309      	adds	r3, #9
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	7e52      	ldrb	r2, [r2, #25]
 8008f52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	330a      	adds	r3, #10
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7e92      	ldrb	r2, [r2, #26]
 8008f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	330b      	adds	r3, #11
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	7ed2      	ldrb	r2, [r2, #27]
 8008f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7f12      	ldrb	r2, [r2, #28]
 8008f70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	330d      	adds	r3, #13
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	7f52      	ldrb	r2, [r2, #29]
 8008f7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	330e      	adds	r3, #14
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7f92      	ldrb	r2, [r2, #30]
 8008f84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	330f      	adds	r3, #15
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	7fd2      	ldrb	r2, [r2, #31]
 8008f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	3310      	adds	r3, #16
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	2120      	movs	r1, #32
 8008f98:	5c52      	ldrb	r2, [r2, r1]
 8008f9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	3311      	adds	r3, #17
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	2121      	movs	r1, #33	; 0x21
 8008fa4:	5c52      	ldrb	r2, [r2, r1]
 8008fa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	3312      	adds	r3, #18
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	2122      	movs	r1, #34	; 0x22
 8008fb0:	5c52      	ldrb	r2, [r2, r1]
 8008fb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	3313      	adds	r3, #19
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	2123      	movs	r1, #35	; 0x23
 8008fbc:	5c52      	ldrb	r2, [r2, r1]
 8008fbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	3314      	adds	r3, #20
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	2124      	movs	r1, #36	; 0x24
 8008fc8:	5c52      	ldrb	r2, [r2, r1]
 8008fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	3315      	adds	r3, #21
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	2125      	movs	r1, #37	; 0x25
 8008fd4:	5c52      	ldrb	r2, [r2, r1]
 8008fd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3316      	adds	r3, #22
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	2126      	movs	r1, #38	; 0x26
 8008fe0:	5c52      	ldrb	r2, [r2, r1]
 8008fe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	3317      	adds	r3, #23
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	2127      	movs	r1, #39	; 0x27
 8008fec:	5c52      	ldrb	r2, [r2, r1]
 8008fee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	3318      	adds	r3, #24
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	2128      	movs	r1, #40	; 0x28
 8008ff8:	5c52      	ldrb	r2, [r2, r1]
 8008ffa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	3319      	adds	r3, #25
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	2129      	movs	r1, #41	; 0x29
 8009004:	5c52      	ldrb	r2, [r2, r1]
 8009006:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	331a      	adds	r3, #26
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	212a      	movs	r1, #42	; 0x2a
 8009010:	5c52      	ldrb	r2, [r2, r1]
 8009012:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	331b      	adds	r3, #27
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	212b      	movs	r1, #43	; 0x2b
 800901c:	5c52      	ldrb	r2, [r2, r1]
 800901e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	331c      	adds	r3, #28
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	212c      	movs	r1, #44	; 0x2c
 8009028:	5c52      	ldrb	r2, [r2, r1]
 800902a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	331d      	adds	r3, #29
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	212d      	movs	r1, #45	; 0x2d
 8009034:	5c52      	ldrb	r2, [r2, r1]
 8009036:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	331e      	adds	r3, #30
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	212e      	movs	r1, #46	; 0x2e
 8009040:	5c52      	ldrb	r2, [r2, r1]
 8009042:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	331f      	adds	r3, #31
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	212f      	movs	r1, #47	; 0x2f
 800904c:	5c52      	ldrb	r2, [r2, r1]
 800904e:	701a      	strb	r2, [r3, #0]
}
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	46bd      	mov	sp, r7
 8009054:	b002      	add	sp, #8
 8009056:	bd80      	pop	{r7, pc}

08009058 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	603a      	str	r2, [r7, #0]
 8009060:	1dbb      	adds	r3, r7, #6
 8009062:	1c02      	adds	r2, r0, #0
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	1d3b      	adds	r3, r7, #4
 8009068:	1c0a      	adds	r2, r1, #0
 800906a:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800906c:	210e      	movs	r1, #14
 800906e:	187b      	adds	r3, r7, r1
 8009070:	2200      	movs	r2, #0
 8009072:	801a      	strh	r2, [r3, #0]
	uint16_t   data = 0;
 8009074:	200c      	movs	r0, #12
 8009076:	183b      	adds	r3, r7, r0
 8009078:	2200      	movs	r2, #0
 800907a:	801a      	strh	r2, [r3, #0]

	data =  ip_value;
 800907c:	183b      	adds	r3, r7, r0
 800907e:	1dba      	adds	r2, r7, #6
 8009080:	8812      	ldrh	r2, [r2, #0]
 8009082:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < count ; i++) {
 8009084:	187b      	adds	r3, r7, r1
 8009086:	2200      	movs	r2, #0
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	e017      	b.n	80090bc <VL53L1_i2c_encode_uint16_t+0x64>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	881a      	ldrh	r2, [r3, #0]
 8009090:	210e      	movs	r1, #14
 8009092:	187b      	adds	r3, r7, r1
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	3b01      	subs	r3, #1
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	18d3      	adds	r3, r2, r3
 800909e:	200c      	movs	r0, #12
 80090a0:	183a      	adds	r2, r7, r0
 80090a2:	8812      	ldrh	r2, [r2, #0]
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	183a      	adds	r2, r7, r0
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	0a12      	lsrs	r2, r2, #8
 80090b0:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < count ; i++) {
 80090b2:	187b      	adds	r3, r7, r1
 80090b4:	881a      	ldrh	r2, [r3, #0]
 80090b6:	187b      	adds	r3, r7, r1
 80090b8:	3201      	adds	r2, #1
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	230e      	movs	r3, #14
 80090be:	18fa      	adds	r2, r7, r3
 80090c0:	1d3b      	adds	r3, r7, #4
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d3e0      	bcc.n	800908c <VL53L1_i2c_encode_uint16_t+0x34>
	}
}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	46c0      	nop			; (mov r8, r8)
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b004      	add	sp, #16
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	0002      	movs	r2, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	1dbb      	adds	r3, r7, #6
 80090e0:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 80090e2:	230e      	movs	r3, #14
 80090e4:	18fb      	adds	r3, r7, r3
 80090e6:	2200      	movs	r2, #0
 80090e8:	801a      	strh	r2, [r3, #0]

	while (count-- > 0) {
 80090ea:	e00d      	b.n	8009108 <VL53L1_i2c_decode_uint16_t+0x34>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80090ec:	200e      	movs	r0, #14
 80090ee:	183b      	adds	r3, r7, r0
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	021b      	lsls	r3, r3, #8
 80090f4:	b21a      	sxth	r2, r3
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	1c59      	adds	r1, r3, #1
 80090fa:	6039      	str	r1, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b21b      	sxth	r3, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	b21a      	sxth	r2, r3
 8009104:	183b      	adds	r3, r7, r0
 8009106:	801a      	strh	r2, [r3, #0]
	while (count-- > 0) {
 8009108:	1dbb      	adds	r3, r7, #6
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	1dba      	adds	r2, r7, #6
 800910e:	1e59      	subs	r1, r3, #1
 8009110:	8011      	strh	r1, [r2, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1ea      	bne.n	80090ec <VL53L1_i2c_decode_uint16_t+0x18>
	}

	return value;
 8009116:	230e      	movs	r3, #14
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	881b      	ldrh	r3, [r3, #0]
}
 800911c:	0018      	movs	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	b004      	add	sp, #16
 8009122:	bd80      	pop	{r7, pc}

08009124 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	603a      	str	r2, [r7, #0]
 800912c:	1dbb      	adds	r3, r7, #6
 800912e:	1c02      	adds	r2, r0, #0
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	1c0a      	adds	r2, r1, #0
 8009136:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8009138:	210e      	movs	r1, #14
 800913a:	187b      	adds	r3, r7, r1
 800913c:	2200      	movs	r2, #0
 800913e:	801a      	strh	r2, [r3, #0]
	int16_t    data = 0;
 8009140:	200c      	movs	r0, #12
 8009142:	183b      	adds	r3, r7, r0
 8009144:	2200      	movs	r2, #0
 8009146:	801a      	strh	r2, [r3, #0]

	data =  ip_value;
 8009148:	183b      	adds	r3, r7, r0
 800914a:	1dba      	adds	r2, r7, #6
 800914c:	8812      	ldrh	r2, [r2, #0]
 800914e:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < count ; i++) {
 8009150:	187b      	adds	r3, r7, r1
 8009152:	2200      	movs	r2, #0
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e018      	b.n	800918a <VL53L1_i2c_encode_int16_t+0x66>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8009158:	1d3b      	adds	r3, r7, #4
 800915a:	881a      	ldrh	r2, [r3, #0]
 800915c:	210e      	movs	r1, #14
 800915e:	187b      	adds	r3, r7, r1
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	18d3      	adds	r3, r2, r3
 800916a:	200c      	movs	r0, #12
 800916c:	183a      	adds	r2, r7, r0
 800916e:	8812      	ldrh	r2, [r2, #0]
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8009174:	183b      	adds	r3, r7, r0
 8009176:	183a      	adds	r2, r7, r0
 8009178:	2000      	movs	r0, #0
 800917a:	5e12      	ldrsh	r2, [r2, r0]
 800917c:	1212      	asrs	r2, r2, #8
 800917e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < count ; i++) {
 8009180:	187b      	adds	r3, r7, r1
 8009182:	881a      	ldrh	r2, [r3, #0]
 8009184:	187b      	adds	r3, r7, r1
 8009186:	3201      	adds	r2, #1
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	230e      	movs	r3, #14
 800918c:	18fa      	adds	r2, r7, r3
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	8812      	ldrh	r2, [r2, #0]
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	429a      	cmp	r2, r3
 8009196:	d3df      	bcc.n	8009158 <VL53L1_i2c_encode_int16_t+0x34>
	}
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	46bd      	mov	sp, r7
 800919e:	b004      	add	sp, #16
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	0002      	movs	r2, r0
 80091aa:	6039      	str	r1, [r7, #0]
 80091ac:	1dbb      	adds	r3, r7, #6
 80091ae:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80091b0:	210e      	movs	r1, #14
 80091b2:	187b      	adds	r3, r7, r1
 80091b4:	2200      	movs	r2, #0
 80091b6:	801a      	strh	r2, [r3, #0]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b25b      	sxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da12      	bge.n	80091e8 <VL53L1_i2c_decode_int16_t+0x46>
		value = 0xFFFF;
 80091c2:	187b      	adds	r3, r7, r1
 80091c4:	2201      	movs	r2, #1
 80091c6:	4252      	negs	r2, r2
 80091c8:	801a      	strh	r2, [r3, #0]
	}

	while (count-- > 0) {
 80091ca:	e00d      	b.n	80091e8 <VL53L1_i2c_decode_int16_t+0x46>
		value = (value << 8) | (int16_t)*pbuffer++;
 80091cc:	200e      	movs	r0, #14
 80091ce:	183b      	adds	r3, r7, r0
 80091d0:	2200      	movs	r2, #0
 80091d2:	5e9b      	ldrsh	r3, [r3, r2]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	b219      	sxth	r1, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	603a      	str	r2, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	b21a      	sxth	r2, r3
 80091e2:	183b      	adds	r3, r7, r0
 80091e4:	430a      	orrs	r2, r1
 80091e6:	801a      	strh	r2, [r3, #0]
	while (count-- > 0) {
 80091e8:	1dbb      	adds	r3, r7, #6
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	1dba      	adds	r2, r7, #6
 80091ee:	1e59      	subs	r1, r3, #1
 80091f0:	8011      	strh	r1, [r2, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1ea      	bne.n	80091cc <VL53L1_i2c_decode_int16_t+0x2a>
	}

	return value;
 80091f6:	230e      	movs	r3, #14
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	2200      	movs	r2, #0
 80091fc:	5e9b      	ldrsh	r3, [r3, r2]
}
 80091fe:	0018      	movs	r0, r3
 8009200:	46bd      	mov	sp, r7
 8009202:	b004      	add	sp, #16
 8009204:	bd80      	pop	{r7, pc}

08009206 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	230a      	movs	r3, #10
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	1c0a      	adds	r2, r1, #0
 8009216:	801a      	strh	r2, [r3, #0]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8009218:	2116      	movs	r1, #22
 800921a:	187b      	adds	r3, r7, r1
 800921c:	2200      	movs	r2, #0
 800921e:	801a      	strh	r2, [r3, #0]
	uint32_t   data = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8009228:	187b      	adds	r3, r7, r1
 800922a:	2200      	movs	r2, #0
 800922c:	801a      	strh	r2, [r3, #0]
 800922e:	e014      	b.n	800925a <VL53L1_i2c_encode_uint32_t+0x54>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8009230:	230a      	movs	r3, #10
 8009232:	18fb      	adds	r3, r7, r3
 8009234:	881a      	ldrh	r2, [r3, #0]
 8009236:	2116      	movs	r1, #22
 8009238:	187b      	adds	r3, r7, r1
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	18d3      	adds	r3, r2, r3
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8009250:	187b      	adds	r3, r7, r1
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	187b      	adds	r3, r7, r1
 8009256:	3201      	adds	r2, #1
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	2316      	movs	r3, #22
 800925c:	18fa      	adds	r2, r7, r3
 800925e:	230a      	movs	r3, #10
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	8812      	ldrh	r2, [r2, #0]
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d3e2      	bcc.n	8009230 <VL53L1_i2c_encode_uint32_t+0x2a>
	}
}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	46c0      	nop			; (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	b006      	add	sp, #24
 8009272:	bd80      	pop	{r7, pc}

08009274 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	0002      	movs	r2, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	1dbb      	adds	r3, r7, #6
 8009280:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8009286:	e007      	b.n	8009298 <VL53L1_i2c_decode_uint32_t+0x24>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	021a      	lsls	r2, r3, #8
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8009298:	1dbb      	adds	r3, r7, #6
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	1dba      	adds	r2, r7, #6
 800929e:	1e59      	subs	r1, r3, #1
 80092a0:	8011      	strh	r1, [r2, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1f0      	bne.n	8009288 <VL53L1_i2c_decode_uint32_t+0x14>
	}

	return value;
 80092a6:	68fb      	ldr	r3, [r7, #12]
}
 80092a8:	0018      	movs	r0, r3
 80092aa:	46bd      	mov	sp, r7
 80092ac:	b004      	add	sp, #16
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	0002      	movs	r2, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	1dbb      	adds	r3, r7, #6
 80092bc:	801a      	strh	r2, [r3, #0]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da0b      	bge.n	80092e4 <VL53L1_i2c_decode_int32_t+0x34>
		value = 0xFFFFFFFF;
 80092cc:	2301      	movs	r3, #1
 80092ce:	425b      	negs	r3, r3
 80092d0:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80092d2:	e007      	b.n	80092e4 <VL53L1_i2c_decode_int32_t+0x34>
		value = (value << 8) | (int32_t)*pbuffer++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	1c59      	adds	r1, r3, #1
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80092e4:	1dbb      	adds	r3, r7, #6
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	1dba      	adds	r2, r7, #6
 80092ea:	1e59      	subs	r1, r3, #1
 80092ec:	8011      	strh	r1, [r2, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f0      	bne.n	80092d4 <VL53L1_i2c_decode_int32_t+0x24>
	}

	return value;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	0018      	movs	r0, r3
 80092f6:	46bd      	mov	sp, r7
 80092f8:	b004      	add	sp, #16
 80092fa:	bd80      	pop	{r7, pc}

080092fc <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	000a      	movs	r2, r1
 8009306:	1cfb      	adds	r3, r7, #3
 8009308:	701a      	strb	r2, [r3, #0]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800930a:	200f      	movs	r0, #15
 800930c:	183b      	adds	r3, r7, r0
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	1cf9      	adds	r1, r7, #3
 800931a:	23e4      	movs	r3, #228	; 0xe4
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	7809      	ldrb	r1, [r1, #0]
 8009320:	54d1      	strb	r1, [r2, r3]

	status = VL53L1_WrByte(
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	23e4      	movs	r3, #228	; 0xe4
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	5cd2      	ldrb	r2, [r2, r3]
 800932a:	0005      	movs	r5, r0
 800932c:	183c      	adds	r4, r7, r0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2183      	movs	r1, #131	; 0x83
 8009332:	0018      	movs	r0, r3
 8009334:	f001 fe62 	bl	800affc <VL53L1_WrByte>
 8009338:	0003      	movs	r3, r0
 800933a:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800933c:	197b      	adds	r3, r7, r5
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b25b      	sxtb	r3, r3
}
 8009342:	0018      	movs	r0, r3
 8009344:	46bd      	mov	sp, r7
 8009346:	b004      	add	sp, #16
 8009348:	bdb0      	pop	{r4, r5, r7, pc}

0800934a <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800934a:	b5b0      	push	{r4, r5, r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009352:	250f      	movs	r5, #15
 8009354:	197b      	adds	r3, r7, r5
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800935a:	197c      	adds	r4, r7, r5
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2101      	movs	r1, #1
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff ffcb 	bl	80092fc <VL53L1_set_powerforce_register>
 8009366:	0003      	movs	r3, r0
 8009368:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(status);

	return status;
 800936a:	197b      	adds	r3, r7, r5
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b25b      	sxtb	r3, r3
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	b004      	add	sp, #16
 8009376:	bdb0      	pop	{r4, r5, r7, pc}

08009378 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8009378:	b5b0      	push	{r4, r5, r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	0002      	movs	r2, r0
 8009380:	1dbb      	adds	r3, r7, #6
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	1d7b      	adds	r3, r7, #5
 8009386:	1c0a      	adds	r2, r1, #0
 8009388:	701a      	strb	r2, [r3, #0]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800938e:	2513      	movs	r5, #19
 8009390:	197b      	adds	r3, r7, r5
 8009392:	2200      	movs	r2, #0
 8009394:	701a      	strb	r2, [r3, #0]
	uint32_t  macro_period_us      = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800939a:	1dbb      	adds	r3, r7, #6
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	0018      	movs	r0, r3
 80093a0:	f000 fb30 	bl	8009a04 <VL53L1_calc_pll_period_us>
 80093a4:	0003      	movs	r3, r0
 80093a6:	617b      	str	r3, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80093a8:	197c      	adds	r4, r7, r5
 80093aa:	1d7b      	adds	r3, r7, #5
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	0018      	movs	r0, r3
 80093b0:	f000 fb3e 	bl	8009a30 <VL53L1_decode_vcsel_period>
 80093b4:	0003      	movs	r3, r0
 80093b6:	7023      	strb	r3, [r4, #0]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	0013      	movs	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	189b      	adds	r3, r3, r2
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	099b      	lsrs	r3, r3, #6
 80093c8:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80093ca:	197b      	adds	r3, r7, r5
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4353      	muls	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	099b      	lsrs	r3, r3, #6
 80093d8:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 80093da:	68fb      	ldr	r3, [r7, #12]
}
 80093dc:	0018      	movs	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	b006      	add	sp, #24
 80093e2:	bdb0      	pop	{r4, r5, r7, pc}

080093e4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80093e4:	b5b0      	push	{r4, r5, r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	000c      	movs	r4, r1
 80093ee:	0010      	movs	r0, r2
 80093f0:	0019      	movs	r1, r3
 80093f2:	250a      	movs	r5, #10
 80093f4:	197b      	adds	r3, r7, r5
 80093f6:	1c22      	adds	r2, r4, #0
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	2308      	movs	r3, #8
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	1c02      	adds	r2, r0, #0
 8009400:	801a      	strh	r2, [r3, #0]
 8009402:	1dfb      	adds	r3, r7, #7
 8009404:	1c0a      	adds	r2, r1, #0
 8009406:	701a      	strb	r2, [r3, #0]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800940c:	231e      	movs	r3, #30
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	2200      	movs	r2, #0
 8009412:	801a      	strh	r2, [r3, #0]
	int32_t    central_rate_int         = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8009418:	241c      	movs	r4, #28
 800941a:	193b      	adds	r3, r7, r4
 800941c:	2200      	movs	r2, #0
 800941e:	801a      	strh	r2, [r3, #0]
	int16_t    y_gradient_int           = 0;
 8009420:	231a      	movs	r3, #26
 8009422:	18fb      	adds	r3, r7, r3
 8009424:	2200      	movs	r2, #0
 8009426:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	22fa      	movs	r2, #250	; 0xfa
 800942e:	0091      	lsls	r1, r2, #2
 8009430:	0018      	movs	r0, r3
 8009432:	f7f6 ff0d 	bl	8000250 <__divsi3>
 8009436:	0003      	movs	r3, r0
 8009438:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800943a:	197b      	adds	r3, r7, r5
 800943c:	2200      	movs	r2, #0
 800943e:	5e9b      	ldrsh	r3, [r3, r2]
 8009440:	2b00      	cmp	r3, #0
 8009442:	da05      	bge.n	8009450 <VL53L1_calc_range_ignore_threshold+0x6c>
		x_gradient_int = x_gradient * -1;
 8009444:	197b      	adds	r3, r7, r5
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	425b      	negs	r3, r3
 800944a:	b29a      	uxth	r2, r3
 800944c:	193b      	adds	r3, r7, r4
 800944e:	801a      	strh	r2, [r3, #0]
	}

	if (y_gradient < 0) {
 8009450:	2208      	movs	r2, #8
 8009452:	18bb      	adds	r3, r7, r2
 8009454:	2100      	movs	r1, #0
 8009456:	5e5b      	ldrsh	r3, [r3, r1]
 8009458:	2b00      	cmp	r3, #0
 800945a:	da06      	bge.n	800946a <VL53L1_calc_range_ignore_threshold+0x86>
		y_gradient_int = y_gradient * -1;
 800945c:	18bb      	adds	r3, r7, r2
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	425b      	negs	r3, r3
 8009462:	b29a      	uxth	r2, r3
 8009464:	231a      	movs	r3, #26
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	801a      	strh	r2, [r3, #0]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800946a:	231c      	movs	r3, #28
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	2200      	movs	r2, #0
 8009470:	5e9a      	ldrsh	r2, [r3, r2]
 8009472:	231a      	movs	r3, #26
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	2100      	movs	r1, #0
 8009478:	5e5b      	ldrsh	r3, [r3, r1]
 800947a:	18d3      	adds	r3, r2, r3
 800947c:	015b      	lsls	r3, r3, #5
 800947e:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	22fa      	movs	r2, #250	; 0xfa
 8009484:	0091      	lsls	r1, r2, #2
 8009486:	0018      	movs	r0, r3
 8009488:	f7f6 fee2 	bl	8000250 <__divsi3>
 800948c:	0003      	movs	r3, r0
 800948e:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	18d3      	adds	r3, r2, r3
 8009496:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8009498:	1dfb      	adds	r3, r7, #7
 800949a:	781a      	ldrb	r2, [r3, #0]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	4353      	muls	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	3310      	adds	r3, #16
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da00      	bge.n	80094ac <VL53L1_calc_range_ignore_threshold+0xc8>
 80094aa:	331f      	adds	r3, #31
 80094ac:	115b      	asrs	r3, r3, #5
 80094ae:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	2380      	movs	r3, #128	; 0x80
 80094b4:	025b      	lsls	r3, r3, #9
 80094b6:	429a      	cmp	r2, r3
 80094b8:	db05      	blt.n	80094c6 <VL53L1_calc_range_ignore_threshold+0xe2>
		range_ignore_thresh_kcps = 0xFFFF;
 80094ba:	231e      	movs	r3, #30
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	2201      	movs	r2, #1
 80094c0:	4252      	negs	r2, r2
 80094c2:	801a      	strh	r2, [r3, #0]
 80094c4:	e003      	b.n	80094ce <VL53L1_calc_range_ignore_threshold+0xea>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80094c6:	231e      	movs	r3, #30
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	801a      	strh	r2, [r3, #0]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80094ce:	231e      	movs	r3, #30
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	881b      	ldrh	r3, [r3, #0]
}
 80094d4:	0018      	movs	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b008      	add	sp, #32
 80094da:	bdb0      	pop	{r4, r5, r7, pc}

080094dc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	031a      	lsls	r2, r3, #12
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	18d3      	adds	r3, r2, r3
	timeout_mclks   =
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	0018      	movs	r0, r3
 80094f8:	f7f6 fe20 	bl	800013c <__udivsi3>
 80094fc:	0003      	movs	r3, r0
 80094fe:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	0018      	movs	r0, r3
 8009504:	46bd      	mov	sp, r7
 8009506:	b004      	add	sp, #16
 8009508:	bd80      	pop	{r7, pc}

0800950a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800950a:	b5b0      	push	{r4, r5, r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8009518:	250a      	movs	r5, #10
 800951a:	197b      	adds	r3, r7, r5
 800951c:	2200      	movs	r2, #0
 800951e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	0011      	movs	r1, r2
 8009526:	0018      	movs	r0, r3
 8009528:	f7ff ffd8 	bl	80094dc <VL53L1_calc_timeout_mclks>
 800952c:	0003      	movs	r3, r0
 800952e:	60fb      	str	r3, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8009530:	197c      	adds	r4, r7, r5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	0018      	movs	r0, r3
 8009536:	f000 f85d 	bl	80095f4 <VL53L1_encode_timeout>
 800953a:	0003      	movs	r3, r0
 800953c:	8023      	strh	r3, [r4, #0]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800953e:	197b      	adds	r3, r7, r5
 8009540:	881b      	ldrh	r3, [r3, #0]
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b004      	add	sp, #16
 8009548:	bdb0      	pop	{r4, r5, r7, pc}

0800954a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800954a:	b5b0      	push	{r4, r5, r7, lr}
 800954c:	b08a      	sub	sp, #40	; 0x28
 800954e:	af00      	add	r7, sp, #0
 8009550:	6178      	str	r0, [r7, #20]
 8009552:	6139      	str	r1, [r7, #16]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
	uint64_t tmp            = 0;
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	61ba      	str	r2, [r7, #24]
 800955e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	60bb      	str	r3, [r7, #8]
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	607b      	str	r3, [r7, #4]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68b8      	ldr	r0, [r7, #8]
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	f7f6 ffb4 	bl	80004e4 <__aeabi_lmul>
 800957c:	0002      	movs	r2, r0
 800957e:	000b      	movs	r3, r1
 8009580:	61ba      	str	r2, [r7, #24]
 8009582:	61fb      	str	r3, [r7, #28]
	tmp += 0x00800;
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	2080      	movs	r0, #128	; 0x80
 800958a:	0100      	lsls	r0, r0, #4
 800958c:	2100      	movs	r1, #0
 800958e:	1812      	adds	r2, r2, r0
 8009590:	414b      	adcs	r3, r1
 8009592:	61ba      	str	r2, [r7, #24]
 8009594:	61fb      	str	r3, [r7, #28]
	tmp  = tmp >> 12;
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	051b      	lsls	r3, r3, #20
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	0b14      	lsrs	r4, r2, #12
 800959e:	431c      	orrs	r4, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	0b1d      	lsrs	r5, r3, #12
 80095a4:	61bc      	str	r4, [r7, #24]
 80095a6:	61fd      	str	r5, [r7, #28]

	timeout_us = (uint32_t)tmp;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095ae:	0018      	movs	r0, r3
 80095b0:	46bd      	mov	sp, r7
 80095b2:	b00a      	add	sp, #40	; 0x28
 80095b4:	bdb0      	pop	{r4, r5, r7, pc}

080095b6 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	0002      	movs	r2, r0
 80095be:	6039      	str	r1, [r7, #0]
 80095c0:	1dbb      	adds	r3, r7, #6
 80095c2:	801a      	strh	r2, [r3, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 80095cc:	1dbb      	adds	r3, r7, #6
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	0018      	movs	r0, r3
 80095d2:	f000 f846 	bl	8009662 <VL53L1_decode_timeout>
 80095d6:	0003      	movs	r3, r0
 80095d8:	60fb      	str	r3, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	0011      	movs	r1, r2
 80095e0:	0018      	movs	r0, r3
 80095e2:	f7ff ffb2 	bl	800954a <VL53L1_calc_timeout_us>
 80095e6:	0003      	movs	r3, r0
 80095e8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80095ea:	68bb      	ldr	r3, [r7, #8]
}
 80095ec:	0018      	movs	r0, r3
 80095ee:	46bd      	mov	sp, r7
 80095f0:	b004      	add	sp, #16
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80095fc:	2316      	movs	r3, #22
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	2200      	movs	r2, #0
 8009602:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009608:	230e      	movs	r3, #14
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	2200      	movs	r2, #0
 800960e:	801a      	strh	r2, [r3, #0]

	if (timeout_mclks > 0) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01e      	beq.n	8009654 <VL53L1_encode_timeout+0x60>
		ls_byte = timeout_mclks - 1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800961c:	e008      	b.n	8009630 <VL53L1_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009624:	210e      	movs	r1, #14
 8009626:	187b      	adds	r3, r7, r1
 8009628:	881a      	ldrh	r2, [r3, #0]
 800962a:	187b      	adds	r3, r7, r1
 800962c:	3201      	adds	r2, #1
 800962e:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	22ff      	movs	r2, #255	; 0xff
 8009634:	4393      	bics	r3, r2
 8009636:	d1f2      	bne.n	800961e <VL53L1_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 8009638:	230e      	movs	r3, #14
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	b29b      	uxth	r3, r3
 8009646:	22ff      	movs	r2, #255	; 0xff
 8009648:	4013      	ands	r3, r2
 800964a:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 800964c:	2316      	movs	r3, #22
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	188a      	adds	r2, r1, r2
 8009652:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 8009654:	2316      	movs	r3, #22
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	881b      	ldrh	r3, [r3, #0]
}
 800965a:	0018      	movs	r0, r3
 800965c:	46bd      	mov	sp, r7
 800965e:	b006      	add	sp, #24
 8009660:	bd80      	pop	{r7, pc}

08009662 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	0002      	movs	r2, r0
 800966a:	1dbb      	adds	r3, r7, #6
 800966c:	801a      	strh	r2, [r3, #0]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009672:	1dbb      	adds	r3, r7, #6
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	22ff      	movs	r2, #255	; 0xff
 8009678:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800967a:	1dba      	adds	r2, r7, #6
 800967c:	8812      	ldrh	r2, [r2, #0]
 800967e:	0a12      	lsrs	r2, r2, #8
 8009680:	b292      	uxth	r2, r2
 8009682:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009688:	68fb      	ldr	r3, [r7, #12]
}
 800968a:	0018      	movs	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	b004      	add	sp, #16
 8009690:	bd80      	pop	{r7, pc}

08009692 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8009692:	b5b0      	push	{r4, r5, r7, lr}
 8009694:	b088      	sub	sp, #32
 8009696:	af00      	add	r7, sp, #0
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
 800969e:	001a      	movs	r2, r3
 80096a0:	1cbb      	adds	r3, r7, #2
 80096a2:	801a      	strh	r2, [r3, #0]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80096a4:	211f      	movs	r1, #31
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	2200      	movs	r2, #0
 80096aa:	701a      	strb	r2, [r3, #0]

	uint32_t macro_period_us    = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80096b4:	2312      	movs	r3, #18
 80096b6:	18fb      	adds	r3, r7, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80096bc:	1cbb      	adds	r3, r7, #2
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <VL53L1_calc_timeout_register_values+0x3a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	22f1      	movs	r2, #241	; 0xf1
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e080      	b.n	80097ce <VL53L1_calc_timeout_register_values+0x13c>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80096cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ce:	799a      	ldrb	r2, [r3, #6]
 80096d0:	1cbb      	adds	r3, r7, #2
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	0011      	movs	r1, r2
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7ff fe4e 	bl	8009378 <VL53L1_calc_macro_period_us>
 80096dc:	0003      	movs	r3, r0
 80096de:	617b      	str	r3, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	0011      	movs	r1, r2
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7ff fef8 	bl	80094dc <VL53L1_calc_timeout_mclks>
 80096ec:	0003      	movs	r3, r0
 80096ee:	61bb      	str	r3, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	2bff      	cmp	r3, #255	; 0xff
 80096f4:	d901      	bls.n	80096fa <VL53L1_calc_timeout_register_values+0x68>
			timeout_mclks = 0xFF;
 80096f6:	23ff      	movs	r3, #255	; 0xff
 80096f8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8009702:	2512      	movs	r5, #18
 8009704:	197c      	adds	r4, r7, r5
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	0011      	movs	r1, r2
 800970c:	0018      	movs	r0, r3
 800970e:	f7ff fefc 	bl	800950a <VL53L1_calc_encoded_timeout>
 8009712:	0003      	movs	r3, r0
 8009714:	8023      	strh	r3, [r4, #0]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009716:	002c      	movs	r4, r5
 8009718:	193b      	adds	r3, r7, r4
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	b29b      	uxth	r3, r3
 8009720:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009726:	193b      	adds	r3, r7, r4
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8009730:	0025      	movs	r5, r4
 8009732:	193c      	adds	r4, r7, r4
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	0011      	movs	r1, r2
 800973a:	0018      	movs	r0, r3
 800973c:	f7ff fee5 	bl	800950a <VL53L1_calc_encoded_timeout>
 8009740:	0003      	movs	r3, r0
 8009742:	8023      	strh	r3, [r4, #0]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009744:	002c      	movs	r4, r5
 8009746:	193b      	adds	r3, r7, r4
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009754:	193b      	adds	r3, r7, r4
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800975a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975c:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	7a5a      	ldrb	r2, [r3, #9]
 8009762:	1cbb      	adds	r3, r7, #2
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	0011      	movs	r1, r2
 8009768:	0018      	movs	r0, r3
 800976a:	f7ff fe05 	bl	8009378 <VL53L1_calc_macro_period_us>
 800976e:	0003      	movs	r3, r0
 8009770:	617b      	str	r3, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8009772:	0025      	movs	r5, r4
 8009774:	193c      	adds	r4, r7, r4
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	0011      	movs	r1, r2
 800977c:	0018      	movs	r0, r3
 800977e:	f7ff fec4 	bl	800950a <VL53L1_calc_encoded_timeout>
 8009782:	0003      	movs	r3, r0
 8009784:	8023      	strh	r3, [r4, #0]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009786:	002c      	movs	r4, r5
 8009788:	193b      	adds	r3, r7, r4
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	b29b      	uxth	r3, r3
 8009790:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8009792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009794:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009796:	193b      	adds	r3, r7, r4
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800979c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979e:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80097a0:	0025      	movs	r5, r4
 80097a2:	193c      	adds	r4, r7, r4
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	0011      	movs	r1, r2
 80097aa:	0018      	movs	r0, r3
 80097ac:	f7ff fead 	bl	800950a <VL53L1_calc_encoded_timeout>
 80097b0:	0003      	movs	r3, r0
 80097b2:	8023      	strh	r3, [r4, #0]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80097b4:	0029      	movs	r1, r5
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	b29b      	uxth	r3, r3
 80097be:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80097c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80097c4:	187b      	adds	r3, r7, r1
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80097ce:	231f      	movs	r3, #31
 80097d0:	18fb      	adds	r3, r7, r3
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b25b      	sxtb	r3, r3

}
 80097d6:	0018      	movs	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	b008      	add	sp, #32
 80097dc:	bdb0      	pop	{r4, r5, r7, pc}

080097de <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	603a      	str	r2, [r7, #0]
 80097e6:	1dfb      	adds	r3, r7, #7
 80097e8:	1c02      	adds	r2, r0, #0
 80097ea:	701a      	strb	r2, [r3, #0]
 80097ec:	1dbb      	adds	r3, r7, #6
 80097ee:	1c0a      	adds	r2, r1, #0
 80097f0:	701a      	strb	r2, [r3, #0]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80097f2:	1dfb      	adds	r3, r7, #7
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	d90c      	bls.n	8009814 <VL53L1_encode_row_col+0x36>
		*pspad_number = 128 + (col << 3) + (15-row);
 80097fa:	1dbb      	adds	r3, r7, #6
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	b2da      	uxtb	r2, r3
 8009802:	1dfb      	adds	r3, r7, #7
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	b2db      	uxtb	r3, r3
 800980a:	3b71      	subs	r3, #113	; 0x71
 800980c:	b2da      	uxtb	r2, r3
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8009812:	e00c      	b.n	800982e <VL53L1_encode_row_col+0x50>
		*pspad_number = ((15-col) << 3) + row;
 8009814:	1dbb      	adds	r3, r7, #6
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	220f      	movs	r2, #15
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	b2db      	uxtb	r3, r3
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	b2da      	uxtb	r2, r3
 8009822:	1dfb      	adds	r3, r7, #7
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	18d3      	adds	r3, r2, r3
 8009828:	b2da      	uxtb	r2, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	701a      	strb	r2, [r3, #0]
}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	46bd      	mov	sp, r7
 8009832:	b002      	add	sp, #8
 8009834:	bd80      	pop	{r7, pc}

08009836 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	210f      	movs	r1, #15
 8009842:	187b      	adds	r3, r7, r1
 8009844:	1c02      	adds	r2, r0, #0
 8009846:	701a      	strb	r2, [r3, #0]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8009848:	187b      	adds	r3, r7, r1
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	091b      	lsrs	r3, r3, #4
 800984e:	b2da      	uxtb	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009854:	187b      	adds	r3, r7, r1
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	220f      	movs	r2, #15
 800985a:	4013      	ands	r3, r2
 800985c:	b2da      	uxtb	r2, r3
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	701a      	strb	r2, [r3, #0]

}
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	46bd      	mov	sp, r7
 8009866:	b004      	add	sp, #16
 8009868:	bd80      	pop	{r7, pc}

0800986a <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	603a      	str	r2, [r7, #0]
 8009872:	1dfb      	adds	r3, r7, #7
 8009874:	1c02      	adds	r2, r0, #0
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	1dbb      	adds	r3, r7, #6
 800987a:	1c0a      	adds	r2, r1, #0
 800987c:	701a      	strb	r2, [r3, #0]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800987e:	1dbb      	adds	r3, r7, #6
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	b2da      	uxtb	r2, r3
 8009886:	1dfb      	adds	r3, r7, #7
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	18d3      	adds	r3, r2, r3
 800988c:	b2da      	uxtb	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	701a      	strb	r2, [r3, #0]

}
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	46bd      	mov	sp, r7
 8009896:	b002      	add	sp, #8
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098a4:	200f      	movs	r0, #15
 80098a6:	183b      	adds	r3, r7, r0
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	23b9      	movs	r3, #185	; 0xb9
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	2103      	movs	r1, #3
 80098b8:	54d1      	strb	r1, [r2, r3]
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	4a14      	ldr	r2, [pc, #80]	; (8009910 <VL53L1_low_power_auto_data_init+0x74>)
 80098be:	2100      	movs	r1, #0
 80098c0:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	4a13      	ldr	r2, [pc, #76]	; (8009914 <VL53L1_low_power_auto_data_init+0x78>)
 80098c6:	2100      	movs	r1, #0
 80098c8:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4a12      	ldr	r2, [pc, #72]	; (8009918 <VL53L1_low_power_auto_data_init+0x7c>)
 80098ce:	2100      	movs	r1, #0
 80098d0:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	23ba      	movs	r3, #186	; 0xba
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	2100      	movs	r1, #0
 80098da:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4a0f      	ldr	r2, [pc, #60]	; (800991c <VL53L1_low_power_auto_data_init+0x80>)
 80098e0:	2100      	movs	r1, #0
 80098e2:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4a0e      	ldr	r2, [pc, #56]	; (8009920 <VL53L1_low_power_auto_data_init+0x84>)
 80098e8:	2100      	movs	r1, #0
 80098ea:	5499      	strb	r1, [r3, r2]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	23bb      	movs	r3, #187	; 0xbb
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	2100      	movs	r1, #0
 80098f4:	50d1      	str	r1, [r2, r3]
	pdev->low_power_auto_data.dss__required_spads = 0;
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	23bc      	movs	r3, #188	; 0xbc
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	2100      	movs	r1, #0
 80098fe:	52d1      	strh	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 8009900:	183b      	adds	r3, r7, r0
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	b25b      	sxtb	r3, r3
}
 8009906:	0018      	movs	r0, r3
 8009908:	46bd      	mov	sp, r7
 800990a:	b004      	add	sp, #16
 800990c:	bd80      	pop	{r7, pc}
 800990e:	46c0      	nop			; (mov r8, r8)
 8009910:	000002e5 	.word	0x000002e5
 8009914:	000002e6 	.word	0x000002e6
 8009918:	000002e7 	.word	0x000002e7
 800991c:	000002e9 	.word	0x000002e9
 8009920:	000002ea 	.word	0x000002ea

08009924 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009930:	2117      	movs	r1, #23
 8009932:	187b      	adds	r3, r7, r1
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	229b      	movs	r2, #155	; 0x9b
 8009948:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800994a:	187b      	adds	r3, r7, r1
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b25b      	sxtb	r3, r3
}
 8009950:	0018      	movs	r0, r3
 8009952:	46bd      	mov	sp, r7
 8009954:	b006      	add	sp, #24
 8009956:	bd80      	pop	{r7, pc}

08009958 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009964:	200b      	movs	r0, #11
 8009966:	183b      	adds	r3, r7, r0
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	2364      	movs	r3, #100	; 0x64
 8009970:	33ff      	adds	r3, #255	; 0xff
 8009972:	5cd1      	ldrb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_init =
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	23ba      	movs	r3, #186	; 0xba
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	23b0      	movs	r3, #176	; 0xb0
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	5cd1      	ldrb	r1, [r2, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4a1c      	ldr	r2, [pc, #112]	; (80099f8 <VL53L1_low_power_auto_setup_manual_calibration+0xa0>)
 8009988:	5499      	strb	r1, [r3, r2]

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	2364      	movs	r3, #100	; 0x64
 800998e:	33ff      	adds	r3, #255	; 0xff
 8009990:	5cd3      	ldrb	r3, [r2, r3]
 8009992:	227f      	movs	r2, #127	; 0x7f
 8009994:	4013      	ands	r3, r2
 8009996:	b2d9      	uxtb	r1, r3
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	2364      	movs	r3, #100	; 0x64
 800999c:	33ff      	adds	r3, #255	; 0xff
 800999e:	54d1      	strb	r1, [r2, r3]
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	23b0      	movs	r3, #176	; 0xb0
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	5cd3      	ldrb	r3, [r2, r3]
 80099a8:	2203      	movs	r2, #3
 80099aa:	4013      	ands	r3, r2
 80099ac:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	23b9      	movs	r3, #185	; 0xb9
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	5ccb      	ldrb	r3, [r1, r3]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80099ba:	18d3      	adds	r3, r2, r3
 80099bc:	b2d9      	uxtb	r1, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	23b0      	movs	r3, #176	; 0xb0
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	54d1      	strb	r1, [r2, r3]
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	238e      	movs	r3, #142	; 0x8e
 80099ca:	33ff      	adds	r3, #255	; 0xff
 80099cc:	2101      	movs	r1, #1
 80099ce:	54d1      	strb	r1, [r2, r3]
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <VL53L1_low_power_auto_setup_manual_calibration+0xa4>)
 80099d4:	5c99      	ldrb	r1, [r3, r2]
	pdev->low_power_auto_data.first_run_phasecal_result =
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <VL53L1_low_power_auto_setup_manual_calibration+0xa8>)
 80099da:	5499      	strb	r1, [r3, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <VL53L1_low_power_auto_setup_manual_calibration+0xa8>)
 80099e0:	5c99      	ldrb	r1, [r3, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	2388      	movs	r3, #136	; 0x88
 80099e6:	33ff      	adds	r3, #255	; 0xff
 80099e8:	54d1      	strb	r1, [r2, r3]

	LOG_FUNCTION_END(status);

	return status;
 80099ea:	183b      	adds	r3, r7, r0
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b25b      	sxtb	r3, r3
}
 80099f0:	0018      	movs	r0, r3
 80099f2:	46bd      	mov	sp, r7
 80099f4:	b004      	add	sp, #16
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	000002e9 	.word	0x000002e9
 80099fc:	000002ae 	.word	0x000002ae
 8009a00:	000002ea 	.word	0x000002ea

08009a04 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	0002      	movs	r2, r0
 8009a0c:	1dbb      	adds	r3, r7, #6
 8009a0e:	801a      	strh	r2, [r3, #0]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8009a14:	1dbb      	adds	r3, r7, #6
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	0019      	movs	r1, r3
 8009a1a:	2380      	movs	r3, #128	; 0x80
 8009a1c:	05d8      	lsls	r0, r3, #23
 8009a1e:	f7f6 fc17 	bl	8000250 <__divsi3>
 8009a22:	0003      	movs	r3, r0
 8009a24:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8009a26:	68fb      	ldr	r3, [r7, #12]
}
 8009a28:	0018      	movs	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b004      	add	sp, #16
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	0002      	movs	r2, r0
 8009a38:	1dfb      	adds	r3, r7, #7
 8009a3a:	701a      	strb	r2, [r3, #0]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009a3c:	210f      	movs	r1, #15
 8009a3e:	187b      	adds	r3, r7, r1
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009a44:	1dfb      	adds	r3, r7, #7
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	187a      	adds	r2, r7, r1
 8009a4e:	18db      	adds	r3, r3, r3
 8009a50:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 8009a52:	187b      	adds	r3, r7, r1
 8009a54:	781b      	ldrb	r3, [r3, #0]
}
 8009a56:	0018      	movs	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b004      	add	sp, #16
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	210f      	movs	r1, #15
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	1c02      	adds	r2, r0, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8009a70:	187b      	adds	r3, r7, r1
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da12      	bge.n	8009aa0 <VL53L1_decode_row_col+0x42>
		*prow = 8 + ((255-spad_number) & 0x07);
 8009a7a:	187b      	adds	r3, r7, r1
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2207      	movs	r2, #7
 8009a84:	4013      	ands	r3, r2
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	3308      	adds	r3, #8
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8009a90:	187b      	adds	r3, r7, r1
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	3b80      	subs	r3, #128	; 0x80
 8009a96:	10db      	asrs	r3, r3, #3
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8009a9e:	e00f      	b.n	8009ac0 <VL53L1_decode_row_col+0x62>
		*prow = spad_number & 0x07;
 8009aa0:	210f      	movs	r1, #15
 8009aa2:	187b      	adds	r3, r7, r1
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2207      	movs	r2, #7
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8009ab0:	187b      	adds	r3, r7, r1
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	227f      	movs	r2, #127	; 0x7f
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	10db      	asrs	r3, r3, #3
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	701a      	strb	r2, [r3, #0]
}
 8009ac0:	46c0      	nop			; (mov r8, r8)
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b004      	add	sp, #16
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	200a      	movs	r0, #10
 8009ad4:	183b      	adds	r3, r7, r0
 8009ad6:	1c0a      	adds	r2, r1, #0
 8009ad8:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009ada:	2317      	movs	r3, #23
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009ae2:	183b      	adds	r3, r7, r0
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	2b0a      	cmp	r3, #10
 8009ae8:	d802      	bhi.n	8009af0 <VL53L1_i2c_encode_static_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009aea:	230a      	movs	r3, #10
 8009aec:	425b      	negs	r3, r3
 8009aee:	e049      	b.n	8009b84 <VL53L1_i2c_encode_static_nvm_managed+0xbc>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	227f      	movs	r2, #127	; 0x7f
 8009af6:	4013      	ands	r3, r2
 8009af8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8009b06:	210f      	movs	r1, #15
 8009b08:	400a      	ands	r2, r1
 8009b0a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8009b0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8009b16:	217f      	movs	r1, #127	; 0x7f
 8009b18:	400a      	ands	r2, r1
 8009b1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8009b1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8009b26:	2103      	movs	r1, #3
 8009b28:	400a      	ands	r2, r1
 8009b2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8009b2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8009b36:	217f      	movs	r1, #127	; 0x7f
 8009b38:	400a      	ands	r2, r1
 8009b3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8009b3c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	88d8      	ldrh	r0, [r3, #6]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3305      	adds	r3, #5
 8009b46:	001a      	movs	r2, r3
 8009b48:	2102      	movs	r1, #2
 8009b4a:	f7ff fa85 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8009b56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8009b60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8009b6a:	213f      	movs	r1, #63	; 0x3f
 8009b6c:	400a      	ands	r2, r1
 8009b6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8009b70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8009b7a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8009b7c:	2317      	movs	r3, #23
 8009b7e:	18fb      	adds	r3, r7, r3
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b25b      	sxtb	r3, r3
}
 8009b84:	0018      	movs	r0, r3
 8009b86:	46bd      	mov	sp, r7
 8009b88:	b006      	add	sp, #24
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	210e      	movs	r1, #14
 8009b98:	187b      	adds	r3, r7, r1
 8009b9a:	1c02      	adds	r2, r0, #0
 8009b9c:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009b9e:	2317      	movs	r3, #23
 8009ba0:	18fb      	adds	r3, r7, r3
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	2b0a      	cmp	r3, #10
 8009bac:	d802      	bhi.n	8009bb4 <VL53L1_i2c_decode_static_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009bae:	230a      	movs	r3, #10
 8009bb0:	425b      	negs	r3, r3
 8009bb2:	e048      	b.n	8009c46 <VL53L1_i2c_decode_static_nvm_managed+0xba>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	227f      	movs	r2, #127	; 0x7f
 8009bba:	4013      	ands	r3, r2
 8009bbc:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	220f      	movs	r2, #15
 8009bca:	4013      	ands	r3, r2
 8009bcc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	227f      	movs	r2, #127	; 0x7f
 8009bda:	4013      	ands	r3, r2
 8009bdc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	3303      	adds	r3, #3
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2203      	movs	r2, #3
 8009bea:	4013      	ands	r3, r2
 8009bec:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	227f      	movs	r2, #127	; 0x7f
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3305      	adds	r3, #5
 8009c06:	0019      	movs	r1, r3
 8009c08:	2002      	movs	r0, #2
 8009c0a:	f7ff fa63 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	001a      	movs	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	79da      	ldrb	r2, [r3, #7]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	7a1a      	ldrb	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	3309      	adds	r3, #9
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	223f      	movs	r2, #63	; 0x3f
 8009c2e:	4013      	ands	r3, r2
 8009c30:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	7a9a      	ldrb	r2, [r3, #10]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8009c3e:	2317      	movs	r3, #23
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	b25b      	sxtb	r3, r3
}
 8009c46:	0018      	movs	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	b006      	add	sp, #24
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8009c4e:	b590      	push	{r4, r7, lr}
 8009c50:	b087      	sub	sp, #28
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009c58:	2117      	movs	r1, #23
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009c60:	000a      	movs	r2, r1
 8009c62:	18bb      	adds	r3, r7, r2
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	b25b      	sxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <VL53L1_get_static_nvm_managed+0x32>
		status = VL53L1_ReadMulti(
 8009c6c:	18bc      	adds	r4, r7, r2
 8009c6e:	230c      	movs	r3, #12
 8009c70:	18fa      	adds	r2, r7, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	230b      	movs	r3, #11
 8009c76:	2101      	movs	r1, #1
 8009c78:	f001 f97a 	bl	800af70 <VL53L1_ReadMulti>
 8009c7c:	0003      	movs	r3, r0
 8009c7e:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8009c80:	2217      	movs	r2, #23
 8009c82:	18bb      	adds	r3, r7, r2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <VL53L1_get_static_nvm_managed+0x52>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8009c8c:	18bc      	adds	r4, r7, r2
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	230c      	movs	r3, #12
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	0019      	movs	r1, r3
 8009c96:	200b      	movs	r0, #11
 8009c98:	f7ff ff78 	bl	8009b8c <VL53L1_i2c_decode_static_nvm_managed>
 8009c9c:	0003      	movs	r3, r0
 8009c9e:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8009ca0:	2317      	movs	r3, #23
 8009ca2:	18fb      	adds	r3, r7, r3
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	b25b      	sxtb	r3, r3
}
 8009ca8:	0018      	movs	r0, r3
 8009caa:	46bd      	mov	sp, r7
 8009cac:	b007      	add	sp, #28
 8009cae:	bd90      	pop	{r4, r7, pc}

08009cb0 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	607a      	str	r2, [r7, #4]
 8009cba:	200a      	movs	r0, #10
 8009cbc:	183b      	adds	r3, r7, r0
 8009cbe:	1c0a      	adds	r2, r1, #0
 8009cc0:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009cc2:	2317      	movs	r3, #23
 8009cc4:	18fb      	adds	r3, r7, r3
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009cca:	183b      	adds	r3, r7, r0
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	2b16      	cmp	r3, #22
 8009cd0:	d802      	bhi.n	8009cd8 <VL53L1_i2c_encode_customer_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009cd2:	230a      	movs	r3, #10
 8009cd4:	425b      	negs	r3, r3
 8009cd6:	e078      	b.n	8009dca <VL53L1_i2c_encode_customer_nvm_managed+0x11a>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8009ce8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8009cf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8009cfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8009d06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8009d10:	210f      	movs	r1, #15
 8009d12:	400a      	ands	r2, r1
 8009d14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8009d16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8009d20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8009d2a:	213f      	movs	r1, #63	; 0x3f
 8009d2c:	400a      	ands	r2, r1
 8009d2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8009d30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8009d3a:	2103      	movs	r1, #3
 8009d3c:	400a      	ands	r2, r1
 8009d3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8009d40:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8958      	ldrh	r0, [r3, #10]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3309      	adds	r3, #9
 8009d4a:	001a      	movs	r2, r3
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	f7ff f983 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	200c      	movs	r0, #12
 8009d56:	5e18      	ldrsh	r0, [r3, r0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	330b      	adds	r3, #11
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	2102      	movs	r1, #2
 8009d60:	f7ff f9e0 	bl	8009124 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	200e      	movs	r0, #14
 8009d68:	5e18      	ldrsh	r0, [r3, r0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	330d      	adds	r3, #13
 8009d6e:	001a      	movs	r2, r3
 8009d70:	2102      	movs	r1, #2
 8009d72:	f7ff f9d7 	bl	8009124 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8a18      	ldrh	r0, [r3, #16]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	330f      	adds	r3, #15
 8009d7e:	001a      	movs	r2, r3
 8009d80:	2102      	movs	r1, #2
 8009d82:	f7ff f969 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2212      	movs	r2, #18
 8009d8a:	5e9b      	ldrsh	r3, [r3, r2]
	VL53L1_i2c_encode_int16_t(
 8009d8c:	04db      	lsls	r3, r3, #19
 8009d8e:	0cdb      	lsrs	r3, r3, #19
 8009d90:	b218      	sxth	r0, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3311      	adds	r3, #17
 8009d96:	001a      	movs	r2, r3
 8009d98:	2102      	movs	r1, #2
 8009d9a:	f7ff f9c3 	bl	8009124 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2014      	movs	r0, #20
 8009da2:	5e18      	ldrsh	r0, [r3, r0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3313      	adds	r3, #19
 8009da8:	001a      	movs	r2, r3
 8009daa:	2102      	movs	r1, #2
 8009dac:	f7ff f9ba 	bl	8009124 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2016      	movs	r0, #22
 8009db4:	5e18      	ldrsh	r0, [r3, r0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3315      	adds	r3, #21
 8009dba:	001a      	movs	r2, r3
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	f7ff f9b1 	bl	8009124 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8009dc2:	2317      	movs	r3, #23
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	b25b      	sxtb	r3, r3
}
 8009dca:	0018      	movs	r0, r3
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	b006      	add	sp, #24
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b086      	sub	sp, #24
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	210e      	movs	r1, #14
 8009dde:	187b      	adds	r3, r7, r1
 8009de0:	1c02      	adds	r2, r0, #0
 8009de2:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009de4:	2317      	movs	r3, #23
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	2b16      	cmp	r3, #22
 8009df2:	d802      	bhi.n	8009dfa <VL53L1_i2c_decode_customer_nvm_managed+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009df4:	230a      	movs	r3, #10
 8009df6:	425b      	negs	r3, r3
 8009df8:	e07b      	b.n	8009ef2 <VL53L1_i2c_decode_customer_nvm_managed+0x120>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	785a      	ldrb	r2, [r3, #1]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	789a      	ldrb	r2, [r3, #2]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	78da      	ldrb	r2, [r3, #3]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	791a      	ldrb	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	3305      	adds	r3, #5
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	220f      	movs	r2, #15
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	799a      	ldrb	r2, [r3, #6]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	223f      	movs	r2, #63	; 0x3f
 8009e42:	4013      	ands	r3, r2
 8009e44:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2203      	movs	r2, #3
 8009e52:	4013      	ands	r3, r2
 8009e54:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	3309      	adds	r3, #9
 8009e5e:	0019      	movs	r1, r3
 8009e60:	2002      	movs	r0, #2
 8009e62:	f7ff f937 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 8009e66:	0003      	movs	r3, r0
 8009e68:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	330b      	adds	r3, #11
 8009e72:	0019      	movs	r1, r3
 8009e74:	2002      	movs	r0, #2
 8009e76:	f7ff f994 	bl	80091a2 <VL53L1_i2c_decode_int16_t>
 8009e7a:	0003      	movs	r3, r0
 8009e7c:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	330d      	adds	r3, #13
 8009e86:	0019      	movs	r1, r3
 8009e88:	2002      	movs	r0, #2
 8009e8a:	f7ff f98a 	bl	80091a2 <VL53L1_i2c_decode_int16_t>
 8009e8e:	0003      	movs	r3, r0
 8009e90:	001a      	movs	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	330f      	adds	r3, #15
 8009e9a:	0019      	movs	r1, r3
 8009e9c:	2002      	movs	r0, #2
 8009e9e:	f7ff f919 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	001a      	movs	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3311      	adds	r3, #17
 8009eae:	0019      	movs	r1, r3
 8009eb0:	2002      	movs	r0, #2
 8009eb2:	f7ff f976 	bl	80091a2 <VL53L1_i2c_decode_int16_t>
 8009eb6:	0003      	movs	r3, r0
 8009eb8:	04db      	lsls	r3, r3, #19
 8009eba:	0cdb      	lsrs	r3, r3, #19
 8009ebc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	3313      	adds	r3, #19
 8009ec6:	0019      	movs	r1, r3
 8009ec8:	2002      	movs	r0, #2
 8009eca:	f7ff f96a 	bl	80091a2 <VL53L1_i2c_decode_int16_t>
 8009ece:	0003      	movs	r3, r0
 8009ed0:	001a      	movs	r2, r3
	pdata->mm_config__inner_offset_mm =
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	3315      	adds	r3, #21
 8009eda:	0019      	movs	r1, r3
 8009edc:	2002      	movs	r0, #2
 8009ede:	f7ff f960 	bl	80091a2 <VL53L1_i2c_decode_int16_t>
 8009ee2:	0003      	movs	r3, r0
 8009ee4:	001a      	movs	r2, r3
	pdata->mm_config__outer_offset_mm =
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8009eea:	2317      	movs	r3, #23
 8009eec:	18fb      	adds	r3, r7, r3
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	b25b      	sxtb	r3, r3
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b006      	add	sp, #24
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8009efa:	b590      	push	{r4, r7, lr}
 8009efc:	b089      	sub	sp, #36	; 0x24
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009f04:	211f      	movs	r1, #31
 8009f06:	187b      	adds	r3, r7, r1
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009f0c:	000a      	movs	r2, r1
 8009f0e:	18bb      	adds	r3, r7, r2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b25b      	sxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d109      	bne.n	8009f2c <VL53L1_get_customer_nvm_managed+0x32>
		status = VL53L1_ReadMulti(
 8009f18:	18bc      	adds	r4, r7, r2
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	18fa      	adds	r2, r7, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	2317      	movs	r3, #23
 8009f22:	210d      	movs	r1, #13
 8009f24:	f001 f824 	bl	800af70 <VL53L1_ReadMulti>
 8009f28:	0003      	movs	r3, r0
 8009f2a:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8009f2c:	221f      	movs	r2, #31
 8009f2e:	18bb      	adds	r3, r7, r2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <VL53L1_get_customer_nvm_managed+0x52>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8009f38:	18bc      	adds	r4, r7, r2
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	18fb      	adds	r3, r7, r3
 8009f40:	0019      	movs	r1, r3
 8009f42:	2017      	movs	r0, #23
 8009f44:	f7ff ff45 	bl	8009dd2 <VL53L1_i2c_decode_customer_nvm_managed>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8009f4c:	231f      	movs	r3, #31
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b25b      	sxtb	r3, r3
}
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b009      	add	sp, #36	; 0x24
 8009f5a:	bd90      	pop	{r4, r7, pc}

08009f5c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	200a      	movs	r0, #10
 8009f68:	183b      	adds	r3, r7, r0
 8009f6a:	1c0a      	adds	r2, r1, #0
 8009f6c:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009f6e:	2317      	movs	r3, #23
 8009f70:	18fb      	adds	r3, r7, r3
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009f76:	183b      	adds	r3, r7, r0
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	2b1f      	cmp	r3, #31
 8009f7c:	d802      	bhi.n	8009f84 <VL53L1_i2c_encode_static_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009f7e:	230a      	movs	r3, #10
 8009f80:	425b      	negs	r3, r3
 8009f82:	e0d1      	b.n	800a128 <VL53L1_i2c_encode_static_config+0x1cc>

	VL53L1_i2c_encode_uint16_t(
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	2102      	movs	r1, #2
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7ff f863 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	400a      	ands	r2, r1
 8009f9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8009fa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8009faa:	210f      	movs	r1, #15
 8009fac:	400a      	ands	r2, r1
 8009fae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8009fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8009fba:	210f      	movs	r1, #15
 8009fbc:	400a      	ands	r2, r1
 8009fbe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8009fc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8009fca:	211f      	movs	r1, #31
 8009fcc:	400a      	ands	r2, r1
 8009fce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8009fd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8009fda:	217f      	movs	r1, #127	; 0x7f
 8009fdc:	400a      	ands	r2, r1
 8009fde:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8009fe0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8009fea:	217f      	movs	r1, #127	; 0x7f
 8009fec:	400a      	ands	r2, r1
 8009fee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8009ff0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	400a      	ands	r2, r1
 8009ffe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800a000:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800a00a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800a014:	2101      	movs	r1, #1
 800a016:	400a      	ands	r2, r1
 800a018:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800a01a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800a024:	2103      	movs	r1, #3
 800a026:	400a      	ands	r2, r1
 800a028:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800a02a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800a034:	211f      	movs	r1, #31
 800a036:	400a      	ands	r2, r1
 800a038:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800a03a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800a044:	2103      	movs	r1, #3
 800a046:	400a      	ands	r2, r1
 800a048:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800a04a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800a054:	2103      	movs	r1, #3
 800a056:	400a      	ands	r2, r1
 800a058:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800a05a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800a064:	2107      	movs	r1, #7
 800a066:	400a      	ands	r2, r1
 800a068:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800a06a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800a074:	211f      	movs	r1, #31
 800a076:	400a      	ands	r2, r1
 800a078:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800a07a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800a084:	2101      	movs	r1, #1
 800a086:	400a      	ands	r2, r1
 800a088:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800a08a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800a094:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800a09e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800a0a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800a0b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800a0bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800a0c6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8b18      	ldrh	r0, [r3, #24]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	001a      	movs	r2, r3
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	f7fe ffc0 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800a0e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800a0ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800a0f4:	210f      	movs	r1, #15
 800a0f6:	400a      	ands	r2, r1
 800a0f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800a0fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800a104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800a10e:	210f      	movs	r1, #15
 800a110:	400a      	ands	r2, r1
 800a112:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800a114:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800a11e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800a120:	2317      	movs	r3, #23
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b25b      	sxtb	r3, r3
}
 800a128:	0018      	movs	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b006      	add	sp, #24
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	200a      	movs	r0, #10
 800a13c:	183b      	adds	r3, r7, r0
 800a13e:	1c0a      	adds	r2, r1, #0
 800a140:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a142:	2317      	movs	r3, #23
 800a144:	18fb      	adds	r3, r7, r3
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a14a:	183b      	adds	r3, r7, r0
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	2b15      	cmp	r3, #21
 800a150:	d802      	bhi.n	800a158 <VL53L1_i2c_encode_general_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a152:	230a      	movs	r3, #10
 800a154:	425b      	negs	r3, r3
 800a156:	e072      	b.n	800a23e <VL53L1_i2c_encode_general_config+0x10e>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800a168:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800a172:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800a17c:	217f      	movs	r1, #127	; 0x7f
 800a17e:	400a      	ands	r2, r1
 800a180:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800a182:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800a188:	051b      	lsls	r3, r3, #20
 800a18a:	0d1b      	lsrs	r3, r3, #20
 800a18c:	b298      	uxth	r0, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3304      	adds	r3, #4
 800a192:	001a      	movs	r2, r3
 800a194:	2102      	movs	r1, #2
 800a196:	f7fe ff5f 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800a1a2:	217f      	movs	r1, #127	; 0x7f
 800a1a4:	400a      	ands	r2, r1
 800a1a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800a1a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800a1b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800a1bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	400a      	ands	r2, r1
 800a1ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800a1cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800a1d6:	2107      	movs	r1, #7
 800a1d8:	400a      	ands	r2, r1
 800a1da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800a1dc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8998      	ldrh	r0, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	001a      	movs	r2, r3
 800a1e8:	2102      	movs	r1, #2
 800a1ea:	f7fe ff35 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	89d8      	ldrh	r0, [r3, #14]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	330e      	adds	r3, #14
 800a1f6:	001a      	movs	r2, r3
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	f7fe ff2d 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8a18      	ldrh	r0, [r3, #16]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3310      	adds	r3, #16
 800a206:	001a      	movs	r2, r3
 800a208:	2102      	movs	r1, #2
 800a20a:	f7fe ff25 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800a216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800a220:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800a22a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800a234:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800a236:	2317      	movs	r3, #23
 800a238:	18fb      	adds	r3, r7, r3
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b25b      	sxtb	r3, r3
}
 800a23e:	0018      	movs	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	b006      	add	sp, #24
 800a244:	bd80      	pop	{r7, pc}

0800a246 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b086      	sub	sp, #24
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	200a      	movs	r0, #10
 800a252:	183b      	adds	r3, r7, r0
 800a254:	1c0a      	adds	r2, r1, #0
 800a256:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a258:	2317      	movs	r3, #23
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a260:	183b      	adds	r3, r7, r0
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	2b16      	cmp	r3, #22
 800a266:	d802      	bhi.n	800a26e <VL53L1_i2c_encode_timing_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a268:	230a      	movs	r3, #10
 800a26a:	425b      	negs	r3, r3
 800a26c:	e070      	b.n	800a350 <VL53L1_i2c_encode_timing_config+0x10a>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	220f      	movs	r2, #15
 800a274:	4013      	ands	r3, r2
 800a276:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800a284:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800a28e:	210f      	movs	r1, #15
 800a290:	400a      	ands	r2, r1
 800a292:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800a294:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800a29e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800a2a8:	210f      	movs	r1, #15
 800a2aa:	400a      	ands	r2, r1
 800a2ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800a2ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800a2b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800a2c2:	213f      	movs	r1, #63	; 0x3f
 800a2c4:	400a      	ands	r2, r1
 800a2c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800a2c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800a2d2:	210f      	movs	r1, #15
 800a2d4:	400a      	ands	r2, r1
 800a2d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800a2d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800a2e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800a2ec:	213f      	movs	r1, #63	; 0x3f
 800a2ee:	400a      	ands	r2, r1
 800a2f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800a2f2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8958      	ldrh	r0, [r3, #10]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	330a      	adds	r3, #10
 800a2fc:	001a      	movs	r2, r3
 800a2fe:	2102      	movs	r1, #2
 800a300:	f7fe feaa 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8998      	ldrh	r0, [r3, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	330c      	adds	r3, #12
 800a30c:	001a      	movs	r2, r3
 800a30e:	2102      	movs	r1, #2
 800a310:	f7fe fea2 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800a31c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800a326:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6918      	ldr	r0, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3312      	adds	r3, #18
 800a330:	001a      	movs	r2, r3
 800a332:	2104      	movs	r1, #4
 800a334:	f7fe ff67 	bl	8009206 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800a340:	2101      	movs	r1, #1
 800a342:	400a      	ands	r2, r1
 800a344:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800a346:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800a348:	2317      	movs	r3, #23
 800a34a:	18fb      	adds	r3, r7, r3
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b25b      	sxtb	r3, r3
}
 800a350:	0018      	movs	r0, r3
 800a352:	46bd      	mov	sp, r7
 800a354:	b006      	add	sp, #24
 800a356:	bd80      	pop	{r7, pc}

0800a358 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	200a      	movs	r0, #10
 800a364:	183b      	adds	r3, r7, r0
 800a366:	1c0a      	adds	r2, r1, #0
 800a368:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a36a:	2317      	movs	r3, #23
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	2200      	movs	r2, #0
 800a370:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800a372:	183b      	adds	r3, r7, r0
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	2b11      	cmp	r3, #17
 800a378:	d802      	bhi.n	800a380 <VL53L1_i2c_encode_dynamic_config+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a37a:	230a      	movs	r3, #10
 800a37c:	425b      	negs	r3, r3
 800a37e:	e073      	b.n	800a468 <VL53L1_i2c_encode_dynamic_config+0x110>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2203      	movs	r2, #3
 800a386:	4013      	ands	r3, r2
 800a388:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8858      	ldrh	r0, [r3, #2]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3301      	adds	r3, #1
 800a396:	001a      	movs	r2, r3
 800a398:	2102      	movs	r1, #2
 800a39a:	f7fe fe5d 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8898      	ldrh	r0, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3303      	adds	r3, #3
 800a3a6:	001a      	movs	r2, r3
 800a3a8:	2102      	movs	r1, #2
 800a3aa:	f7fe fe55 	bl	8009058 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	400a      	ands	r2, r1
 800a3ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800a3bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800a3c6:	2107      	movs	r1, #7
 800a3c8:	400a      	ands	r2, r1
 800a3ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800a3cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800a3d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800a3e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800a3ea:	217f      	movs	r1, #127	; 0x7f
 800a3ec:	400a      	ands	r2, r1
 800a3ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800a3f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800a3fa:	217f      	movs	r1, #127	; 0x7f
 800a3fc:	400a      	ands	r2, r1
 800a3fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800a400:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800a40a:	2103      	movs	r1, #3
 800a40c:	400a      	ands	r2, r1
 800a40e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800a410:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800a41a:	2103      	movs	r1, #3
 800a41c:	400a      	ands	r2, r1
 800a41e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800a420:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800a42a:	210f      	movs	r1, #15
 800a42c:	400a      	ands	r2, r1
 800a42e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800a430:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800a43a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800a444:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800a44e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800a458:	2103      	movs	r1, #3
 800a45a:	400a      	ands	r2, r1
 800a45c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800a45e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800a460:	2317      	movs	r3, #23
 800a462:	18fb      	adds	r3, r7, r3
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b25b      	sxtb	r3, r3
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b006      	add	sp, #24
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	200a      	movs	r0, #10
 800a47c:	183b      	adds	r3, r7, r0
 800a47e:	1c0a      	adds	r2, r1, #0
 800a480:	801a      	strh	r2, [r3, #0]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a482:	2317      	movs	r3, #23
 800a484:	18fb      	adds	r3, r7, r3
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800a48a:	183b      	adds	r3, r7, r0
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d802      	bhi.n	800a498 <VL53L1_i2c_encode_system_control+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a492:	230a      	movs	r3, #10
 800a494:	425b      	negs	r3, r3
 800a496:	e027      	b.n	800a4e8 <VL53L1_i2c_encode_system_control+0x78>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4013      	ands	r3, r2
 800a4a0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	400a      	ands	r2, r1
 800a4b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800a4b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800a4be:	2101      	movs	r1, #1
 800a4c0:	400a      	ands	r2, r1
 800a4c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800a4c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800a4ce:	2103      	movs	r1, #3
 800a4d0:	400a      	ands	r2, r1
 800a4d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800a4d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800a4de:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800a4e0:	2317      	movs	r3, #23
 800a4e2:	18fb      	adds	r3, r7, r3
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	b25b      	sxtb	r3, r3
}
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	b006      	add	sp, #24
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	607a      	str	r2, [r7, #4]
 800a4fa:	210e      	movs	r1, #14
 800a4fc:	187b      	adds	r3, r7, r1
 800a4fe:	1c02      	adds	r2, r0, #0
 800a500:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a502:	2317      	movs	r3, #23
 800a504:	18fb      	adds	r3, r7, r3
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a50a:	187b      	adds	r3, r7, r1
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	2b2b      	cmp	r3, #43	; 0x2b
 800a510:	d802      	bhi.n	800a518 <VL53L1_i2c_decode_system_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a512:	230a      	movs	r3, #10
 800a514:	425b      	negs	r3, r3
 800a516:	e0e4      	b.n	800a6e2 <VL53L1_i2c_decode_system_results+0x1f2>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	223f      	movs	r2, #63	; 0x3f
 800a51e:	4013      	ands	r3, r2
 800a520:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	785a      	ldrb	r2, [r3, #1]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	3302      	adds	r3, #2
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	220f      	movs	r2, #15
 800a536:	4013      	ands	r3, r2
 800a538:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	78da      	ldrb	r2, [r3, #3]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3304      	adds	r3, #4
 800a54a:	0019      	movs	r1, r3
 800a54c:	2002      	movs	r0, #2
 800a54e:	f7fe fdc1 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a552:	0003      	movs	r3, r0
 800a554:	001a      	movs	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3306      	adds	r3, #6
 800a55e:	0019      	movs	r1, r3
 800a560:	2002      	movs	r0, #2
 800a562:	f7fe fdb7 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a566:	0003      	movs	r3, r0
 800a568:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	3308      	adds	r3, #8
 800a572:	0019      	movs	r1, r3
 800a574:	2002      	movs	r0, #2
 800a576:	f7fe fdad 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a57a:	0003      	movs	r3, r0
 800a57c:	001a      	movs	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	330a      	adds	r3, #10
 800a586:	0019      	movs	r1, r3
 800a588:	2002      	movs	r0, #2
 800a58a:	f7fe fda3 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a58e:	0003      	movs	r3, r0
 800a590:	001a      	movs	r2, r3
	pdata->result__sigma_sd0 =
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	330c      	adds	r3, #12
 800a59a:	0019      	movs	r1, r3
 800a59c:	2002      	movs	r0, #2
 800a59e:	f7fe fd99 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a5a2:	0003      	movs	r3, r0
 800a5a4:	001a      	movs	r2, r3
	pdata->result__phase_sd0 =
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	330e      	adds	r3, #14
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	2002      	movs	r0, #2
 800a5b2:	f7fe fd8f 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	001a      	movs	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	3310      	adds	r3, #16
 800a5c2:	0019      	movs	r1, r3
 800a5c4:	2002      	movs	r0, #2
 800a5c6:	f7fe fd85 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a5ca:	0003      	movs	r3, r0
 800a5cc:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3312      	adds	r3, #18
 800a5d6:	0019      	movs	r1, r3
 800a5d8:	2002      	movs	r0, #2
 800a5da:	f7fe fd7b 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a5de:	0003      	movs	r3, r0
 800a5e0:	001a      	movs	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	3314      	adds	r3, #20
 800a5ea:	0019      	movs	r1, r3
 800a5ec:	2002      	movs	r0, #2
 800a5ee:	f7fe fd71 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a5f2:	0003      	movs	r3, r0
 800a5f4:	001a      	movs	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	3316      	adds	r3, #22
 800a5fe:	0019      	movs	r1, r3
 800a600:	2002      	movs	r0, #2
 800a602:	f7fe fd67 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a606:	0003      	movs	r3, r0
 800a608:	001a      	movs	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	3318      	adds	r3, #24
 800a612:	0019      	movs	r1, r3
 800a614:	2002      	movs	r0, #2
 800a616:	f7fe fd5d 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a61a:	0003      	movs	r3, r0
 800a61c:	001a      	movs	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	331a      	adds	r3, #26
 800a626:	0019      	movs	r1, r3
 800a628:	2002      	movs	r0, #2
 800a62a:	f7fe fd53 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a62e:	0003      	movs	r3, r0
 800a630:	001a      	movs	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	331c      	adds	r3, #28
 800a63a:	0019      	movs	r1, r3
 800a63c:	2002      	movs	r0, #2
 800a63e:	f7fe fd49 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a642:	0003      	movs	r3, r0
 800a644:	001a      	movs	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	331e      	adds	r3, #30
 800a64e:	0019      	movs	r1, r3
 800a650:	2002      	movs	r0, #2
 800a652:	f7fe fd3f 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a656:	0003      	movs	r3, r0
 800a658:	001a      	movs	r2, r3
	pdata->result__sigma_sd1 =
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	3320      	adds	r3, #32
 800a662:	0019      	movs	r1, r3
 800a664:	2002      	movs	r0, #2
 800a666:	f7fe fd35 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a66a:	0003      	movs	r3, r0
 800a66c:	001a      	movs	r2, r3
	pdata->result__phase_sd1 =
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	3322      	adds	r3, #34	; 0x22
 800a676:	0019      	movs	r1, r3
 800a678:	2002      	movs	r0, #2
 800a67a:	f7fe fd2b 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a67e:	0003      	movs	r3, r0
 800a680:	001a      	movs	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	3324      	adds	r3, #36	; 0x24
 800a68a:	0019      	movs	r1, r3
 800a68c:	2002      	movs	r0, #2
 800a68e:	f7fe fd21 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a692:	0003      	movs	r3, r0
 800a694:	001a      	movs	r2, r3
	pdata->result__spare_0_sd1 =
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	3326      	adds	r3, #38	; 0x26
 800a69e:	0019      	movs	r1, r3
 800a6a0:	2002      	movs	r0, #2
 800a6a2:	f7fe fd17 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a6a6:	0003      	movs	r3, r0
 800a6a8:	001a      	movs	r2, r3
	pdata->result__spare_1_sd1 =
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	3328      	adds	r3, #40	; 0x28
 800a6b2:	0019      	movs	r1, r3
 800a6b4:	2002      	movs	r0, #2
 800a6b6:	f7fe fd0d 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a6ba:	0003      	movs	r3, r0
 800a6bc:	001a      	movs	r2, r3
	pdata->result__spare_2_sd1 =
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	222a      	movs	r2, #42	; 0x2a
 800a6c6:	5c99      	ldrb	r1, [r3, r2]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	222a      	movs	r2, #42	; 0x2a
 800a6cc:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	222b      	movs	r2, #43	; 0x2b
 800a6d2:	5c99      	ldrb	r1, [r3, r2]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	222b      	movs	r2, #43	; 0x2b
 800a6d8:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800a6da:	2317      	movs	r3, #23
 800a6dc:	18fb      	adds	r3, r7, r3
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b25b      	sxtb	r3, r3
}
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	b006      	add	sp, #24
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b086      	sub	sp, #24
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	210e      	movs	r1, #14
 800a6f6:	187b      	adds	r3, r7, r1
 800a6f8:	1c02      	adds	r2, r0, #0
 800a6fa:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a6fc:	2317      	movs	r3, #23
 800a6fe:	18fb      	adds	r3, r7, r3
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a704:	187b      	adds	r3, r7, r1
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d802      	bhi.n	800a712 <VL53L1_i2c_decode_core_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a70c:	230a      	movs	r3, #10
 800a70e:	425b      	negs	r3, r3
 800a710:	e050      	b.n	800a7b4 <VL53L1_i2c_decode_core_results+0xca>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	0019      	movs	r1, r3
 800a716:	2004      	movs	r0, #4
 800a718:	f7fe fdac 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a71c:	0002      	movs	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	3304      	adds	r3, #4
 800a726:	0019      	movs	r1, r3
 800a728:	2004      	movs	r0, #4
 800a72a:	f7fe fda3 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a72e:	0002      	movs	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3308      	adds	r3, #8
 800a738:	0019      	movs	r1, r3
 800a73a:	2004      	movs	r0, #4
 800a73c:	f7fe fdb8 	bl	80092b0 <VL53L1_i2c_decode_int32_t>
 800a740:	0002      	movs	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	330c      	adds	r3, #12
 800a74a:	0019      	movs	r1, r3
 800a74c:	2004      	movs	r0, #4
 800a74e:	f7fe fd91 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a752:	0002      	movs	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	3310      	adds	r3, #16
 800a75c:	0019      	movs	r1, r3
 800a75e:	2004      	movs	r0, #4
 800a760:	f7fe fd88 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a764:	0002      	movs	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	3314      	adds	r3, #20
 800a76e:	0019      	movs	r1, r3
 800a770:	2004      	movs	r0, #4
 800a772:	f7fe fd7f 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a776:	0002      	movs	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	3318      	adds	r3, #24
 800a780:	0019      	movs	r1, r3
 800a782:	2004      	movs	r0, #4
 800a784:	f7fe fd94 	bl	80092b0 <VL53L1_i2c_decode_int32_t>
 800a788:	0002      	movs	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	331c      	adds	r3, #28
 800a792:	0019      	movs	r1, r3
 800a794:	2004      	movs	r0, #4
 800a796:	f7fe fd6d 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800a79a:	0002      	movs	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	5c99      	ldrb	r1, [r3, r2]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800a7ac:	2317      	movs	r3, #23
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	b25b      	sxtb	r3, r3
}
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	b006      	add	sp, #24
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	210e      	movs	r1, #14
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	1c02      	adds	r2, r0, #0
 800a7cc:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a7ce:	2317      	movs	r3, #23
 800a7d0:	18fb      	adds	r3, r7, r3
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800a7d6:	187b      	adds	r3, r7, r1
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	2b37      	cmp	r3, #55	; 0x37
 800a7dc:	d802      	bhi.n	800a7e4 <VL53L1_i2c_decode_debug_results+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800a7de:	230a      	movs	r3, #10
 800a7e0:	425b      	negs	r3, r3
 800a7e2:	e161      	b.n	800aaa8 <VL53L1_i2c_decode_debug_results+0x2ec>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	0019      	movs	r1, r3
 800a7e8:	2002      	movs	r0, #2
 800a7ea:	f7fe fc73 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a7ee:	0003      	movs	r3, r0
 800a7f0:	001a      	movs	r2, r3
	pdata->phasecal_result__reference_phase =
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	227f      	movs	r2, #127	; 0x7f
 800a7fe:	4013      	ands	r3, r2
 800a800:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	3303      	adds	r3, #3
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	223f      	movs	r2, #63	; 0x3f
 800a80e:	4013      	ands	r3, r2
 800a810:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	3304      	adds	r3, #4
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2203      	movs	r2, #3
 800a81e:	4013      	ands	r3, r2
 800a820:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	3305      	adds	r3, #5
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	4013      	ands	r3, r2
 800a830:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3306      	adds	r3, #6
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	223f      	movs	r2, #63	; 0x3f
 800a83e:	4013      	ands	r3, r2
 800a840:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3307      	adds	r3, #7
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	223f      	movs	r2, #63	; 0x3f
 800a84e:	4013      	ands	r3, r2
 800a850:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	3308      	adds	r3, #8
 800a85a:	0019      	movs	r1, r3
 800a85c:	2002      	movs	r0, #2
 800a85e:	f7fe fc39 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a862:	0003      	movs	r3, r0
 800a864:	059b      	lsls	r3, r3, #22
 800a866:	0d9b      	lsrs	r3, r3, #22
 800a868:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	330a      	adds	r3, #10
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2203      	movs	r2, #3
 800a876:	4013      	ands	r3, r2
 800a878:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	330b      	adds	r3, #11
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2203      	movs	r2, #3
 800a886:	4013      	ands	r3, r2
 800a888:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	330c      	adds	r3, #12
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	220f      	movs	r2, #15
 800a896:	4013      	ands	r3, r2
 800a898:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	330d      	adds	r3, #13
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2207      	movs	r2, #7
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	330e      	adds	r3, #14
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	330f      	adds	r3, #15
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	7c1a      	ldrb	r2, [r3, #16]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	7c5a      	ldrb	r2, [r3, #17]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	3312      	adds	r3, #18
 800a8e2:	0019      	movs	r1, r3
 800a8e4:	2002      	movs	r0, #2
 800a8e6:	f7fe fbf5 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a8ea:	0003      	movs	r3, r0
 800a8ec:	051b      	lsls	r3, r3, #20
 800a8ee:	0d1b      	lsrs	r3, r3, #20
 800a8f0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	3316      	adds	r3, #22
 800a8fa:	0019      	movs	r1, r3
 800a8fc:	2002      	movs	r0, #2
 800a8fe:	f7fe fbe9 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a902:	0003      	movs	r3, r0
 800a904:	001a      	movs	r2, r3
	pdata->gph__system__thresh_high =
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	3318      	adds	r3, #24
 800a90e:	0019      	movs	r1, r3
 800a910:	2002      	movs	r0, #2
 800a912:	f7fe fbdf 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800a916:	0003      	movs	r3, r0
 800a918:	001a      	movs	r2, r3
	pdata->gph__system__thresh_low =
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	331a      	adds	r3, #26
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2201      	movs	r2, #1
 800a926:	4013      	ands	r3, r2
 800a928:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	331b      	adds	r3, #27
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2207      	movs	r2, #7
 800a936:	4013      	ands	r3, r2
 800a938:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	7f1a      	ldrb	r2, [r3, #28]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	7f5a      	ldrb	r2, [r3, #29]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	331e      	adds	r3, #30
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	227f      	movs	r2, #127	; 0x7f
 800a956:	4013      	ands	r3, r2
 800a958:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	331f      	adds	r3, #31
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	227f      	movs	r2, #127	; 0x7f
 800a966:	4013      	ands	r3, r2
 800a968:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3320      	adds	r3, #32
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2203      	movs	r2, #3
 800a976:	4013      	ands	r3, r2
 800a978:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	3321      	adds	r3, #33	; 0x21
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	220f      	movs	r2, #15
 800a986:	4013      	ands	r3, r2
 800a988:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2222      	movs	r2, #34	; 0x22
 800a992:	5c99      	ldrb	r1, [r3, r2]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2220      	movs	r2, #32
 800a998:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2223      	movs	r2, #35	; 0x23
 800a99e:	5c99      	ldrb	r1, [r3, r2]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2221      	movs	r2, #33	; 0x21
 800a9a4:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2224      	movs	r2, #36	; 0x24
 800a9aa:	5c99      	ldrb	r1, [r3, r2]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2222      	movs	r2, #34	; 0x22
 800a9b0:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	3325      	adds	r3, #37	; 0x25
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	b2d9      	uxtb	r1, r3
	pdata->gph__gph_id =
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2223      	movs	r2, #35	; 0x23
 800a9c2:	5499      	strb	r1, [r3, r2]
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	3326      	adds	r3, #38	; 0x26
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	b2d9      	uxtb	r1, r3
	pdata->system__interrupt_set =
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2224      	movs	r2, #36	; 0x24
 800a9d4:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	3327      	adds	r3, #39	; 0x27
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	221f      	movs	r2, #31
 800a9de:	4013      	ands	r3, r2
 800a9e0:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__enables =
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2225      	movs	r2, #37	; 0x25
 800a9e6:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	3328      	adds	r3, #40	; 0x28
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	221f      	movs	r2, #31
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__clear =
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2226      	movs	r2, #38	; 0x26
 800a9f8:	5499      	strb	r1, [r3, r2]
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3329      	adds	r3, #41	; 0x29
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	221f      	movs	r2, #31
 800aa02:	4013      	ands	r3, r2
 800aa04:	b2d9      	uxtb	r1, r3
	pdata->interrupt_manager__status =
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2227      	movs	r2, #39	; 0x27
 800aa0a:	5499      	strb	r1, [r3, r2]
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	332a      	adds	r3, #42	; 0x2a
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	4013      	ands	r3, r2
 800aa16:	b2d9      	uxtb	r1, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2228      	movs	r2, #40	; 0x28
 800aa1c:	5499      	strb	r1, [r3, r2]
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	332b      	adds	r3, #43	; 0x2b
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2201      	movs	r2, #1
 800aa26:	4013      	ands	r3, r2
 800aa28:	b2d9      	uxtb	r1, r3
	pdata->power_management__go1_reset_status =
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2229      	movs	r2, #41	; 0x29
 800aa2e:	5499      	strb	r1, [r3, r2]
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	332c      	adds	r3, #44	; 0x2c
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	2203      	movs	r2, #3
 800aa38:	4013      	ands	r3, r2
 800aa3a:	b2d9      	uxtb	r1, r3
	pdata->pad_startup_mode__value_ro =
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	222a      	movs	r2, #42	; 0x2a
 800aa40:	5499      	strb	r1, [r3, r2]
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	332d      	adds	r3, #45	; 0x2d
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	223f      	movs	r2, #63	; 0x3f
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	b2d9      	uxtb	r1, r3
	pdata->pad_startup_mode__value_ctrl =
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	222b      	movs	r2, #43	; 0x2b
 800aa52:	5499      	strb	r1, [r3, r2]
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	332e      	adds	r3, #46	; 0x2e
 800aa58:	0019      	movs	r1, r3
 800aa5a:	2004      	movs	r0, #4
 800aa5c:	f7fe fc0a 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800aa60:	0003      	movs	r3, r0
 800aa62:	039b      	lsls	r3, r3, #14
 800aa64:	0b9a      	lsrs	r2, r3, #14
	pdata->pll_period_us =
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	3332      	adds	r3, #50	; 0x32
 800aa6e:	0019      	movs	r1, r3
 800aa70:	2004      	movs	r0, #4
 800aa72:	f7fe fbff 	bl	8009274 <VL53L1_i2c_decode_uint32_t>
 800aa76:	0002      	movs	r2, r0
	pdata->interrupt_scheduler__data_out =
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	3336      	adds	r3, #54	; 0x36
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	2201      	movs	r2, #1
 800aa84:	4013      	ands	r3, r2
 800aa86:	b2d9      	uxtb	r1, r3
	pdata->nvm_bist__complete =
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2234      	movs	r2, #52	; 0x34
 800aa8c:	5499      	strb	r1, [r3, r2]
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	3337      	adds	r3, #55	; 0x37
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2201      	movs	r2, #1
 800aa96:	4013      	ands	r3, r2
 800aa98:	b2d9      	uxtb	r1, r3
	pdata->nvm_bist__status =
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2235      	movs	r2, #53	; 0x35
 800aa9e:	5499      	strb	r1, [r3, r2]

	LOG_FUNCTION_END(status);

	return status;
 800aaa0:	2317      	movs	r3, #23
 800aaa2:	18fb      	adds	r3, r7, r3
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	b25b      	sxtb	r3, r3
}
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	b006      	add	sp, #24
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
 800aaba:	210e      	movs	r1, #14
 800aabc:	187b      	adds	r3, r7, r1
 800aabe:	1c02      	adds	r2, r0, #0
 800aac0:	801a      	strh	r2, [r3, #0]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aac2:	2317      	movs	r3, #23
 800aac4:	18fb      	adds	r3, r7, r3
 800aac6:	2200      	movs	r2, #0
 800aac8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800aaca:	187b      	adds	r3, r7, r1
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	2b30      	cmp	r3, #48	; 0x30
 800aad0:	d802      	bhi.n	800aad8 <VL53L1_i2c_decode_nvm_copy_data+0x28>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800aad2:	230a      	movs	r3, #10
 800aad4:	425b      	negs	r3, r3
 800aad6:	e114      	b.n	800ad02 <VL53L1_i2c_decode_nvm_copy_data+0x252>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	785a      	ldrb	r2, [r3, #1]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	789a      	ldrb	r2, [r3, #2]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3303      	adds	r3, #3
 800aaf4:	0019      	movs	r1, r3
 800aaf6:	2002      	movs	r0, #2
 800aaf8:	f7fe faec 	bl	80090d4 <VL53L1_i2c_decode_uint16_t>
 800aafc:	0003      	movs	r3, r0
 800aafe:	001a      	movs	r2, r3
	pdata->identification__module_id =
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3305      	adds	r3, #5
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	227f      	movs	r2, #127	; 0x7f
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	3306      	adds	r3, #6
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2207      	movs	r2, #7
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	3307      	adds	r3, #7
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2207      	movs	r2, #7
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	3308      	adds	r3, #8
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	223f      	movs	r2, #63	; 0x3f
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3309      	adds	r3, #9
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	223f      	movs	r2, #63	; 0x3f
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	330a      	adds	r3, #10
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	330b      	adds	r3, #11
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	227f      	movs	r2, #127	; 0x7f
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	330c      	adds	r3, #12
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	330d      	adds	r3, #13
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	223f      	movs	r2, #63	; 0x3f
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	330e      	adds	r3, #14
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	223f      	movs	r2, #63	; 0x3f
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	7bda      	ldrb	r2, [r3, #15]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	7c1a      	ldrb	r2, [r3, #16]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	7c5a      	ldrb	r2, [r3, #17]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	7c9a      	ldrb	r2, [r3, #18]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	7cda      	ldrb	r2, [r3, #19]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	7d1a      	ldrb	r2, [r3, #20]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	7d5a      	ldrb	r2, [r3, #21]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	7d9a      	ldrb	r2, [r3, #22]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	7dda      	ldrb	r2, [r3, #23]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	7e1a      	ldrb	r2, [r3, #24]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	7e5a      	ldrb	r2, [r3, #25]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	7e9a      	ldrb	r2, [r3, #26]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	7eda      	ldrb	r2, [r3, #27]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	7f1a      	ldrb	r2, [r3, #28]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	7f5a      	ldrb	r2, [r3, #29]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	7f9a      	ldrb	r2, [r3, #30]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	7fd9      	ldrb	r1, [r3, #31]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2220      	movs	r2, #32
 800ac32:	5c99      	ldrb	r1, [r3, r2]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2221      	movs	r2, #33	; 0x21
 800ac38:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2221      	movs	r2, #33	; 0x21
 800ac3e:	5c99      	ldrb	r1, [r3, r2]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2222      	movs	r2, #34	; 0x22
 800ac44:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2222      	movs	r2, #34	; 0x22
 800ac4a:	5c99      	ldrb	r1, [r3, r2]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2223      	movs	r2, #35	; 0x23
 800ac50:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2223      	movs	r2, #35	; 0x23
 800ac56:	5c99      	ldrb	r1, [r3, r2]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2224      	movs	r2, #36	; 0x24
 800ac5c:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2224      	movs	r2, #36	; 0x24
 800ac62:	5c99      	ldrb	r1, [r3, r2]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2225      	movs	r2, #37	; 0x25
 800ac68:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2225      	movs	r2, #37	; 0x25
 800ac6e:	5c99      	ldrb	r1, [r3, r2]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2226      	movs	r2, #38	; 0x26
 800ac74:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2226      	movs	r2, #38	; 0x26
 800ac7a:	5c99      	ldrb	r1, [r3, r2]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2227      	movs	r2, #39	; 0x27
 800ac80:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2227      	movs	r2, #39	; 0x27
 800ac86:	5c99      	ldrb	r1, [r3, r2]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2228      	movs	r2, #40	; 0x28
 800ac8c:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2228      	movs	r2, #40	; 0x28
 800ac92:	5c99      	ldrb	r1, [r3, r2]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2229      	movs	r2, #41	; 0x29
 800ac98:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2229      	movs	r2, #41	; 0x29
 800ac9e:	5c99      	ldrb	r1, [r3, r2]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	222a      	movs	r2, #42	; 0x2a
 800aca4:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	222a      	movs	r2, #42	; 0x2a
 800acaa:	5c99      	ldrb	r1, [r3, r2]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	222b      	movs	r2, #43	; 0x2b
 800acb0:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	222b      	movs	r2, #43	; 0x2b
 800acb6:	5c99      	ldrb	r1, [r3, r2]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	222c      	movs	r2, #44	; 0x2c
 800acbc:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	222c      	movs	r2, #44	; 0x2c
 800acc2:	5c99      	ldrb	r1, [r3, r2]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	222d      	movs	r2, #45	; 0x2d
 800acc8:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	222d      	movs	r2, #45	; 0x2d
 800acce:	5c99      	ldrb	r1, [r3, r2]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	222e      	movs	r2, #46	; 0x2e
 800acd4:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	222e      	movs	r2, #46	; 0x2e
 800acda:	5c99      	ldrb	r1, [r3, r2]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	222f      	movs	r2, #47	; 0x2f
 800ace0:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	222f      	movs	r2, #47	; 0x2f
 800ace6:	5c99      	ldrb	r1, [r3, r2]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2230      	movs	r2, #48	; 0x30
 800acec:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2230      	movs	r2, #48	; 0x30
 800acf2:	5c99      	ldrb	r1, [r3, r2]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2231      	movs	r2, #49	; 0x31
 800acf8:	5499      	strb	r1, [r3, r2]
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800acfa:	2317      	movs	r3, #23
 800acfc:	18fb      	adds	r3, r7, r3
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	b25b      	sxtb	r3, r3
}
 800ad02:	0018      	movs	r0, r3
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b006      	add	sp, #24
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800ad0a:	b590      	push	{r4, r7, lr}
 800ad0c:	b091      	sub	sp, #68	; 0x44
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ad14:	213f      	movs	r1, #63	; 0x3f
 800ad16:	187b      	adds	r3, r7, r1
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ad1c:	000a      	movs	r2, r1
 800ad1e:	18bb      	adds	r3, r7, r2
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b25b      	sxtb	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10b      	bne.n	800ad40 <VL53L1_get_nvm_copy_data+0x36>
		status = VL53L1_ReadMulti(
 800ad28:	18bc      	adds	r4, r7, r2
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	18fa      	adds	r2, r7, r3
 800ad2e:	2310      	movs	r3, #16
 800ad30:	33ff      	adds	r3, #255	; 0xff
 800ad32:	0019      	movs	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	2331      	movs	r3, #49	; 0x31
 800ad38:	f000 f91a 	bl	800af70 <VL53L1_ReadMulti>
 800ad3c:	0003      	movs	r3, r0
 800ad3e:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ad40:	223f      	movs	r2, #63	; 0x3f
 800ad42:	18bb      	adds	r3, r7, r2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <VL53L1_get_nvm_copy_data+0x56>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800ad4c:	18bc      	adds	r4, r7, r2
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	230c      	movs	r3, #12
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	0019      	movs	r1, r3
 800ad56:	2031      	movs	r0, #49	; 0x31
 800ad58:	f7ff feaa 	bl	800aab0 <VL53L1_i2c_decode_nvm_copy_data>
 800ad5c:	0003      	movs	r3, r0
 800ad5e:	7023      	strb	r3, [r4, #0]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ad60:	233f      	movs	r3, #63	; 0x3f
 800ad62:	18fb      	adds	r3, r7, r3
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	b25b      	sxtb	r3, r3
}
 800ad68:	0018      	movs	r0, r3
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	b011      	add	sp, #68	; 0x44
 800ad6e:	bd90      	pop	{r4, r7, pc}

0800ad70 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800ad70:	b5b0      	push	{r4, r5, r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800ad7a:	250f      	movs	r5, #15
 800ad7c:	197b      	adds	r3, r7, r5
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800ad82:	197c      	adds	r4, r7, r5
 800ad84:	2396      	movs	r3, #150	; 0x96
 800ad86:	00da      	lsls	r2, r3, #3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	0011      	movs	r1, r2
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 fa21 	bl	800b1d4 <VL53L1_WaitUs>
 800ad92:	0003      	movs	r3, r0
 800ad94:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800ad96:	197b      	adds	r3, r7, r5
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	b25b      	sxtb	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10c      	bne.n	800adba <VL53L1_poll_for_boot_completion+0x4a>
		status =
			VL53L1_WaitValueMaskEx(
 800ada0:	197c      	adds	r4, r7, r5
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	2301      	movs	r3, #1
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	2301      	movs	r3, #1
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	2301      	movs	r3, #1
 800adb0:	22e5      	movs	r2, #229	; 0xe5
 800adb2:	f000 fa23 	bl	800b1fc <VL53L1_WaitValueMaskEx>
 800adb6:	0003      	movs	r3, r0
 800adb8:	7023      	strb	r3, [r4, #0]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800adba:	230f      	movs	r3, #15
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	b25b      	sxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d104      	bne.n	800add0 <VL53L1_poll_for_boot_completion+0x60>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2103      	movs	r1, #3
 800adca:	0018      	movs	r0, r3
 800adcc:	f7fd ff12 	bl	8008bf4 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800add0:	230f      	movs	r3, #15
 800add2:	18fb      	adds	r3, r7, r3
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	b25b      	sxtb	r3, r3
}
 800add8:	0018      	movs	r0, r3
 800adda:	46bd      	mov	sp, r7
 800addc:	b004      	add	sp, #16
 800adde:	bdb0      	pop	{r4, r5, r7, pc}

0800ade0 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800ade0:	b5b0      	push	{r4, r5, r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800adea:	2316      	movs	r3, #22
 800adec:	18fb      	adds	r3, r7, r3
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800adf6:	210f      	movs	r1, #15
 800adf8:	187b      	adds	r3, r7, r1
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
	uint8_t  interrupt_ready          = 0;
 800adfe:	2417      	movs	r4, #23
 800ae00:	193b      	adds	r3, r7, r4
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	23b8      	movs	r3, #184	; 0xb8
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	5cd2      	ldrb	r2, [r2, r3]
	gpio__mux_active_high_hv =
 800ae0e:	0008      	movs	r0, r1
 800ae10:	187b      	adds	r3, r7, r1
 800ae12:	2110      	movs	r1, #16
 800ae14:	400a      	ands	r2, r1
 800ae16:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800ae18:	183b      	adds	r3, r7, r0
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d103      	bne.n	800ae28 <VL53L1_poll_for_range_completion+0x48>
		interrupt_ready = 0x01;
 800ae20:	193b      	adds	r3, r7, r4
 800ae22:	2201      	movs	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e003      	b.n	800ae30 <VL53L1_poll_for_range_completion+0x50>
	else
		interrupt_ready = 0x00;
 800ae28:	2317      	movs	r3, #23
 800ae2a:	18fb      	adds	r3, r7, r3
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	701a      	strb	r2, [r3, #0]

	status =
		VL53L1_WaitValueMaskEx(
 800ae30:	2516      	movs	r5, #22
 800ae32:	197c      	adds	r4, r7, r5
 800ae34:	2317      	movs	r3, #23
 800ae36:	18fb      	adds	r3, r7, r3
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	9201      	str	r2, [sp, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	9200      	str	r2, [sp, #0]
 800ae46:	2231      	movs	r2, #49	; 0x31
 800ae48:	f000 f9d8 	bl	800b1fc <VL53L1_WaitValueMaskEx>
 800ae4c:	0003      	movs	r3, r0
 800ae4e:	7023      	strb	r3, [r4, #0]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800ae50:	197b      	adds	r3, r7, r5
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	b25b      	sxtb	r3, r3
}
 800ae56:	0018      	movs	r0, r3
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	b006      	add	sp, #24
 800ae5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ae5e <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ae5e:	b590      	push	{r4, r7, lr}
 800ae60:	b089      	sub	sp, #36	; 0x24
 800ae62:	af02      	add	r7, sp, #8
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	330a      	adds	r3, #10
 800ae6e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	23e8      	movs	r3, #232	; 0xe8
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	58d0      	ldr	r0, [r2, r3]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	23e6      	movs	r3, #230	; 0xe6
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	5cd3      	ldrb	r3, [r2, r3]
 800ae80:	b299      	uxth	r1, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	b29c      	uxth	r4, r3
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	0023      	movs	r3, r4
 800ae8e:	f7f8 fa57 	bl	8003340 <HAL_I2C_Master_Transmit>
 800ae92:	0003      	movs	r3, r0
 800ae94:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ae96:	693b      	ldr	r3, [r7, #16]
}
 800ae98:	0018      	movs	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b007      	add	sp, #28
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b089      	sub	sp, #36	; 0x24
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	330a      	adds	r3, #10
 800aeb0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	23e8      	movs	r3, #232	; 0xe8
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	58d0      	ldr	r0, [r2, r3]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	23e6      	movs	r3, #230	; 0xe6
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	5cd3      	ldrb	r3, [r2, r3]
 800aec2:	2201      	movs	r2, #1
 800aec4:	4313      	orrs	r3, r2
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	b299      	uxth	r1, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	b29c      	uxth	r4, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	0023      	movs	r3, r4
 800aed6:	f7f8 fb3b 	bl	8003550 <HAL_I2C_Master_Receive>
 800aeda:	0003      	movs	r3, r0
 800aedc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aede:	693b      	ldr	r3, [r7, #16]
}
 800aee0:	0018      	movs	r0, r3
 800aee2:	46bd      	mov	sp, r7
 800aee4:	b007      	add	sp, #28
 800aee6:	bd90      	pop	{r4, r7, pc}

0800aee8 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	607a      	str	r2, [r7, #4]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	230a      	movs	r3, #10
 800aef6:	18fb      	adds	r3, r7, r3
 800aef8:	1c0a      	adds	r2, r1, #0
 800aefa:	801a      	strh	r2, [r3, #0]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800aefc:	2317      	movs	r3, #23
 800aefe:	18fb      	adds	r3, r7, r3
 800af00:	2200      	movs	r2, #0
 800af02:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2bff      	cmp	r3, #255	; 0xff
 800af08:	d902      	bls.n	800af10 <VL53L1_WriteMulti+0x28>
        return VL53L1_ERROR_INVALID_PARAMS;
 800af0a:	2304      	movs	r3, #4
 800af0c:	425b      	negs	r3, r3
 800af0e:	e026      	b.n	800af5e <VL53L1_WriteMulti+0x76>
    }
    _I2CBuffer[0] = index>>8;
 800af10:	210a      	movs	r1, #10
 800af12:	187b      	adds	r3, r7, r1
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	b29b      	uxth	r3, r3
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	4b12      	ldr	r3, [pc, #72]	; (800af68 <VL53L1_WriteMulti+0x80>)
 800af1e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800af20:	187b      	adds	r3, r7, r1
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	b2da      	uxtb	r2, r3
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <VL53L1_WriteMulti+0x80>)
 800af28:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <VL53L1_WriteMulti+0x84>)
 800af30:	0018      	movs	r0, r3
 800af32:	f001 f891 	bl	800c058 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	1c9a      	adds	r2, r3, #2
 800af3a:	490b      	ldr	r1, [pc, #44]	; (800af68 <VL53L1_WriteMulti+0x80>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	0018      	movs	r0, r3
 800af40:	f7ff ff8d 	bl	800ae5e <_I2CWrite>
 800af44:	0003      	movs	r3, r0
 800af46:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <VL53L1_WriteMulti+0x6e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800af4e:	2317      	movs	r3, #23
 800af50:	18fb      	adds	r3, r7, r3
 800af52:	22f3      	movs	r2, #243	; 0xf3
 800af54:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 800af56:	2317      	movs	r3, #23
 800af58:	18fb      	adds	r3, r7, r3
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	b25b      	sxtb	r3, r3
}
 800af5e:	0018      	movs	r0, r3
 800af60:	46bd      	mov	sp, r7
 800af62:	b006      	add	sp, #24
 800af64:	bd80      	pop	{r7, pc}
 800af66:	46c0      	nop			; (mov r8, r8)
 800af68:	20000700 	.word	0x20000700
 800af6c:	20000702 	.word	0x20000702

0800af70 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	200a      	movs	r0, #10
 800af7e:	183b      	adds	r3, r7, r0
 800af80:	1c0a      	adds	r2, r1, #0
 800af82:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800af84:	2417      	movs	r4, #23
 800af86:	193b      	adds	r3, r7, r4
 800af88:	2200      	movs	r2, #0
 800af8a:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800af8c:	0001      	movs	r1, r0
 800af8e:	187b      	adds	r3, r7, r1
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	b29b      	uxth	r3, r3
 800af96:	b2da      	uxtb	r2, r3
 800af98:	4b17      	ldr	r3, [pc, #92]	; (800aff8 <VL53L1_ReadMulti+0x88>)
 800af9a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800af9c:	187b      	adds	r3, r7, r1
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	4b15      	ldr	r3, [pc, #84]	; (800aff8 <VL53L1_ReadMulti+0x88>)
 800afa4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800afa6:	4914      	ldr	r1, [pc, #80]	; (800aff8 <VL53L1_ReadMulti+0x88>)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2202      	movs	r2, #2
 800afac:	0018      	movs	r0, r3
 800afae:	f7ff ff56 	bl	800ae5e <_I2CWrite>
 800afb2:	0003      	movs	r3, r0
 800afb4:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <VL53L1_ReadMulti+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800afbc:	193b      	adds	r3, r7, r4
 800afbe:	22f3      	movs	r2, #243	; 0xf3
 800afc0:	701a      	strb	r2, [r3, #0]
        goto done;
 800afc2:	e010      	b.n	800afe6 <VL53L1_ReadMulti+0x76>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	0018      	movs	r0, r3
 800afcc:	f7ff ff68 	bl	800aea0 <_I2CRead>
 800afd0:	0003      	movs	r3, r0
 800afd2:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <VL53L1_ReadMulti+0x74>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800afda:	2317      	movs	r3, #23
 800afdc:	18fb      	adds	r3, r7, r3
 800afde:	22f3      	movs	r2, #243	; 0xf3
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	e000      	b.n	800afe6 <VL53L1_ReadMulti+0x76>
    }
done:
 800afe4:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 800afe6:	2317      	movs	r3, #23
 800afe8:	18fb      	adds	r3, r7, r3
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	b25b      	sxtb	r3, r3
}
 800afee:	0018      	movs	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	b007      	add	sp, #28
 800aff4:	bd90      	pop	{r4, r7, pc}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	20000700 	.word	0x20000700

0800affc <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	0008      	movs	r0, r1
 800b006:	0011      	movs	r1, r2
 800b008:	1cbb      	adds	r3, r7, #2
 800b00a:	1c02      	adds	r2, r0, #0
 800b00c:	801a      	strh	r2, [r3, #0]
 800b00e:	1c7b      	adds	r3, r7, #1
 800b010:	1c0a      	adds	r2, r1, #0
 800b012:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b014:	240f      	movs	r4, #15
 800b016:	193b      	adds	r3, r7, r4
 800b018:	2200      	movs	r2, #0
 800b01a:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800b01c:	1cbb      	adds	r3, r7, #2
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	0a1b      	lsrs	r3, r3, #8
 800b022:	b29b      	uxth	r3, r3
 800b024:	b2da      	uxtb	r2, r3
 800b026:	4b10      	ldr	r3, [pc, #64]	; (800b068 <VL53L1_WrByte+0x6c>)
 800b028:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800b02a:	1cbb      	adds	r3, r7, #2
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <VL53L1_WrByte+0x6c>)
 800b032:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <VL53L1_WrByte+0x6c>)
 800b036:	1c7a      	adds	r2, r7, #1
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b03c:	490a      	ldr	r1, [pc, #40]	; (800b068 <VL53L1_WrByte+0x6c>)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2203      	movs	r2, #3
 800b042:	0018      	movs	r0, r3
 800b044:	f7ff ff0b 	bl	800ae5e <_I2CWrite>
 800b048:	0003      	movs	r3, r0
 800b04a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <VL53L1_WrByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b052:	193b      	adds	r3, r7, r4
 800b054:	22f3      	movs	r2, #243	; 0xf3
 800b056:	701a      	strb	r2, [r3, #0]
    }
    VL53L1_PutI2cBus();
    return Status;
 800b058:	230f      	movs	r3, #15
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	b25b      	sxtb	r3, r3
}
 800b060:	0018      	movs	r0, r3
 800b062:	46bd      	mov	sp, r7
 800b064:	b005      	add	sp, #20
 800b066:	bd90      	pop	{r4, r7, pc}
 800b068:	20000700 	.word	0x20000700

0800b06c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800b06c:	b590      	push	{r4, r7, lr}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	607a      	str	r2, [r7, #4]
 800b076:	200a      	movs	r0, #10
 800b078:	183b      	adds	r3, r7, r0
 800b07a:	1c0a      	adds	r2, r1, #0
 800b07c:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b07e:	2417      	movs	r4, #23
 800b080:	193b      	adds	r3, r7, r4
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800b086:	0001      	movs	r1, r0
 800b088:	187b      	adds	r3, r7, r1
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	0a1b      	lsrs	r3, r3, #8
 800b08e:	b29b      	uxth	r3, r3
 800b090:	b2da      	uxtb	r2, r3
 800b092:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <VL53L1_RdByte+0x84>)
 800b094:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800b096:	187b      	adds	r3, r7, r1
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <VL53L1_RdByte+0x84>)
 800b09e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b0a0:	4913      	ldr	r1, [pc, #76]	; (800b0f0 <VL53L1_RdByte+0x84>)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f7ff fed9 	bl	800ae5e <_I2CWrite>
 800b0ac:	0003      	movs	r3, r0
 800b0ae:	613b      	str	r3, [r7, #16]
    if( status_int ){
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <VL53L1_RdByte+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b0b6:	193b      	adds	r3, r7, r4
 800b0b8:	22f3      	movs	r2, #243	; 0xf3
 800b0ba:	701a      	strb	r2, [r3, #0]
        goto done;
 800b0bc:	e010      	b.n	800b0e0 <VL53L1_RdByte+0x74>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	f7ff feeb 	bl	800aea0 <_I2CRead>
 800b0ca:	0003      	movs	r3, r0
 800b0cc:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <VL53L1_RdByte+0x72>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b0d4:	2317      	movs	r3, #23
 800b0d6:	18fb      	adds	r3, r7, r3
 800b0d8:	22f3      	movs	r2, #243	; 0xf3
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	e000      	b.n	800b0e0 <VL53L1_RdByte+0x74>
    }
done:
 800b0de:	46c0      	nop			; (mov r8, r8)
    VL53L1_PutI2cBus();
    return Status;
 800b0e0:	2317      	movs	r3, #23
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b25b      	sxtb	r3, r3
}
 800b0e8:	0018      	movs	r0, r3
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	b007      	add	sp, #28
 800b0ee:	bd90      	pop	{r4, r7, pc}
 800b0f0:	20000700 	.word	0x20000700

0800b0f4 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	200a      	movs	r0, #10
 800b100:	183b      	adds	r3, r7, r0
 800b102:	1c0a      	adds	r2, r1, #0
 800b104:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800b106:	2417      	movs	r4, #23
 800b108:	193b      	adds	r3, r7, r4
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800b10e:	0001      	movs	r1, r0
 800b110:	187b      	adds	r3, r7, r1
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	0a1b      	lsrs	r3, r3, #8
 800b116:	b29b      	uxth	r3, r3
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b11c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800b11e:	187b      	adds	r3, r7, r1
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	4b1a      	ldr	r3, [pc, #104]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b126:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b128:	4919      	ldr	r1, [pc, #100]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2202      	movs	r2, #2
 800b12e:	0018      	movs	r0, r3
 800b130:	f7ff fe95 	bl	800ae5e <_I2CWrite>
 800b134:	0003      	movs	r3, r0
 800b136:	613b      	str	r3, [r7, #16]

    if( status_int ){
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <VL53L1_RdWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b13e:	193b      	adds	r3, r7, r4
 800b140:	22f3      	movs	r2, #243	; 0xf3
 800b142:	701a      	strb	r2, [r3, #0]
        goto done;
 800b144:	e01b      	b.n	800b17e <VL53L1_RdWord+0x8a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b146:	4912      	ldr	r1, [pc, #72]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2202      	movs	r2, #2
 800b14c:	0018      	movs	r0, r3
 800b14e:	f7ff fea7 	bl	800aea0 <_I2CRead>
 800b152:	0003      	movs	r3, r0
 800b154:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <VL53L1_RdWord+0x72>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b15c:	2317      	movs	r3, #23
 800b15e:	18fb      	adds	r3, r7, r3
 800b160:	22f3      	movs	r2, #243	; 0xf3
 800b162:	701a      	strb	r2, [r3, #0]
        goto done;
 800b164:	e00b      	b.n	800b17e <VL53L1_RdWord+0x8a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b166:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	b29a      	uxth	r2, r3
 800b170:	4b07      	ldr	r3, [pc, #28]	; (800b190 <VL53L1_RdWord+0x9c>)
 800b172:	785b      	ldrb	r3, [r3, #1]
 800b174:	b29b      	uxth	r3, r3
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800b17e:	2317      	movs	r3, #23
 800b180:	18fb      	adds	r3, r7, r3
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	b25b      	sxtb	r3, r3
}
 800b186:	0018      	movs	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	b007      	add	sp, #28
 800b18c:	bd90      	pop	{r4, r7, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	20000700 	.word	0x20000700

0800b194 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800b19c:	210f      	movs	r1, #15
 800b19e:	187b      	adds	r3, r7, r1
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800b1aa:	187b      	adds	r3, r7, r1
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	b25b      	sxtb	r3, r3
}
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	b004      	add	sp, #16
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f7f7 fd63 	bl	8002c90 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	22fa      	movs	r2, #250	; 0xfa
 800b1e2:	0091      	lsls	r1, r2, #2
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f7f5 f833 	bl	8000250 <__divsi3>
 800b1ea:	0003      	movs	r3, r0
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	f7f7 fd4f 	bl	8002c90 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	4c5c      	ldr	r4, [pc, #368]	; (800b370 <VL53L1_WaitValueMaskEx+0x174>)
 800b200:	44a5      	add	sp, r4
 800b202:	af00      	add	r7, sp, #0
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	0019      	movs	r1, r3
 800b20a:	4b5a      	ldr	r3, [pc, #360]	; (800b374 <VL53L1_WaitValueMaskEx+0x178>)
 800b20c:	208a      	movs	r0, #138	; 0x8a
 800b20e:	0080      	lsls	r0, r0, #2
 800b210:	181b      	adds	r3, r3, r0
 800b212:	19db      	adds	r3, r3, r7
 800b214:	801a      	strh	r2, [r3, #0]
 800b216:	4b58      	ldr	r3, [pc, #352]	; (800b378 <VL53L1_WaitValueMaskEx+0x17c>)
 800b218:	181b      	adds	r3, r3, r0
 800b21a:	19db      	adds	r3, r3, r7
 800b21c:	1c0a      	adds	r2, r1, #0
 800b21e:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b220:	4b56      	ldr	r3, [pc, #344]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b222:	18fb      	adds	r3, r7, r3
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]
	uint32_t     start_time_ms = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	2486      	movs	r4, #134	; 0x86
 800b22c:	00a4      	lsls	r4, r4, #2
 800b22e:	193a      	adds	r2, r7, r4
 800b230:	6013      	str	r3, [r2, #0]
	uint32_t     current_time_ms = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	2285      	movs	r2, #133	; 0x85
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	18ba      	adds	r2, r7, r2
 800b23a:	6013      	str	r3, [r2, #0]
	uint32_t     polling_time_ms = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	2288      	movs	r2, #136	; 0x88
 800b240:	0092      	lsls	r2, r2, #2
 800b242:	18ba      	adds	r2, r7, r2
 800b244:	6013      	str	r3, [r2, #0]
	uint8_t      byte_value      = 0;
 800b246:	4b4e      	ldr	r3, [pc, #312]	; (800b380 <VL53L1_WaitValueMaskEx+0x184>)
 800b248:	18fb      	adds	r3, r7, r3
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
	uint8_t      found           = 0;
 800b24e:	4b4d      	ldr	r3, [pc, #308]	; (800b384 <VL53L1_WaitValueMaskEx+0x188>)
 800b250:	18fb      	adds	r3, r7, r3
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800b256:	4a4c      	ldr	r2, [pc, #304]	; (800b388 <VL53L1_WaitValueMaskEx+0x18c>)
 800b258:	494c      	ldr	r1, [pc, #304]	; (800b38c <VL53L1_WaitValueMaskEx+0x190>)
 800b25a:	2310      	movs	r3, #16
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	0018      	movs	r0, r3
 800b260:	f000 fe5c 	bl	800bf1c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800b264:	193b      	adds	r3, r7, r4
 800b266:	0018      	movs	r0, r3
 800b268:	f7ff ff94 	bl	800b194 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800b26c:	e055      	b.n	800b31a <VL53L1_WaitValueMaskEx+0x11e>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800b26e:	4a43      	ldr	r2, [pc, #268]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b270:	18bb      	adds	r3, r7, r2
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b25b      	sxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10e      	bne.n	800b298 <VL53L1_WaitValueMaskEx+0x9c>
			status = VL53L1_RdByte(
 800b27a:	18bc      	adds	r4, r7, r2
 800b27c:	4b40      	ldr	r3, [pc, #256]	; (800b380 <VL53L1_WaitValueMaskEx+0x184>)
 800b27e:	18fa      	adds	r2, r7, r3
 800b280:	4b3c      	ldr	r3, [pc, #240]	; (800b374 <VL53L1_WaitValueMaskEx+0x178>)
 800b282:	218a      	movs	r1, #138	; 0x8a
 800b284:	0089      	lsls	r1, r1, #2
 800b286:	185b      	adds	r3, r3, r1
 800b288:	19db      	adds	r3, r3, r7
 800b28a:	8819      	ldrh	r1, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	0018      	movs	r0, r3
 800b290:	f7ff feec 	bl	800b06c <VL53L1_RdByte>
 800b294:	0003      	movs	r3, r0
 800b296:	7023      	strb	r3, [r4, #0]
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800b298:	4b39      	ldr	r3, [pc, #228]	; (800b380 <VL53L1_WaitValueMaskEx+0x184>)
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	781a      	ldrb	r2, [r3, #0]
 800b29e:	238e      	movs	r3, #142	; 0x8e
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	18fb      	adds	r3, r7, r3
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	4a33      	ldr	r2, [pc, #204]	; (800b378 <VL53L1_WaitValueMaskEx+0x17c>)
 800b2ac:	218a      	movs	r1, #138	; 0x8a
 800b2ae:	0089      	lsls	r1, r1, #2
 800b2b0:	1852      	adds	r2, r2, r1
 800b2b2:	19d2      	adds	r2, r2, r7
 800b2b4:	7812      	ldrb	r2, [r2, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d103      	bne.n	800b2c2 <VL53L1_WaitValueMaskEx+0xc6>
			found = 1;
 800b2ba:	4b32      	ldr	r3, [pc, #200]	; (800b384 <VL53L1_WaitValueMaskEx+0x188>)
 800b2bc:	18fb      	adds	r3, r7, r3
 800b2be:	2201      	movs	r2, #1
 800b2c0:	701a      	strb	r2, [r3, #0]

		if (status == VL53L1_ERROR_NONE  &&
 800b2c2:	492e      	ldr	r1, [pc, #184]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b2c4:	187b      	adds	r3, r7, r1
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	b25b      	sxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d114      	bne.n	800b2f8 <VL53L1_WaitValueMaskEx+0xfc>
 800b2ce:	4b2d      	ldr	r3, [pc, #180]	; (800b384 <VL53L1_WaitValueMaskEx+0x188>)
 800b2d0:	18fb      	adds	r3, r7, r3
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10f      	bne.n	800b2f8 <VL53L1_WaitValueMaskEx+0xfc>
			found == 0 &&
 800b2d8:	228f      	movs	r2, #143	; 0x8f
 800b2da:	0092      	lsls	r2, r2, #2
 800b2dc:	18bb      	adds	r3, r7, r2
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d009      	beq.n	800b2f8 <VL53L1_WaitValueMaskEx+0xfc>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800b2e4:	18bb      	adds	r3, r7, r2
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	187c      	adds	r4, r7, r1
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	0011      	movs	r1, r2
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f7ff ff62 	bl	800b1b8 <VL53L1_WaitMs>
 800b2f4:	0003      	movs	r3, r0
 800b2f6:	7023      	strb	r3, [r4, #0]
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800b2f8:	2485      	movs	r4, #133	; 0x85
 800b2fa:	00a4      	lsls	r4, r4, #2
 800b2fc:	193b      	adds	r3, r7, r4
 800b2fe:	0018      	movs	r0, r3
 800b300:	f7ff ff48 	bl	800b194 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800b304:	193b      	adds	r3, r7, r4
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	2386      	movs	r3, #134	; 0x86
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2288      	movs	r2, #136	; 0x88
 800b314:	0092      	lsls	r2, r2, #2
 800b316:	18ba      	adds	r2, r7, r2
 800b318:	6013      	str	r3, [r2, #0]
		   (polling_time_ms < timeout_ms) &&
 800b31a:	4b18      	ldr	r3, [pc, #96]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b31c:	18fb      	adds	r3, r7, r3
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	b25b      	sxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <VL53L1_WaitValueMaskEx+0x142>
	while ((status == VL53L1_ERROR_NONE) &&
 800b326:	2388      	movs	r3, #136	; 0x88
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	18fb      	adds	r3, r7, r3
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	429a      	cmp	r2, r3
 800b332:	d204      	bcs.n	800b33e <VL53L1_WaitValueMaskEx+0x142>
		   (polling_time_ms < timeout_ms) &&
 800b334:	4b13      	ldr	r3, [pc, #76]	; (800b384 <VL53L1_WaitValueMaskEx+0x188>)
 800b336:	18fb      	adds	r3, r7, r3
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d097      	beq.n	800b26e <VL53L1_WaitValueMaskEx+0x72>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800b33e:	4b11      	ldr	r3, [pc, #68]	; (800b384 <VL53L1_WaitValueMaskEx+0x188>)
 800b340:	18fb      	adds	r3, r7, r3
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d108      	bne.n	800b35a <VL53L1_WaitValueMaskEx+0x15e>
 800b348:	4a0c      	ldr	r2, [pc, #48]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b34a:	18bb      	adds	r3, r7, r2
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b25b      	sxtb	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	d102      	bne.n	800b35a <VL53L1_WaitValueMaskEx+0x15e>
		status = VL53L1_ERROR_TIME_OUT;
 800b354:	18bb      	adds	r3, r7, r2
 800b356:	22f9      	movs	r2, #249	; 0xf9
 800b358:	701a      	strb	r2, [r3, #0]

	return status;
 800b35a:	4b08      	ldr	r3, [pc, #32]	; (800b37c <VL53L1_WaitValueMaskEx+0x180>)
 800b35c:	18fb      	adds	r3, r7, r3
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	b25b      	sxtb	r3, r3
}
 800b362:	0018      	movs	r0, r3
 800b364:	46bd      	mov	sp, r7
 800b366:	238b      	movs	r3, #139	; 0x8b
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	449d      	add	sp, r3
 800b36c:	bd90      	pop	{r4, r7, pc}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	fffffdd4 	.word	0xfffffdd4
 800b374:	fffffdde 	.word	0xfffffdde
 800b378:	fffffddd 	.word	0xfffffddd
 800b37c:	00000227 	.word	0x00000227
 800b380:	00000213 	.word	0x00000213
 800b384:	0000021f 	.word	0x0000021f
 800b388:	000001ff 	.word	0x000001ff
 800b38c:	0800e2fc 	.word	0x0800e2fc

0800b390 <__cvt>:
 800b390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b392:	001e      	movs	r6, r3
 800b394:	2300      	movs	r3, #0
 800b396:	0014      	movs	r4, r2
 800b398:	b08b      	sub	sp, #44	; 0x2c
 800b39a:	429e      	cmp	r6, r3
 800b39c:	da04      	bge.n	800b3a8 <__cvt+0x18>
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	0609      	lsls	r1, r1, #24
 800b3a2:	1873      	adds	r3, r6, r1
 800b3a4:	001e      	movs	r6, r3
 800b3a6:	232d      	movs	r3, #45	; 0x2d
 800b3a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b3ac:	7013      	strb	r3, [r2, #0]
 800b3ae:	2320      	movs	r3, #32
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	439f      	bics	r7, r3
 800b3b4:	2f46      	cmp	r7, #70	; 0x46
 800b3b6:	d007      	beq.n	800b3c8 <__cvt+0x38>
 800b3b8:	003b      	movs	r3, r7
 800b3ba:	3b45      	subs	r3, #69	; 0x45
 800b3bc:	4259      	negs	r1, r3
 800b3be:	414b      	adcs	r3, r1
 800b3c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b3c2:	3a01      	subs	r2, #1
 800b3c4:	18cb      	adds	r3, r1, r3
 800b3c6:	9310      	str	r3, [sp, #64]	; 0x40
 800b3c8:	ab09      	add	r3, sp, #36	; 0x24
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	ab08      	add	r3, sp, #32
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3d2:	9200      	str	r2, [sp, #0]
 800b3d4:	9302      	str	r3, [sp, #8]
 800b3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3d8:	0022      	movs	r2, r4
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	0033      	movs	r3, r6
 800b3de:	f000 fed3 	bl	800c188 <_dtoa_r>
 800b3e2:	0005      	movs	r5, r0
 800b3e4:	2f47      	cmp	r7, #71	; 0x47
 800b3e6:	d102      	bne.n	800b3ee <__cvt+0x5e>
 800b3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d528      	bpl.n	800b440 <__cvt+0xb0>
 800b3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3f0:	18eb      	adds	r3, r5, r3
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	2f46      	cmp	r7, #70	; 0x46
 800b3f6:	d114      	bne.n	800b422 <__cvt+0x92>
 800b3f8:	782b      	ldrb	r3, [r5, #0]
 800b3fa:	2b30      	cmp	r3, #48	; 0x30
 800b3fc:	d10c      	bne.n	800b418 <__cvt+0x88>
 800b3fe:	2200      	movs	r2, #0
 800b400:	2300      	movs	r3, #0
 800b402:	0020      	movs	r0, r4
 800b404:	0031      	movs	r1, r6
 800b406:	f7f5 f81f 	bl	8000448 <__aeabi_dcmpeq>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d104      	bne.n	800b418 <__cvt+0x88>
 800b40e:	2301      	movs	r3, #1
 800b410:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	18d3      	adds	r3, r2, r3
 800b420:	9307      	str	r3, [sp, #28]
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	0020      	movs	r0, r4
 800b428:	0031      	movs	r1, r6
 800b42a:	f7f5 f80d 	bl	8000448 <__aeabi_dcmpeq>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d001      	beq.n	800b436 <__cvt+0xa6>
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	9309      	str	r3, [sp, #36]	; 0x24
 800b436:	2230      	movs	r2, #48	; 0x30
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	9907      	ldr	r1, [sp, #28]
 800b43c:	428b      	cmp	r3, r1
 800b43e:	d306      	bcc.n	800b44e <__cvt+0xbe>
 800b440:	0028      	movs	r0, r5
 800b442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b444:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b446:	1b5b      	subs	r3, r3, r5
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	b00b      	add	sp, #44	; 0x2c
 800b44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b44e:	1c59      	adds	r1, r3, #1
 800b450:	9109      	str	r1, [sp, #36]	; 0x24
 800b452:	701a      	strb	r2, [r3, #0]
 800b454:	e7f0      	b.n	800b438 <__cvt+0xa8>

0800b456 <__exponent>:
 800b456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b458:	1c83      	adds	r3, r0, #2
 800b45a:	b087      	sub	sp, #28
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	0005      	movs	r5, r0
 800b460:	000c      	movs	r4, r1
 800b462:	232b      	movs	r3, #43	; 0x2b
 800b464:	7002      	strb	r2, [r0, #0]
 800b466:	2900      	cmp	r1, #0
 800b468:	da01      	bge.n	800b46e <__exponent+0x18>
 800b46a:	424c      	negs	r4, r1
 800b46c:	3302      	adds	r3, #2
 800b46e:	706b      	strb	r3, [r5, #1]
 800b470:	2c09      	cmp	r4, #9
 800b472:	dd2f      	ble.n	800b4d4 <__exponent+0x7e>
 800b474:	270a      	movs	r7, #10
 800b476:	ab04      	add	r3, sp, #16
 800b478:	1dde      	adds	r6, r3, #7
 800b47a:	0020      	movs	r0, r4
 800b47c:	0039      	movs	r1, r7
 800b47e:	9601      	str	r6, [sp, #4]
 800b480:	f7f4 ffcc 	bl	800041c <__aeabi_idivmod>
 800b484:	3e01      	subs	r6, #1
 800b486:	3130      	adds	r1, #48	; 0x30
 800b488:	0020      	movs	r0, r4
 800b48a:	7031      	strb	r1, [r6, #0]
 800b48c:	0039      	movs	r1, r7
 800b48e:	9402      	str	r4, [sp, #8]
 800b490:	f7f4 fede 	bl	8000250 <__divsi3>
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	0004      	movs	r4, r0
 800b498:	2b63      	cmp	r3, #99	; 0x63
 800b49a:	dcee      	bgt.n	800b47a <__exponent+0x24>
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	3430      	adds	r4, #48	; 0x30
 800b4a0:	1e9a      	subs	r2, r3, #2
 800b4a2:	0013      	movs	r3, r2
 800b4a4:	9903      	ldr	r1, [sp, #12]
 800b4a6:	7014      	strb	r4, [r2, #0]
 800b4a8:	a804      	add	r0, sp, #16
 800b4aa:	3007      	adds	r0, #7
 800b4ac:	4298      	cmp	r0, r3
 800b4ae:	d80c      	bhi.n	800b4ca <__exponent+0x74>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4282      	cmp	r2, r0
 800b4b4:	d804      	bhi.n	800b4c0 <__exponent+0x6a>
 800b4b6:	aa04      	add	r2, sp, #16
 800b4b8:	3309      	adds	r3, #9
 800b4ba:	189b      	adds	r3, r3, r2
 800b4bc:	9a01      	ldr	r2, [sp, #4]
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	9a03      	ldr	r2, [sp, #12]
 800b4c2:	18d3      	adds	r3, r2, r3
 800b4c4:	1b58      	subs	r0, r3, r5
 800b4c6:	b007      	add	sp, #28
 800b4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ca:	7818      	ldrb	r0, [r3, #0]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	7008      	strb	r0, [r1, #0]
 800b4d0:	3101      	adds	r1, #1
 800b4d2:	e7e9      	b.n	800b4a8 <__exponent+0x52>
 800b4d4:	2330      	movs	r3, #48	; 0x30
 800b4d6:	3430      	adds	r4, #48	; 0x30
 800b4d8:	70ab      	strb	r3, [r5, #2]
 800b4da:	70ec      	strb	r4, [r5, #3]
 800b4dc:	1d2b      	adds	r3, r5, #4
 800b4de:	e7f1      	b.n	800b4c4 <__exponent+0x6e>

0800b4e0 <_printf_float>:
 800b4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e2:	b095      	sub	sp, #84	; 0x54
 800b4e4:	000c      	movs	r4, r1
 800b4e6:	9208      	str	r2, [sp, #32]
 800b4e8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ec:	0007      	movs	r7, r0
 800b4ee:	f000 fd29 	bl	800bf44 <_localeconv_r>
 800b4f2:	6803      	ldr	r3, [r0, #0]
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b4f8:	f7f4 fe04 	bl	8000104 <strlen>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9312      	str	r3, [sp, #72]	; 0x48
 800b500:	7e23      	ldrb	r3, [r4, #24]
 800b502:	2207      	movs	r2, #7
 800b504:	930a      	str	r3, [sp, #40]	; 0x28
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	900d      	str	r0, [sp, #52]	; 0x34
 800b50a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	05c9      	lsls	r1, r1, #23
 800b512:	d547      	bpl.n	800b5a4 <_printf_float+0xc4>
 800b514:	189b      	adds	r3, r3, r2
 800b516:	4393      	bics	r3, r2
 800b518:	001a      	movs	r2, r3
 800b51a:	3208      	adds	r2, #8
 800b51c:	602a      	str	r2, [r5, #0]
 800b51e:	681e      	ldr	r6, [r3, #0]
 800b520:	685d      	ldr	r5, [r3, #4]
 800b522:	0032      	movs	r2, r6
 800b524:	002b      	movs	r3, r5
 800b526:	64a2      	str	r2, [r4, #72]	; 0x48
 800b528:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b52a:	2201      	movs	r2, #1
 800b52c:	006b      	lsls	r3, r5, #1
 800b52e:	085b      	lsrs	r3, r3, #1
 800b530:	930e      	str	r3, [sp, #56]	; 0x38
 800b532:	0030      	movs	r0, r6
 800b534:	4bab      	ldr	r3, [pc, #684]	; (800b7e4 <_printf_float+0x304>)
 800b536:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b538:	4252      	negs	r2, r2
 800b53a:	f7f6 fe6b 	bl	8002214 <__aeabi_dcmpun>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d132      	bne.n	800b5a8 <_printf_float+0xc8>
 800b542:	2201      	movs	r2, #1
 800b544:	0030      	movs	r0, r6
 800b546:	4ba7      	ldr	r3, [pc, #668]	; (800b7e4 <_printf_float+0x304>)
 800b548:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b54a:	4252      	negs	r2, r2
 800b54c:	f7f4 ff8c 	bl	8000468 <__aeabi_dcmple>
 800b550:	2800      	cmp	r0, #0
 800b552:	d129      	bne.n	800b5a8 <_printf_float+0xc8>
 800b554:	2200      	movs	r2, #0
 800b556:	2300      	movs	r3, #0
 800b558:	0030      	movs	r0, r6
 800b55a:	0029      	movs	r1, r5
 800b55c:	f7f4 ff7a 	bl	8000454 <__aeabi_dcmplt>
 800b560:	2800      	cmp	r0, #0
 800b562:	d003      	beq.n	800b56c <_printf_float+0x8c>
 800b564:	0023      	movs	r3, r4
 800b566:	222d      	movs	r2, #45	; 0x2d
 800b568:	3343      	adds	r3, #67	; 0x43
 800b56a:	701a      	strb	r2, [r3, #0]
 800b56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56e:	4d9e      	ldr	r5, [pc, #632]	; (800b7e8 <_printf_float+0x308>)
 800b570:	2b47      	cmp	r3, #71	; 0x47
 800b572:	d900      	bls.n	800b576 <_printf_float+0x96>
 800b574:	4d9d      	ldr	r5, [pc, #628]	; (800b7ec <_printf_float+0x30c>)
 800b576:	2303      	movs	r3, #3
 800b578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	3301      	adds	r3, #1
 800b57e:	439a      	bics	r2, r3
 800b580:	2300      	movs	r3, #0
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	930b      	str	r3, [sp, #44]	; 0x2c
 800b586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b588:	0021      	movs	r1, r4
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	0038      	movs	r0, r7
 800b58e:	9b08      	ldr	r3, [sp, #32]
 800b590:	aa13      	add	r2, sp, #76	; 0x4c
 800b592:	f000 f9fb 	bl	800b98c <_printf_common>
 800b596:	3001      	adds	r0, #1
 800b598:	d000      	beq.n	800b59c <_printf_float+0xbc>
 800b59a:	e0a3      	b.n	800b6e4 <_printf_float+0x204>
 800b59c:	2001      	movs	r0, #1
 800b59e:	4240      	negs	r0, r0
 800b5a0:	b015      	add	sp, #84	; 0x54
 800b5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a4:	3307      	adds	r3, #7
 800b5a6:	e7b6      	b.n	800b516 <_printf_float+0x36>
 800b5a8:	0032      	movs	r2, r6
 800b5aa:	002b      	movs	r3, r5
 800b5ac:	0030      	movs	r0, r6
 800b5ae:	0029      	movs	r1, r5
 800b5b0:	f7f6 fe30 	bl	8002214 <__aeabi_dcmpun>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d00b      	beq.n	800b5d0 <_printf_float+0xf0>
 800b5b8:	2d00      	cmp	r5, #0
 800b5ba:	da03      	bge.n	800b5c4 <_printf_float+0xe4>
 800b5bc:	0023      	movs	r3, r4
 800b5be:	222d      	movs	r2, #45	; 0x2d
 800b5c0:	3343      	adds	r3, #67	; 0x43
 800b5c2:	701a      	strb	r2, [r3, #0]
 800b5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c6:	4d8a      	ldr	r5, [pc, #552]	; (800b7f0 <_printf_float+0x310>)
 800b5c8:	2b47      	cmp	r3, #71	; 0x47
 800b5ca:	d9d4      	bls.n	800b576 <_printf_float+0x96>
 800b5cc:	4d89      	ldr	r5, [pc, #548]	; (800b7f4 <_printf_float+0x314>)
 800b5ce:	e7d2      	b.n	800b576 <_printf_float+0x96>
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5d4:	6863      	ldr	r3, [r4, #4]
 800b5d6:	4391      	bics	r1, r2
 800b5d8:	910e      	str	r1, [sp, #56]	; 0x38
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	d14a      	bne.n	800b674 <_printf_float+0x194>
 800b5de:	3307      	adds	r3, #7
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	2380      	movs	r3, #128	; 0x80
 800b5e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	9206      	str	r2, [sp, #24]
 800b5ee:	aa12      	add	r2, sp, #72	; 0x48
 800b5f0:	9205      	str	r2, [sp, #20]
 800b5f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	9204      	str	r2, [sp, #16]
 800b5f8:	aa11      	add	r2, sp, #68	; 0x44
 800b5fa:	9203      	str	r2, [sp, #12]
 800b5fc:	2223      	movs	r2, #35	; 0x23
 800b5fe:	a908      	add	r1, sp, #32
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	1852      	adds	r2, r2, r1
 800b606:	9202      	str	r2, [sp, #8]
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	0032      	movs	r2, r6
 800b60c:	002b      	movs	r3, r5
 800b60e:	0038      	movs	r0, r7
 800b610:	f7ff febe 	bl	800b390 <__cvt>
 800b614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b616:	0005      	movs	r5, r0
 800b618:	2b47      	cmp	r3, #71	; 0x47
 800b61a:	d109      	bne.n	800b630 <_printf_float+0x150>
 800b61c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b61e:	1cda      	adds	r2, r3, #3
 800b620:	db02      	blt.n	800b628 <_printf_float+0x148>
 800b622:	6862      	ldr	r2, [r4, #4]
 800b624:	4293      	cmp	r3, r2
 800b626:	dd49      	ble.n	800b6bc <_printf_float+0x1dc>
 800b628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62a:	3b02      	subs	r3, #2
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	930a      	str	r3, [sp, #40]	; 0x28
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b634:	2b65      	cmp	r3, #101	; 0x65
 800b636:	d824      	bhi.n	800b682 <_printf_float+0x1a2>
 800b638:	0020      	movs	r0, r4
 800b63a:	001a      	movs	r2, r3
 800b63c:	3901      	subs	r1, #1
 800b63e:	3050      	adds	r0, #80	; 0x50
 800b640:	9111      	str	r1, [sp, #68]	; 0x44
 800b642:	f7ff ff08 	bl	800b456 <__exponent>
 800b646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b648:	900b      	str	r0, [sp, #44]	; 0x2c
 800b64a:	1813      	adds	r3, r2, r0
 800b64c:	6123      	str	r3, [r4, #16]
 800b64e:	2a01      	cmp	r2, #1
 800b650:	dc02      	bgt.n	800b658 <_printf_float+0x178>
 800b652:	6822      	ldr	r2, [r4, #0]
 800b654:	07d2      	lsls	r2, r2, #31
 800b656:	d501      	bpl.n	800b65c <_printf_float+0x17c>
 800b658:	3301      	adds	r3, #1
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	2323      	movs	r3, #35	; 0x23
 800b65e:	aa08      	add	r2, sp, #32
 800b660:	189b      	adds	r3, r3, r2
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <_printf_float+0x18a>
 800b668:	e78d      	b.n	800b586 <_printf_float+0xa6>
 800b66a:	0023      	movs	r3, r4
 800b66c:	222d      	movs	r2, #45	; 0x2d
 800b66e:	3343      	adds	r3, #67	; 0x43
 800b670:	701a      	strb	r2, [r3, #0]
 800b672:	e788      	b.n	800b586 <_printf_float+0xa6>
 800b674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b676:	2a47      	cmp	r2, #71	; 0x47
 800b678:	d1b3      	bne.n	800b5e2 <_printf_float+0x102>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1b1      	bne.n	800b5e2 <_printf_float+0x102>
 800b67e:	3301      	adds	r3, #1
 800b680:	e7ae      	b.n	800b5e0 <_printf_float+0x100>
 800b682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b684:	2b66      	cmp	r3, #102	; 0x66
 800b686:	d11b      	bne.n	800b6c0 <_printf_float+0x1e0>
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	2900      	cmp	r1, #0
 800b68c:	dd09      	ble.n	800b6a2 <_printf_float+0x1c2>
 800b68e:	6121      	str	r1, [r4, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <_printf_float+0x1ba>
 800b694:	6822      	ldr	r2, [r4, #0]
 800b696:	07d2      	lsls	r2, r2, #31
 800b698:	d50b      	bpl.n	800b6b2 <_printf_float+0x1d2>
 800b69a:	3301      	adds	r3, #1
 800b69c:	185b      	adds	r3, r3, r1
 800b69e:	6123      	str	r3, [r4, #16]
 800b6a0:	e007      	b.n	800b6b2 <_printf_float+0x1d2>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d103      	bne.n	800b6ae <_printf_float+0x1ce>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	6821      	ldr	r1, [r4, #0]
 800b6aa:	4211      	tst	r1, r2
 800b6ac:	d000      	beq.n	800b6b0 <_printf_float+0x1d0>
 800b6ae:	1c9a      	adds	r2, r3, #2
 800b6b0:	6122      	str	r2, [r4, #16]
 800b6b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6b4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ba:	e7cf      	b.n	800b65c <_printf_float+0x17c>
 800b6bc:	2367      	movs	r3, #103	; 0x67
 800b6be:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c4:	4299      	cmp	r1, r3
 800b6c6:	db06      	blt.n	800b6d6 <_printf_float+0x1f6>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	6121      	str	r1, [r4, #16]
 800b6cc:	07db      	lsls	r3, r3, #31
 800b6ce:	d5f0      	bpl.n	800b6b2 <_printf_float+0x1d2>
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	6121      	str	r1, [r4, #16]
 800b6d4:	e7ed      	b.n	800b6b2 <_printf_float+0x1d2>
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2900      	cmp	r1, #0
 800b6da:	dc01      	bgt.n	800b6e0 <_printf_float+0x200>
 800b6dc:	1892      	adds	r2, r2, r2
 800b6de:	1a52      	subs	r2, r2, r1
 800b6e0:	189b      	adds	r3, r3, r2
 800b6e2:	e7dc      	b.n	800b69e <_printf_float+0x1be>
 800b6e4:	6822      	ldr	r2, [r4, #0]
 800b6e6:	0553      	lsls	r3, r2, #21
 800b6e8:	d408      	bmi.n	800b6fc <_printf_float+0x21c>
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	002a      	movs	r2, r5
 800b6ee:	0038      	movs	r0, r7
 800b6f0:	9908      	ldr	r1, [sp, #32]
 800b6f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b6f4:	47a8      	blx	r5
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d12a      	bne.n	800b750 <_printf_float+0x270>
 800b6fa:	e74f      	b.n	800b59c <_printf_float+0xbc>
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6fe:	2b65      	cmp	r3, #101	; 0x65
 800b700:	d800      	bhi.n	800b704 <_printf_float+0x224>
 800b702:	e0ec      	b.n	800b8de <_printf_float+0x3fe>
 800b704:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b706:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	f7f4 fe9c 	bl	8000448 <__aeabi_dcmpeq>
 800b710:	2800      	cmp	r0, #0
 800b712:	d034      	beq.n	800b77e <_printf_float+0x29e>
 800b714:	2301      	movs	r3, #1
 800b716:	0038      	movs	r0, r7
 800b718:	4a37      	ldr	r2, [pc, #220]	; (800b7f8 <_printf_float+0x318>)
 800b71a:	9908      	ldr	r1, [sp, #32]
 800b71c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b71e:	47a8      	blx	r5
 800b720:	3001      	adds	r0, #1
 800b722:	d100      	bne.n	800b726 <_printf_float+0x246>
 800b724:	e73a      	b.n	800b59c <_printf_float+0xbc>
 800b726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b72a:	429a      	cmp	r2, r3
 800b72c:	db02      	blt.n	800b734 <_printf_float+0x254>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	07db      	lsls	r3, r3, #31
 800b732:	d50d      	bpl.n	800b750 <_printf_float+0x270>
 800b734:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b736:	0038      	movs	r0, r7
 800b738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b73a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b73c:	9908      	ldr	r1, [sp, #32]
 800b73e:	47a8      	blx	r5
 800b740:	2500      	movs	r5, #0
 800b742:	3001      	adds	r0, #1
 800b744:	d100      	bne.n	800b748 <_printf_float+0x268>
 800b746:	e729      	b.n	800b59c <_printf_float+0xbc>
 800b748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b74a:	3b01      	subs	r3, #1
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	dc0a      	bgt.n	800b766 <_printf_float+0x286>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	079b      	lsls	r3, r3, #30
 800b754:	d500      	bpl.n	800b758 <_printf_float+0x278>
 800b756:	e116      	b.n	800b986 <_printf_float+0x4a6>
 800b758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b75a:	68e0      	ldr	r0, [r4, #12]
 800b75c:	4298      	cmp	r0, r3
 800b75e:	db00      	blt.n	800b762 <_printf_float+0x282>
 800b760:	e71e      	b.n	800b5a0 <_printf_float+0xc0>
 800b762:	0018      	movs	r0, r3
 800b764:	e71c      	b.n	800b5a0 <_printf_float+0xc0>
 800b766:	0022      	movs	r2, r4
 800b768:	2301      	movs	r3, #1
 800b76a:	0038      	movs	r0, r7
 800b76c:	9908      	ldr	r1, [sp, #32]
 800b76e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b770:	321a      	adds	r2, #26
 800b772:	47b0      	blx	r6
 800b774:	3001      	adds	r0, #1
 800b776:	d100      	bne.n	800b77a <_printf_float+0x29a>
 800b778:	e710      	b.n	800b59c <_printf_float+0xbc>
 800b77a:	3501      	adds	r5, #1
 800b77c:	e7e4      	b.n	800b748 <_printf_float+0x268>
 800b77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc3b      	bgt.n	800b7fc <_printf_float+0x31c>
 800b784:	2301      	movs	r3, #1
 800b786:	0038      	movs	r0, r7
 800b788:	4a1b      	ldr	r2, [pc, #108]	; (800b7f8 <_printf_float+0x318>)
 800b78a:	9908      	ldr	r1, [sp, #32]
 800b78c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b78e:	47b0      	blx	r6
 800b790:	3001      	adds	r0, #1
 800b792:	d100      	bne.n	800b796 <_printf_float+0x2b6>
 800b794:	e702      	b.n	800b59c <_printf_float+0xbc>
 800b796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b79a:	4313      	orrs	r3, r2
 800b79c:	d102      	bne.n	800b7a4 <_printf_float+0x2c4>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	07db      	lsls	r3, r3, #31
 800b7a2:	d5d5      	bpl.n	800b750 <_printf_float+0x270>
 800b7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7a6:	0038      	movs	r0, r7
 800b7a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7aa:	9908      	ldr	r1, [sp, #32]
 800b7ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7ae:	47b0      	blx	r6
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d100      	bne.n	800b7b8 <_printf_float+0x2d8>
 800b7b6:	e6f1      	b.n	800b59c <_printf_float+0xbc>
 800b7b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b7ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7be:	425b      	negs	r3, r3
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	dc01      	bgt.n	800b7c8 <_printf_float+0x2e8>
 800b7c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7c6:	e791      	b.n	800b6ec <_printf_float+0x20c>
 800b7c8:	0022      	movs	r2, r4
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	0038      	movs	r0, r7
 800b7ce:	9908      	ldr	r1, [sp, #32]
 800b7d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b7d2:	321a      	adds	r2, #26
 800b7d4:	47b0      	blx	r6
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d100      	bne.n	800b7dc <_printf_float+0x2fc>
 800b7da:	e6df      	b.n	800b59c <_printf_float+0xbc>
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	3301      	adds	r3, #1
 800b7e0:	e7ea      	b.n	800b7b8 <_printf_float+0x2d8>
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	7fefffff 	.word	0x7fefffff
 800b7e8:	0800e630 	.word	0x0800e630
 800b7ec:	0800e634 	.word	0x0800e634
 800b7f0:	0800e638 	.word	0x0800e638
 800b7f4:	0800e63c 	.word	0x0800e63c
 800b7f8:	0800e640 	.word	0x0800e640
 800b7fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b800:	920a      	str	r2, [sp, #40]	; 0x28
 800b802:	429a      	cmp	r2, r3
 800b804:	dd00      	ble.n	800b808 <_printf_float+0x328>
 800b806:	930a      	str	r3, [sp, #40]	; 0x28
 800b808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dc3d      	bgt.n	800b88a <_printf_float+0x3aa>
 800b80e:	2300      	movs	r3, #0
 800b810:	930e      	str	r3, [sp, #56]	; 0x38
 800b812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b814:	43db      	mvns	r3, r3
 800b816:	17db      	asrs	r3, r3, #31
 800b818:	930f      	str	r3, [sp, #60]	; 0x3c
 800b81a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b822:	4013      	ands	r3, r2
 800b824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b82a:	4293      	cmp	r3, r2
 800b82c:	dc36      	bgt.n	800b89c <_printf_float+0x3bc>
 800b82e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b832:	429a      	cmp	r2, r3
 800b834:	db40      	blt.n	800b8b8 <_printf_float+0x3d8>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	07db      	lsls	r3, r3, #31
 800b83a:	d43d      	bmi.n	800b8b8 <_printf_float+0x3d8>
 800b83c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b842:	1af3      	subs	r3, r6, r3
 800b844:	1ab6      	subs	r6, r6, r2
 800b846:	429e      	cmp	r6, r3
 800b848:	dd00      	ble.n	800b84c <_printf_float+0x36c>
 800b84a:	001e      	movs	r6, r3
 800b84c:	2e00      	cmp	r6, #0
 800b84e:	dc3c      	bgt.n	800b8ca <_printf_float+0x3ea>
 800b850:	2300      	movs	r3, #0
 800b852:	930a      	str	r3, [sp, #40]	; 0x28
 800b854:	43f3      	mvns	r3, r6
 800b856:	17db      	asrs	r3, r3, #31
 800b858:	930b      	str	r3, [sp, #44]	; 0x2c
 800b85a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b85c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b862:	4032      	ands	r2, r6
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b868:	4293      	cmp	r3, r2
 800b86a:	dc00      	bgt.n	800b86e <_printf_float+0x38e>
 800b86c:	e770      	b.n	800b750 <_printf_float+0x270>
 800b86e:	0022      	movs	r2, r4
 800b870:	2301      	movs	r3, #1
 800b872:	0038      	movs	r0, r7
 800b874:	9908      	ldr	r1, [sp, #32]
 800b876:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b878:	321a      	adds	r2, #26
 800b87a:	47a8      	blx	r5
 800b87c:	3001      	adds	r0, #1
 800b87e:	d100      	bne.n	800b882 <_printf_float+0x3a2>
 800b880:	e68c      	b.n	800b59c <_printf_float+0xbc>
 800b882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b884:	3301      	adds	r3, #1
 800b886:	930a      	str	r3, [sp, #40]	; 0x28
 800b888:	e7e7      	b.n	800b85a <_printf_float+0x37a>
 800b88a:	002a      	movs	r2, r5
 800b88c:	0038      	movs	r0, r7
 800b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b890:	9908      	ldr	r1, [sp, #32]
 800b892:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b894:	47b0      	blx	r6
 800b896:	3001      	adds	r0, #1
 800b898:	d1b9      	bne.n	800b80e <_printf_float+0x32e>
 800b89a:	e67f      	b.n	800b59c <_printf_float+0xbc>
 800b89c:	0022      	movs	r2, r4
 800b89e:	2301      	movs	r3, #1
 800b8a0:	0038      	movs	r0, r7
 800b8a2:	9908      	ldr	r1, [sp, #32]
 800b8a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8a6:	321a      	adds	r2, #26
 800b8a8:	47b0      	blx	r6
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d100      	bne.n	800b8b0 <_printf_float+0x3d0>
 800b8ae:	e675      	b.n	800b59c <_printf_float+0xbc>
 800b8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	930e      	str	r3, [sp, #56]	; 0x38
 800b8b6:	e7b0      	b.n	800b81a <_printf_float+0x33a>
 800b8b8:	0038      	movs	r0, r7
 800b8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8be:	9908      	ldr	r1, [sp, #32]
 800b8c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8c2:	47b0      	blx	r6
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d1b9      	bne.n	800b83c <_printf_float+0x35c>
 800b8c8:	e668      	b.n	800b59c <_printf_float+0xbc>
 800b8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8cc:	0038      	movs	r0, r7
 800b8ce:	18ea      	adds	r2, r5, r3
 800b8d0:	9908      	ldr	r1, [sp, #32]
 800b8d2:	0033      	movs	r3, r6
 800b8d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b8d6:	47a8      	blx	r5
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d1b9      	bne.n	800b850 <_printf_float+0x370>
 800b8dc:	e65e      	b.n	800b59c <_printf_float+0xbc>
 800b8de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	dc02      	bgt.n	800b8ea <_printf_float+0x40a>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	421a      	tst	r2, r3
 800b8e8:	d03a      	beq.n	800b960 <_printf_float+0x480>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	002a      	movs	r2, r5
 800b8ee:	0038      	movs	r0, r7
 800b8f0:	9908      	ldr	r1, [sp, #32]
 800b8f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8f4:	47b0      	blx	r6
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	d100      	bne.n	800b8fc <_printf_float+0x41c>
 800b8fa:	e64f      	b.n	800b59c <_printf_float+0xbc>
 800b8fc:	0038      	movs	r0, r7
 800b8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b902:	9908      	ldr	r1, [sp, #32]
 800b904:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b906:	47b0      	blx	r6
 800b908:	3001      	adds	r0, #1
 800b90a:	d100      	bne.n	800b90e <_printf_float+0x42e>
 800b90c:	e646      	b.n	800b59c <_printf_float+0xbc>
 800b90e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b910:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b914:	2200      	movs	r2, #0
 800b916:	001e      	movs	r6, r3
 800b918:	2300      	movs	r3, #0
 800b91a:	f7f4 fd95 	bl	8000448 <__aeabi_dcmpeq>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d11c      	bne.n	800b95c <_printf_float+0x47c>
 800b922:	0033      	movs	r3, r6
 800b924:	1c6a      	adds	r2, r5, #1
 800b926:	3b01      	subs	r3, #1
 800b928:	0038      	movs	r0, r7
 800b92a:	9908      	ldr	r1, [sp, #32]
 800b92c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b92e:	47a8      	blx	r5
 800b930:	3001      	adds	r0, #1
 800b932:	d10f      	bne.n	800b954 <_printf_float+0x474>
 800b934:	e632      	b.n	800b59c <_printf_float+0xbc>
 800b936:	0022      	movs	r2, r4
 800b938:	2301      	movs	r3, #1
 800b93a:	0038      	movs	r0, r7
 800b93c:	9908      	ldr	r1, [sp, #32]
 800b93e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b940:	321a      	adds	r2, #26
 800b942:	47b0      	blx	r6
 800b944:	3001      	adds	r0, #1
 800b946:	d100      	bne.n	800b94a <_printf_float+0x46a>
 800b948:	e628      	b.n	800b59c <_printf_float+0xbc>
 800b94a:	3501      	adds	r5, #1
 800b94c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b94e:	3b01      	subs	r3, #1
 800b950:	42ab      	cmp	r3, r5
 800b952:	dcf0      	bgt.n	800b936 <_printf_float+0x456>
 800b954:	0022      	movs	r2, r4
 800b956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b958:	3250      	adds	r2, #80	; 0x50
 800b95a:	e6c8      	b.n	800b6ee <_printf_float+0x20e>
 800b95c:	2500      	movs	r5, #0
 800b95e:	e7f5      	b.n	800b94c <_printf_float+0x46c>
 800b960:	002a      	movs	r2, r5
 800b962:	e7e1      	b.n	800b928 <_printf_float+0x448>
 800b964:	0022      	movs	r2, r4
 800b966:	2301      	movs	r3, #1
 800b968:	0038      	movs	r0, r7
 800b96a:	9908      	ldr	r1, [sp, #32]
 800b96c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b96e:	3219      	adds	r2, #25
 800b970:	47b0      	blx	r6
 800b972:	3001      	adds	r0, #1
 800b974:	d100      	bne.n	800b978 <_printf_float+0x498>
 800b976:	e611      	b.n	800b59c <_printf_float+0xbc>
 800b978:	3501      	adds	r5, #1
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b97e:	1a9b      	subs	r3, r3, r2
 800b980:	42ab      	cmp	r3, r5
 800b982:	dcef      	bgt.n	800b964 <_printf_float+0x484>
 800b984:	e6e8      	b.n	800b758 <_printf_float+0x278>
 800b986:	2500      	movs	r5, #0
 800b988:	e7f7      	b.n	800b97a <_printf_float+0x49a>
 800b98a:	46c0      	nop			; (mov r8, r8)

0800b98c <_printf_common>:
 800b98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b98e:	0016      	movs	r6, r2
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	688a      	ldr	r2, [r1, #8]
 800b994:	690b      	ldr	r3, [r1, #16]
 800b996:	000c      	movs	r4, r1
 800b998:	9000      	str	r0, [sp, #0]
 800b99a:	4293      	cmp	r3, r2
 800b99c:	da00      	bge.n	800b9a0 <_printf_common+0x14>
 800b99e:	0013      	movs	r3, r2
 800b9a0:	0022      	movs	r2, r4
 800b9a2:	6033      	str	r3, [r6, #0]
 800b9a4:	3243      	adds	r2, #67	; 0x43
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	d001      	beq.n	800b9b0 <_printf_common+0x24>
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	6033      	str	r3, [r6, #0]
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	069b      	lsls	r3, r3, #26
 800b9b4:	d502      	bpl.n	800b9bc <_printf_common+0x30>
 800b9b6:	6833      	ldr	r3, [r6, #0]
 800b9b8:	3302      	adds	r3, #2
 800b9ba:	6033      	str	r3, [r6, #0]
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	2306      	movs	r3, #6
 800b9c0:	0015      	movs	r5, r2
 800b9c2:	401d      	ands	r5, r3
 800b9c4:	421a      	tst	r2, r3
 800b9c6:	d027      	beq.n	800ba18 <_printf_common+0x8c>
 800b9c8:	0023      	movs	r3, r4
 800b9ca:	3343      	adds	r3, #67	; 0x43
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	1e5a      	subs	r2, r3, #1
 800b9d0:	4193      	sbcs	r3, r2
 800b9d2:	6822      	ldr	r2, [r4, #0]
 800b9d4:	0692      	lsls	r2, r2, #26
 800b9d6:	d430      	bmi.n	800ba3a <_printf_common+0xae>
 800b9d8:	0022      	movs	r2, r4
 800b9da:	9901      	ldr	r1, [sp, #4]
 800b9dc:	9800      	ldr	r0, [sp, #0]
 800b9de:	9d08      	ldr	r5, [sp, #32]
 800b9e0:	3243      	adds	r2, #67	; 0x43
 800b9e2:	47a8      	blx	r5
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d025      	beq.n	800ba34 <_printf_common+0xa8>
 800b9e8:	2206      	movs	r2, #6
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	2500      	movs	r5, #0
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d105      	bne.n	800ba00 <_printf_common+0x74>
 800b9f4:	6833      	ldr	r3, [r6, #0]
 800b9f6:	68e5      	ldr	r5, [r4, #12]
 800b9f8:	1aed      	subs	r5, r5, r3
 800b9fa:	43eb      	mvns	r3, r5
 800b9fc:	17db      	asrs	r3, r3, #31
 800b9fe:	401d      	ands	r5, r3
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	6922      	ldr	r2, [r4, #16]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	dd01      	ble.n	800ba0c <_printf_common+0x80>
 800ba08:	1a9b      	subs	r3, r3, r2
 800ba0a:	18ed      	adds	r5, r5, r3
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	42b5      	cmp	r5, r6
 800ba10:	d120      	bne.n	800ba54 <_printf_common+0xc8>
 800ba12:	2000      	movs	r0, #0
 800ba14:	e010      	b.n	800ba38 <_printf_common+0xac>
 800ba16:	3501      	adds	r5, #1
 800ba18:	68e3      	ldr	r3, [r4, #12]
 800ba1a:	6832      	ldr	r2, [r6, #0]
 800ba1c:	1a9b      	subs	r3, r3, r2
 800ba1e:	42ab      	cmp	r3, r5
 800ba20:	ddd2      	ble.n	800b9c8 <_printf_common+0x3c>
 800ba22:	0022      	movs	r2, r4
 800ba24:	2301      	movs	r3, #1
 800ba26:	9901      	ldr	r1, [sp, #4]
 800ba28:	9800      	ldr	r0, [sp, #0]
 800ba2a:	9f08      	ldr	r7, [sp, #32]
 800ba2c:	3219      	adds	r2, #25
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	d1f0      	bne.n	800ba16 <_printf_common+0x8a>
 800ba34:	2001      	movs	r0, #1
 800ba36:	4240      	negs	r0, r0
 800ba38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba3a:	2030      	movs	r0, #48	; 0x30
 800ba3c:	18e1      	adds	r1, r4, r3
 800ba3e:	3143      	adds	r1, #67	; 0x43
 800ba40:	7008      	strb	r0, [r1, #0]
 800ba42:	0021      	movs	r1, r4
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	3145      	adds	r1, #69	; 0x45
 800ba48:	7809      	ldrb	r1, [r1, #0]
 800ba4a:	18a2      	adds	r2, r4, r2
 800ba4c:	3243      	adds	r2, #67	; 0x43
 800ba4e:	3302      	adds	r3, #2
 800ba50:	7011      	strb	r1, [r2, #0]
 800ba52:	e7c1      	b.n	800b9d8 <_printf_common+0x4c>
 800ba54:	0022      	movs	r2, r4
 800ba56:	2301      	movs	r3, #1
 800ba58:	9901      	ldr	r1, [sp, #4]
 800ba5a:	9800      	ldr	r0, [sp, #0]
 800ba5c:	9f08      	ldr	r7, [sp, #32]
 800ba5e:	321a      	adds	r2, #26
 800ba60:	47b8      	blx	r7
 800ba62:	3001      	adds	r0, #1
 800ba64:	d0e6      	beq.n	800ba34 <_printf_common+0xa8>
 800ba66:	3601      	adds	r6, #1
 800ba68:	e7d1      	b.n	800ba0e <_printf_common+0x82>
	...

0800ba6c <_printf_i>:
 800ba6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba6e:	b08b      	sub	sp, #44	; 0x2c
 800ba70:	9206      	str	r2, [sp, #24]
 800ba72:	000a      	movs	r2, r1
 800ba74:	3243      	adds	r2, #67	; 0x43
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	9005      	str	r0, [sp, #20]
 800ba7a:	9204      	str	r2, [sp, #16]
 800ba7c:	7e0a      	ldrb	r2, [r1, #24]
 800ba7e:	000c      	movs	r4, r1
 800ba80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba82:	2a78      	cmp	r2, #120	; 0x78
 800ba84:	d809      	bhi.n	800ba9a <_printf_i+0x2e>
 800ba86:	2a62      	cmp	r2, #98	; 0x62
 800ba88:	d80b      	bhi.n	800baa2 <_printf_i+0x36>
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	d100      	bne.n	800ba90 <_printf_i+0x24>
 800ba8e:	e0be      	b.n	800bc0e <_printf_i+0x1a2>
 800ba90:	497c      	ldr	r1, [pc, #496]	; (800bc84 <_printf_i+0x218>)
 800ba92:	9103      	str	r1, [sp, #12]
 800ba94:	2a58      	cmp	r2, #88	; 0x58
 800ba96:	d100      	bne.n	800ba9a <_printf_i+0x2e>
 800ba98:	e093      	b.n	800bbc2 <_printf_i+0x156>
 800ba9a:	0026      	movs	r6, r4
 800ba9c:	3642      	adds	r6, #66	; 0x42
 800ba9e:	7032      	strb	r2, [r6, #0]
 800baa0:	e022      	b.n	800bae8 <_printf_i+0x7c>
 800baa2:	0010      	movs	r0, r2
 800baa4:	3863      	subs	r0, #99	; 0x63
 800baa6:	2815      	cmp	r0, #21
 800baa8:	d8f7      	bhi.n	800ba9a <_printf_i+0x2e>
 800baaa:	f7f4 fb3d 	bl	8000128 <__gnu_thumb1_case_shi>
 800baae:	0016      	.short	0x0016
 800bab0:	fff6001f 	.word	0xfff6001f
 800bab4:	fff6fff6 	.word	0xfff6fff6
 800bab8:	001ffff6 	.word	0x001ffff6
 800babc:	fff6fff6 	.word	0xfff6fff6
 800bac0:	fff6fff6 	.word	0xfff6fff6
 800bac4:	003600a3 	.word	0x003600a3
 800bac8:	fff60083 	.word	0xfff60083
 800bacc:	00b4fff6 	.word	0x00b4fff6
 800bad0:	0036fff6 	.word	0x0036fff6
 800bad4:	fff6fff6 	.word	0xfff6fff6
 800bad8:	0087      	.short	0x0087
 800bada:	0026      	movs	r6, r4
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	3642      	adds	r6, #66	; 0x42
 800bae0:	1d11      	adds	r1, r2, #4
 800bae2:	6019      	str	r1, [r3, #0]
 800bae4:	6813      	ldr	r3, [r2, #0]
 800bae6:	7033      	strb	r3, [r6, #0]
 800bae8:	2301      	movs	r3, #1
 800baea:	e0a2      	b.n	800bc32 <_printf_i+0x1c6>
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	6809      	ldr	r1, [r1, #0]
 800baf0:	1d02      	adds	r2, r0, #4
 800baf2:	060d      	lsls	r5, r1, #24
 800baf4:	d50b      	bpl.n	800bb0e <_printf_i+0xa2>
 800baf6:	6805      	ldr	r5, [r0, #0]
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	da03      	bge.n	800bb06 <_printf_i+0x9a>
 800bafe:	232d      	movs	r3, #45	; 0x2d
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	426d      	negs	r5, r5
 800bb04:	7013      	strb	r3, [r2, #0]
 800bb06:	4b5f      	ldr	r3, [pc, #380]	; (800bc84 <_printf_i+0x218>)
 800bb08:	270a      	movs	r7, #10
 800bb0a:	9303      	str	r3, [sp, #12]
 800bb0c:	e01b      	b.n	800bb46 <_printf_i+0xda>
 800bb0e:	6805      	ldr	r5, [r0, #0]
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	0649      	lsls	r1, r1, #25
 800bb14:	d5f1      	bpl.n	800bafa <_printf_i+0x8e>
 800bb16:	b22d      	sxth	r5, r5
 800bb18:	e7ef      	b.n	800bafa <_printf_i+0x8e>
 800bb1a:	680d      	ldr	r5, [r1, #0]
 800bb1c:	6819      	ldr	r1, [r3, #0]
 800bb1e:	1d08      	adds	r0, r1, #4
 800bb20:	6018      	str	r0, [r3, #0]
 800bb22:	062e      	lsls	r6, r5, #24
 800bb24:	d501      	bpl.n	800bb2a <_printf_i+0xbe>
 800bb26:	680d      	ldr	r5, [r1, #0]
 800bb28:	e003      	b.n	800bb32 <_printf_i+0xc6>
 800bb2a:	066d      	lsls	r5, r5, #25
 800bb2c:	d5fb      	bpl.n	800bb26 <_printf_i+0xba>
 800bb2e:	680d      	ldr	r5, [r1, #0]
 800bb30:	b2ad      	uxth	r5, r5
 800bb32:	4b54      	ldr	r3, [pc, #336]	; (800bc84 <_printf_i+0x218>)
 800bb34:	2708      	movs	r7, #8
 800bb36:	9303      	str	r3, [sp, #12]
 800bb38:	2a6f      	cmp	r2, #111	; 0x6f
 800bb3a:	d000      	beq.n	800bb3e <_printf_i+0xd2>
 800bb3c:	3702      	adds	r7, #2
 800bb3e:	0023      	movs	r3, r4
 800bb40:	2200      	movs	r2, #0
 800bb42:	3343      	adds	r3, #67	; 0x43
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	60a3      	str	r3, [r4, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	db03      	blt.n	800bb56 <_printf_i+0xea>
 800bb4e:	2104      	movs	r1, #4
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	438a      	bics	r2, r1
 800bb54:	6022      	str	r2, [r4, #0]
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	d102      	bne.n	800bb60 <_printf_i+0xf4>
 800bb5a:	9e04      	ldr	r6, [sp, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00c      	beq.n	800bb7a <_printf_i+0x10e>
 800bb60:	9e04      	ldr	r6, [sp, #16]
 800bb62:	0028      	movs	r0, r5
 800bb64:	0039      	movs	r1, r7
 800bb66:	f7f4 fb6f 	bl	8000248 <__aeabi_uidivmod>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3e01      	subs	r6, #1
 800bb6e:	5c5b      	ldrb	r3, [r3, r1]
 800bb70:	7033      	strb	r3, [r6, #0]
 800bb72:	002b      	movs	r3, r5
 800bb74:	0005      	movs	r5, r0
 800bb76:	429f      	cmp	r7, r3
 800bb78:	d9f3      	bls.n	800bb62 <_printf_i+0xf6>
 800bb7a:	2f08      	cmp	r7, #8
 800bb7c:	d109      	bne.n	800bb92 <_printf_i+0x126>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	07db      	lsls	r3, r3, #31
 800bb82:	d506      	bpl.n	800bb92 <_printf_i+0x126>
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	dc02      	bgt.n	800bb92 <_printf_i+0x126>
 800bb8c:	2330      	movs	r3, #48	; 0x30
 800bb8e:	3e01      	subs	r6, #1
 800bb90:	7033      	strb	r3, [r6, #0]
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	1b9b      	subs	r3, r3, r6
 800bb96:	6123      	str	r3, [r4, #16]
 800bb98:	9b07      	ldr	r3, [sp, #28]
 800bb9a:	0021      	movs	r1, r4
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	9805      	ldr	r0, [sp, #20]
 800bba0:	9b06      	ldr	r3, [sp, #24]
 800bba2:	aa09      	add	r2, sp, #36	; 0x24
 800bba4:	f7ff fef2 	bl	800b98c <_printf_common>
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d147      	bne.n	800bc3c <_printf_i+0x1d0>
 800bbac:	2001      	movs	r0, #1
 800bbae:	4240      	negs	r0, r0
 800bbb0:	b00b      	add	sp, #44	; 0x2c
 800bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	6809      	ldr	r1, [r1, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	6022      	str	r2, [r4, #0]
 800bbbc:	2278      	movs	r2, #120	; 0x78
 800bbbe:	4932      	ldr	r1, [pc, #200]	; (800bc88 <_printf_i+0x21c>)
 800bbc0:	9103      	str	r1, [sp, #12]
 800bbc2:	0021      	movs	r1, r4
 800bbc4:	3145      	adds	r1, #69	; 0x45
 800bbc6:	700a      	strb	r2, [r1, #0]
 800bbc8:	6819      	ldr	r1, [r3, #0]
 800bbca:	6822      	ldr	r2, [r4, #0]
 800bbcc:	c920      	ldmia	r1!, {r5}
 800bbce:	0610      	lsls	r0, r2, #24
 800bbd0:	d402      	bmi.n	800bbd8 <_printf_i+0x16c>
 800bbd2:	0650      	lsls	r0, r2, #25
 800bbd4:	d500      	bpl.n	800bbd8 <_printf_i+0x16c>
 800bbd6:	b2ad      	uxth	r5, r5
 800bbd8:	6019      	str	r1, [r3, #0]
 800bbda:	07d3      	lsls	r3, r2, #31
 800bbdc:	d502      	bpl.n	800bbe4 <_printf_i+0x178>
 800bbde:	2320      	movs	r3, #32
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	2710      	movs	r7, #16
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	d1a9      	bne.n	800bb3e <_printf_i+0xd2>
 800bbea:	2220      	movs	r2, #32
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	4393      	bics	r3, r2
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	e7a4      	b.n	800bb3e <_printf_i+0xd2>
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	680d      	ldr	r5, [r1, #0]
 800bbf8:	1d10      	adds	r0, r2, #4
 800bbfa:	6949      	ldr	r1, [r1, #20]
 800bbfc:	6018      	str	r0, [r3, #0]
 800bbfe:	6813      	ldr	r3, [r2, #0]
 800bc00:	062e      	lsls	r6, r5, #24
 800bc02:	d501      	bpl.n	800bc08 <_printf_i+0x19c>
 800bc04:	6019      	str	r1, [r3, #0]
 800bc06:	e002      	b.n	800bc0e <_printf_i+0x1a2>
 800bc08:	066d      	lsls	r5, r5, #25
 800bc0a:	d5fb      	bpl.n	800bc04 <_printf_i+0x198>
 800bc0c:	8019      	strh	r1, [r3, #0]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9e04      	ldr	r6, [sp, #16]
 800bc12:	6123      	str	r3, [r4, #16]
 800bc14:	e7c0      	b.n	800bb98 <_printf_i+0x12c>
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	1d11      	adds	r1, r2, #4
 800bc1a:	6019      	str	r1, [r3, #0]
 800bc1c:	6816      	ldr	r6, [r2, #0]
 800bc1e:	2100      	movs	r1, #0
 800bc20:	0030      	movs	r0, r6
 800bc22:	6862      	ldr	r2, [r4, #4]
 800bc24:	f000 fa0d 	bl	800c042 <memchr>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d001      	beq.n	800bc30 <_printf_i+0x1c4>
 800bc2c:	1b80      	subs	r0, r0, r6
 800bc2e:	6060      	str	r0, [r4, #4]
 800bc30:	6863      	ldr	r3, [r4, #4]
 800bc32:	6123      	str	r3, [r4, #16]
 800bc34:	2300      	movs	r3, #0
 800bc36:	9a04      	ldr	r2, [sp, #16]
 800bc38:	7013      	strb	r3, [r2, #0]
 800bc3a:	e7ad      	b.n	800bb98 <_printf_i+0x12c>
 800bc3c:	0032      	movs	r2, r6
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	9906      	ldr	r1, [sp, #24]
 800bc42:	9805      	ldr	r0, [sp, #20]
 800bc44:	9d07      	ldr	r5, [sp, #28]
 800bc46:	47a8      	blx	r5
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d0af      	beq.n	800bbac <_printf_i+0x140>
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	079b      	lsls	r3, r3, #30
 800bc50:	d415      	bmi.n	800bc7e <_printf_i+0x212>
 800bc52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc54:	68e0      	ldr	r0, [r4, #12]
 800bc56:	4298      	cmp	r0, r3
 800bc58:	daaa      	bge.n	800bbb0 <_printf_i+0x144>
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	e7a8      	b.n	800bbb0 <_printf_i+0x144>
 800bc5e:	0022      	movs	r2, r4
 800bc60:	2301      	movs	r3, #1
 800bc62:	9906      	ldr	r1, [sp, #24]
 800bc64:	9805      	ldr	r0, [sp, #20]
 800bc66:	9e07      	ldr	r6, [sp, #28]
 800bc68:	3219      	adds	r2, #25
 800bc6a:	47b0      	blx	r6
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d09d      	beq.n	800bbac <_printf_i+0x140>
 800bc70:	3501      	adds	r5, #1
 800bc72:	68e3      	ldr	r3, [r4, #12]
 800bc74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	42ab      	cmp	r3, r5
 800bc7a:	dcf0      	bgt.n	800bc5e <_printf_i+0x1f2>
 800bc7c:	e7e9      	b.n	800bc52 <_printf_i+0x1e6>
 800bc7e:	2500      	movs	r5, #0
 800bc80:	e7f7      	b.n	800bc72 <_printf_i+0x206>
 800bc82:	46c0      	nop			; (mov r8, r8)
 800bc84:	0800e642 	.word	0x0800e642
 800bc88:	0800e653 	.word	0x0800e653

0800bc8c <std>:
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	b510      	push	{r4, lr}
 800bc90:	0004      	movs	r4, r0
 800bc92:	6003      	str	r3, [r0, #0]
 800bc94:	6043      	str	r3, [r0, #4]
 800bc96:	6083      	str	r3, [r0, #8]
 800bc98:	8181      	strh	r1, [r0, #12]
 800bc9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bc9c:	81c2      	strh	r2, [r0, #14]
 800bc9e:	6103      	str	r3, [r0, #16]
 800bca0:	6143      	str	r3, [r0, #20]
 800bca2:	6183      	str	r3, [r0, #24]
 800bca4:	0019      	movs	r1, r3
 800bca6:	2208      	movs	r2, #8
 800bca8:	305c      	adds	r0, #92	; 0x5c
 800bcaa:	f000 f92f 	bl	800bf0c <memset>
 800bcae:	4b0b      	ldr	r3, [pc, #44]	; (800bcdc <std+0x50>)
 800bcb0:	6224      	str	r4, [r4, #32]
 800bcb2:	6263      	str	r3, [r4, #36]	; 0x24
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <std+0x54>)
 800bcb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <std+0x58>)
 800bcba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <std+0x5c>)
 800bcbe:	6323      	str	r3, [r4, #48]	; 0x30
 800bcc0:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <std+0x60>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d005      	beq.n	800bcd2 <std+0x46>
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <std+0x64>)
 800bcc8:	429c      	cmp	r4, r3
 800bcca:	d002      	beq.n	800bcd2 <std+0x46>
 800bccc:	4b09      	ldr	r3, [pc, #36]	; (800bcf4 <std+0x68>)
 800bcce:	429c      	cmp	r4, r3
 800bcd0:	d103      	bne.n	800bcda <std+0x4e>
 800bcd2:	0020      	movs	r0, r4
 800bcd4:	3058      	adds	r0, #88	; 0x58
 800bcd6:	f000 f9b1 	bl	800c03c <__retarget_lock_init_recursive>
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	0800be75 	.word	0x0800be75
 800bce0:	0800be9d 	.word	0x0800be9d
 800bce4:	0800bed5 	.word	0x0800bed5
 800bce8:	0800bf01 	.word	0x0800bf01
 800bcec:	20000800 	.word	0x20000800
 800bcf0:	20000868 	.word	0x20000868
 800bcf4:	200008d0 	.word	0x200008d0

0800bcf8 <stdio_exit_handler>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	4a03      	ldr	r2, [pc, #12]	; (800bd08 <stdio_exit_handler+0x10>)
 800bcfc:	4903      	ldr	r1, [pc, #12]	; (800bd0c <stdio_exit_handler+0x14>)
 800bcfe:	4804      	ldr	r0, [pc, #16]	; (800bd10 <stdio_exit_handler+0x18>)
 800bd00:	f000 f86c 	bl	800bddc <_fwalk_sglue>
 800bd04:	bd10      	pop	{r4, pc}
 800bd06:	46c0      	nop			; (mov r8, r8)
 800bd08:	20000040 	.word	0x20000040
 800bd0c:	0800dd49 	.word	0x0800dd49
 800bd10:	2000004c 	.word	0x2000004c

0800bd14 <cleanup_stdio>:
 800bd14:	6841      	ldr	r1, [r0, #4]
 800bd16:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <cleanup_stdio+0x30>)
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	0004      	movs	r4, r0
 800bd1c:	4299      	cmp	r1, r3
 800bd1e:	d001      	beq.n	800bd24 <cleanup_stdio+0x10>
 800bd20:	f002 f812 	bl	800dd48 <_fflush_r>
 800bd24:	68a1      	ldr	r1, [r4, #8]
 800bd26:	4b08      	ldr	r3, [pc, #32]	; (800bd48 <cleanup_stdio+0x34>)
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <cleanup_stdio+0x1e>
 800bd2c:	0020      	movs	r0, r4
 800bd2e:	f002 f80b 	bl	800dd48 <_fflush_r>
 800bd32:	68e1      	ldr	r1, [r4, #12]
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <cleanup_stdio+0x38>)
 800bd36:	4299      	cmp	r1, r3
 800bd38:	d002      	beq.n	800bd40 <cleanup_stdio+0x2c>
 800bd3a:	0020      	movs	r0, r4
 800bd3c:	f002 f804 	bl	800dd48 <_fflush_r>
 800bd40:	bd10      	pop	{r4, pc}
 800bd42:	46c0      	nop			; (mov r8, r8)
 800bd44:	20000800 	.word	0x20000800
 800bd48:	20000868 	.word	0x20000868
 800bd4c:	200008d0 	.word	0x200008d0

0800bd50 <global_stdio_init.part.0>:
 800bd50:	b510      	push	{r4, lr}
 800bd52:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <global_stdio_init.part.0+0x28>)
 800bd54:	4a09      	ldr	r2, [pc, #36]	; (800bd7c <global_stdio_init.part.0+0x2c>)
 800bd56:	2104      	movs	r1, #4
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	4809      	ldr	r0, [pc, #36]	; (800bd80 <global_stdio_init.part.0+0x30>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f7ff ff95 	bl	800bc8c <std>
 800bd62:	2201      	movs	r2, #1
 800bd64:	2109      	movs	r1, #9
 800bd66:	4807      	ldr	r0, [pc, #28]	; (800bd84 <global_stdio_init.part.0+0x34>)
 800bd68:	f7ff ff90 	bl	800bc8c <std>
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	2112      	movs	r1, #18
 800bd70:	4805      	ldr	r0, [pc, #20]	; (800bd88 <global_stdio_init.part.0+0x38>)
 800bd72:	f7ff ff8b 	bl	800bc8c <std>
 800bd76:	bd10      	pop	{r4, pc}
 800bd78:	20000938 	.word	0x20000938
 800bd7c:	0800bcf9 	.word	0x0800bcf9
 800bd80:	20000800 	.word	0x20000800
 800bd84:	20000868 	.word	0x20000868
 800bd88:	200008d0 	.word	0x200008d0

0800bd8c <__sfp_lock_acquire>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	4802      	ldr	r0, [pc, #8]	; (800bd98 <__sfp_lock_acquire+0xc>)
 800bd90:	f000 f955 	bl	800c03e <__retarget_lock_acquire_recursive>
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	46c0      	nop			; (mov r8, r8)
 800bd98:	20000941 	.word	0x20000941

0800bd9c <__sfp_lock_release>:
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	4802      	ldr	r0, [pc, #8]	; (800bda8 <__sfp_lock_release+0xc>)
 800bda0:	f000 f94e 	bl	800c040 <__retarget_lock_release_recursive>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	20000941 	.word	0x20000941

0800bdac <__sinit>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	0004      	movs	r4, r0
 800bdb0:	f7ff ffec 	bl	800bd8c <__sfp_lock_acquire>
 800bdb4:	6a23      	ldr	r3, [r4, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <__sinit+0x14>
 800bdba:	f7ff ffef 	bl	800bd9c <__sfp_lock_release>
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	4b04      	ldr	r3, [pc, #16]	; (800bdd4 <__sinit+0x28>)
 800bdc2:	6223      	str	r3, [r4, #32]
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <__sinit+0x2c>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f6      	bne.n	800bdba <__sinit+0xe>
 800bdcc:	f7ff ffc0 	bl	800bd50 <global_stdio_init.part.0>
 800bdd0:	e7f3      	b.n	800bdba <__sinit+0xe>
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	0800bd15 	.word	0x0800bd15
 800bdd8:	20000938 	.word	0x20000938

0800bddc <_fwalk_sglue>:
 800bddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdde:	0014      	movs	r4, r2
 800bde0:	2600      	movs	r6, #0
 800bde2:	9000      	str	r0, [sp, #0]
 800bde4:	9101      	str	r1, [sp, #4]
 800bde6:	68a5      	ldr	r5, [r4, #8]
 800bde8:	6867      	ldr	r7, [r4, #4]
 800bdea:	3f01      	subs	r7, #1
 800bdec:	d504      	bpl.n	800bdf8 <_fwalk_sglue+0x1c>
 800bdee:	6824      	ldr	r4, [r4, #0]
 800bdf0:	2c00      	cmp	r4, #0
 800bdf2:	d1f8      	bne.n	800bde6 <_fwalk_sglue+0xa>
 800bdf4:	0030      	movs	r0, r6
 800bdf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdf8:	89ab      	ldrh	r3, [r5, #12]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d908      	bls.n	800be10 <_fwalk_sglue+0x34>
 800bdfe:	220e      	movs	r2, #14
 800be00:	5eab      	ldrsh	r3, [r5, r2]
 800be02:	3301      	adds	r3, #1
 800be04:	d004      	beq.n	800be10 <_fwalk_sglue+0x34>
 800be06:	0029      	movs	r1, r5
 800be08:	9800      	ldr	r0, [sp, #0]
 800be0a:	9b01      	ldr	r3, [sp, #4]
 800be0c:	4798      	blx	r3
 800be0e:	4306      	orrs	r6, r0
 800be10:	3568      	adds	r5, #104	; 0x68
 800be12:	e7ea      	b.n	800bdea <_fwalk_sglue+0xe>

0800be14 <iprintf>:
 800be14:	b40f      	push	{r0, r1, r2, r3}
 800be16:	b507      	push	{r0, r1, r2, lr}
 800be18:	4905      	ldr	r1, [pc, #20]	; (800be30 <iprintf+0x1c>)
 800be1a:	ab04      	add	r3, sp, #16
 800be1c:	6808      	ldr	r0, [r1, #0]
 800be1e:	cb04      	ldmia	r3!, {r2}
 800be20:	6881      	ldr	r1, [r0, #8]
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	f001 fdea 	bl	800d9fc <_vfiprintf_r>
 800be28:	b003      	add	sp, #12
 800be2a:	bc08      	pop	{r3}
 800be2c:	b004      	add	sp, #16
 800be2e:	4718      	bx	r3
 800be30:	20000098 	.word	0x20000098

0800be34 <siprintf>:
 800be34:	b40e      	push	{r1, r2, r3}
 800be36:	b500      	push	{lr}
 800be38:	490b      	ldr	r1, [pc, #44]	; (800be68 <siprintf+0x34>)
 800be3a:	b09c      	sub	sp, #112	; 0x70
 800be3c:	ab1d      	add	r3, sp, #116	; 0x74
 800be3e:	9002      	str	r0, [sp, #8]
 800be40:	9006      	str	r0, [sp, #24]
 800be42:	9107      	str	r1, [sp, #28]
 800be44:	9104      	str	r1, [sp, #16]
 800be46:	4809      	ldr	r0, [pc, #36]	; (800be6c <siprintf+0x38>)
 800be48:	4909      	ldr	r1, [pc, #36]	; (800be70 <siprintf+0x3c>)
 800be4a:	cb04      	ldmia	r3!, {r2}
 800be4c:	9105      	str	r1, [sp, #20]
 800be4e:	6800      	ldr	r0, [r0, #0]
 800be50:	a902      	add	r1, sp, #8
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	f001 fcaa 	bl	800d7ac <_svfiprintf_r>
 800be58:	2200      	movs	r2, #0
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	b01c      	add	sp, #112	; 0x70
 800be60:	bc08      	pop	{r3}
 800be62:	b003      	add	sp, #12
 800be64:	4718      	bx	r3
 800be66:	46c0      	nop			; (mov r8, r8)
 800be68:	7fffffff 	.word	0x7fffffff
 800be6c:	20000098 	.word	0x20000098
 800be70:	ffff0208 	.word	0xffff0208

0800be74 <__sread>:
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	000c      	movs	r4, r1
 800be78:	250e      	movs	r5, #14
 800be7a:	5f49      	ldrsh	r1, [r1, r5]
 800be7c:	f000 f88c 	bl	800bf98 <_read_r>
 800be80:	2800      	cmp	r0, #0
 800be82:	db03      	blt.n	800be8c <__sread+0x18>
 800be84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be86:	181b      	adds	r3, r3, r0
 800be88:	6563      	str	r3, [r4, #84]	; 0x54
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	4a02      	ldr	r2, [pc, #8]	; (800be98 <__sread+0x24>)
 800be90:	4013      	ands	r3, r2
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	e7f9      	b.n	800be8a <__sread+0x16>
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	ffffefff 	.word	0xffffefff

0800be9c <__swrite>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	001f      	movs	r7, r3
 800bea0:	898b      	ldrh	r3, [r1, #12]
 800bea2:	0005      	movs	r5, r0
 800bea4:	000c      	movs	r4, r1
 800bea6:	0016      	movs	r6, r2
 800bea8:	05db      	lsls	r3, r3, #23
 800beaa:	d505      	bpl.n	800beb8 <__swrite+0x1c>
 800beac:	230e      	movs	r3, #14
 800beae:	5ec9      	ldrsh	r1, [r1, r3]
 800beb0:	2200      	movs	r2, #0
 800beb2:	2302      	movs	r3, #2
 800beb4:	f000 f85c 	bl	800bf70 <_lseek_r>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	4a05      	ldr	r2, [pc, #20]	; (800bed0 <__swrite+0x34>)
 800bebc:	0028      	movs	r0, r5
 800bebe:	4013      	ands	r3, r2
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	0032      	movs	r2, r6
 800bec4:	230e      	movs	r3, #14
 800bec6:	5ee1      	ldrsh	r1, [r4, r3]
 800bec8:	003b      	movs	r3, r7
 800beca:	f000 f879 	bl	800bfc0 <_write_r>
 800bece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed0:	ffffefff 	.word	0xffffefff

0800bed4 <__sseek>:
 800bed4:	b570      	push	{r4, r5, r6, lr}
 800bed6:	000c      	movs	r4, r1
 800bed8:	250e      	movs	r5, #14
 800beda:	5f49      	ldrsh	r1, [r1, r5]
 800bedc:	f000 f848 	bl	800bf70 <_lseek_r>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	1c42      	adds	r2, r0, #1
 800bee4:	d103      	bne.n	800beee <__sseek+0x1a>
 800bee6:	4a05      	ldr	r2, [pc, #20]	; (800befc <__sseek+0x28>)
 800bee8:	4013      	ands	r3, r2
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	bd70      	pop	{r4, r5, r6, pc}
 800beee:	2280      	movs	r2, #128	; 0x80
 800bef0:	0152      	lsls	r2, r2, #5
 800bef2:	4313      	orrs	r3, r2
 800bef4:	81a3      	strh	r3, [r4, #12]
 800bef6:	6560      	str	r0, [r4, #84]	; 0x54
 800bef8:	e7f8      	b.n	800beec <__sseek+0x18>
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	ffffefff 	.word	0xffffefff

0800bf00 <__sclose>:
 800bf00:	b510      	push	{r4, lr}
 800bf02:	230e      	movs	r3, #14
 800bf04:	5ec9      	ldrsh	r1, [r1, r3]
 800bf06:	f000 f821 	bl	800bf4c <_close_r>
 800bf0a:	bd10      	pop	{r4, pc}

0800bf0c <memset>:
 800bf0c:	0003      	movs	r3, r0
 800bf0e:	1882      	adds	r2, r0, r2
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d100      	bne.n	800bf16 <memset+0xa>
 800bf14:	4770      	bx	lr
 800bf16:	7019      	strb	r1, [r3, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	e7f9      	b.n	800bf10 <memset+0x4>

0800bf1c <strncpy>:
 800bf1c:	0003      	movs	r3, r0
 800bf1e:	b530      	push	{r4, r5, lr}
 800bf20:	001d      	movs	r5, r3
 800bf22:	2a00      	cmp	r2, #0
 800bf24:	d006      	beq.n	800bf34 <strncpy+0x18>
 800bf26:	780c      	ldrb	r4, [r1, #0]
 800bf28:	3a01      	subs	r2, #1
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	702c      	strb	r4, [r5, #0]
 800bf2e:	3101      	adds	r1, #1
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	d1f5      	bne.n	800bf20 <strncpy+0x4>
 800bf34:	2100      	movs	r1, #0
 800bf36:	189a      	adds	r2, r3, r2
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d100      	bne.n	800bf3e <strncpy+0x22>
 800bf3c:	bd30      	pop	{r4, r5, pc}
 800bf3e:	7019      	strb	r1, [r3, #0]
 800bf40:	3301      	adds	r3, #1
 800bf42:	e7f9      	b.n	800bf38 <strncpy+0x1c>

0800bf44 <_localeconv_r>:
 800bf44:	4800      	ldr	r0, [pc, #0]	; (800bf48 <_localeconv_r+0x4>)
 800bf46:	4770      	bx	lr
 800bf48:	2000018c 	.word	0x2000018c

0800bf4c <_close_r>:
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	b570      	push	{r4, r5, r6, lr}
 800bf50:	4d06      	ldr	r5, [pc, #24]	; (800bf6c <_close_r+0x20>)
 800bf52:	0004      	movs	r4, r0
 800bf54:	0008      	movs	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f6 fd82 	bl	8002a60 <_close>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d103      	bne.n	800bf68 <_close_r+0x1c>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d000      	beq.n	800bf68 <_close_r+0x1c>
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	bd70      	pop	{r4, r5, r6, pc}
 800bf6a:	46c0      	nop			; (mov r8, r8)
 800bf6c:	2000093c 	.word	0x2000093c

0800bf70 <_lseek_r>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	0004      	movs	r4, r0
 800bf74:	0008      	movs	r0, r1
 800bf76:	0011      	movs	r1, r2
 800bf78:	001a      	movs	r2, r3
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	4d05      	ldr	r5, [pc, #20]	; (800bf94 <_lseek_r+0x24>)
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	f7f6 fd8f 	bl	8002aa2 <_lseek>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d103      	bne.n	800bf90 <_lseek_r+0x20>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d000      	beq.n	800bf90 <_lseek_r+0x20>
 800bf8e:	6023      	str	r3, [r4, #0]
 800bf90:	bd70      	pop	{r4, r5, r6, pc}
 800bf92:	46c0      	nop			; (mov r8, r8)
 800bf94:	2000093c 	.word	0x2000093c

0800bf98 <_read_r>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	0004      	movs	r4, r0
 800bf9c:	0008      	movs	r0, r1
 800bf9e:	0011      	movs	r1, r2
 800bfa0:	001a      	movs	r2, r3
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	4d05      	ldr	r5, [pc, #20]	; (800bfbc <_read_r+0x24>)
 800bfa6:	602b      	str	r3, [r5, #0]
 800bfa8:	f7f6 fd21 	bl	80029ee <_read>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d103      	bne.n	800bfb8 <_read_r+0x20>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d000      	beq.n	800bfb8 <_read_r+0x20>
 800bfb6:	6023      	str	r3, [r4, #0]
 800bfb8:	bd70      	pop	{r4, r5, r6, pc}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	2000093c 	.word	0x2000093c

0800bfc0 <_write_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	0004      	movs	r4, r0
 800bfc4:	0008      	movs	r0, r1
 800bfc6:	0011      	movs	r1, r2
 800bfc8:	001a      	movs	r2, r3
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4d05      	ldr	r5, [pc, #20]	; (800bfe4 <_write_r+0x24>)
 800bfce:	602b      	str	r3, [r5, #0]
 800bfd0:	f7f6 fd2a 	bl	8002a28 <_write>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d103      	bne.n	800bfe0 <_write_r+0x20>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d000      	beq.n	800bfe0 <_write_r+0x20>
 800bfde:	6023      	str	r3, [r4, #0]
 800bfe0:	bd70      	pop	{r4, r5, r6, pc}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	2000093c 	.word	0x2000093c

0800bfe8 <__errno>:
 800bfe8:	4b01      	ldr	r3, [pc, #4]	; (800bff0 <__errno+0x8>)
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	4770      	bx	lr
 800bfee:	46c0      	nop			; (mov r8, r8)
 800bff0:	20000098 	.word	0x20000098

0800bff4 <__libc_init_array>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	2600      	movs	r6, #0
 800bff8:	4c0c      	ldr	r4, [pc, #48]	; (800c02c <__libc_init_array+0x38>)
 800bffa:	4d0d      	ldr	r5, [pc, #52]	; (800c030 <__libc_init_array+0x3c>)
 800bffc:	1b64      	subs	r4, r4, r5
 800bffe:	10a4      	asrs	r4, r4, #2
 800c000:	42a6      	cmp	r6, r4
 800c002:	d109      	bne.n	800c018 <__libc_init_array+0x24>
 800c004:	2600      	movs	r6, #0
 800c006:	f002 f925 	bl	800e254 <_init>
 800c00a:	4c0a      	ldr	r4, [pc, #40]	; (800c034 <__libc_init_array+0x40>)
 800c00c:	4d0a      	ldr	r5, [pc, #40]	; (800c038 <__libc_init_array+0x44>)
 800c00e:	1b64      	subs	r4, r4, r5
 800c010:	10a4      	asrs	r4, r4, #2
 800c012:	42a6      	cmp	r6, r4
 800c014:	d105      	bne.n	800c022 <__libc_init_array+0x2e>
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	00b3      	lsls	r3, r6, #2
 800c01a:	58eb      	ldr	r3, [r5, r3]
 800c01c:	4798      	blx	r3
 800c01e:	3601      	adds	r6, #1
 800c020:	e7ee      	b.n	800c000 <__libc_init_array+0xc>
 800c022:	00b3      	lsls	r3, r6, #2
 800c024:	58eb      	ldr	r3, [r5, r3]
 800c026:	4798      	blx	r3
 800c028:	3601      	adds	r6, #1
 800c02a:	e7f2      	b.n	800c012 <__libc_init_array+0x1e>
 800c02c:	0800e9ac 	.word	0x0800e9ac
 800c030:	0800e9ac 	.word	0x0800e9ac
 800c034:	0800e9b0 	.word	0x0800e9b0
 800c038:	0800e9ac 	.word	0x0800e9ac

0800c03c <__retarget_lock_init_recursive>:
 800c03c:	4770      	bx	lr

0800c03e <__retarget_lock_acquire_recursive>:
 800c03e:	4770      	bx	lr

0800c040 <__retarget_lock_release_recursive>:
 800c040:	4770      	bx	lr

0800c042 <memchr>:
 800c042:	b2c9      	uxtb	r1, r1
 800c044:	1882      	adds	r2, r0, r2
 800c046:	4290      	cmp	r0, r2
 800c048:	d101      	bne.n	800c04e <memchr+0xc>
 800c04a:	2000      	movs	r0, #0
 800c04c:	4770      	bx	lr
 800c04e:	7803      	ldrb	r3, [r0, #0]
 800c050:	428b      	cmp	r3, r1
 800c052:	d0fb      	beq.n	800c04c <memchr+0xa>
 800c054:	3001      	adds	r0, #1
 800c056:	e7f6      	b.n	800c046 <memchr+0x4>

0800c058 <memcpy>:
 800c058:	2300      	movs	r3, #0
 800c05a:	b510      	push	{r4, lr}
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d100      	bne.n	800c062 <memcpy+0xa>
 800c060:	bd10      	pop	{r4, pc}
 800c062:	5ccc      	ldrb	r4, [r1, r3]
 800c064:	54c4      	strb	r4, [r0, r3]
 800c066:	3301      	adds	r3, #1
 800c068:	e7f8      	b.n	800c05c <memcpy+0x4>

0800c06a <quorem>:
 800c06a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06c:	6902      	ldr	r2, [r0, #16]
 800c06e:	690b      	ldr	r3, [r1, #16]
 800c070:	b089      	sub	sp, #36	; 0x24
 800c072:	0007      	movs	r7, r0
 800c074:	9104      	str	r1, [sp, #16]
 800c076:	2000      	movs	r0, #0
 800c078:	429a      	cmp	r2, r3
 800c07a:	db69      	blt.n	800c150 <quorem+0xe6>
 800c07c:	3b01      	subs	r3, #1
 800c07e:	009c      	lsls	r4, r3, #2
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	000b      	movs	r3, r1
 800c084:	3314      	adds	r3, #20
 800c086:	9306      	str	r3, [sp, #24]
 800c088:	191b      	adds	r3, r3, r4
 800c08a:	9305      	str	r3, [sp, #20]
 800c08c:	003b      	movs	r3, r7
 800c08e:	3314      	adds	r3, #20
 800c090:	9303      	str	r3, [sp, #12]
 800c092:	191c      	adds	r4, r3, r4
 800c094:	9b05      	ldr	r3, [sp, #20]
 800c096:	6826      	ldr	r6, [r4, #0]
 800c098:	681d      	ldr	r5, [r3, #0]
 800c09a:	0030      	movs	r0, r6
 800c09c:	3501      	adds	r5, #1
 800c09e:	0029      	movs	r1, r5
 800c0a0:	f7f4 f84c 	bl	800013c <__udivsi3>
 800c0a4:	9002      	str	r0, [sp, #8]
 800c0a6:	42ae      	cmp	r6, r5
 800c0a8:	d329      	bcc.n	800c0fe <quorem+0x94>
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2600      	movs	r6, #0
 800c0ae:	469c      	mov	ip, r3
 800c0b0:	9d03      	ldr	r5, [sp, #12]
 800c0b2:	9606      	str	r6, [sp, #24]
 800c0b4:	4662      	mov	r2, ip
 800c0b6:	ca08      	ldmia	r2!, {r3}
 800c0b8:	6828      	ldr	r0, [r5, #0]
 800c0ba:	4694      	mov	ip, r2
 800c0bc:	9a02      	ldr	r2, [sp, #8]
 800c0be:	b299      	uxth	r1, r3
 800c0c0:	4351      	muls	r1, r2
 800c0c2:	0c1b      	lsrs	r3, r3, #16
 800c0c4:	4353      	muls	r3, r2
 800c0c6:	1989      	adds	r1, r1, r6
 800c0c8:	0c0a      	lsrs	r2, r1, #16
 800c0ca:	189b      	adds	r3, r3, r2
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	0c1e      	lsrs	r6, r3, #16
 800c0d0:	9b06      	ldr	r3, [sp, #24]
 800c0d2:	b282      	uxth	r2, r0
 800c0d4:	18d2      	adds	r2, r2, r3
 800c0d6:	466b      	mov	r3, sp
 800c0d8:	b289      	uxth	r1, r1
 800c0da:	8b9b      	ldrh	r3, [r3, #28]
 800c0dc:	1a52      	subs	r2, r2, r1
 800c0de:	0c01      	lsrs	r1, r0, #16
 800c0e0:	1ac9      	subs	r1, r1, r3
 800c0e2:	1413      	asrs	r3, r2, #16
 800c0e4:	18cb      	adds	r3, r1, r3
 800c0e6:	1419      	asrs	r1, r3, #16
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	041b      	lsls	r3, r3, #16
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	c508      	stmia	r5!, {r3}
 800c0f0:	9b05      	ldr	r3, [sp, #20]
 800c0f2:	9106      	str	r1, [sp, #24]
 800c0f4:	4563      	cmp	r3, ip
 800c0f6:	d2dd      	bcs.n	800c0b4 <quorem+0x4a>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d030      	beq.n	800c160 <quorem+0xf6>
 800c0fe:	0038      	movs	r0, r7
 800c100:	9904      	ldr	r1, [sp, #16]
 800c102:	f001 f9dd 	bl	800d4c0 <__mcmp>
 800c106:	2800      	cmp	r0, #0
 800c108:	db21      	blt.n	800c14e <quorem+0xe4>
 800c10a:	0038      	movs	r0, r7
 800c10c:	2600      	movs	r6, #0
 800c10e:	9b02      	ldr	r3, [sp, #8]
 800c110:	9c04      	ldr	r4, [sp, #16]
 800c112:	3301      	adds	r3, #1
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	3014      	adds	r0, #20
 800c118:	3414      	adds	r4, #20
 800c11a:	6803      	ldr	r3, [r0, #0]
 800c11c:	cc02      	ldmia	r4!, {r1}
 800c11e:	b29d      	uxth	r5, r3
 800c120:	19ad      	adds	r5, r5, r6
 800c122:	b28a      	uxth	r2, r1
 800c124:	1aaa      	subs	r2, r5, r2
 800c126:	0c09      	lsrs	r1, r1, #16
 800c128:	0c1b      	lsrs	r3, r3, #16
 800c12a:	1a5b      	subs	r3, r3, r1
 800c12c:	1411      	asrs	r1, r2, #16
 800c12e:	185b      	adds	r3, r3, r1
 800c130:	141e      	asrs	r6, r3, #16
 800c132:	b292      	uxth	r2, r2
 800c134:	041b      	lsls	r3, r3, #16
 800c136:	4313      	orrs	r3, r2
 800c138:	c008      	stmia	r0!, {r3}
 800c13a:	9b05      	ldr	r3, [sp, #20]
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	d2ec      	bcs.n	800c11a <quorem+0xb0>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	9a03      	ldr	r2, [sp, #12]
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	18d3      	adds	r3, r2, r3
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	2a00      	cmp	r2, #0
 800c14c:	d015      	beq.n	800c17a <quorem+0x110>
 800c14e:	9802      	ldr	r0, [sp, #8]
 800c150:	b009      	add	sp, #36	; 0x24
 800c152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <quorem+0xfe>
 800c15a:	9b01      	ldr	r3, [sp, #4]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	9b03      	ldr	r3, [sp, #12]
 800c162:	3c04      	subs	r4, #4
 800c164:	42a3      	cmp	r3, r4
 800c166:	d3f5      	bcc.n	800c154 <quorem+0xea>
 800c168:	9b01      	ldr	r3, [sp, #4]
 800c16a:	613b      	str	r3, [r7, #16]
 800c16c:	e7c7      	b.n	800c0fe <quorem+0x94>
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	2a00      	cmp	r2, #0
 800c172:	d106      	bne.n	800c182 <quorem+0x118>
 800c174:	9a01      	ldr	r2, [sp, #4]
 800c176:	3a01      	subs	r2, #1
 800c178:	9201      	str	r2, [sp, #4]
 800c17a:	9a03      	ldr	r2, [sp, #12]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	429a      	cmp	r2, r3
 800c180:	d3f5      	bcc.n	800c16e <quorem+0x104>
 800c182:	9b01      	ldr	r3, [sp, #4]
 800c184:	613b      	str	r3, [r7, #16]
 800c186:	e7e2      	b.n	800c14e <quorem+0xe4>

0800c188 <_dtoa_r>:
 800c188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18a:	0014      	movs	r4, r2
 800c18c:	001d      	movs	r5, r3
 800c18e:	69c6      	ldr	r6, [r0, #28]
 800c190:	b09d      	sub	sp, #116	; 0x74
 800c192:	9408      	str	r4, [sp, #32]
 800c194:	9509      	str	r5, [sp, #36]	; 0x24
 800c196:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800c198:	9004      	str	r0, [sp, #16]
 800c19a:	2e00      	cmp	r6, #0
 800c19c:	d10f      	bne.n	800c1be <_dtoa_r+0x36>
 800c19e:	2010      	movs	r0, #16
 800c1a0:	f000 fe4a 	bl	800ce38 <malloc>
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	1e02      	subs	r2, r0, #0
 800c1a8:	61d8      	str	r0, [r3, #28]
 800c1aa:	d104      	bne.n	800c1b6 <_dtoa_r+0x2e>
 800c1ac:	21ef      	movs	r1, #239	; 0xef
 800c1ae:	4bc6      	ldr	r3, [pc, #792]	; (800c4c8 <_dtoa_r+0x340>)
 800c1b0:	48c6      	ldr	r0, [pc, #792]	; (800c4cc <_dtoa_r+0x344>)
 800c1b2:	f001 fec1 	bl	800df38 <__assert_func>
 800c1b6:	6046      	str	r6, [r0, #4]
 800c1b8:	6086      	str	r6, [r0, #8]
 800c1ba:	6006      	str	r6, [r0, #0]
 800c1bc:	60c6      	str	r6, [r0, #12]
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	6819      	ldr	r1, [r3, #0]
 800c1c4:	2900      	cmp	r1, #0
 800c1c6:	d00b      	beq.n	800c1e0 <_dtoa_r+0x58>
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4093      	lsls	r3, r2
 800c1ce:	604a      	str	r2, [r1, #4]
 800c1d0:	608b      	str	r3, [r1, #8]
 800c1d2:	9804      	ldr	r0, [sp, #16]
 800c1d4:	f000 ff32 	bl	800d03c <_Bfree>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	9b04      	ldr	r3, [sp, #16]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	2d00      	cmp	r5, #0
 800c1e2:	da1e      	bge.n	800c222 <_dtoa_r+0x9a>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	006b      	lsls	r3, r5, #1
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1f0:	4bb7      	ldr	r3, [pc, #732]	; (800c4d0 <_dtoa_r+0x348>)
 800c1f2:	4ab7      	ldr	r2, [pc, #732]	; (800c4d0 <_dtoa_r+0x348>)
 800c1f4:	403b      	ands	r3, r7
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d116      	bne.n	800c228 <_dtoa_r+0xa0>
 800c1fa:	4bb6      	ldr	r3, [pc, #728]	; (800c4d4 <_dtoa_r+0x34c>)
 800c1fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	033b      	lsls	r3, r7, #12
 800c202:	0b1b      	lsrs	r3, r3, #12
 800c204:	4323      	orrs	r3, r4
 800c206:	d101      	bne.n	800c20c <_dtoa_r+0x84>
 800c208:	f000 fdb5 	bl	800cd76 <_dtoa_r+0xbee>
 800c20c:	4bb2      	ldr	r3, [pc, #712]	; (800c4d8 <_dtoa_r+0x350>)
 800c20e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c210:	9306      	str	r3, [sp, #24]
 800c212:	2a00      	cmp	r2, #0
 800c214:	d002      	beq.n	800c21c <_dtoa_r+0x94>
 800c216:	4bb1      	ldr	r3, [pc, #708]	; (800c4dc <_dtoa_r+0x354>)
 800c218:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	9806      	ldr	r0, [sp, #24]
 800c21e:	b01d      	add	sp, #116	; 0x74
 800c220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c222:	2300      	movs	r3, #0
 800c224:	603b      	str	r3, [r7, #0]
 800c226:	e7e2      	b.n	800c1ee <_dtoa_r+0x66>
 800c228:	9a08      	ldr	r2, [sp, #32]
 800c22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c22c:	9210      	str	r2, [sp, #64]	; 0x40
 800c22e:	9311      	str	r3, [sp, #68]	; 0x44
 800c230:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c232:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	f7f4 f906 	bl	8000448 <__aeabi_dcmpeq>
 800c23c:	1e06      	subs	r6, r0, #0
 800c23e:	d009      	beq.n	800c254 <_dtoa_r+0xcc>
 800c240:	2301      	movs	r3, #1
 800c242:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	4ba6      	ldr	r3, [pc, #664]	; (800c4e0 <_dtoa_r+0x358>)
 800c248:	9306      	str	r3, [sp, #24]
 800c24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d0e5      	beq.n	800c21c <_dtoa_r+0x94>
 800c250:	4ba4      	ldr	r3, [pc, #656]	; (800c4e4 <_dtoa_r+0x35c>)
 800c252:	e7e1      	b.n	800c218 <_dtoa_r+0x90>
 800c254:	ab1a      	add	r3, sp, #104	; 0x68
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	ab1b      	add	r3, sp, #108	; 0x6c
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	9804      	ldr	r0, [sp, #16]
 800c25e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c262:	f001 f9e1 	bl	800d628 <__d2b>
 800c266:	007a      	lsls	r2, r7, #1
 800c268:	9005      	str	r0, [sp, #20]
 800c26a:	0d52      	lsrs	r2, r2, #21
 800c26c:	d100      	bne.n	800c270 <_dtoa_r+0xe8>
 800c26e:	e07b      	b.n	800c368 <_dtoa_r+0x1e0>
 800c270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c272:	9617      	str	r6, [sp, #92]	; 0x5c
 800c274:	0319      	lsls	r1, r3, #12
 800c276:	4b9c      	ldr	r3, [pc, #624]	; (800c4e8 <_dtoa_r+0x360>)
 800c278:	0b09      	lsrs	r1, r1, #12
 800c27a:	430b      	orrs	r3, r1
 800c27c:	499b      	ldr	r1, [pc, #620]	; (800c4ec <_dtoa_r+0x364>)
 800c27e:	1857      	adds	r7, r2, r1
 800c280:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c282:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c284:	0019      	movs	r1, r3
 800c286:	2200      	movs	r2, #0
 800c288:	4b99      	ldr	r3, [pc, #612]	; (800c4f0 <_dtoa_r+0x368>)
 800c28a:	f7f5 fc41 	bl	8001b10 <__aeabi_dsub>
 800c28e:	4a99      	ldr	r2, [pc, #612]	; (800c4f4 <_dtoa_r+0x36c>)
 800c290:	4b99      	ldr	r3, [pc, #612]	; (800c4f8 <_dtoa_r+0x370>)
 800c292:	f7f5 f97b 	bl	800158c <__aeabi_dmul>
 800c296:	4a99      	ldr	r2, [pc, #612]	; (800c4fc <_dtoa_r+0x374>)
 800c298:	4b99      	ldr	r3, [pc, #612]	; (800c500 <_dtoa_r+0x378>)
 800c29a:	f7f4 fa1d 	bl	80006d8 <__aeabi_dadd>
 800c29e:	0004      	movs	r4, r0
 800c2a0:	0038      	movs	r0, r7
 800c2a2:	000d      	movs	r5, r1
 800c2a4:	f7f6 f80a 	bl	80022bc <__aeabi_i2d>
 800c2a8:	4a96      	ldr	r2, [pc, #600]	; (800c504 <_dtoa_r+0x37c>)
 800c2aa:	4b97      	ldr	r3, [pc, #604]	; (800c508 <_dtoa_r+0x380>)
 800c2ac:	f7f5 f96e 	bl	800158c <__aeabi_dmul>
 800c2b0:	0002      	movs	r2, r0
 800c2b2:	000b      	movs	r3, r1
 800c2b4:	0020      	movs	r0, r4
 800c2b6:	0029      	movs	r1, r5
 800c2b8:	f7f4 fa0e 	bl	80006d8 <__aeabi_dadd>
 800c2bc:	0004      	movs	r4, r0
 800c2be:	000d      	movs	r5, r1
 800c2c0:	f7f5 ffc6 	bl	8002250 <__aeabi_d2iz>
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	9003      	str	r0, [sp, #12]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	0020      	movs	r0, r4
 800c2cc:	0029      	movs	r1, r5
 800c2ce:	f7f4 f8c1 	bl	8000454 <__aeabi_dcmplt>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d00b      	beq.n	800c2ee <_dtoa_r+0x166>
 800c2d6:	9803      	ldr	r0, [sp, #12]
 800c2d8:	f7f5 fff0 	bl	80022bc <__aeabi_i2d>
 800c2dc:	002b      	movs	r3, r5
 800c2de:	0022      	movs	r2, r4
 800c2e0:	f7f4 f8b2 	bl	8000448 <__aeabi_dcmpeq>
 800c2e4:	4243      	negs	r3, r0
 800c2e6:	4158      	adcs	r0, r3
 800c2e8:	9b03      	ldr	r3, [sp, #12]
 800c2ea:	1a1b      	subs	r3, r3, r0
 800c2ec:	9303      	str	r3, [sp, #12]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	9316      	str	r3, [sp, #88]	; 0x58
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	2b16      	cmp	r3, #22
 800c2f6:	d810      	bhi.n	800c31a <_dtoa_r+0x192>
 800c2f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2fc:	9a03      	ldr	r2, [sp, #12]
 800c2fe:	4b83      	ldr	r3, [pc, #524]	; (800c50c <_dtoa_r+0x384>)
 800c300:	00d2      	lsls	r2, r2, #3
 800c302:	189b      	adds	r3, r3, r2
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f7f4 f8a4 	bl	8000454 <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d047      	beq.n	800c3a0 <_dtoa_r+0x218>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	3b01      	subs	r3, #1
 800c314:	9303      	str	r3, [sp, #12]
 800c316:	2300      	movs	r3, #0
 800c318:	9316      	str	r3, [sp, #88]	; 0x58
 800c31a:	2200      	movs	r2, #0
 800c31c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c31e:	920a      	str	r2, [sp, #40]	; 0x28
 800c320:	1bdb      	subs	r3, r3, r7
 800c322:	1e5a      	subs	r2, r3, #1
 800c324:	d53e      	bpl.n	800c3a4 <_dtoa_r+0x21c>
 800c326:	2201      	movs	r2, #1
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	930a      	str	r3, [sp, #40]	; 0x28
 800c32c:	2300      	movs	r3, #0
 800c32e:	930c      	str	r3, [sp, #48]	; 0x30
 800c330:	9b03      	ldr	r3, [sp, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	db38      	blt.n	800c3a8 <_dtoa_r+0x220>
 800c336:	9a03      	ldr	r2, [sp, #12]
 800c338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33a:	4694      	mov	ip, r2
 800c33c:	4463      	add	r3, ip
 800c33e:	930c      	str	r3, [sp, #48]	; 0x30
 800c340:	2300      	movs	r3, #0
 800c342:	9213      	str	r2, [sp, #76]	; 0x4c
 800c344:	930d      	str	r3, [sp, #52]	; 0x34
 800c346:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c348:	2401      	movs	r4, #1
 800c34a:	2b09      	cmp	r3, #9
 800c34c:	d867      	bhi.n	800c41e <_dtoa_r+0x296>
 800c34e:	2b05      	cmp	r3, #5
 800c350:	dd02      	ble.n	800c358 <_dtoa_r+0x1d0>
 800c352:	2400      	movs	r4, #0
 800c354:	3b04      	subs	r3, #4
 800c356:	9322      	str	r3, [sp, #136]	; 0x88
 800c358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c35a:	1e98      	subs	r0, r3, #2
 800c35c:	2803      	cmp	r0, #3
 800c35e:	d867      	bhi.n	800c430 <_dtoa_r+0x2a8>
 800c360:	f7f3 fed8 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c364:	5b383a2b 	.word	0x5b383a2b
 800c368:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c36a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c36c:	18f6      	adds	r6, r6, r3
 800c36e:	4b68      	ldr	r3, [pc, #416]	; (800c510 <_dtoa_r+0x388>)
 800c370:	18f2      	adds	r2, r6, r3
 800c372:	2a20      	cmp	r2, #32
 800c374:	dd0f      	ble.n	800c396 <_dtoa_r+0x20e>
 800c376:	2340      	movs	r3, #64	; 0x40
 800c378:	1a9b      	subs	r3, r3, r2
 800c37a:	409f      	lsls	r7, r3
 800c37c:	4b65      	ldr	r3, [pc, #404]	; (800c514 <_dtoa_r+0x38c>)
 800c37e:	0038      	movs	r0, r7
 800c380:	18f3      	adds	r3, r6, r3
 800c382:	40dc      	lsrs	r4, r3
 800c384:	4320      	orrs	r0, r4
 800c386:	f7f5 ffc9 	bl	800231c <__aeabi_ui2d>
 800c38a:	2201      	movs	r2, #1
 800c38c:	4b62      	ldr	r3, [pc, #392]	; (800c518 <_dtoa_r+0x390>)
 800c38e:	1e77      	subs	r7, r6, #1
 800c390:	18cb      	adds	r3, r1, r3
 800c392:	9217      	str	r2, [sp, #92]	; 0x5c
 800c394:	e776      	b.n	800c284 <_dtoa_r+0xfc>
 800c396:	2320      	movs	r3, #32
 800c398:	0020      	movs	r0, r4
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	4098      	lsls	r0, r3
 800c39e:	e7f2      	b.n	800c386 <_dtoa_r+0x1fe>
 800c3a0:	9016      	str	r0, [sp, #88]	; 0x58
 800c3a2:	e7ba      	b.n	800c31a <_dtoa_r+0x192>
 800c3a4:	920c      	str	r2, [sp, #48]	; 0x30
 800c3a6:	e7c3      	b.n	800c330 <_dtoa_r+0x1a8>
 800c3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3aa:	9a03      	ldr	r2, [sp, #12]
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b0:	4253      	negs	r3, r2
 800c3b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3b8:	e7c5      	b.n	800c346 <_dtoa_r+0x1be>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	dc13      	bgt.n	800c3f0 <_dtoa_r+0x268>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	001a      	movs	r2, r3
 800c3cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3ce:	9307      	str	r3, [sp, #28]
 800c3d0:	9223      	str	r2, [sp, #140]	; 0x8c
 800c3d2:	e00d      	b.n	800c3f0 <_dtoa_r+0x268>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e7f1      	b.n	800c3bc <_dtoa_r+0x234>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c3dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3de:	4694      	mov	ip, r2
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	4463      	add	r3, ip
 800c3e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	9307      	str	r3, [sp, #28]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dc00      	bgt.n	800c3f0 <_dtoa_r+0x268>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	9a04      	ldr	r2, [sp, #16]
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	69d0      	ldr	r0, [r2, #28]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	0015      	movs	r5, r2
 800c3fa:	3514      	adds	r5, #20
 800c3fc:	429d      	cmp	r5, r3
 800c3fe:	d91b      	bls.n	800c438 <_dtoa_r+0x2b0>
 800c400:	6041      	str	r1, [r0, #4]
 800c402:	9804      	ldr	r0, [sp, #16]
 800c404:	f000 fdd6 	bl	800cfb4 <_Balloc>
 800c408:	9006      	str	r0, [sp, #24]
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d117      	bne.n	800c43e <_dtoa_r+0x2b6>
 800c40e:	21b0      	movs	r1, #176	; 0xb0
 800c410:	4b42      	ldr	r3, [pc, #264]	; (800c51c <_dtoa_r+0x394>)
 800c412:	482e      	ldr	r0, [pc, #184]	; (800c4cc <_dtoa_r+0x344>)
 800c414:	9a06      	ldr	r2, [sp, #24]
 800c416:	31ff      	adds	r1, #255	; 0xff
 800c418:	e6cb      	b.n	800c1b2 <_dtoa_r+0x2a>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e7dd      	b.n	800c3da <_dtoa_r+0x252>
 800c41e:	2300      	movs	r3, #0
 800c420:	940f      	str	r4, [sp, #60]	; 0x3c
 800c422:	9322      	str	r3, [sp, #136]	; 0x88
 800c424:	3b01      	subs	r3, #1
 800c426:	930b      	str	r3, [sp, #44]	; 0x2c
 800c428:	9307      	str	r3, [sp, #28]
 800c42a:	2200      	movs	r2, #0
 800c42c:	3313      	adds	r3, #19
 800c42e:	e7cf      	b.n	800c3d0 <_dtoa_r+0x248>
 800c430:	2301      	movs	r3, #1
 800c432:	930f      	str	r3, [sp, #60]	; 0x3c
 800c434:	3b02      	subs	r3, #2
 800c436:	e7f6      	b.n	800c426 <_dtoa_r+0x29e>
 800c438:	3101      	adds	r1, #1
 800c43a:	0052      	lsls	r2, r2, #1
 800c43c:	e7dc      	b.n	800c3f8 <_dtoa_r+0x270>
 800c43e:	9b04      	ldr	r3, [sp, #16]
 800c440:	9a06      	ldr	r2, [sp, #24]
 800c442:	69db      	ldr	r3, [r3, #28]
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	2b0e      	cmp	r3, #14
 800c44a:	d900      	bls.n	800c44e <_dtoa_r+0x2c6>
 800c44c:	e0e5      	b.n	800c61a <_dtoa_r+0x492>
 800c44e:	2c00      	cmp	r4, #0
 800c450:	d100      	bne.n	800c454 <_dtoa_r+0x2cc>
 800c452:	e0e2      	b.n	800c61a <_dtoa_r+0x492>
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	dd64      	ble.n	800c524 <_dtoa_r+0x39c>
 800c45a:	210f      	movs	r1, #15
 800c45c:	9a03      	ldr	r2, [sp, #12]
 800c45e:	4b2b      	ldr	r3, [pc, #172]	; (800c50c <_dtoa_r+0x384>)
 800c460:	400a      	ands	r2, r1
 800c462:	00d2      	lsls	r2, r2, #3
 800c464:	189b      	adds	r3, r3, r2
 800c466:	681e      	ldr	r6, [r3, #0]
 800c468:	685f      	ldr	r7, [r3, #4]
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	2402      	movs	r4, #2
 800c46e:	111d      	asrs	r5, r3, #4
 800c470:	05db      	lsls	r3, r3, #23
 800c472:	d50a      	bpl.n	800c48a <_dtoa_r+0x302>
 800c474:	4b2a      	ldr	r3, [pc, #168]	; (800c520 <_dtoa_r+0x398>)
 800c476:	400d      	ands	r5, r1
 800c478:	6a1a      	ldr	r2, [r3, #32]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c47e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c480:	f7f4 fc8a 	bl	8000d98 <__aeabi_ddiv>
 800c484:	9008      	str	r0, [sp, #32]
 800c486:	9109      	str	r1, [sp, #36]	; 0x24
 800c488:	3401      	adds	r4, #1
 800c48a:	4b25      	ldr	r3, [pc, #148]	; (800c520 <_dtoa_r+0x398>)
 800c48c:	930e      	str	r3, [sp, #56]	; 0x38
 800c48e:	2d00      	cmp	r5, #0
 800c490:	d108      	bne.n	800c4a4 <_dtoa_r+0x31c>
 800c492:	9808      	ldr	r0, [sp, #32]
 800c494:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c496:	0032      	movs	r2, r6
 800c498:	003b      	movs	r3, r7
 800c49a:	f7f4 fc7d 	bl	8000d98 <__aeabi_ddiv>
 800c49e:	9008      	str	r0, [sp, #32]
 800c4a0:	9109      	str	r1, [sp, #36]	; 0x24
 800c4a2:	e05a      	b.n	800c55a <_dtoa_r+0x3d2>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	421d      	tst	r5, r3
 800c4a8:	d009      	beq.n	800c4be <_dtoa_r+0x336>
 800c4aa:	18e4      	adds	r4, r4, r3
 800c4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4ae:	0030      	movs	r0, r6
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	0039      	movs	r1, r7
 800c4b6:	f7f5 f869 	bl	800158c <__aeabi_dmul>
 800c4ba:	0006      	movs	r6, r0
 800c4bc:	000f      	movs	r7, r1
 800c4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c0:	106d      	asrs	r5, r5, #1
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	e7e2      	b.n	800c48c <_dtoa_r+0x304>
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	0800e671 	.word	0x0800e671
 800c4cc:	0800e688 	.word	0x0800e688
 800c4d0:	7ff00000 	.word	0x7ff00000
 800c4d4:	0000270f 	.word	0x0000270f
 800c4d8:	0800e66d 	.word	0x0800e66d
 800c4dc:	0800e670 	.word	0x0800e670
 800c4e0:	0800e640 	.word	0x0800e640
 800c4e4:	0800e641 	.word	0x0800e641
 800c4e8:	3ff00000 	.word	0x3ff00000
 800c4ec:	fffffc01 	.word	0xfffffc01
 800c4f0:	3ff80000 	.word	0x3ff80000
 800c4f4:	636f4361 	.word	0x636f4361
 800c4f8:	3fd287a7 	.word	0x3fd287a7
 800c4fc:	8b60c8b3 	.word	0x8b60c8b3
 800c500:	3fc68a28 	.word	0x3fc68a28
 800c504:	509f79fb 	.word	0x509f79fb
 800c508:	3fd34413 	.word	0x3fd34413
 800c50c:	0800e778 	.word	0x0800e778
 800c510:	00000432 	.word	0x00000432
 800c514:	00000412 	.word	0x00000412
 800c518:	fe100000 	.word	0xfe100000
 800c51c:	0800e6e0 	.word	0x0800e6e0
 800c520:	0800e750 	.word	0x0800e750
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	2402      	movs	r4, #2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d016      	beq.n	800c55a <_dtoa_r+0x3d2>
 800c52c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c52e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c530:	220f      	movs	r2, #15
 800c532:	425d      	negs	r5, r3
 800c534:	402a      	ands	r2, r5
 800c536:	4bdd      	ldr	r3, [pc, #884]	; (800c8ac <_dtoa_r+0x724>)
 800c538:	00d2      	lsls	r2, r2, #3
 800c53a:	189b      	adds	r3, r3, r2
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f7f5 f824 	bl	800158c <__aeabi_dmul>
 800c544:	2701      	movs	r7, #1
 800c546:	2300      	movs	r3, #0
 800c548:	9008      	str	r0, [sp, #32]
 800c54a:	9109      	str	r1, [sp, #36]	; 0x24
 800c54c:	4ed8      	ldr	r6, [pc, #864]	; (800c8b0 <_dtoa_r+0x728>)
 800c54e:	112d      	asrs	r5, r5, #4
 800c550:	2d00      	cmp	r5, #0
 800c552:	d000      	beq.n	800c556 <_dtoa_r+0x3ce>
 800c554:	e091      	b.n	800c67a <_dtoa_r+0x4f2>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1a1      	bne.n	800c49e <_dtoa_r+0x316>
 800c55a:	9e08      	ldr	r6, [sp, #32]
 800c55c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c55e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c560:	2b00      	cmp	r3, #0
 800c562:	d100      	bne.n	800c566 <_dtoa_r+0x3de>
 800c564:	e094      	b.n	800c690 <_dtoa_r+0x508>
 800c566:	2200      	movs	r2, #0
 800c568:	0030      	movs	r0, r6
 800c56a:	0039      	movs	r1, r7
 800c56c:	4bd1      	ldr	r3, [pc, #836]	; (800c8b4 <_dtoa_r+0x72c>)
 800c56e:	f7f3 ff71 	bl	8000454 <__aeabi_dcmplt>
 800c572:	2800      	cmp	r0, #0
 800c574:	d100      	bne.n	800c578 <_dtoa_r+0x3f0>
 800c576:	e08b      	b.n	800c690 <_dtoa_r+0x508>
 800c578:	9b07      	ldr	r3, [sp, #28]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d100      	bne.n	800c580 <_dtoa_r+0x3f8>
 800c57e:	e087      	b.n	800c690 <_dtoa_r+0x508>
 800c580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c582:	2b00      	cmp	r3, #0
 800c584:	dd45      	ble.n	800c612 <_dtoa_r+0x48a>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	3b01      	subs	r3, #1
 800c58c:	930e      	str	r3, [sp, #56]	; 0x38
 800c58e:	0030      	movs	r0, r6
 800c590:	4bc9      	ldr	r3, [pc, #804]	; (800c8b8 <_dtoa_r+0x730>)
 800c592:	0039      	movs	r1, r7
 800c594:	f7f4 fffa 	bl	800158c <__aeabi_dmul>
 800c598:	9008      	str	r0, [sp, #32]
 800c59a:	9109      	str	r1, [sp, #36]	; 0x24
 800c59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59e:	3401      	adds	r4, #1
 800c5a0:	0020      	movs	r0, r4
 800c5a2:	9e08      	ldr	r6, [sp, #32]
 800c5a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5a6:	9312      	str	r3, [sp, #72]	; 0x48
 800c5a8:	f7f5 fe88 	bl	80022bc <__aeabi_i2d>
 800c5ac:	0032      	movs	r2, r6
 800c5ae:	003b      	movs	r3, r7
 800c5b0:	f7f4 ffec 	bl	800158c <__aeabi_dmul>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4bc1      	ldr	r3, [pc, #772]	; (800c8bc <_dtoa_r+0x734>)
 800c5b8:	f7f4 f88e 	bl	80006d8 <__aeabi_dadd>
 800c5bc:	4ac0      	ldr	r2, [pc, #768]	; (800c8c0 <_dtoa_r+0x738>)
 800c5be:	9014      	str	r0, [sp, #80]	; 0x50
 800c5c0:	9115      	str	r1, [sp, #84]	; 0x54
 800c5c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c5c6:	4694      	mov	ip, r2
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9409      	str	r4, [sp, #36]	; 0x24
 800c5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5ce:	4463      	add	r3, ip
 800c5d0:	9318      	str	r3, [sp, #96]	; 0x60
 800c5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d15e      	bne.n	800c698 <_dtoa_r+0x510>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4bb9      	ldr	r3, [pc, #740]	; (800c8c4 <_dtoa_r+0x73c>)
 800c5de:	0030      	movs	r0, r6
 800c5e0:	0039      	movs	r1, r7
 800c5e2:	f7f5 fa95 	bl	8001b10 <__aeabi_dsub>
 800c5e6:	9a08      	ldr	r2, [sp, #32]
 800c5e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c5ea:	0004      	movs	r4, r0
 800c5ec:	000d      	movs	r5, r1
 800c5ee:	f7f3 ff45 	bl	800047c <__aeabi_dcmpgt>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d000      	beq.n	800c5f8 <_dtoa_r+0x470>
 800c5f6:	e2b3      	b.n	800cb60 <_dtoa_r+0x9d8>
 800c5f8:	48b3      	ldr	r0, [pc, #716]	; (800c8c8 <_dtoa_r+0x740>)
 800c5fa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c5fc:	4684      	mov	ip, r0
 800c5fe:	4461      	add	r1, ip
 800c600:	000b      	movs	r3, r1
 800c602:	0020      	movs	r0, r4
 800c604:	0029      	movs	r1, r5
 800c606:	9a08      	ldr	r2, [sp, #32]
 800c608:	f7f3 ff24 	bl	8000454 <__aeabi_dcmplt>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d000      	beq.n	800c612 <_dtoa_r+0x48a>
 800c610:	e2a3      	b.n	800cb5a <_dtoa_r+0x9d2>
 800c612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c614:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800c616:	9308      	str	r3, [sp, #32]
 800c618:	9409      	str	r4, [sp, #36]	; 0x24
 800c61a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	da00      	bge.n	800c622 <_dtoa_r+0x49a>
 800c620:	e179      	b.n	800c916 <_dtoa_r+0x78e>
 800c622:	9a03      	ldr	r2, [sp, #12]
 800c624:	2a0e      	cmp	r2, #14
 800c626:	dd00      	ble.n	800c62a <_dtoa_r+0x4a2>
 800c628:	e175      	b.n	800c916 <_dtoa_r+0x78e>
 800c62a:	4ba0      	ldr	r3, [pc, #640]	; (800c8ac <_dtoa_r+0x724>)
 800c62c:	00d2      	lsls	r2, r2, #3
 800c62e:	189b      	adds	r3, r3, r2
 800c630:	681e      	ldr	r6, [r3, #0]
 800c632:	685f      	ldr	r7, [r3, #4]
 800c634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c636:	2b00      	cmp	r3, #0
 800c638:	db00      	blt.n	800c63c <_dtoa_r+0x4b4>
 800c63a:	e0e5      	b.n	800c808 <_dtoa_r+0x680>
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd00      	ble.n	800c644 <_dtoa_r+0x4bc>
 800c642:	e0e1      	b.n	800c808 <_dtoa_r+0x680>
 800c644:	d000      	beq.n	800c648 <_dtoa_r+0x4c0>
 800c646:	e288      	b.n	800cb5a <_dtoa_r+0x9d2>
 800c648:	2200      	movs	r2, #0
 800c64a:	0030      	movs	r0, r6
 800c64c:	0039      	movs	r1, r7
 800c64e:	4b9d      	ldr	r3, [pc, #628]	; (800c8c4 <_dtoa_r+0x73c>)
 800c650:	f7f4 ff9c 	bl	800158c <__aeabi_dmul>
 800c654:	9a08      	ldr	r2, [sp, #32]
 800c656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c658:	f7f3 ff1a 	bl	8000490 <__aeabi_dcmpge>
 800c65c:	9e07      	ldr	r6, [sp, #28]
 800c65e:	0037      	movs	r7, r6
 800c660:	2800      	cmp	r0, #0
 800c662:	d000      	beq.n	800c666 <_dtoa_r+0x4de>
 800c664:	e25f      	b.n	800cb26 <_dtoa_r+0x99e>
 800c666:	9b06      	ldr	r3, [sp, #24]
 800c668:	9a06      	ldr	r2, [sp, #24]
 800c66a:	3301      	adds	r3, #1
 800c66c:	9308      	str	r3, [sp, #32]
 800c66e:	2331      	movs	r3, #49	; 0x31
 800c670:	7013      	strb	r3, [r2, #0]
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	3301      	adds	r3, #1
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	e25a      	b.n	800cb30 <_dtoa_r+0x9a8>
 800c67a:	423d      	tst	r5, r7
 800c67c:	d005      	beq.n	800c68a <_dtoa_r+0x502>
 800c67e:	6832      	ldr	r2, [r6, #0]
 800c680:	6873      	ldr	r3, [r6, #4]
 800c682:	f7f4 ff83 	bl	800158c <__aeabi_dmul>
 800c686:	003b      	movs	r3, r7
 800c688:	3401      	adds	r4, #1
 800c68a:	106d      	asrs	r5, r5, #1
 800c68c:	3608      	adds	r6, #8
 800c68e:	e75f      	b.n	800c550 <_dtoa_r+0x3c8>
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	930e      	str	r3, [sp, #56]	; 0x38
 800c694:	9b07      	ldr	r3, [sp, #28]
 800c696:	e783      	b.n	800c5a0 <_dtoa_r+0x418>
 800c698:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c69a:	4b84      	ldr	r3, [pc, #528]	; (800c8ac <_dtoa_r+0x724>)
 800c69c:	3a01      	subs	r2, #1
 800c69e:	00d2      	lsls	r2, r2, #3
 800c6a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c6a2:	189b      	adds	r3, r3, r2
 800c6a4:	9c08      	ldr	r4, [sp, #32]
 800c6a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d051      	beq.n	800c754 <_dtoa_r+0x5cc>
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4986      	ldr	r1, [pc, #536]	; (800c8cc <_dtoa_r+0x744>)
 800c6b4:	f7f4 fb70 	bl	8000d98 <__aeabi_ddiv>
 800c6b8:	0022      	movs	r2, r4
 800c6ba:	002b      	movs	r3, r5
 800c6bc:	f7f5 fa28 	bl	8001b10 <__aeabi_dsub>
 800c6c0:	9a06      	ldr	r2, [sp, #24]
 800c6c2:	0004      	movs	r4, r0
 800c6c4:	4694      	mov	ip, r2
 800c6c6:	000d      	movs	r5, r1
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	9314      	str	r3, [sp, #80]	; 0x50
 800c6cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6ce:	4463      	add	r3, ip
 800c6d0:	9318      	str	r3, [sp, #96]	; 0x60
 800c6d2:	0039      	movs	r1, r7
 800c6d4:	0030      	movs	r0, r6
 800c6d6:	f7f5 fdbb 	bl	8002250 <__aeabi_d2iz>
 800c6da:	9012      	str	r0, [sp, #72]	; 0x48
 800c6dc:	f7f5 fdee 	bl	80022bc <__aeabi_i2d>
 800c6e0:	0002      	movs	r2, r0
 800c6e2:	000b      	movs	r3, r1
 800c6e4:	0030      	movs	r0, r6
 800c6e6:	0039      	movs	r1, r7
 800c6e8:	f7f5 fa12 	bl	8001b10 <__aeabi_dsub>
 800c6ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	9308      	str	r3, [sp, #32]
 800c6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6f6:	0006      	movs	r6, r0
 800c6f8:	3330      	adds	r3, #48	; 0x30
 800c6fa:	7013      	strb	r3, [r2, #0]
 800c6fc:	0022      	movs	r2, r4
 800c6fe:	002b      	movs	r3, r5
 800c700:	000f      	movs	r7, r1
 800c702:	f7f3 fea7 	bl	8000454 <__aeabi_dcmplt>
 800c706:	2800      	cmp	r0, #0
 800c708:	d174      	bne.n	800c7f4 <_dtoa_r+0x66c>
 800c70a:	0032      	movs	r2, r6
 800c70c:	003b      	movs	r3, r7
 800c70e:	2000      	movs	r0, #0
 800c710:	4968      	ldr	r1, [pc, #416]	; (800c8b4 <_dtoa_r+0x72c>)
 800c712:	f7f5 f9fd 	bl	8001b10 <__aeabi_dsub>
 800c716:	0022      	movs	r2, r4
 800c718:	002b      	movs	r3, r5
 800c71a:	f7f3 fe9b 	bl	8000454 <__aeabi_dcmplt>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d000      	beq.n	800c724 <_dtoa_r+0x59c>
 800c722:	e0d7      	b.n	800c8d4 <_dtoa_r+0x74c>
 800c724:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c726:	9a08      	ldr	r2, [sp, #32]
 800c728:	4293      	cmp	r3, r2
 800c72a:	d100      	bne.n	800c72e <_dtoa_r+0x5a6>
 800c72c:	e771      	b.n	800c612 <_dtoa_r+0x48a>
 800c72e:	2200      	movs	r2, #0
 800c730:	0020      	movs	r0, r4
 800c732:	0029      	movs	r1, r5
 800c734:	4b60      	ldr	r3, [pc, #384]	; (800c8b8 <_dtoa_r+0x730>)
 800c736:	f7f4 ff29 	bl	800158c <__aeabi_dmul>
 800c73a:	4b5f      	ldr	r3, [pc, #380]	; (800c8b8 <_dtoa_r+0x730>)
 800c73c:	0004      	movs	r4, r0
 800c73e:	000d      	movs	r5, r1
 800c740:	0030      	movs	r0, r6
 800c742:	0039      	movs	r1, r7
 800c744:	2200      	movs	r2, #0
 800c746:	f7f4 ff21 	bl	800158c <__aeabi_dmul>
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	0006      	movs	r6, r0
 800c74e:	000f      	movs	r7, r1
 800c750:	9314      	str	r3, [sp, #80]	; 0x50
 800c752:	e7be      	b.n	800c6d2 <_dtoa_r+0x54a>
 800c754:	0020      	movs	r0, r4
 800c756:	0029      	movs	r1, r5
 800c758:	f7f4 ff18 	bl	800158c <__aeabi_dmul>
 800c75c:	9a06      	ldr	r2, [sp, #24]
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	4694      	mov	ip, r2
 800c762:	9308      	str	r3, [sp, #32]
 800c764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c766:	9014      	str	r0, [sp, #80]	; 0x50
 800c768:	9115      	str	r1, [sp, #84]	; 0x54
 800c76a:	4463      	add	r3, ip
 800c76c:	9319      	str	r3, [sp, #100]	; 0x64
 800c76e:	0030      	movs	r0, r6
 800c770:	0039      	movs	r1, r7
 800c772:	f7f5 fd6d 	bl	8002250 <__aeabi_d2iz>
 800c776:	9018      	str	r0, [sp, #96]	; 0x60
 800c778:	f7f5 fda0 	bl	80022bc <__aeabi_i2d>
 800c77c:	0002      	movs	r2, r0
 800c77e:	000b      	movs	r3, r1
 800c780:	0030      	movs	r0, r6
 800c782:	0039      	movs	r1, r7
 800c784:	f7f5 f9c4 	bl	8001b10 <__aeabi_dsub>
 800c788:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c78a:	9b08      	ldr	r3, [sp, #32]
 800c78c:	3630      	adds	r6, #48	; 0x30
 800c78e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c790:	701e      	strb	r6, [r3, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	0004      	movs	r4, r0
 800c796:	000d      	movs	r5, r1
 800c798:	9308      	str	r3, [sp, #32]
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d12d      	bne.n	800c7fa <_dtoa_r+0x672>
 800c79e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c7a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c7a2:	9a06      	ldr	r2, [sp, #24]
 800c7a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7a6:	4694      	mov	ip, r2
 800c7a8:	4463      	add	r3, ip
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	9308      	str	r3, [sp, #32]
 800c7ae:	4b47      	ldr	r3, [pc, #284]	; (800c8cc <_dtoa_r+0x744>)
 800c7b0:	f7f3 ff92 	bl	80006d8 <__aeabi_dadd>
 800c7b4:	0002      	movs	r2, r0
 800c7b6:	000b      	movs	r3, r1
 800c7b8:	0020      	movs	r0, r4
 800c7ba:	0029      	movs	r1, r5
 800c7bc:	f7f3 fe5e 	bl	800047c <__aeabi_dcmpgt>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d000      	beq.n	800c7c6 <_dtoa_r+0x63e>
 800c7c4:	e086      	b.n	800c8d4 <_dtoa_r+0x74c>
 800c7c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	493f      	ldr	r1, [pc, #252]	; (800c8cc <_dtoa_r+0x744>)
 800c7ce:	f7f5 f99f 	bl	8001b10 <__aeabi_dsub>
 800c7d2:	0002      	movs	r2, r0
 800c7d4:	000b      	movs	r3, r1
 800c7d6:	0020      	movs	r0, r4
 800c7d8:	0029      	movs	r1, r5
 800c7da:	f7f3 fe3b 	bl	8000454 <__aeabi_dcmplt>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d100      	bne.n	800c7e4 <_dtoa_r+0x65c>
 800c7e2:	e716      	b.n	800c612 <_dtoa_r+0x48a>
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	001a      	movs	r2, r3
 800c7e8:	3a01      	subs	r2, #1
 800c7ea:	9208      	str	r2, [sp, #32]
 800c7ec:	7812      	ldrb	r2, [r2, #0]
 800c7ee:	2a30      	cmp	r2, #48	; 0x30
 800c7f0:	d0f8      	beq.n	800c7e4 <_dtoa_r+0x65c>
 800c7f2:	9308      	str	r3, [sp, #32]
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f6:	9303      	str	r3, [sp, #12]
 800c7f8:	e046      	b.n	800c888 <_dtoa_r+0x700>
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	4b2e      	ldr	r3, [pc, #184]	; (800c8b8 <_dtoa_r+0x730>)
 800c7fe:	f7f4 fec5 	bl	800158c <__aeabi_dmul>
 800c802:	0006      	movs	r6, r0
 800c804:	000f      	movs	r7, r1
 800c806:	e7b2      	b.n	800c76e <_dtoa_r+0x5e6>
 800c808:	9b06      	ldr	r3, [sp, #24]
 800c80a:	9a06      	ldr	r2, [sp, #24]
 800c80c:	930a      	str	r3, [sp, #40]	; 0x28
 800c80e:	9b07      	ldr	r3, [sp, #28]
 800c810:	9c08      	ldr	r4, [sp, #32]
 800c812:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c814:	3b01      	subs	r3, #1
 800c816:	189b      	adds	r3, r3, r2
 800c818:	930b      	str	r3, [sp, #44]	; 0x2c
 800c81a:	0032      	movs	r2, r6
 800c81c:	003b      	movs	r3, r7
 800c81e:	0020      	movs	r0, r4
 800c820:	0029      	movs	r1, r5
 800c822:	f7f4 fab9 	bl	8000d98 <__aeabi_ddiv>
 800c826:	f7f5 fd13 	bl	8002250 <__aeabi_d2iz>
 800c82a:	9007      	str	r0, [sp, #28]
 800c82c:	f7f5 fd46 	bl	80022bc <__aeabi_i2d>
 800c830:	0032      	movs	r2, r6
 800c832:	003b      	movs	r3, r7
 800c834:	f7f4 feaa 	bl	800158c <__aeabi_dmul>
 800c838:	0002      	movs	r2, r0
 800c83a:	000b      	movs	r3, r1
 800c83c:	0020      	movs	r0, r4
 800c83e:	0029      	movs	r1, r5
 800c840:	f7f5 f966 	bl	8001b10 <__aeabi_dsub>
 800c844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c846:	001a      	movs	r2, r3
 800c848:	3201      	adds	r2, #1
 800c84a:	920a      	str	r2, [sp, #40]	; 0x28
 800c84c:	9208      	str	r2, [sp, #32]
 800c84e:	9a07      	ldr	r2, [sp, #28]
 800c850:	3230      	adds	r2, #48	; 0x30
 800c852:	701a      	strb	r2, [r3, #0]
 800c854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c856:	429a      	cmp	r2, r3
 800c858:	d14f      	bne.n	800c8fa <_dtoa_r+0x772>
 800c85a:	0002      	movs	r2, r0
 800c85c:	000b      	movs	r3, r1
 800c85e:	f7f3 ff3b 	bl	80006d8 <__aeabi_dadd>
 800c862:	0032      	movs	r2, r6
 800c864:	003b      	movs	r3, r7
 800c866:	0004      	movs	r4, r0
 800c868:	000d      	movs	r5, r1
 800c86a:	f7f3 fe07 	bl	800047c <__aeabi_dcmpgt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d12e      	bne.n	800c8d0 <_dtoa_r+0x748>
 800c872:	0032      	movs	r2, r6
 800c874:	003b      	movs	r3, r7
 800c876:	0020      	movs	r0, r4
 800c878:	0029      	movs	r1, r5
 800c87a:	f7f3 fde5 	bl	8000448 <__aeabi_dcmpeq>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d002      	beq.n	800c888 <_dtoa_r+0x700>
 800c882:	9b07      	ldr	r3, [sp, #28]
 800c884:	07de      	lsls	r6, r3, #31
 800c886:	d423      	bmi.n	800c8d0 <_dtoa_r+0x748>
 800c888:	9905      	ldr	r1, [sp, #20]
 800c88a:	9804      	ldr	r0, [sp, #16]
 800c88c:	f000 fbd6 	bl	800d03c <_Bfree>
 800c890:	2300      	movs	r3, #0
 800c892:	9a08      	ldr	r2, [sp, #32]
 800c894:	7013      	strb	r3, [r2, #0]
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c89a:	3301      	adds	r3, #1
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d100      	bne.n	800c8a6 <_dtoa_r+0x71e>
 800c8a4:	e4ba      	b.n	800c21c <_dtoa_r+0x94>
 800c8a6:	9a08      	ldr	r2, [sp, #32]
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e4b7      	b.n	800c21c <_dtoa_r+0x94>
 800c8ac:	0800e778 	.word	0x0800e778
 800c8b0:	0800e750 	.word	0x0800e750
 800c8b4:	3ff00000 	.word	0x3ff00000
 800c8b8:	40240000 	.word	0x40240000
 800c8bc:	401c0000 	.word	0x401c0000
 800c8c0:	fcc00000 	.word	0xfcc00000
 800c8c4:	40140000 	.word	0x40140000
 800c8c8:	7cc00000 	.word	0x7cc00000
 800c8cc:	3fe00000 	.word	0x3fe00000
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d4:	9b08      	ldr	r3, [sp, #32]
 800c8d6:	9308      	str	r3, [sp, #32]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	781a      	ldrb	r2, [r3, #0]
 800c8dc:	2a39      	cmp	r2, #57	; 0x39
 800c8de:	d108      	bne.n	800c8f2 <_dtoa_r+0x76a>
 800c8e0:	9a06      	ldr	r2, [sp, #24]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d1f7      	bne.n	800c8d6 <_dtoa_r+0x74e>
 800c8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e8:	9906      	ldr	r1, [sp, #24]
 800c8ea:	3201      	adds	r2, #1
 800c8ec:	920e      	str	r2, [sp, #56]	; 0x38
 800c8ee:	2230      	movs	r2, #48	; 0x30
 800c8f0:	700a      	strb	r2, [r1, #0]
 800c8f2:	781a      	ldrb	r2, [r3, #0]
 800c8f4:	3201      	adds	r2, #1
 800c8f6:	701a      	strb	r2, [r3, #0]
 800c8f8:	e77c      	b.n	800c7f4 <_dtoa_r+0x66c>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	4ba9      	ldr	r3, [pc, #676]	; (800cba4 <_dtoa_r+0xa1c>)
 800c8fe:	f7f4 fe45 	bl	800158c <__aeabi_dmul>
 800c902:	2200      	movs	r2, #0
 800c904:	2300      	movs	r3, #0
 800c906:	0004      	movs	r4, r0
 800c908:	000d      	movs	r5, r1
 800c90a:	f7f3 fd9d 	bl	8000448 <__aeabi_dcmpeq>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d100      	bne.n	800c914 <_dtoa_r+0x78c>
 800c912:	e782      	b.n	800c81a <_dtoa_r+0x692>
 800c914:	e7b8      	b.n	800c888 <_dtoa_r+0x700>
 800c916:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c91a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c91c:	2f00      	cmp	r7, #0
 800c91e:	d012      	beq.n	800c946 <_dtoa_r+0x7be>
 800c920:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c922:	2a01      	cmp	r2, #1
 800c924:	dc6e      	bgt.n	800ca04 <_dtoa_r+0x87c>
 800c926:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c928:	2a00      	cmp	r2, #0
 800c92a:	d065      	beq.n	800c9f8 <_dtoa_r+0x870>
 800c92c:	4a9e      	ldr	r2, [pc, #632]	; (800cba8 <_dtoa_r+0xa20>)
 800c92e:	189b      	adds	r3, r3, r2
 800c930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c932:	2101      	movs	r1, #1
 800c934:	18d2      	adds	r2, r2, r3
 800c936:	920a      	str	r2, [sp, #40]	; 0x28
 800c938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93a:	9804      	ldr	r0, [sp, #16]
 800c93c:	18d3      	adds	r3, r2, r3
 800c93e:	930c      	str	r3, [sp, #48]	; 0x30
 800c940:	f000 fc2c 	bl	800d19c <__i2b>
 800c944:	0007      	movs	r7, r0
 800c946:	2c00      	cmp	r4, #0
 800c948:	d00e      	beq.n	800c968 <_dtoa_r+0x7e0>
 800c94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	dd0b      	ble.n	800c968 <_dtoa_r+0x7e0>
 800c950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c952:	0023      	movs	r3, r4
 800c954:	4294      	cmp	r4, r2
 800c956:	dd00      	ble.n	800c95a <_dtoa_r+0x7d2>
 800c958:	0013      	movs	r3, r2
 800c95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c95c:	1ae4      	subs	r4, r4, r3
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	920a      	str	r2, [sp, #40]	; 0x28
 800c962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	930c      	str	r3, [sp, #48]	; 0x30
 800c968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d01e      	beq.n	800c9ac <_dtoa_r+0x824>
 800c96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d05c      	beq.n	800ca2e <_dtoa_r+0x8a6>
 800c974:	2d00      	cmp	r5, #0
 800c976:	dd10      	ble.n	800c99a <_dtoa_r+0x812>
 800c978:	0039      	movs	r1, r7
 800c97a:	002a      	movs	r2, r5
 800c97c:	9804      	ldr	r0, [sp, #16]
 800c97e:	f000 fcd5 	bl	800d32c <__pow5mult>
 800c982:	9a05      	ldr	r2, [sp, #20]
 800c984:	0001      	movs	r1, r0
 800c986:	0007      	movs	r7, r0
 800c988:	9804      	ldr	r0, [sp, #16]
 800c98a:	f000 fc1f 	bl	800d1cc <__multiply>
 800c98e:	0006      	movs	r6, r0
 800c990:	9905      	ldr	r1, [sp, #20]
 800c992:	9804      	ldr	r0, [sp, #16]
 800c994:	f000 fb52 	bl	800d03c <_Bfree>
 800c998:	9605      	str	r6, [sp, #20]
 800c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c99c:	1b5a      	subs	r2, r3, r5
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	d004      	beq.n	800c9ac <_dtoa_r+0x824>
 800c9a2:	9905      	ldr	r1, [sp, #20]
 800c9a4:	9804      	ldr	r0, [sp, #16]
 800c9a6:	f000 fcc1 	bl	800d32c <__pow5mult>
 800c9aa:	9005      	str	r0, [sp, #20]
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	9804      	ldr	r0, [sp, #16]
 800c9b0:	f000 fbf4 	bl	800d19c <__i2b>
 800c9b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9b6:	0006      	movs	r6, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dd3a      	ble.n	800ca32 <_dtoa_r+0x8aa>
 800c9bc:	001a      	movs	r2, r3
 800c9be:	0001      	movs	r1, r0
 800c9c0:	9804      	ldr	r0, [sp, #16]
 800c9c2:	f000 fcb3 	bl	800d32c <__pow5mult>
 800c9c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9c8:	0006      	movs	r6, r0
 800c9ca:	2500      	movs	r5, #0
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	dc38      	bgt.n	800ca42 <_dtoa_r+0x8ba>
 800c9d0:	2500      	movs	r5, #0
 800c9d2:	9b08      	ldr	r3, [sp, #32]
 800c9d4:	42ab      	cmp	r3, r5
 800c9d6:	d130      	bne.n	800ca3a <_dtoa_r+0x8b2>
 800c9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9da:	031b      	lsls	r3, r3, #12
 800c9dc:	42ab      	cmp	r3, r5
 800c9de:	d12c      	bne.n	800ca3a <_dtoa_r+0x8b2>
 800c9e0:	4b72      	ldr	r3, [pc, #456]	; (800cbac <_dtoa_r+0xa24>)
 800c9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9e4:	4213      	tst	r3, r2
 800c9e6:	d028      	beq.n	800ca3a <_dtoa_r+0x8b2>
 800c9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ea:	3501      	adds	r5, #1
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9f6:	e020      	b.n	800ca3a <_dtoa_r+0x8b2>
 800c9f8:	2336      	movs	r3, #54	; 0x36
 800c9fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c9fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c9fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca00:	1a9b      	subs	r3, r3, r2
 800ca02:	e795      	b.n	800c930 <_dtoa_r+0x7a8>
 800ca04:	9b07      	ldr	r3, [sp, #28]
 800ca06:	1e5d      	subs	r5, r3, #1
 800ca08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca0a:	42ab      	cmp	r3, r5
 800ca0c:	db07      	blt.n	800ca1e <_dtoa_r+0x896>
 800ca0e:	1b5d      	subs	r5, r3, r5
 800ca10:	9b07      	ldr	r3, [sp, #28]
 800ca12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	da8b      	bge.n	800c930 <_dtoa_r+0x7a8>
 800ca18:	1ae4      	subs	r4, r4, r3
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e788      	b.n	800c930 <_dtoa_r+0x7a8>
 800ca1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca22:	1aeb      	subs	r3, r5, r3
 800ca24:	18d3      	adds	r3, r2, r3
 800ca26:	950d      	str	r5, [sp, #52]	; 0x34
 800ca28:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca2a:	2500      	movs	r5, #0
 800ca2c:	e7f0      	b.n	800ca10 <_dtoa_r+0x888>
 800ca2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca30:	e7b7      	b.n	800c9a2 <_dtoa_r+0x81a>
 800ca32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca34:	2500      	movs	r5, #0
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	ddca      	ble.n	800c9d0 <_dtoa_r+0x848>
 800ca3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d008      	beq.n	800ca54 <_dtoa_r+0x8cc>
 800ca42:	6933      	ldr	r3, [r6, #16]
 800ca44:	3303      	adds	r3, #3
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	18f3      	adds	r3, r6, r3
 800ca4a:	6858      	ldr	r0, [r3, #4]
 800ca4c:	f000 fb5e 	bl	800d10c <__hi0bits>
 800ca50:	2320      	movs	r3, #32
 800ca52:	1a18      	subs	r0, r3, r0
 800ca54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca56:	1818      	adds	r0, r3, r0
 800ca58:	0002      	movs	r2, r0
 800ca5a:	231f      	movs	r3, #31
 800ca5c:	401a      	ands	r2, r3
 800ca5e:	4218      	tst	r0, r3
 800ca60:	d047      	beq.n	800caf2 <_dtoa_r+0x96a>
 800ca62:	3301      	adds	r3, #1
 800ca64:	1a9b      	subs	r3, r3, r2
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	dd3f      	ble.n	800caea <_dtoa_r+0x962>
 800ca6a:	231c      	movs	r3, #28
 800ca6c:	1a9b      	subs	r3, r3, r2
 800ca6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca70:	18e4      	adds	r4, r4, r3
 800ca72:	18d2      	adds	r2, r2, r3
 800ca74:	920a      	str	r2, [sp, #40]	; 0x28
 800ca76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca78:	18d3      	adds	r3, r2, r3
 800ca7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ca7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	dd05      	ble.n	800ca8e <_dtoa_r+0x906>
 800ca82:	001a      	movs	r2, r3
 800ca84:	9905      	ldr	r1, [sp, #20]
 800ca86:	9804      	ldr	r0, [sp, #16]
 800ca88:	f000 fcac 	bl	800d3e4 <__lshift>
 800ca8c:	9005      	str	r0, [sp, #20]
 800ca8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	dd05      	ble.n	800caa0 <_dtoa_r+0x918>
 800ca94:	0031      	movs	r1, r6
 800ca96:	001a      	movs	r2, r3
 800ca98:	9804      	ldr	r0, [sp, #16]
 800ca9a:	f000 fca3 	bl	800d3e4 <__lshift>
 800ca9e:	0006      	movs	r6, r0
 800caa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d027      	beq.n	800caf6 <_dtoa_r+0x96e>
 800caa6:	0031      	movs	r1, r6
 800caa8:	9805      	ldr	r0, [sp, #20]
 800caaa:	f000 fd09 	bl	800d4c0 <__mcmp>
 800caae:	2800      	cmp	r0, #0
 800cab0:	da21      	bge.n	800caf6 <_dtoa_r+0x96e>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	220a      	movs	r2, #10
 800cab6:	3b01      	subs	r3, #1
 800cab8:	9303      	str	r3, [sp, #12]
 800caba:	9905      	ldr	r1, [sp, #20]
 800cabc:	2300      	movs	r3, #0
 800cabe:	9804      	ldr	r0, [sp, #16]
 800cac0:	f000 fae0 	bl	800d084 <__multadd>
 800cac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cac6:	9005      	str	r0, [sp, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d100      	bne.n	800cace <_dtoa_r+0x946>
 800cacc:	e15d      	b.n	800cd8a <_dtoa_r+0xc02>
 800cace:	2300      	movs	r3, #0
 800cad0:	0039      	movs	r1, r7
 800cad2:	220a      	movs	r2, #10
 800cad4:	9804      	ldr	r0, [sp, #16]
 800cad6:	f000 fad5 	bl	800d084 <__multadd>
 800cada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cadc:	0007      	movs	r7, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dc49      	bgt.n	800cb76 <_dtoa_r+0x9ee>
 800cae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	dc0e      	bgt.n	800cb06 <_dtoa_r+0x97e>
 800cae8:	e045      	b.n	800cb76 <_dtoa_r+0x9ee>
 800caea:	2b04      	cmp	r3, #4
 800caec:	d0c6      	beq.n	800ca7c <_dtoa_r+0x8f4>
 800caee:	331c      	adds	r3, #28
 800caf0:	e7bd      	b.n	800ca6e <_dtoa_r+0x8e6>
 800caf2:	0013      	movs	r3, r2
 800caf4:	e7fb      	b.n	800caee <_dtoa_r+0x966>
 800caf6:	9b07      	ldr	r3, [sp, #28]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	dc36      	bgt.n	800cb6a <_dtoa_r+0x9e2>
 800cafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	dd33      	ble.n	800cb6a <_dtoa_r+0x9e2>
 800cb02:	9b07      	ldr	r3, [sp, #28]
 800cb04:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10c      	bne.n	800cb26 <_dtoa_r+0x99e>
 800cb0c:	0031      	movs	r1, r6
 800cb0e:	2205      	movs	r2, #5
 800cb10:	9804      	ldr	r0, [sp, #16]
 800cb12:	f000 fab7 	bl	800d084 <__multadd>
 800cb16:	0006      	movs	r6, r0
 800cb18:	0001      	movs	r1, r0
 800cb1a:	9805      	ldr	r0, [sp, #20]
 800cb1c:	f000 fcd0 	bl	800d4c0 <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	dd00      	ble.n	800cb26 <_dtoa_r+0x99e>
 800cb24:	e59f      	b.n	800c666 <_dtoa_r+0x4de>
 800cb26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb28:	43db      	mvns	r3, r3
 800cb2a:	9303      	str	r3, [sp, #12]
 800cb2c:	9b06      	ldr	r3, [sp, #24]
 800cb2e:	9308      	str	r3, [sp, #32]
 800cb30:	2500      	movs	r5, #0
 800cb32:	0031      	movs	r1, r6
 800cb34:	9804      	ldr	r0, [sp, #16]
 800cb36:	f000 fa81 	bl	800d03c <_Bfree>
 800cb3a:	2f00      	cmp	r7, #0
 800cb3c:	d100      	bne.n	800cb40 <_dtoa_r+0x9b8>
 800cb3e:	e6a3      	b.n	800c888 <_dtoa_r+0x700>
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	d005      	beq.n	800cb50 <_dtoa_r+0x9c8>
 800cb44:	42bd      	cmp	r5, r7
 800cb46:	d003      	beq.n	800cb50 <_dtoa_r+0x9c8>
 800cb48:	0029      	movs	r1, r5
 800cb4a:	9804      	ldr	r0, [sp, #16]
 800cb4c:	f000 fa76 	bl	800d03c <_Bfree>
 800cb50:	0039      	movs	r1, r7
 800cb52:	9804      	ldr	r0, [sp, #16]
 800cb54:	f000 fa72 	bl	800d03c <_Bfree>
 800cb58:	e696      	b.n	800c888 <_dtoa_r+0x700>
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	0037      	movs	r7, r6
 800cb5e:	e7e2      	b.n	800cb26 <_dtoa_r+0x99e>
 800cb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb62:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	0037      	movs	r7, r6
 800cb68:	e57d      	b.n	800c666 <_dtoa_r+0x4de>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d100      	bne.n	800cb72 <_dtoa_r+0x9ea>
 800cb70:	e0c3      	b.n	800ccfa <_dtoa_r+0xb72>
 800cb72:	9b07      	ldr	r3, [sp, #28]
 800cb74:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	dd05      	ble.n	800cb86 <_dtoa_r+0x9fe>
 800cb7a:	0039      	movs	r1, r7
 800cb7c:	0022      	movs	r2, r4
 800cb7e:	9804      	ldr	r0, [sp, #16]
 800cb80:	f000 fc30 	bl	800d3e4 <__lshift>
 800cb84:	0007      	movs	r7, r0
 800cb86:	0038      	movs	r0, r7
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	d024      	beq.n	800cbd6 <_dtoa_r+0xa4e>
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	9804      	ldr	r0, [sp, #16]
 800cb90:	f000 fa10 	bl	800cfb4 <_Balloc>
 800cb94:	1e04      	subs	r4, r0, #0
 800cb96:	d111      	bne.n	800cbbc <_dtoa_r+0xa34>
 800cb98:	0022      	movs	r2, r4
 800cb9a:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <_dtoa_r+0xa28>)
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <_dtoa_r+0xa2c>)
 800cb9e:	4906      	ldr	r1, [pc, #24]	; (800cbb8 <_dtoa_r+0xa30>)
 800cba0:	f7ff fb07 	bl	800c1b2 <_dtoa_r+0x2a>
 800cba4:	40240000 	.word	0x40240000
 800cba8:	00000433 	.word	0x00000433
 800cbac:	7ff00000 	.word	0x7ff00000
 800cbb0:	0800e6e0 	.word	0x0800e6e0
 800cbb4:	0800e688 	.word	0x0800e688
 800cbb8:	000002ef 	.word	0x000002ef
 800cbbc:	0039      	movs	r1, r7
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	310c      	adds	r1, #12
 800cbc2:	3202      	adds	r2, #2
 800cbc4:	0092      	lsls	r2, r2, #2
 800cbc6:	300c      	adds	r0, #12
 800cbc8:	f7ff fa46 	bl	800c058 <memcpy>
 800cbcc:	2201      	movs	r2, #1
 800cbce:	0021      	movs	r1, r4
 800cbd0:	9804      	ldr	r0, [sp, #16]
 800cbd2:	f000 fc07 	bl	800d3e4 <__lshift>
 800cbd6:	9b06      	ldr	r3, [sp, #24]
 800cbd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbda:	9307      	str	r3, [sp, #28]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	189b      	adds	r3, r3, r2
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	003d      	movs	r5, r7
 800cbe4:	0007      	movs	r7, r0
 800cbe6:	930e      	str	r3, [sp, #56]	; 0x38
 800cbe8:	9b08      	ldr	r3, [sp, #32]
 800cbea:	4013      	ands	r3, r2
 800cbec:	930d      	str	r3, [sp, #52]	; 0x34
 800cbee:	0031      	movs	r1, r6
 800cbf0:	9805      	ldr	r0, [sp, #20]
 800cbf2:	f7ff fa3a 	bl	800c06a <quorem>
 800cbf6:	0029      	movs	r1, r5
 800cbf8:	0004      	movs	r4, r0
 800cbfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800cbfc:	9805      	ldr	r0, [sp, #20]
 800cbfe:	f000 fc5f 	bl	800d4c0 <__mcmp>
 800cc02:	003a      	movs	r2, r7
 800cc04:	900c      	str	r0, [sp, #48]	; 0x30
 800cc06:	0031      	movs	r1, r6
 800cc08:	9804      	ldr	r0, [sp, #16]
 800cc0a:	f000 fc75 	bl	800d4f8 <__mdiff>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	68c3      	ldr	r3, [r0, #12]
 800cc12:	3430      	adds	r4, #48	; 0x30
 800cc14:	9008      	str	r0, [sp, #32]
 800cc16:	920a      	str	r2, [sp, #40]	; 0x28
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d104      	bne.n	800cc26 <_dtoa_r+0xa9e>
 800cc1c:	0001      	movs	r1, r0
 800cc1e:	9805      	ldr	r0, [sp, #20]
 800cc20:	f000 fc4e 	bl	800d4c0 <__mcmp>
 800cc24:	900a      	str	r0, [sp, #40]	; 0x28
 800cc26:	9908      	ldr	r1, [sp, #32]
 800cc28:	9804      	ldr	r0, [sp, #16]
 800cc2a:	f000 fa07 	bl	800d03c <_Bfree>
 800cc2e:	9b07      	ldr	r3, [sp, #28]
 800cc30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc32:	3301      	adds	r3, #1
 800cc34:	9308      	str	r3, [sp, #32]
 800cc36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	d109      	bne.n	800cc54 <_dtoa_r+0xacc>
 800cc40:	2c39      	cmp	r4, #57	; 0x39
 800cc42:	d022      	beq.n	800cc8a <_dtoa_r+0xb02>
 800cc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dd01      	ble.n	800cc4e <_dtoa_r+0xac6>
 800cc4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cc4c:	3431      	adds	r4, #49	; 0x31
 800cc4e:	9b07      	ldr	r3, [sp, #28]
 800cc50:	701c      	strb	r4, [r3, #0]
 800cc52:	e76e      	b.n	800cb32 <_dtoa_r+0x9aa>
 800cc54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	db04      	blt.n	800cc64 <_dtoa_r+0xadc>
 800cc5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc60:	4313      	orrs	r3, r2
 800cc62:	d11e      	bne.n	800cca2 <_dtoa_r+0xb1a>
 800cc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	ddf1      	ble.n	800cc4e <_dtoa_r+0xac6>
 800cc6a:	9905      	ldr	r1, [sp, #20]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	9804      	ldr	r0, [sp, #16]
 800cc70:	f000 fbb8 	bl	800d3e4 <__lshift>
 800cc74:	0031      	movs	r1, r6
 800cc76:	9005      	str	r0, [sp, #20]
 800cc78:	f000 fc22 	bl	800d4c0 <__mcmp>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	dc02      	bgt.n	800cc86 <_dtoa_r+0xafe>
 800cc80:	d1e5      	bne.n	800cc4e <_dtoa_r+0xac6>
 800cc82:	07e3      	lsls	r3, r4, #31
 800cc84:	d5e3      	bpl.n	800cc4e <_dtoa_r+0xac6>
 800cc86:	2c39      	cmp	r4, #57	; 0x39
 800cc88:	d1df      	bne.n	800cc4a <_dtoa_r+0xac2>
 800cc8a:	2339      	movs	r3, #57	; 0x39
 800cc8c:	9a07      	ldr	r2, [sp, #28]
 800cc8e:	7013      	strb	r3, [r2, #0]
 800cc90:	9b08      	ldr	r3, [sp, #32]
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	2a39      	cmp	r2, #57	; 0x39
 800cc9a:	d063      	beq.n	800cd64 <_dtoa_r+0xbdc>
 800cc9c:	3201      	adds	r2, #1
 800cc9e:	701a      	strb	r2, [r3, #0]
 800cca0:	e747      	b.n	800cb32 <_dtoa_r+0x9aa>
 800cca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dd03      	ble.n	800ccb0 <_dtoa_r+0xb28>
 800cca8:	2c39      	cmp	r4, #57	; 0x39
 800ccaa:	d0ee      	beq.n	800cc8a <_dtoa_r+0xb02>
 800ccac:	3401      	adds	r4, #1
 800ccae:	e7ce      	b.n	800cc4e <_dtoa_r+0xac6>
 800ccb0:	9b07      	ldr	r3, [sp, #28]
 800ccb2:	9a07      	ldr	r2, [sp, #28]
 800ccb4:	701c      	strb	r4, [r3, #0]
 800ccb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d03e      	beq.n	800cd3a <_dtoa_r+0xbb2>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	220a      	movs	r2, #10
 800ccc0:	9905      	ldr	r1, [sp, #20]
 800ccc2:	9804      	ldr	r0, [sp, #16]
 800ccc4:	f000 f9de 	bl	800d084 <__multadd>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	9005      	str	r0, [sp, #20]
 800cccc:	220a      	movs	r2, #10
 800ccce:	0029      	movs	r1, r5
 800ccd0:	9804      	ldr	r0, [sp, #16]
 800ccd2:	42bd      	cmp	r5, r7
 800ccd4:	d106      	bne.n	800cce4 <_dtoa_r+0xb5c>
 800ccd6:	f000 f9d5 	bl	800d084 <__multadd>
 800ccda:	0005      	movs	r5, r0
 800ccdc:	0007      	movs	r7, r0
 800ccde:	9b08      	ldr	r3, [sp, #32]
 800cce0:	9307      	str	r3, [sp, #28]
 800cce2:	e784      	b.n	800cbee <_dtoa_r+0xa66>
 800cce4:	f000 f9ce 	bl	800d084 <__multadd>
 800cce8:	0039      	movs	r1, r7
 800ccea:	0005      	movs	r5, r0
 800ccec:	2300      	movs	r3, #0
 800ccee:	220a      	movs	r2, #10
 800ccf0:	9804      	ldr	r0, [sp, #16]
 800ccf2:	f000 f9c7 	bl	800d084 <__multadd>
 800ccf6:	0007      	movs	r7, r0
 800ccf8:	e7f1      	b.n	800ccde <_dtoa_r+0xb56>
 800ccfa:	9b07      	ldr	r3, [sp, #28]
 800ccfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccfe:	2500      	movs	r5, #0
 800cd00:	0031      	movs	r1, r6
 800cd02:	9805      	ldr	r0, [sp, #20]
 800cd04:	f7ff f9b1 	bl	800c06a <quorem>
 800cd08:	9b06      	ldr	r3, [sp, #24]
 800cd0a:	3030      	adds	r0, #48	; 0x30
 800cd0c:	5558      	strb	r0, [r3, r5]
 800cd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd10:	3501      	adds	r5, #1
 800cd12:	0004      	movs	r4, r0
 800cd14:	42ab      	cmp	r3, r5
 800cd16:	dd07      	ble.n	800cd28 <_dtoa_r+0xba0>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	220a      	movs	r2, #10
 800cd1c:	9905      	ldr	r1, [sp, #20]
 800cd1e:	9804      	ldr	r0, [sp, #16]
 800cd20:	f000 f9b0 	bl	800d084 <__multadd>
 800cd24:	9005      	str	r0, [sp, #20]
 800cd26:	e7eb      	b.n	800cd00 <_dtoa_r+0xb78>
 800cd28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	2a00      	cmp	r2, #0
 800cd2e:	dd00      	ble.n	800cd32 <_dtoa_r+0xbaa>
 800cd30:	0013      	movs	r3, r2
 800cd32:	2500      	movs	r5, #0
 800cd34:	9a06      	ldr	r2, [sp, #24]
 800cd36:	18d3      	adds	r3, r2, r3
 800cd38:	9308      	str	r3, [sp, #32]
 800cd3a:	9905      	ldr	r1, [sp, #20]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	9804      	ldr	r0, [sp, #16]
 800cd40:	f000 fb50 	bl	800d3e4 <__lshift>
 800cd44:	0031      	movs	r1, r6
 800cd46:	9005      	str	r0, [sp, #20]
 800cd48:	f000 fbba 	bl	800d4c0 <__mcmp>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	dc9f      	bgt.n	800cc90 <_dtoa_r+0xb08>
 800cd50:	d101      	bne.n	800cd56 <_dtoa_r+0xbce>
 800cd52:	07e4      	lsls	r4, r4, #31
 800cd54:	d49c      	bmi.n	800cc90 <_dtoa_r+0xb08>
 800cd56:	9b08      	ldr	r3, [sp, #32]
 800cd58:	9308      	str	r3, [sp, #32]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	781a      	ldrb	r2, [r3, #0]
 800cd5e:	2a30      	cmp	r2, #48	; 0x30
 800cd60:	d0fa      	beq.n	800cd58 <_dtoa_r+0xbd0>
 800cd62:	e6e6      	b.n	800cb32 <_dtoa_r+0x9aa>
 800cd64:	9a06      	ldr	r2, [sp, #24]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d193      	bne.n	800cc92 <_dtoa_r+0xb0a>
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	2331      	movs	r3, #49	; 0x31
 800cd72:	7013      	strb	r3, [r2, #0]
 800cd74:	e6dd      	b.n	800cb32 <_dtoa_r+0x9aa>
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <_dtoa_r+0xc14>)
 800cd78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cd7a:	9306      	str	r3, [sp, #24]
 800cd7c:	4b08      	ldr	r3, [pc, #32]	; (800cda0 <_dtoa_r+0xc18>)
 800cd7e:	2a00      	cmp	r2, #0
 800cd80:	d001      	beq.n	800cd86 <_dtoa_r+0xbfe>
 800cd82:	f7ff fa49 	bl	800c218 <_dtoa_r+0x90>
 800cd86:	f7ff fa49 	bl	800c21c <_dtoa_r+0x94>
 800cd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dcb6      	bgt.n	800ccfe <_dtoa_r+0xb76>
 800cd90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	dd00      	ble.n	800cd98 <_dtoa_r+0xc10>
 800cd96:	e6b6      	b.n	800cb06 <_dtoa_r+0x97e>
 800cd98:	e7b1      	b.n	800ccfe <_dtoa_r+0xb76>
 800cd9a:	46c0      	nop			; (mov r8, r8)
 800cd9c:	0800e664 	.word	0x0800e664
 800cda0:	0800e66c 	.word	0x0800e66c

0800cda4 <_free_r>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	0005      	movs	r5, r0
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	d010      	beq.n	800cdce <_free_r+0x2a>
 800cdac:	1f0c      	subs	r4, r1, #4
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	da00      	bge.n	800cdb6 <_free_r+0x12>
 800cdb4:	18e4      	adds	r4, r4, r3
 800cdb6:	0028      	movs	r0, r5
 800cdb8:	f000 f8ec 	bl	800cf94 <__malloc_lock>
 800cdbc:	4a1d      	ldr	r2, [pc, #116]	; (800ce34 <_free_r+0x90>)
 800cdbe:	6813      	ldr	r3, [r2, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <_free_r+0x2c>
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	6014      	str	r4, [r2, #0]
 800cdc8:	0028      	movs	r0, r5
 800cdca:	f000 f8eb 	bl	800cfa4 <__malloc_unlock>
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	d908      	bls.n	800cde6 <_free_r+0x42>
 800cdd4:	6820      	ldr	r0, [r4, #0]
 800cdd6:	1821      	adds	r1, r4, r0
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	d1f3      	bne.n	800cdc4 <_free_r+0x20>
 800cddc:	6819      	ldr	r1, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	1809      	adds	r1, r1, r0
 800cde2:	6021      	str	r1, [r4, #0]
 800cde4:	e7ee      	b.n	800cdc4 <_free_r+0x20>
 800cde6:	001a      	movs	r2, r3
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <_free_r+0x4e>
 800cdee:	42a3      	cmp	r3, r4
 800cdf0:	d9f9      	bls.n	800cde6 <_free_r+0x42>
 800cdf2:	6811      	ldr	r1, [r2, #0]
 800cdf4:	1850      	adds	r0, r2, r1
 800cdf6:	42a0      	cmp	r0, r4
 800cdf8:	d10b      	bne.n	800ce12 <_free_r+0x6e>
 800cdfa:	6820      	ldr	r0, [r4, #0]
 800cdfc:	1809      	adds	r1, r1, r0
 800cdfe:	1850      	adds	r0, r2, r1
 800ce00:	6011      	str	r1, [r2, #0]
 800ce02:	4283      	cmp	r3, r0
 800ce04:	d1e0      	bne.n	800cdc8 <_free_r+0x24>
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	1841      	adds	r1, r0, r1
 800ce0c:	6011      	str	r1, [r2, #0]
 800ce0e:	6053      	str	r3, [r2, #4]
 800ce10:	e7da      	b.n	800cdc8 <_free_r+0x24>
 800ce12:	42a0      	cmp	r0, r4
 800ce14:	d902      	bls.n	800ce1c <_free_r+0x78>
 800ce16:	230c      	movs	r3, #12
 800ce18:	602b      	str	r3, [r5, #0]
 800ce1a:	e7d5      	b.n	800cdc8 <_free_r+0x24>
 800ce1c:	6820      	ldr	r0, [r4, #0]
 800ce1e:	1821      	adds	r1, r4, r0
 800ce20:	428b      	cmp	r3, r1
 800ce22:	d103      	bne.n	800ce2c <_free_r+0x88>
 800ce24:	6819      	ldr	r1, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	1809      	adds	r1, r1, r0
 800ce2a:	6021      	str	r1, [r4, #0]
 800ce2c:	6063      	str	r3, [r4, #4]
 800ce2e:	6054      	str	r4, [r2, #4]
 800ce30:	e7ca      	b.n	800cdc8 <_free_r+0x24>
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	20000944 	.word	0x20000944

0800ce38 <malloc>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4b03      	ldr	r3, [pc, #12]	; (800ce48 <malloc+0x10>)
 800ce3c:	0001      	movs	r1, r0
 800ce3e:	6818      	ldr	r0, [r3, #0]
 800ce40:	f000 f826 	bl	800ce90 <_malloc_r>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	20000098 	.word	0x20000098

0800ce4c <sbrk_aligned>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4e0f      	ldr	r6, [pc, #60]	; (800ce8c <sbrk_aligned+0x40>)
 800ce50:	000d      	movs	r5, r1
 800ce52:	6831      	ldr	r1, [r6, #0]
 800ce54:	0004      	movs	r4, r0
 800ce56:	2900      	cmp	r1, #0
 800ce58:	d102      	bne.n	800ce60 <sbrk_aligned+0x14>
 800ce5a:	f001 f85b 	bl	800df14 <_sbrk_r>
 800ce5e:	6030      	str	r0, [r6, #0]
 800ce60:	0029      	movs	r1, r5
 800ce62:	0020      	movs	r0, r4
 800ce64:	f001 f856 	bl	800df14 <_sbrk_r>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d00a      	beq.n	800ce82 <sbrk_aligned+0x36>
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	1cc5      	adds	r5, r0, #3
 800ce70:	439d      	bics	r5, r3
 800ce72:	42a8      	cmp	r0, r5
 800ce74:	d007      	beq.n	800ce86 <sbrk_aligned+0x3a>
 800ce76:	1a29      	subs	r1, r5, r0
 800ce78:	0020      	movs	r0, r4
 800ce7a:	f001 f84b 	bl	800df14 <_sbrk_r>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d101      	bne.n	800ce86 <sbrk_aligned+0x3a>
 800ce82:	2501      	movs	r5, #1
 800ce84:	426d      	negs	r5, r5
 800ce86:	0028      	movs	r0, r5
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	46c0      	nop			; (mov r8, r8)
 800ce8c:	20000948 	.word	0x20000948

0800ce90 <_malloc_r>:
 800ce90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce92:	2203      	movs	r2, #3
 800ce94:	1ccb      	adds	r3, r1, #3
 800ce96:	4393      	bics	r3, r2
 800ce98:	3308      	adds	r3, #8
 800ce9a:	0006      	movs	r6, r0
 800ce9c:	001f      	movs	r7, r3
 800ce9e:	2b0c      	cmp	r3, #12
 800cea0:	d238      	bcs.n	800cf14 <_malloc_r+0x84>
 800cea2:	270c      	movs	r7, #12
 800cea4:	42b9      	cmp	r1, r7
 800cea6:	d837      	bhi.n	800cf18 <_malloc_r+0x88>
 800cea8:	0030      	movs	r0, r6
 800ceaa:	f000 f873 	bl	800cf94 <__malloc_lock>
 800ceae:	4b38      	ldr	r3, [pc, #224]	; (800cf90 <_malloc_r+0x100>)
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	001c      	movs	r4, r3
 800ceb6:	2c00      	cmp	r4, #0
 800ceb8:	d133      	bne.n	800cf22 <_malloc_r+0x92>
 800ceba:	0039      	movs	r1, r7
 800cebc:	0030      	movs	r0, r6
 800cebe:	f7ff ffc5 	bl	800ce4c <sbrk_aligned>
 800cec2:	0004      	movs	r4, r0
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d15e      	bne.n	800cf86 <_malloc_r+0xf6>
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	681c      	ldr	r4, [r3, #0]
 800cecc:	0025      	movs	r5, r4
 800cece:	2d00      	cmp	r5, #0
 800ced0:	d14e      	bne.n	800cf70 <_malloc_r+0xe0>
 800ced2:	2c00      	cmp	r4, #0
 800ced4:	d051      	beq.n	800cf7a <_malloc_r+0xea>
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	0029      	movs	r1, r5
 800ceda:	18e3      	adds	r3, r4, r3
 800cedc:	0030      	movs	r0, r6
 800cede:	9301      	str	r3, [sp, #4]
 800cee0:	f001 f818 	bl	800df14 <_sbrk_r>
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	4283      	cmp	r3, r0
 800cee8:	d147      	bne.n	800cf7a <_malloc_r+0xea>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	0030      	movs	r0, r6
 800ceee:	1aff      	subs	r7, r7, r3
 800cef0:	0039      	movs	r1, r7
 800cef2:	f7ff ffab 	bl	800ce4c <sbrk_aligned>
 800cef6:	3001      	adds	r0, #1
 800cef8:	d03f      	beq.n	800cf7a <_malloc_r+0xea>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	19db      	adds	r3, r3, r7
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	9b00      	ldr	r3, [sp, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d040      	beq.n	800cf8a <_malloc_r+0xfa>
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	42a2      	cmp	r2, r4
 800cf0c:	d133      	bne.n	800cf76 <_malloc_r+0xe6>
 800cf0e:	2200      	movs	r2, #0
 800cf10:	605a      	str	r2, [r3, #4]
 800cf12:	e014      	b.n	800cf3e <_malloc_r+0xae>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dac5      	bge.n	800cea4 <_malloc_r+0x14>
 800cf18:	230c      	movs	r3, #12
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	6033      	str	r3, [r6, #0]
 800cf1e:	0028      	movs	r0, r5
 800cf20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf22:	6821      	ldr	r1, [r4, #0]
 800cf24:	1bc9      	subs	r1, r1, r7
 800cf26:	d420      	bmi.n	800cf6a <_malloc_r+0xda>
 800cf28:	290b      	cmp	r1, #11
 800cf2a:	d918      	bls.n	800cf5e <_malloc_r+0xce>
 800cf2c:	19e2      	adds	r2, r4, r7
 800cf2e:	6027      	str	r7, [r4, #0]
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	d112      	bne.n	800cf5a <_malloc_r+0xca>
 800cf34:	9b00      	ldr	r3, [sp, #0]
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	6863      	ldr	r3, [r4, #4]
 800cf3a:	6011      	str	r1, [r2, #0]
 800cf3c:	6053      	str	r3, [r2, #4]
 800cf3e:	0030      	movs	r0, r6
 800cf40:	0025      	movs	r5, r4
 800cf42:	f000 f82f 	bl	800cfa4 <__malloc_unlock>
 800cf46:	2207      	movs	r2, #7
 800cf48:	350b      	adds	r5, #11
 800cf4a:	1d23      	adds	r3, r4, #4
 800cf4c:	4395      	bics	r5, r2
 800cf4e:	1aea      	subs	r2, r5, r3
 800cf50:	429d      	cmp	r5, r3
 800cf52:	d0e4      	beq.n	800cf1e <_malloc_r+0x8e>
 800cf54:	1b5b      	subs	r3, r3, r5
 800cf56:	50a3      	str	r3, [r4, r2]
 800cf58:	e7e1      	b.n	800cf1e <_malloc_r+0x8e>
 800cf5a:	605a      	str	r2, [r3, #4]
 800cf5c:	e7ec      	b.n	800cf38 <_malloc_r+0xa8>
 800cf5e:	6862      	ldr	r2, [r4, #4]
 800cf60:	42a3      	cmp	r3, r4
 800cf62:	d1d5      	bne.n	800cf10 <_malloc_r+0x80>
 800cf64:	9b00      	ldr	r3, [sp, #0]
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	e7e9      	b.n	800cf3e <_malloc_r+0xae>
 800cf6a:	0023      	movs	r3, r4
 800cf6c:	6864      	ldr	r4, [r4, #4]
 800cf6e:	e7a2      	b.n	800ceb6 <_malloc_r+0x26>
 800cf70:	002c      	movs	r4, r5
 800cf72:	686d      	ldr	r5, [r5, #4]
 800cf74:	e7ab      	b.n	800cece <_malloc_r+0x3e>
 800cf76:	0013      	movs	r3, r2
 800cf78:	e7c4      	b.n	800cf04 <_malloc_r+0x74>
 800cf7a:	230c      	movs	r3, #12
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	6033      	str	r3, [r6, #0]
 800cf80:	f000 f810 	bl	800cfa4 <__malloc_unlock>
 800cf84:	e7cb      	b.n	800cf1e <_malloc_r+0x8e>
 800cf86:	6027      	str	r7, [r4, #0]
 800cf88:	e7d9      	b.n	800cf3e <_malloc_r+0xae>
 800cf8a:	605b      	str	r3, [r3, #4]
 800cf8c:	deff      	udf	#255	; 0xff
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	20000944 	.word	0x20000944

0800cf94 <__malloc_lock>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	4802      	ldr	r0, [pc, #8]	; (800cfa0 <__malloc_lock+0xc>)
 800cf98:	f7ff f851 	bl	800c03e <__retarget_lock_acquire_recursive>
 800cf9c:	bd10      	pop	{r4, pc}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	20000940 	.word	0x20000940

0800cfa4 <__malloc_unlock>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	4802      	ldr	r0, [pc, #8]	; (800cfb0 <__malloc_unlock+0xc>)
 800cfa8:	f7ff f84a 	bl	800c040 <__retarget_lock_release_recursive>
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	20000940 	.word	0x20000940

0800cfb4 <_Balloc>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	69c5      	ldr	r5, [r0, #28]
 800cfb8:	0006      	movs	r6, r0
 800cfba:	000c      	movs	r4, r1
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	d10e      	bne.n	800cfde <_Balloc+0x2a>
 800cfc0:	2010      	movs	r0, #16
 800cfc2:	f7ff ff39 	bl	800ce38 <malloc>
 800cfc6:	1e02      	subs	r2, r0, #0
 800cfc8:	61f0      	str	r0, [r6, #28]
 800cfca:	d104      	bne.n	800cfd6 <_Balloc+0x22>
 800cfcc:	216b      	movs	r1, #107	; 0x6b
 800cfce:	4b19      	ldr	r3, [pc, #100]	; (800d034 <_Balloc+0x80>)
 800cfd0:	4819      	ldr	r0, [pc, #100]	; (800d038 <_Balloc+0x84>)
 800cfd2:	f000 ffb1 	bl	800df38 <__assert_func>
 800cfd6:	6045      	str	r5, [r0, #4]
 800cfd8:	6085      	str	r5, [r0, #8]
 800cfda:	6005      	str	r5, [r0, #0]
 800cfdc:	60c5      	str	r5, [r0, #12]
 800cfde:	69f5      	ldr	r5, [r6, #28]
 800cfe0:	68eb      	ldr	r3, [r5, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <_Balloc+0x5a>
 800cfe6:	69f3      	ldr	r3, [r6, #28]
 800cfe8:	00a2      	lsls	r2, r4, #2
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	189b      	adds	r3, r3, r2
 800cfee:	6818      	ldr	r0, [r3, #0]
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d118      	bne.n	800d026 <_Balloc+0x72>
 800cff4:	2101      	movs	r1, #1
 800cff6:	000d      	movs	r5, r1
 800cff8:	40a5      	lsls	r5, r4
 800cffa:	1d6a      	adds	r2, r5, #5
 800cffc:	0030      	movs	r0, r6
 800cffe:	0092      	lsls	r2, r2, #2
 800d000:	f000 ffb8 	bl	800df74 <_calloc_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	d00c      	beq.n	800d022 <_Balloc+0x6e>
 800d008:	6044      	str	r4, [r0, #4]
 800d00a:	6085      	str	r5, [r0, #8]
 800d00c:	e00d      	b.n	800d02a <_Balloc+0x76>
 800d00e:	2221      	movs	r2, #33	; 0x21
 800d010:	2104      	movs	r1, #4
 800d012:	0030      	movs	r0, r6
 800d014:	f000 ffae 	bl	800df74 <_calloc_r>
 800d018:	69f3      	ldr	r3, [r6, #28]
 800d01a:	60e8      	str	r0, [r5, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1e1      	bne.n	800cfe6 <_Balloc+0x32>
 800d022:	2000      	movs	r0, #0
 800d024:	bd70      	pop	{r4, r5, r6, pc}
 800d026:	6802      	ldr	r2, [r0, #0]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	2300      	movs	r3, #0
 800d02c:	6103      	str	r3, [r0, #16]
 800d02e:	60c3      	str	r3, [r0, #12]
 800d030:	e7f8      	b.n	800d024 <_Balloc+0x70>
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	0800e671 	.word	0x0800e671
 800d038:	0800e6f1 	.word	0x0800e6f1

0800d03c <_Bfree>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	69c6      	ldr	r6, [r0, #28]
 800d040:	0005      	movs	r5, r0
 800d042:	000c      	movs	r4, r1
 800d044:	2e00      	cmp	r6, #0
 800d046:	d10e      	bne.n	800d066 <_Bfree+0x2a>
 800d048:	2010      	movs	r0, #16
 800d04a:	f7ff fef5 	bl	800ce38 <malloc>
 800d04e:	1e02      	subs	r2, r0, #0
 800d050:	61e8      	str	r0, [r5, #28]
 800d052:	d104      	bne.n	800d05e <_Bfree+0x22>
 800d054:	218f      	movs	r1, #143	; 0x8f
 800d056:	4b09      	ldr	r3, [pc, #36]	; (800d07c <_Bfree+0x40>)
 800d058:	4809      	ldr	r0, [pc, #36]	; (800d080 <_Bfree+0x44>)
 800d05a:	f000 ff6d 	bl	800df38 <__assert_func>
 800d05e:	6046      	str	r6, [r0, #4]
 800d060:	6086      	str	r6, [r0, #8]
 800d062:	6006      	str	r6, [r0, #0]
 800d064:	60c6      	str	r6, [r0, #12]
 800d066:	2c00      	cmp	r4, #0
 800d068:	d007      	beq.n	800d07a <_Bfree+0x3e>
 800d06a:	69eb      	ldr	r3, [r5, #28]
 800d06c:	6862      	ldr	r2, [r4, #4]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	0092      	lsls	r2, r2, #2
 800d072:	189b      	adds	r3, r3, r2
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	601c      	str	r4, [r3, #0]
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	0800e671 	.word	0x0800e671
 800d080:	0800e6f1 	.word	0x0800e6f1

0800d084 <__multadd>:
 800d084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d086:	000e      	movs	r6, r1
 800d088:	9001      	str	r0, [sp, #4]
 800d08a:	000c      	movs	r4, r1
 800d08c:	001d      	movs	r5, r3
 800d08e:	2000      	movs	r0, #0
 800d090:	690f      	ldr	r7, [r1, #16]
 800d092:	3614      	adds	r6, #20
 800d094:	6833      	ldr	r3, [r6, #0]
 800d096:	3001      	adds	r0, #1
 800d098:	b299      	uxth	r1, r3
 800d09a:	4351      	muls	r1, r2
 800d09c:	0c1b      	lsrs	r3, r3, #16
 800d09e:	4353      	muls	r3, r2
 800d0a0:	1949      	adds	r1, r1, r5
 800d0a2:	0c0d      	lsrs	r5, r1, #16
 800d0a4:	195b      	adds	r3, r3, r5
 800d0a6:	0c1d      	lsrs	r5, r3, #16
 800d0a8:	b289      	uxth	r1, r1
 800d0aa:	041b      	lsls	r3, r3, #16
 800d0ac:	185b      	adds	r3, r3, r1
 800d0ae:	c608      	stmia	r6!, {r3}
 800d0b0:	4287      	cmp	r7, r0
 800d0b2:	dcef      	bgt.n	800d094 <__multadd+0x10>
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	d022      	beq.n	800d0fe <__multadd+0x7a>
 800d0b8:	68a3      	ldr	r3, [r4, #8]
 800d0ba:	42bb      	cmp	r3, r7
 800d0bc:	dc19      	bgt.n	800d0f2 <__multadd+0x6e>
 800d0be:	6861      	ldr	r1, [r4, #4]
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	3101      	adds	r1, #1
 800d0c4:	f7ff ff76 	bl	800cfb4 <_Balloc>
 800d0c8:	1e06      	subs	r6, r0, #0
 800d0ca:	d105      	bne.n	800d0d8 <__multadd+0x54>
 800d0cc:	0032      	movs	r2, r6
 800d0ce:	21ba      	movs	r1, #186	; 0xba
 800d0d0:	4b0c      	ldr	r3, [pc, #48]	; (800d104 <__multadd+0x80>)
 800d0d2:	480d      	ldr	r0, [pc, #52]	; (800d108 <__multadd+0x84>)
 800d0d4:	f000 ff30 	bl	800df38 <__assert_func>
 800d0d8:	0021      	movs	r1, r4
 800d0da:	6922      	ldr	r2, [r4, #16]
 800d0dc:	310c      	adds	r1, #12
 800d0de:	3202      	adds	r2, #2
 800d0e0:	0092      	lsls	r2, r2, #2
 800d0e2:	300c      	adds	r0, #12
 800d0e4:	f7fe ffb8 	bl	800c058 <memcpy>
 800d0e8:	0021      	movs	r1, r4
 800d0ea:	9801      	ldr	r0, [sp, #4]
 800d0ec:	f7ff ffa6 	bl	800d03c <_Bfree>
 800d0f0:	0034      	movs	r4, r6
 800d0f2:	1d3b      	adds	r3, r7, #4
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	18e3      	adds	r3, r4, r3
 800d0f8:	605d      	str	r5, [r3, #4]
 800d0fa:	1c7b      	adds	r3, r7, #1
 800d0fc:	6123      	str	r3, [r4, #16]
 800d0fe:	0020      	movs	r0, r4
 800d100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d102:	46c0      	nop			; (mov r8, r8)
 800d104:	0800e6e0 	.word	0x0800e6e0
 800d108:	0800e6f1 	.word	0x0800e6f1

0800d10c <__hi0bits>:
 800d10c:	0003      	movs	r3, r0
 800d10e:	0c02      	lsrs	r2, r0, #16
 800d110:	2000      	movs	r0, #0
 800d112:	4282      	cmp	r2, r0
 800d114:	d101      	bne.n	800d11a <__hi0bits+0xe>
 800d116:	041b      	lsls	r3, r3, #16
 800d118:	3010      	adds	r0, #16
 800d11a:	0e1a      	lsrs	r2, r3, #24
 800d11c:	d101      	bne.n	800d122 <__hi0bits+0x16>
 800d11e:	3008      	adds	r0, #8
 800d120:	021b      	lsls	r3, r3, #8
 800d122:	0f1a      	lsrs	r2, r3, #28
 800d124:	d101      	bne.n	800d12a <__hi0bits+0x1e>
 800d126:	3004      	adds	r0, #4
 800d128:	011b      	lsls	r3, r3, #4
 800d12a:	0f9a      	lsrs	r2, r3, #30
 800d12c:	d101      	bne.n	800d132 <__hi0bits+0x26>
 800d12e:	3002      	adds	r0, #2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	2b00      	cmp	r3, #0
 800d134:	db03      	blt.n	800d13e <__hi0bits+0x32>
 800d136:	3001      	adds	r0, #1
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	d400      	bmi.n	800d13e <__hi0bits+0x32>
 800d13c:	2020      	movs	r0, #32
 800d13e:	4770      	bx	lr

0800d140 <__lo0bits>:
 800d140:	6803      	ldr	r3, [r0, #0]
 800d142:	0001      	movs	r1, r0
 800d144:	2207      	movs	r2, #7
 800d146:	0018      	movs	r0, r3
 800d148:	4010      	ands	r0, r2
 800d14a:	4213      	tst	r3, r2
 800d14c:	d00d      	beq.n	800d16a <__lo0bits+0x2a>
 800d14e:	3a06      	subs	r2, #6
 800d150:	2000      	movs	r0, #0
 800d152:	4213      	tst	r3, r2
 800d154:	d105      	bne.n	800d162 <__lo0bits+0x22>
 800d156:	3002      	adds	r0, #2
 800d158:	4203      	tst	r3, r0
 800d15a:	d003      	beq.n	800d164 <__lo0bits+0x24>
 800d15c:	40d3      	lsrs	r3, r2
 800d15e:	0010      	movs	r0, r2
 800d160:	600b      	str	r3, [r1, #0]
 800d162:	4770      	bx	lr
 800d164:	089b      	lsrs	r3, r3, #2
 800d166:	600b      	str	r3, [r1, #0]
 800d168:	e7fb      	b.n	800d162 <__lo0bits+0x22>
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	2a00      	cmp	r2, #0
 800d16e:	d101      	bne.n	800d174 <__lo0bits+0x34>
 800d170:	2010      	movs	r0, #16
 800d172:	0c1b      	lsrs	r3, r3, #16
 800d174:	b2da      	uxtb	r2, r3
 800d176:	2a00      	cmp	r2, #0
 800d178:	d101      	bne.n	800d17e <__lo0bits+0x3e>
 800d17a:	3008      	adds	r0, #8
 800d17c:	0a1b      	lsrs	r3, r3, #8
 800d17e:	071a      	lsls	r2, r3, #28
 800d180:	d101      	bne.n	800d186 <__lo0bits+0x46>
 800d182:	3004      	adds	r0, #4
 800d184:	091b      	lsrs	r3, r3, #4
 800d186:	079a      	lsls	r2, r3, #30
 800d188:	d101      	bne.n	800d18e <__lo0bits+0x4e>
 800d18a:	3002      	adds	r0, #2
 800d18c:	089b      	lsrs	r3, r3, #2
 800d18e:	07da      	lsls	r2, r3, #31
 800d190:	d4e9      	bmi.n	800d166 <__lo0bits+0x26>
 800d192:	3001      	adds	r0, #1
 800d194:	085b      	lsrs	r3, r3, #1
 800d196:	d1e6      	bne.n	800d166 <__lo0bits+0x26>
 800d198:	2020      	movs	r0, #32
 800d19a:	e7e2      	b.n	800d162 <__lo0bits+0x22>

0800d19c <__i2b>:
 800d19c:	b510      	push	{r4, lr}
 800d19e:	000c      	movs	r4, r1
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	f7ff ff07 	bl	800cfb4 <_Balloc>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d107      	bne.n	800d1ba <__i2b+0x1e>
 800d1aa:	2146      	movs	r1, #70	; 0x46
 800d1ac:	4c05      	ldr	r4, [pc, #20]	; (800d1c4 <__i2b+0x28>)
 800d1ae:	0002      	movs	r2, r0
 800d1b0:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <__i2b+0x2c>)
 800d1b2:	0020      	movs	r0, r4
 800d1b4:	31ff      	adds	r1, #255	; 0xff
 800d1b6:	f000 febf 	bl	800df38 <__assert_func>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	6144      	str	r4, [r0, #20]
 800d1be:	6103      	str	r3, [r0, #16]
 800d1c0:	bd10      	pop	{r4, pc}
 800d1c2:	46c0      	nop			; (mov r8, r8)
 800d1c4:	0800e6f1 	.word	0x0800e6f1
 800d1c8:	0800e6e0 	.word	0x0800e6e0

0800d1cc <__multiply>:
 800d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ce:	0015      	movs	r5, r2
 800d1d0:	690a      	ldr	r2, [r1, #16]
 800d1d2:	692b      	ldr	r3, [r5, #16]
 800d1d4:	000c      	movs	r4, r1
 800d1d6:	b08b      	sub	sp, #44	; 0x2c
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	da01      	bge.n	800d1e0 <__multiply+0x14>
 800d1dc:	002c      	movs	r4, r5
 800d1de:	000d      	movs	r5, r1
 800d1e0:	6927      	ldr	r7, [r4, #16]
 800d1e2:	692e      	ldr	r6, [r5, #16]
 800d1e4:	6861      	ldr	r1, [r4, #4]
 800d1e6:	19bb      	adds	r3, r7, r6
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	19ba      	adds	r2, r7, r6
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	da00      	bge.n	800d1f4 <__multiply+0x28>
 800d1f2:	3101      	adds	r1, #1
 800d1f4:	f7ff fede 	bl	800cfb4 <_Balloc>
 800d1f8:	9002      	str	r0, [sp, #8]
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d106      	bne.n	800d20c <__multiply+0x40>
 800d1fe:	21b1      	movs	r1, #177	; 0xb1
 800d200:	4b48      	ldr	r3, [pc, #288]	; (800d324 <__multiply+0x158>)
 800d202:	4849      	ldr	r0, [pc, #292]	; (800d328 <__multiply+0x15c>)
 800d204:	9a02      	ldr	r2, [sp, #8]
 800d206:	0049      	lsls	r1, r1, #1
 800d208:	f000 fe96 	bl	800df38 <__assert_func>
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	2200      	movs	r2, #0
 800d210:	3314      	adds	r3, #20
 800d212:	469c      	mov	ip, r3
 800d214:	19bb      	adds	r3, r7, r6
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4463      	add	r3, ip
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	4663      	mov	r3, ip
 800d21e:	9904      	ldr	r1, [sp, #16]
 800d220:	428b      	cmp	r3, r1
 800d222:	d32a      	bcc.n	800d27a <__multiply+0xae>
 800d224:	0023      	movs	r3, r4
 800d226:	00bf      	lsls	r7, r7, #2
 800d228:	3314      	adds	r3, #20
 800d22a:	3514      	adds	r5, #20
 800d22c:	9308      	str	r3, [sp, #32]
 800d22e:	00b6      	lsls	r6, r6, #2
 800d230:	19db      	adds	r3, r3, r7
 800d232:	9305      	str	r3, [sp, #20]
 800d234:	19ab      	adds	r3, r5, r6
 800d236:	9309      	str	r3, [sp, #36]	; 0x24
 800d238:	2304      	movs	r3, #4
 800d23a:	9306      	str	r3, [sp, #24]
 800d23c:	0023      	movs	r3, r4
 800d23e:	9a05      	ldr	r2, [sp, #20]
 800d240:	3315      	adds	r3, #21
 800d242:	9501      	str	r5, [sp, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d305      	bcc.n	800d254 <__multiply+0x88>
 800d248:	1b13      	subs	r3, r2, r4
 800d24a:	3b15      	subs	r3, #21
 800d24c:	089b      	lsrs	r3, r3, #2
 800d24e:	3301      	adds	r3, #1
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	9306      	str	r3, [sp, #24]
 800d254:	9b01      	ldr	r3, [sp, #4]
 800d256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d258:	4293      	cmp	r3, r2
 800d25a:	d310      	bcc.n	800d27e <__multiply+0xb2>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dd05      	ble.n	800d26e <__multiply+0xa2>
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	3b04      	subs	r3, #4
 800d266:	9304      	str	r3, [sp, #16]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d056      	beq.n	800d31c <__multiply+0x150>
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	9a03      	ldr	r2, [sp, #12]
 800d272:	0018      	movs	r0, r3
 800d274:	611a      	str	r2, [r3, #16]
 800d276:	b00b      	add	sp, #44	; 0x2c
 800d278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27a:	c304      	stmia	r3!, {r2}
 800d27c:	e7cf      	b.n	800d21e <__multiply+0x52>
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	b280      	uxth	r0, r0
 800d284:	2800      	cmp	r0, #0
 800d286:	d01e      	beq.n	800d2c6 <__multiply+0xfa>
 800d288:	4667      	mov	r7, ip
 800d28a:	2500      	movs	r5, #0
 800d28c:	9e08      	ldr	r6, [sp, #32]
 800d28e:	ce02      	ldmia	r6!, {r1}
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	9307      	str	r3, [sp, #28]
 800d294:	b28b      	uxth	r3, r1
 800d296:	4343      	muls	r3, r0
 800d298:	001a      	movs	r2, r3
 800d29a:	466b      	mov	r3, sp
 800d29c:	8b9b      	ldrh	r3, [r3, #28]
 800d29e:	18d3      	adds	r3, r2, r3
 800d2a0:	195b      	adds	r3, r3, r5
 800d2a2:	0c0d      	lsrs	r5, r1, #16
 800d2a4:	4345      	muls	r5, r0
 800d2a6:	9a07      	ldr	r2, [sp, #28]
 800d2a8:	0c11      	lsrs	r1, r2, #16
 800d2aa:	1869      	adds	r1, r5, r1
 800d2ac:	0c1a      	lsrs	r2, r3, #16
 800d2ae:	188a      	adds	r2, r1, r2
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	0c15      	lsrs	r5, r2, #16
 800d2b4:	0412      	lsls	r2, r2, #16
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	9b05      	ldr	r3, [sp, #20]
 800d2ba:	c704      	stmia	r7!, {r2}
 800d2bc:	42b3      	cmp	r3, r6
 800d2be:	d8e6      	bhi.n	800d28e <__multiply+0xc2>
 800d2c0:	4663      	mov	r3, ip
 800d2c2:	9a06      	ldr	r2, [sp, #24]
 800d2c4:	509d      	str	r5, [r3, r2]
 800d2c6:	9b01      	ldr	r3, [sp, #4]
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	0c00      	lsrs	r0, r0, #16
 800d2cc:	d020      	beq.n	800d310 <__multiply+0x144>
 800d2ce:	4663      	mov	r3, ip
 800d2d0:	0025      	movs	r5, r4
 800d2d2:	4661      	mov	r1, ip
 800d2d4:	2700      	movs	r7, #0
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3514      	adds	r5, #20
 800d2da:	682a      	ldr	r2, [r5, #0]
 800d2dc:	680e      	ldr	r6, [r1, #0]
 800d2de:	b292      	uxth	r2, r2
 800d2e0:	4342      	muls	r2, r0
 800d2e2:	0c36      	lsrs	r6, r6, #16
 800d2e4:	1992      	adds	r2, r2, r6
 800d2e6:	19d2      	adds	r2, r2, r7
 800d2e8:	0416      	lsls	r6, r2, #16
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	431e      	orrs	r6, r3
 800d2ee:	600e      	str	r6, [r1, #0]
 800d2f0:	cd40      	ldmia	r5!, {r6}
 800d2f2:	684b      	ldr	r3, [r1, #4]
 800d2f4:	0c36      	lsrs	r6, r6, #16
 800d2f6:	4346      	muls	r6, r0
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	0c12      	lsrs	r2, r2, #16
 800d2fc:	18f3      	adds	r3, r6, r3
 800d2fe:	189b      	adds	r3, r3, r2
 800d300:	9a05      	ldr	r2, [sp, #20]
 800d302:	0c1f      	lsrs	r7, r3, #16
 800d304:	3104      	adds	r1, #4
 800d306:	42aa      	cmp	r2, r5
 800d308:	d8e7      	bhi.n	800d2da <__multiply+0x10e>
 800d30a:	4662      	mov	r2, ip
 800d30c:	9906      	ldr	r1, [sp, #24]
 800d30e:	5053      	str	r3, [r2, r1]
 800d310:	9b01      	ldr	r3, [sp, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	9301      	str	r3, [sp, #4]
 800d316:	2304      	movs	r3, #4
 800d318:	449c      	add	ip, r3
 800d31a:	e79b      	b.n	800d254 <__multiply+0x88>
 800d31c:	9b03      	ldr	r3, [sp, #12]
 800d31e:	3b01      	subs	r3, #1
 800d320:	9303      	str	r3, [sp, #12]
 800d322:	e79b      	b.n	800d25c <__multiply+0x90>
 800d324:	0800e6e0 	.word	0x0800e6e0
 800d328:	0800e6f1 	.word	0x0800e6f1

0800d32c <__pow5mult>:
 800d32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d32e:	2303      	movs	r3, #3
 800d330:	0015      	movs	r5, r2
 800d332:	0007      	movs	r7, r0
 800d334:	000e      	movs	r6, r1
 800d336:	401a      	ands	r2, r3
 800d338:	421d      	tst	r5, r3
 800d33a:	d008      	beq.n	800d34e <__pow5mult+0x22>
 800d33c:	4925      	ldr	r1, [pc, #148]	; (800d3d4 <__pow5mult+0xa8>)
 800d33e:	3a01      	subs	r2, #1
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	5852      	ldr	r2, [r2, r1]
 800d344:	2300      	movs	r3, #0
 800d346:	0031      	movs	r1, r6
 800d348:	f7ff fe9c 	bl	800d084 <__multadd>
 800d34c:	0006      	movs	r6, r0
 800d34e:	10ad      	asrs	r5, r5, #2
 800d350:	d03d      	beq.n	800d3ce <__pow5mult+0xa2>
 800d352:	69fc      	ldr	r4, [r7, #28]
 800d354:	2c00      	cmp	r4, #0
 800d356:	d10f      	bne.n	800d378 <__pow5mult+0x4c>
 800d358:	2010      	movs	r0, #16
 800d35a:	f7ff fd6d 	bl	800ce38 <malloc>
 800d35e:	1e02      	subs	r2, r0, #0
 800d360:	61f8      	str	r0, [r7, #28]
 800d362:	d105      	bne.n	800d370 <__pow5mult+0x44>
 800d364:	21b4      	movs	r1, #180	; 0xb4
 800d366:	4b1c      	ldr	r3, [pc, #112]	; (800d3d8 <__pow5mult+0xac>)
 800d368:	481c      	ldr	r0, [pc, #112]	; (800d3dc <__pow5mult+0xb0>)
 800d36a:	31ff      	adds	r1, #255	; 0xff
 800d36c:	f000 fde4 	bl	800df38 <__assert_func>
 800d370:	6044      	str	r4, [r0, #4]
 800d372:	6084      	str	r4, [r0, #8]
 800d374:	6004      	str	r4, [r0, #0]
 800d376:	60c4      	str	r4, [r0, #12]
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	689c      	ldr	r4, [r3, #8]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	2c00      	cmp	r4, #0
 800d380:	d108      	bne.n	800d394 <__pow5mult+0x68>
 800d382:	0038      	movs	r0, r7
 800d384:	4916      	ldr	r1, [pc, #88]	; (800d3e0 <__pow5mult+0xb4>)
 800d386:	f7ff ff09 	bl	800d19c <__i2b>
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	0004      	movs	r4, r0
 800d38e:	6098      	str	r0, [r3, #8]
 800d390:	2300      	movs	r3, #0
 800d392:	6003      	str	r3, [r0, #0]
 800d394:	2301      	movs	r3, #1
 800d396:	421d      	tst	r5, r3
 800d398:	d00a      	beq.n	800d3b0 <__pow5mult+0x84>
 800d39a:	0031      	movs	r1, r6
 800d39c:	0022      	movs	r2, r4
 800d39e:	0038      	movs	r0, r7
 800d3a0:	f7ff ff14 	bl	800d1cc <__multiply>
 800d3a4:	0031      	movs	r1, r6
 800d3a6:	9001      	str	r0, [sp, #4]
 800d3a8:	0038      	movs	r0, r7
 800d3aa:	f7ff fe47 	bl	800d03c <_Bfree>
 800d3ae:	9e01      	ldr	r6, [sp, #4]
 800d3b0:	106d      	asrs	r5, r5, #1
 800d3b2:	d00c      	beq.n	800d3ce <__pow5mult+0xa2>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d107      	bne.n	800d3ca <__pow5mult+0x9e>
 800d3ba:	0022      	movs	r2, r4
 800d3bc:	0021      	movs	r1, r4
 800d3be:	0038      	movs	r0, r7
 800d3c0:	f7ff ff04 	bl	800d1cc <__multiply>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	6020      	str	r0, [r4, #0]
 800d3c8:	6003      	str	r3, [r0, #0]
 800d3ca:	0004      	movs	r4, r0
 800d3cc:	e7e2      	b.n	800d394 <__pow5mult+0x68>
 800d3ce:	0030      	movs	r0, r6
 800d3d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3d2:	46c0      	nop			; (mov r8, r8)
 800d3d4:	0800e840 	.word	0x0800e840
 800d3d8:	0800e671 	.word	0x0800e671
 800d3dc:	0800e6f1 	.word	0x0800e6f1
 800d3e0:	00000271 	.word	0x00000271

0800d3e4 <__lshift>:
 800d3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e6:	000c      	movs	r4, r1
 800d3e8:	0017      	movs	r7, r2
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	1155      	asrs	r5, r2, #5
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	18eb      	adds	r3, r5, r3
 800d3f2:	9302      	str	r3, [sp, #8]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	6849      	ldr	r1, [r1, #4]
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	9004      	str	r0, [sp, #16]
 800d3fe:	9a01      	ldr	r2, [sp, #4]
 800d400:	4293      	cmp	r3, r2
 800d402:	db10      	blt.n	800d426 <__lshift+0x42>
 800d404:	9804      	ldr	r0, [sp, #16]
 800d406:	f7ff fdd5 	bl	800cfb4 <_Balloc>
 800d40a:	2300      	movs	r3, #0
 800d40c:	0002      	movs	r2, r0
 800d40e:	0006      	movs	r6, r0
 800d410:	0019      	movs	r1, r3
 800d412:	3214      	adds	r2, #20
 800d414:	4298      	cmp	r0, r3
 800d416:	d10c      	bne.n	800d432 <__lshift+0x4e>
 800d418:	31df      	adds	r1, #223	; 0xdf
 800d41a:	0032      	movs	r2, r6
 800d41c:	4b26      	ldr	r3, [pc, #152]	; (800d4b8 <__lshift+0xd4>)
 800d41e:	4827      	ldr	r0, [pc, #156]	; (800d4bc <__lshift+0xd8>)
 800d420:	31ff      	adds	r1, #255	; 0xff
 800d422:	f000 fd89 	bl	800df38 <__assert_func>
 800d426:	3101      	adds	r1, #1
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	e7e8      	b.n	800d3fe <__lshift+0x1a>
 800d42c:	0098      	lsls	r0, r3, #2
 800d42e:	5011      	str	r1, [r2, r0]
 800d430:	3301      	adds	r3, #1
 800d432:	42ab      	cmp	r3, r5
 800d434:	dbfa      	blt.n	800d42c <__lshift+0x48>
 800d436:	43eb      	mvns	r3, r5
 800d438:	17db      	asrs	r3, r3, #31
 800d43a:	401d      	ands	r5, r3
 800d43c:	211f      	movs	r1, #31
 800d43e:	0023      	movs	r3, r4
 800d440:	0038      	movs	r0, r7
 800d442:	00ad      	lsls	r5, r5, #2
 800d444:	1955      	adds	r5, r2, r5
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	3314      	adds	r3, #20
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	4008      	ands	r0, r1
 800d44e:	4684      	mov	ip, r0
 800d450:	189a      	adds	r2, r3, r2
 800d452:	420f      	tst	r7, r1
 800d454:	d02a      	beq.n	800d4ac <__lshift+0xc8>
 800d456:	3101      	adds	r1, #1
 800d458:	1a09      	subs	r1, r1, r0
 800d45a:	9105      	str	r1, [sp, #20]
 800d45c:	2100      	movs	r1, #0
 800d45e:	9503      	str	r5, [sp, #12]
 800d460:	4667      	mov	r7, ip
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	40b8      	lsls	r0, r7
 800d466:	4308      	orrs	r0, r1
 800d468:	9903      	ldr	r1, [sp, #12]
 800d46a:	c101      	stmia	r1!, {r0}
 800d46c:	9103      	str	r1, [sp, #12]
 800d46e:	9805      	ldr	r0, [sp, #20]
 800d470:	cb02      	ldmia	r3!, {r1}
 800d472:	40c1      	lsrs	r1, r0
 800d474:	429a      	cmp	r2, r3
 800d476:	d8f3      	bhi.n	800d460 <__lshift+0x7c>
 800d478:	0020      	movs	r0, r4
 800d47a:	3015      	adds	r0, #21
 800d47c:	2304      	movs	r3, #4
 800d47e:	4282      	cmp	r2, r0
 800d480:	d304      	bcc.n	800d48c <__lshift+0xa8>
 800d482:	1b13      	subs	r3, r2, r4
 800d484:	3b15      	subs	r3, #21
 800d486:	089b      	lsrs	r3, r3, #2
 800d488:	3301      	adds	r3, #1
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	50e9      	str	r1, [r5, r3]
 800d48e:	2900      	cmp	r1, #0
 800d490:	d002      	beq.n	800d498 <__lshift+0xb4>
 800d492:	9b02      	ldr	r3, [sp, #8]
 800d494:	3302      	adds	r3, #2
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	9b01      	ldr	r3, [sp, #4]
 800d49a:	9804      	ldr	r0, [sp, #16]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	0021      	movs	r1, r4
 800d4a0:	6133      	str	r3, [r6, #16]
 800d4a2:	f7ff fdcb 	bl	800d03c <_Bfree>
 800d4a6:	0030      	movs	r0, r6
 800d4a8:	b007      	add	sp, #28
 800d4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ac:	cb02      	ldmia	r3!, {r1}
 800d4ae:	c502      	stmia	r5!, {r1}
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d8fb      	bhi.n	800d4ac <__lshift+0xc8>
 800d4b4:	e7f0      	b.n	800d498 <__lshift+0xb4>
 800d4b6:	46c0      	nop			; (mov r8, r8)
 800d4b8:	0800e6e0 	.word	0x0800e6e0
 800d4bc:	0800e6f1 	.word	0x0800e6f1

0800d4c0 <__mcmp>:
 800d4c0:	b530      	push	{r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	6904      	ldr	r4, [r0, #16]
 800d4c6:	0002      	movs	r2, r0
 800d4c8:	1ae0      	subs	r0, r4, r3
 800d4ca:	429c      	cmp	r4, r3
 800d4cc:	d10e      	bne.n	800d4ec <__mcmp+0x2c>
 800d4ce:	3214      	adds	r2, #20
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	3114      	adds	r1, #20
 800d4d4:	0014      	movs	r4, r2
 800d4d6:	18c9      	adds	r1, r1, r3
 800d4d8:	18d2      	adds	r2, r2, r3
 800d4da:	3a04      	subs	r2, #4
 800d4dc:	3904      	subs	r1, #4
 800d4de:	6815      	ldr	r5, [r2, #0]
 800d4e0:	680b      	ldr	r3, [r1, #0]
 800d4e2:	429d      	cmp	r5, r3
 800d4e4:	d003      	beq.n	800d4ee <__mcmp+0x2e>
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	429d      	cmp	r5, r3
 800d4ea:	d303      	bcc.n	800d4f4 <__mcmp+0x34>
 800d4ec:	bd30      	pop	{r4, r5, pc}
 800d4ee:	4294      	cmp	r4, r2
 800d4f0:	d3f3      	bcc.n	800d4da <__mcmp+0x1a>
 800d4f2:	e7fb      	b.n	800d4ec <__mcmp+0x2c>
 800d4f4:	4240      	negs	r0, r0
 800d4f6:	e7f9      	b.n	800d4ec <__mcmp+0x2c>

0800d4f8 <__mdiff>:
 800d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4fa:	000e      	movs	r6, r1
 800d4fc:	0007      	movs	r7, r0
 800d4fe:	0011      	movs	r1, r2
 800d500:	0030      	movs	r0, r6
 800d502:	b087      	sub	sp, #28
 800d504:	0014      	movs	r4, r2
 800d506:	f7ff ffdb 	bl	800d4c0 <__mcmp>
 800d50a:	1e05      	subs	r5, r0, #0
 800d50c:	d110      	bne.n	800d530 <__mdiff+0x38>
 800d50e:	0001      	movs	r1, r0
 800d510:	0038      	movs	r0, r7
 800d512:	f7ff fd4f 	bl	800cfb4 <_Balloc>
 800d516:	1e02      	subs	r2, r0, #0
 800d518:	d104      	bne.n	800d524 <__mdiff+0x2c>
 800d51a:	4b3f      	ldr	r3, [pc, #252]	; (800d618 <__mdiff+0x120>)
 800d51c:	483f      	ldr	r0, [pc, #252]	; (800d61c <__mdiff+0x124>)
 800d51e:	4940      	ldr	r1, [pc, #256]	; (800d620 <__mdiff+0x128>)
 800d520:	f000 fd0a 	bl	800df38 <__assert_func>
 800d524:	2301      	movs	r3, #1
 800d526:	6145      	str	r5, [r0, #20]
 800d528:	6103      	str	r3, [r0, #16]
 800d52a:	0010      	movs	r0, r2
 800d52c:	b007      	add	sp, #28
 800d52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d530:	2301      	movs	r3, #1
 800d532:	9301      	str	r3, [sp, #4]
 800d534:	2800      	cmp	r0, #0
 800d536:	db04      	blt.n	800d542 <__mdiff+0x4a>
 800d538:	0023      	movs	r3, r4
 800d53a:	0034      	movs	r4, r6
 800d53c:	001e      	movs	r6, r3
 800d53e:	2300      	movs	r3, #0
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	0038      	movs	r0, r7
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	f7ff fd35 	bl	800cfb4 <_Balloc>
 800d54a:	1e02      	subs	r2, r0, #0
 800d54c:	d103      	bne.n	800d556 <__mdiff+0x5e>
 800d54e:	4b32      	ldr	r3, [pc, #200]	; (800d618 <__mdiff+0x120>)
 800d550:	4832      	ldr	r0, [pc, #200]	; (800d61c <__mdiff+0x124>)
 800d552:	4934      	ldr	r1, [pc, #208]	; (800d624 <__mdiff+0x12c>)
 800d554:	e7e4      	b.n	800d520 <__mdiff+0x28>
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	2700      	movs	r7, #0
 800d55a:	60c3      	str	r3, [r0, #12]
 800d55c:	6920      	ldr	r0, [r4, #16]
 800d55e:	3414      	adds	r4, #20
 800d560:	0083      	lsls	r3, r0, #2
 800d562:	18e3      	adds	r3, r4, r3
 800d564:	0021      	movs	r1, r4
 800d566:	9401      	str	r4, [sp, #4]
 800d568:	0034      	movs	r4, r6
 800d56a:	9302      	str	r3, [sp, #8]
 800d56c:	6933      	ldr	r3, [r6, #16]
 800d56e:	3414      	adds	r4, #20
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	18e3      	adds	r3, r4, r3
 800d574:	9303      	str	r3, [sp, #12]
 800d576:	0013      	movs	r3, r2
 800d578:	3314      	adds	r3, #20
 800d57a:	469c      	mov	ip, r3
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	9104      	str	r1, [sp, #16]
 800d580:	9b04      	ldr	r3, [sp, #16]
 800d582:	cc02      	ldmia	r4!, {r1}
 800d584:	cb20      	ldmia	r3!, {r5}
 800d586:	9304      	str	r3, [sp, #16]
 800d588:	b2ab      	uxth	r3, r5
 800d58a:	19df      	adds	r7, r3, r7
 800d58c:	b28b      	uxth	r3, r1
 800d58e:	1afb      	subs	r3, r7, r3
 800d590:	0c09      	lsrs	r1, r1, #16
 800d592:	0c2d      	lsrs	r5, r5, #16
 800d594:	1a6d      	subs	r5, r5, r1
 800d596:	1419      	asrs	r1, r3, #16
 800d598:	1869      	adds	r1, r5, r1
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	140f      	asrs	r7, r1, #16
 800d59e:	0409      	lsls	r1, r1, #16
 800d5a0:	4319      	orrs	r1, r3
 800d5a2:	4663      	mov	r3, ip
 800d5a4:	c302      	stmia	r3!, {r1}
 800d5a6:	469c      	mov	ip, r3
 800d5a8:	9b03      	ldr	r3, [sp, #12]
 800d5aa:	42a3      	cmp	r3, r4
 800d5ac:	d8e8      	bhi.n	800d580 <__mdiff+0x88>
 800d5ae:	0031      	movs	r1, r6
 800d5b0:	9c03      	ldr	r4, [sp, #12]
 800d5b2:	3115      	adds	r1, #21
 800d5b4:	2304      	movs	r3, #4
 800d5b6:	428c      	cmp	r4, r1
 800d5b8:	d304      	bcc.n	800d5c4 <__mdiff+0xcc>
 800d5ba:	1ba3      	subs	r3, r4, r6
 800d5bc:	3b15      	subs	r3, #21
 800d5be:	089b      	lsrs	r3, r3, #2
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	9901      	ldr	r1, [sp, #4]
 800d5c6:	18cd      	adds	r5, r1, r3
 800d5c8:	9905      	ldr	r1, [sp, #20]
 800d5ca:	002e      	movs	r6, r5
 800d5cc:	18cb      	adds	r3, r1, r3
 800d5ce:	469c      	mov	ip, r3
 800d5d0:	9902      	ldr	r1, [sp, #8]
 800d5d2:	428e      	cmp	r6, r1
 800d5d4:	d310      	bcc.n	800d5f8 <__mdiff+0x100>
 800d5d6:	9e02      	ldr	r6, [sp, #8]
 800d5d8:	1ee9      	subs	r1, r5, #3
 800d5da:	2400      	movs	r4, #0
 800d5dc:	428e      	cmp	r6, r1
 800d5de:	d304      	bcc.n	800d5ea <__mdiff+0xf2>
 800d5e0:	0031      	movs	r1, r6
 800d5e2:	3103      	adds	r1, #3
 800d5e4:	1b49      	subs	r1, r1, r5
 800d5e6:	0889      	lsrs	r1, r1, #2
 800d5e8:	008c      	lsls	r4, r1, #2
 800d5ea:	191b      	adds	r3, r3, r4
 800d5ec:	3b04      	subs	r3, #4
 800d5ee:	6819      	ldr	r1, [r3, #0]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d00f      	beq.n	800d614 <__mdiff+0x11c>
 800d5f4:	6110      	str	r0, [r2, #16]
 800d5f6:	e798      	b.n	800d52a <__mdiff+0x32>
 800d5f8:	ce02      	ldmia	r6!, {r1}
 800d5fa:	b28c      	uxth	r4, r1
 800d5fc:	19e4      	adds	r4, r4, r7
 800d5fe:	0c0f      	lsrs	r7, r1, #16
 800d600:	1421      	asrs	r1, r4, #16
 800d602:	1879      	adds	r1, r7, r1
 800d604:	b2a4      	uxth	r4, r4
 800d606:	140f      	asrs	r7, r1, #16
 800d608:	0409      	lsls	r1, r1, #16
 800d60a:	4321      	orrs	r1, r4
 800d60c:	4664      	mov	r4, ip
 800d60e:	c402      	stmia	r4!, {r1}
 800d610:	46a4      	mov	ip, r4
 800d612:	e7dd      	b.n	800d5d0 <__mdiff+0xd8>
 800d614:	3801      	subs	r0, #1
 800d616:	e7e9      	b.n	800d5ec <__mdiff+0xf4>
 800d618:	0800e6e0 	.word	0x0800e6e0
 800d61c:	0800e6f1 	.word	0x0800e6f1
 800d620:	00000237 	.word	0x00000237
 800d624:	00000245 	.word	0x00000245

0800d628 <__d2b>:
 800d628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d62a:	2101      	movs	r1, #1
 800d62c:	0014      	movs	r4, r2
 800d62e:	001d      	movs	r5, r3
 800d630:	9f08      	ldr	r7, [sp, #32]
 800d632:	f7ff fcbf 	bl	800cfb4 <_Balloc>
 800d636:	1e06      	subs	r6, r0, #0
 800d638:	d105      	bne.n	800d646 <__d2b+0x1e>
 800d63a:	0032      	movs	r2, r6
 800d63c:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <__d2b+0xa8>)
 800d63e:	4825      	ldr	r0, [pc, #148]	; (800d6d4 <__d2b+0xac>)
 800d640:	4925      	ldr	r1, [pc, #148]	; (800d6d8 <__d2b+0xb0>)
 800d642:	f000 fc79 	bl	800df38 <__assert_func>
 800d646:	032b      	lsls	r3, r5, #12
 800d648:	006d      	lsls	r5, r5, #1
 800d64a:	0b1b      	lsrs	r3, r3, #12
 800d64c:	0d6d      	lsrs	r5, r5, #21
 800d64e:	d125      	bne.n	800d69c <__d2b+0x74>
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	2c00      	cmp	r4, #0
 800d654:	d028      	beq.n	800d6a8 <__d2b+0x80>
 800d656:	4668      	mov	r0, sp
 800d658:	9400      	str	r4, [sp, #0]
 800d65a:	f7ff fd71 	bl	800d140 <__lo0bits>
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	9900      	ldr	r1, [sp, #0]
 800d662:	2800      	cmp	r0, #0
 800d664:	d01e      	beq.n	800d6a4 <__d2b+0x7c>
 800d666:	2220      	movs	r2, #32
 800d668:	001c      	movs	r4, r3
 800d66a:	1a12      	subs	r2, r2, r0
 800d66c:	4094      	lsls	r4, r2
 800d66e:	0022      	movs	r2, r4
 800d670:	40c3      	lsrs	r3, r0
 800d672:	430a      	orrs	r2, r1
 800d674:	6172      	str	r2, [r6, #20]
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	9c01      	ldr	r4, [sp, #4]
 800d67a:	61b4      	str	r4, [r6, #24]
 800d67c:	1e63      	subs	r3, r4, #1
 800d67e:	419c      	sbcs	r4, r3
 800d680:	3401      	adds	r4, #1
 800d682:	6134      	str	r4, [r6, #16]
 800d684:	2d00      	cmp	r5, #0
 800d686:	d017      	beq.n	800d6b8 <__d2b+0x90>
 800d688:	2435      	movs	r4, #53	; 0x35
 800d68a:	4b14      	ldr	r3, [pc, #80]	; (800d6dc <__d2b+0xb4>)
 800d68c:	18ed      	adds	r5, r5, r3
 800d68e:	182d      	adds	r5, r5, r0
 800d690:	603d      	str	r5, [r7, #0]
 800d692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d694:	1a24      	subs	r4, r4, r0
 800d696:	601c      	str	r4, [r3, #0]
 800d698:	0030      	movs	r0, r6
 800d69a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d69c:	2280      	movs	r2, #128	; 0x80
 800d69e:	0352      	lsls	r2, r2, #13
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	e7d5      	b.n	800d650 <__d2b+0x28>
 800d6a4:	6171      	str	r1, [r6, #20]
 800d6a6:	e7e7      	b.n	800d678 <__d2b+0x50>
 800d6a8:	a801      	add	r0, sp, #4
 800d6aa:	f7ff fd49 	bl	800d140 <__lo0bits>
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	2401      	movs	r4, #1
 800d6b2:	6173      	str	r3, [r6, #20]
 800d6b4:	3020      	adds	r0, #32
 800d6b6:	e7e4      	b.n	800d682 <__d2b+0x5a>
 800d6b8:	4b09      	ldr	r3, [pc, #36]	; (800d6e0 <__d2b+0xb8>)
 800d6ba:	18c0      	adds	r0, r0, r3
 800d6bc:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <__d2b+0xbc>)
 800d6be:	6038      	str	r0, [r7, #0]
 800d6c0:	18e3      	adds	r3, r4, r3
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	18f3      	adds	r3, r6, r3
 800d6c6:	6958      	ldr	r0, [r3, #20]
 800d6c8:	f7ff fd20 	bl	800d10c <__hi0bits>
 800d6cc:	0164      	lsls	r4, r4, #5
 800d6ce:	e7e0      	b.n	800d692 <__d2b+0x6a>
 800d6d0:	0800e6e0 	.word	0x0800e6e0
 800d6d4:	0800e6f1 	.word	0x0800e6f1
 800d6d8:	0000030f 	.word	0x0000030f
 800d6dc:	fffffbcd 	.word	0xfffffbcd
 800d6e0:	fffffbce 	.word	0xfffffbce
 800d6e4:	3fffffff 	.word	0x3fffffff

0800d6e8 <__ssputs_r>:
 800d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	9203      	str	r2, [sp, #12]
 800d6f0:	688e      	ldr	r6, [r1, #8]
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	0007      	movs	r7, r0
 800d6f6:	000c      	movs	r4, r1
 800d6f8:	680b      	ldr	r3, [r1, #0]
 800d6fa:	4296      	cmp	r6, r2
 800d6fc:	d831      	bhi.n	800d762 <__ssputs_r+0x7a>
 800d6fe:	898a      	ldrh	r2, [r1, #12]
 800d700:	2190      	movs	r1, #144	; 0x90
 800d702:	00c9      	lsls	r1, r1, #3
 800d704:	420a      	tst	r2, r1
 800d706:	d029      	beq.n	800d75c <__ssputs_r+0x74>
 800d708:	2003      	movs	r0, #3
 800d70a:	6921      	ldr	r1, [r4, #16]
 800d70c:	1a5b      	subs	r3, r3, r1
 800d70e:	9302      	str	r3, [sp, #8]
 800d710:	6963      	ldr	r3, [r4, #20]
 800d712:	4343      	muls	r3, r0
 800d714:	0fdd      	lsrs	r5, r3, #31
 800d716:	18ed      	adds	r5, r5, r3
 800d718:	9b01      	ldr	r3, [sp, #4]
 800d71a:	9802      	ldr	r0, [sp, #8]
 800d71c:	3301      	adds	r3, #1
 800d71e:	181b      	adds	r3, r3, r0
 800d720:	106d      	asrs	r5, r5, #1
 800d722:	42ab      	cmp	r3, r5
 800d724:	d900      	bls.n	800d728 <__ssputs_r+0x40>
 800d726:	001d      	movs	r5, r3
 800d728:	0552      	lsls	r2, r2, #21
 800d72a:	d529      	bpl.n	800d780 <__ssputs_r+0x98>
 800d72c:	0029      	movs	r1, r5
 800d72e:	0038      	movs	r0, r7
 800d730:	f7ff fbae 	bl	800ce90 <_malloc_r>
 800d734:	1e06      	subs	r6, r0, #0
 800d736:	d02d      	beq.n	800d794 <__ssputs_r+0xac>
 800d738:	9a02      	ldr	r2, [sp, #8]
 800d73a:	6921      	ldr	r1, [r4, #16]
 800d73c:	f7fe fc8c 	bl	800c058 <memcpy>
 800d740:	89a2      	ldrh	r2, [r4, #12]
 800d742:	4b19      	ldr	r3, [pc, #100]	; (800d7a8 <__ssputs_r+0xc0>)
 800d744:	401a      	ands	r2, r3
 800d746:	2380      	movs	r3, #128	; 0x80
 800d748:	4313      	orrs	r3, r2
 800d74a:	81a3      	strh	r3, [r4, #12]
 800d74c:	9b02      	ldr	r3, [sp, #8]
 800d74e:	6126      	str	r6, [r4, #16]
 800d750:	18f6      	adds	r6, r6, r3
 800d752:	6026      	str	r6, [r4, #0]
 800d754:	6165      	str	r5, [r4, #20]
 800d756:	9e01      	ldr	r6, [sp, #4]
 800d758:	1aed      	subs	r5, r5, r3
 800d75a:	60a5      	str	r5, [r4, #8]
 800d75c:	9b01      	ldr	r3, [sp, #4]
 800d75e:	429e      	cmp	r6, r3
 800d760:	d900      	bls.n	800d764 <__ssputs_r+0x7c>
 800d762:	9e01      	ldr	r6, [sp, #4]
 800d764:	0032      	movs	r2, r6
 800d766:	9903      	ldr	r1, [sp, #12]
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	f000 fbbf 	bl	800deec <memmove>
 800d76e:	2000      	movs	r0, #0
 800d770:	68a3      	ldr	r3, [r4, #8]
 800d772:	1b9b      	subs	r3, r3, r6
 800d774:	60a3      	str	r3, [r4, #8]
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	199b      	adds	r3, r3, r6
 800d77a:	6023      	str	r3, [r4, #0]
 800d77c:	b005      	add	sp, #20
 800d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d780:	002a      	movs	r2, r5
 800d782:	0038      	movs	r0, r7
 800d784:	f000 fc35 	bl	800dff2 <_realloc_r>
 800d788:	1e06      	subs	r6, r0, #0
 800d78a:	d1df      	bne.n	800d74c <__ssputs_r+0x64>
 800d78c:	0038      	movs	r0, r7
 800d78e:	6921      	ldr	r1, [r4, #16]
 800d790:	f7ff fb08 	bl	800cda4 <_free_r>
 800d794:	230c      	movs	r3, #12
 800d796:	2001      	movs	r0, #1
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	89a2      	ldrh	r2, [r4, #12]
 800d79c:	3334      	adds	r3, #52	; 0x34
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	81a3      	strh	r3, [r4, #12]
 800d7a2:	4240      	negs	r0, r0
 800d7a4:	e7ea      	b.n	800d77c <__ssputs_r+0x94>
 800d7a6:	46c0      	nop			; (mov r8, r8)
 800d7a8:	fffffb7f 	.word	0xfffffb7f

0800d7ac <_svfiprintf_r>:
 800d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ae:	b0a1      	sub	sp, #132	; 0x84
 800d7b0:	9003      	str	r0, [sp, #12]
 800d7b2:	001d      	movs	r5, r3
 800d7b4:	898b      	ldrh	r3, [r1, #12]
 800d7b6:	000f      	movs	r7, r1
 800d7b8:	0016      	movs	r6, r2
 800d7ba:	061b      	lsls	r3, r3, #24
 800d7bc:	d511      	bpl.n	800d7e2 <_svfiprintf_r+0x36>
 800d7be:	690b      	ldr	r3, [r1, #16]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10e      	bne.n	800d7e2 <_svfiprintf_r+0x36>
 800d7c4:	2140      	movs	r1, #64	; 0x40
 800d7c6:	f7ff fb63 	bl	800ce90 <_malloc_r>
 800d7ca:	6038      	str	r0, [r7, #0]
 800d7cc:	6138      	str	r0, [r7, #16]
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d105      	bne.n	800d7de <_svfiprintf_r+0x32>
 800d7d2:	230c      	movs	r3, #12
 800d7d4:	9a03      	ldr	r2, [sp, #12]
 800d7d6:	3801      	subs	r0, #1
 800d7d8:	6013      	str	r3, [r2, #0]
 800d7da:	b021      	add	sp, #132	; 0x84
 800d7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7de:	2340      	movs	r3, #64	; 0x40
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	ac08      	add	r4, sp, #32
 800d7e6:	6163      	str	r3, [r4, #20]
 800d7e8:	3320      	adds	r3, #32
 800d7ea:	7663      	strb	r3, [r4, #25]
 800d7ec:	3310      	adds	r3, #16
 800d7ee:	76a3      	strb	r3, [r4, #26]
 800d7f0:	9507      	str	r5, [sp, #28]
 800d7f2:	0035      	movs	r5, r6
 800d7f4:	782b      	ldrb	r3, [r5, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <_svfiprintf_r+0x52>
 800d7fa:	2b25      	cmp	r3, #37	; 0x25
 800d7fc:	d148      	bne.n	800d890 <_svfiprintf_r+0xe4>
 800d7fe:	1bab      	subs	r3, r5, r6
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	42b5      	cmp	r5, r6
 800d804:	d00b      	beq.n	800d81e <_svfiprintf_r+0x72>
 800d806:	0032      	movs	r2, r6
 800d808:	0039      	movs	r1, r7
 800d80a:	9803      	ldr	r0, [sp, #12]
 800d80c:	f7ff ff6c 	bl	800d6e8 <__ssputs_r>
 800d810:	3001      	adds	r0, #1
 800d812:	d100      	bne.n	800d816 <_svfiprintf_r+0x6a>
 800d814:	e0af      	b.n	800d976 <_svfiprintf_r+0x1ca>
 800d816:	6963      	ldr	r3, [r4, #20]
 800d818:	9a05      	ldr	r2, [sp, #20]
 800d81a:	189b      	adds	r3, r3, r2
 800d81c:	6163      	str	r3, [r4, #20]
 800d81e:	782b      	ldrb	r3, [r5, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d100      	bne.n	800d826 <_svfiprintf_r+0x7a>
 800d824:	e0a7      	b.n	800d976 <_svfiprintf_r+0x1ca>
 800d826:	2201      	movs	r2, #1
 800d828:	2300      	movs	r3, #0
 800d82a:	4252      	negs	r2, r2
 800d82c:	6062      	str	r2, [r4, #4]
 800d82e:	a904      	add	r1, sp, #16
 800d830:	3254      	adds	r2, #84	; 0x54
 800d832:	1852      	adds	r2, r2, r1
 800d834:	1c6e      	adds	r6, r5, #1
 800d836:	6023      	str	r3, [r4, #0]
 800d838:	60e3      	str	r3, [r4, #12]
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	7013      	strb	r3, [r2, #0]
 800d83e:	65a3      	str	r3, [r4, #88]	; 0x58
 800d840:	4b55      	ldr	r3, [pc, #340]	; (800d998 <_svfiprintf_r+0x1ec>)
 800d842:	2205      	movs	r2, #5
 800d844:	0018      	movs	r0, r3
 800d846:	7831      	ldrb	r1, [r6, #0]
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	f7fe fbfa 	bl	800c042 <memchr>
 800d84e:	1c75      	adds	r5, r6, #1
 800d850:	2800      	cmp	r0, #0
 800d852:	d11f      	bne.n	800d894 <_svfiprintf_r+0xe8>
 800d854:	6822      	ldr	r2, [r4, #0]
 800d856:	06d3      	lsls	r3, r2, #27
 800d858:	d504      	bpl.n	800d864 <_svfiprintf_r+0xb8>
 800d85a:	2353      	movs	r3, #83	; 0x53
 800d85c:	a904      	add	r1, sp, #16
 800d85e:	185b      	adds	r3, r3, r1
 800d860:	2120      	movs	r1, #32
 800d862:	7019      	strb	r1, [r3, #0]
 800d864:	0713      	lsls	r3, r2, #28
 800d866:	d504      	bpl.n	800d872 <_svfiprintf_r+0xc6>
 800d868:	2353      	movs	r3, #83	; 0x53
 800d86a:	a904      	add	r1, sp, #16
 800d86c:	185b      	adds	r3, r3, r1
 800d86e:	212b      	movs	r1, #43	; 0x2b
 800d870:	7019      	strb	r1, [r3, #0]
 800d872:	7833      	ldrb	r3, [r6, #0]
 800d874:	2b2a      	cmp	r3, #42	; 0x2a
 800d876:	d016      	beq.n	800d8a6 <_svfiprintf_r+0xfa>
 800d878:	0035      	movs	r5, r6
 800d87a:	2100      	movs	r1, #0
 800d87c:	200a      	movs	r0, #10
 800d87e:	68e3      	ldr	r3, [r4, #12]
 800d880:	782a      	ldrb	r2, [r5, #0]
 800d882:	1c6e      	adds	r6, r5, #1
 800d884:	3a30      	subs	r2, #48	; 0x30
 800d886:	2a09      	cmp	r2, #9
 800d888:	d94e      	bls.n	800d928 <_svfiprintf_r+0x17c>
 800d88a:	2900      	cmp	r1, #0
 800d88c:	d111      	bne.n	800d8b2 <_svfiprintf_r+0x106>
 800d88e:	e017      	b.n	800d8c0 <_svfiprintf_r+0x114>
 800d890:	3501      	adds	r5, #1
 800d892:	e7af      	b.n	800d7f4 <_svfiprintf_r+0x48>
 800d894:	9b05      	ldr	r3, [sp, #20]
 800d896:	6822      	ldr	r2, [r4, #0]
 800d898:	1ac0      	subs	r0, r0, r3
 800d89a:	2301      	movs	r3, #1
 800d89c:	4083      	lsls	r3, r0
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	002e      	movs	r6, r5
 800d8a2:	6023      	str	r3, [r4, #0]
 800d8a4:	e7cc      	b.n	800d840 <_svfiprintf_r+0x94>
 800d8a6:	9b07      	ldr	r3, [sp, #28]
 800d8a8:	1d19      	adds	r1, r3, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	9107      	str	r1, [sp, #28]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	db01      	blt.n	800d8b6 <_svfiprintf_r+0x10a>
 800d8b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8b4:	e004      	b.n	800d8c0 <_svfiprintf_r+0x114>
 800d8b6:	425b      	negs	r3, r3
 800d8b8:	60e3      	str	r3, [r4, #12]
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	782b      	ldrb	r3, [r5, #0]
 800d8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c4:	d10a      	bne.n	800d8dc <_svfiprintf_r+0x130>
 800d8c6:	786b      	ldrb	r3, [r5, #1]
 800d8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ca:	d135      	bne.n	800d938 <_svfiprintf_r+0x18c>
 800d8cc:	9b07      	ldr	r3, [sp, #28]
 800d8ce:	3502      	adds	r5, #2
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	9207      	str	r2, [sp, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	db2b      	blt.n	800d932 <_svfiprintf_r+0x186>
 800d8da:	9309      	str	r3, [sp, #36]	; 0x24
 800d8dc:	4e2f      	ldr	r6, [pc, #188]	; (800d99c <_svfiprintf_r+0x1f0>)
 800d8de:	2203      	movs	r2, #3
 800d8e0:	0030      	movs	r0, r6
 800d8e2:	7829      	ldrb	r1, [r5, #0]
 800d8e4:	f7fe fbad 	bl	800c042 <memchr>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d006      	beq.n	800d8fa <_svfiprintf_r+0x14e>
 800d8ec:	2340      	movs	r3, #64	; 0x40
 800d8ee:	1b80      	subs	r0, r0, r6
 800d8f0:	4083      	lsls	r3, r0
 800d8f2:	6822      	ldr	r2, [r4, #0]
 800d8f4:	3501      	adds	r5, #1
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	7829      	ldrb	r1, [r5, #0]
 800d8fc:	2206      	movs	r2, #6
 800d8fe:	4828      	ldr	r0, [pc, #160]	; (800d9a0 <_svfiprintf_r+0x1f4>)
 800d900:	1c6e      	adds	r6, r5, #1
 800d902:	7621      	strb	r1, [r4, #24]
 800d904:	f7fe fb9d 	bl	800c042 <memchr>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d03c      	beq.n	800d986 <_svfiprintf_r+0x1da>
 800d90c:	4b25      	ldr	r3, [pc, #148]	; (800d9a4 <_svfiprintf_r+0x1f8>)
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d125      	bne.n	800d95e <_svfiprintf_r+0x1b2>
 800d912:	2207      	movs	r2, #7
 800d914:	9b07      	ldr	r3, [sp, #28]
 800d916:	3307      	adds	r3, #7
 800d918:	4393      	bics	r3, r2
 800d91a:	3308      	adds	r3, #8
 800d91c:	9307      	str	r3, [sp, #28]
 800d91e:	6963      	ldr	r3, [r4, #20]
 800d920:	9a04      	ldr	r2, [sp, #16]
 800d922:	189b      	adds	r3, r3, r2
 800d924:	6163      	str	r3, [r4, #20]
 800d926:	e764      	b.n	800d7f2 <_svfiprintf_r+0x46>
 800d928:	4343      	muls	r3, r0
 800d92a:	0035      	movs	r5, r6
 800d92c:	2101      	movs	r1, #1
 800d92e:	189b      	adds	r3, r3, r2
 800d930:	e7a6      	b.n	800d880 <_svfiprintf_r+0xd4>
 800d932:	2301      	movs	r3, #1
 800d934:	425b      	negs	r3, r3
 800d936:	e7d0      	b.n	800d8da <_svfiprintf_r+0x12e>
 800d938:	2300      	movs	r3, #0
 800d93a:	200a      	movs	r0, #10
 800d93c:	001a      	movs	r2, r3
 800d93e:	3501      	adds	r5, #1
 800d940:	6063      	str	r3, [r4, #4]
 800d942:	7829      	ldrb	r1, [r5, #0]
 800d944:	1c6e      	adds	r6, r5, #1
 800d946:	3930      	subs	r1, #48	; 0x30
 800d948:	2909      	cmp	r1, #9
 800d94a:	d903      	bls.n	800d954 <_svfiprintf_r+0x1a8>
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0c5      	beq.n	800d8dc <_svfiprintf_r+0x130>
 800d950:	9209      	str	r2, [sp, #36]	; 0x24
 800d952:	e7c3      	b.n	800d8dc <_svfiprintf_r+0x130>
 800d954:	4342      	muls	r2, r0
 800d956:	0035      	movs	r5, r6
 800d958:	2301      	movs	r3, #1
 800d95a:	1852      	adds	r2, r2, r1
 800d95c:	e7f1      	b.n	800d942 <_svfiprintf_r+0x196>
 800d95e:	aa07      	add	r2, sp, #28
 800d960:	9200      	str	r2, [sp, #0]
 800d962:	0021      	movs	r1, r4
 800d964:	003a      	movs	r2, r7
 800d966:	4b10      	ldr	r3, [pc, #64]	; (800d9a8 <_svfiprintf_r+0x1fc>)
 800d968:	9803      	ldr	r0, [sp, #12]
 800d96a:	f7fd fdb9 	bl	800b4e0 <_printf_float>
 800d96e:	9004      	str	r0, [sp, #16]
 800d970:	9b04      	ldr	r3, [sp, #16]
 800d972:	3301      	adds	r3, #1
 800d974:	d1d3      	bne.n	800d91e <_svfiprintf_r+0x172>
 800d976:	89bb      	ldrh	r3, [r7, #12]
 800d978:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d97a:	065b      	lsls	r3, r3, #25
 800d97c:	d400      	bmi.n	800d980 <_svfiprintf_r+0x1d4>
 800d97e:	e72c      	b.n	800d7da <_svfiprintf_r+0x2e>
 800d980:	2001      	movs	r0, #1
 800d982:	4240      	negs	r0, r0
 800d984:	e729      	b.n	800d7da <_svfiprintf_r+0x2e>
 800d986:	aa07      	add	r2, sp, #28
 800d988:	9200      	str	r2, [sp, #0]
 800d98a:	0021      	movs	r1, r4
 800d98c:	003a      	movs	r2, r7
 800d98e:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <_svfiprintf_r+0x1fc>)
 800d990:	9803      	ldr	r0, [sp, #12]
 800d992:	f7fe f86b 	bl	800ba6c <_printf_i>
 800d996:	e7ea      	b.n	800d96e <_svfiprintf_r+0x1c2>
 800d998:	0800e84c 	.word	0x0800e84c
 800d99c:	0800e852 	.word	0x0800e852
 800d9a0:	0800e856 	.word	0x0800e856
 800d9a4:	0800b4e1 	.word	0x0800b4e1
 800d9a8:	0800d6e9 	.word	0x0800d6e9

0800d9ac <__sfputc_r>:
 800d9ac:	6893      	ldr	r3, [r2, #8]
 800d9ae:	b510      	push	{r4, lr}
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	6093      	str	r3, [r2, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	da04      	bge.n	800d9c2 <__sfputc_r+0x16>
 800d9b8:	6994      	ldr	r4, [r2, #24]
 800d9ba:	42a3      	cmp	r3, r4
 800d9bc:	db07      	blt.n	800d9ce <__sfputc_r+0x22>
 800d9be:	290a      	cmp	r1, #10
 800d9c0:	d005      	beq.n	800d9ce <__sfputc_r+0x22>
 800d9c2:	6813      	ldr	r3, [r2, #0]
 800d9c4:	1c58      	adds	r0, r3, #1
 800d9c6:	6010      	str	r0, [r2, #0]
 800d9c8:	7019      	strb	r1, [r3, #0]
 800d9ca:	0008      	movs	r0, r1
 800d9cc:	bd10      	pop	{r4, pc}
 800d9ce:	f000 f9e6 	bl	800dd9e <__swbuf_r>
 800d9d2:	0001      	movs	r1, r0
 800d9d4:	e7f9      	b.n	800d9ca <__sfputc_r+0x1e>

0800d9d6 <__sfputs_r>:
 800d9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d8:	0006      	movs	r6, r0
 800d9da:	000f      	movs	r7, r1
 800d9dc:	0014      	movs	r4, r2
 800d9de:	18d5      	adds	r5, r2, r3
 800d9e0:	42ac      	cmp	r4, r5
 800d9e2:	d101      	bne.n	800d9e8 <__sfputs_r+0x12>
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	e007      	b.n	800d9f8 <__sfputs_r+0x22>
 800d9e8:	7821      	ldrb	r1, [r4, #0]
 800d9ea:	003a      	movs	r2, r7
 800d9ec:	0030      	movs	r0, r6
 800d9ee:	f7ff ffdd 	bl	800d9ac <__sfputc_r>
 800d9f2:	3401      	adds	r4, #1
 800d9f4:	1c43      	adds	r3, r0, #1
 800d9f6:	d1f3      	bne.n	800d9e0 <__sfputs_r+0xa>
 800d9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9fc <_vfiprintf_r>:
 800d9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9fe:	b0a1      	sub	sp, #132	; 0x84
 800da00:	000f      	movs	r7, r1
 800da02:	0015      	movs	r5, r2
 800da04:	001e      	movs	r6, r3
 800da06:	9003      	str	r0, [sp, #12]
 800da08:	2800      	cmp	r0, #0
 800da0a:	d004      	beq.n	800da16 <_vfiprintf_r+0x1a>
 800da0c:	6a03      	ldr	r3, [r0, #32]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <_vfiprintf_r+0x1a>
 800da12:	f7fe f9cb 	bl	800bdac <__sinit>
 800da16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da18:	07db      	lsls	r3, r3, #31
 800da1a:	d405      	bmi.n	800da28 <_vfiprintf_r+0x2c>
 800da1c:	89bb      	ldrh	r3, [r7, #12]
 800da1e:	059b      	lsls	r3, r3, #22
 800da20:	d402      	bmi.n	800da28 <_vfiprintf_r+0x2c>
 800da22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da24:	f7fe fb0b 	bl	800c03e <__retarget_lock_acquire_recursive>
 800da28:	89bb      	ldrh	r3, [r7, #12]
 800da2a:	071b      	lsls	r3, r3, #28
 800da2c:	d502      	bpl.n	800da34 <_vfiprintf_r+0x38>
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d113      	bne.n	800da5c <_vfiprintf_r+0x60>
 800da34:	0039      	movs	r1, r7
 800da36:	9803      	ldr	r0, [sp, #12]
 800da38:	f000 f9f4 	bl	800de24 <__swsetup_r>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d00d      	beq.n	800da5c <_vfiprintf_r+0x60>
 800da40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da42:	07db      	lsls	r3, r3, #31
 800da44:	d503      	bpl.n	800da4e <_vfiprintf_r+0x52>
 800da46:	2001      	movs	r0, #1
 800da48:	4240      	negs	r0, r0
 800da4a:	b021      	add	sp, #132	; 0x84
 800da4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da4e:	89bb      	ldrh	r3, [r7, #12]
 800da50:	059b      	lsls	r3, r3, #22
 800da52:	d4f8      	bmi.n	800da46 <_vfiprintf_r+0x4a>
 800da54:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da56:	f7fe faf3 	bl	800c040 <__retarget_lock_release_recursive>
 800da5a:	e7f4      	b.n	800da46 <_vfiprintf_r+0x4a>
 800da5c:	2300      	movs	r3, #0
 800da5e:	ac08      	add	r4, sp, #32
 800da60:	6163      	str	r3, [r4, #20]
 800da62:	3320      	adds	r3, #32
 800da64:	7663      	strb	r3, [r4, #25]
 800da66:	3310      	adds	r3, #16
 800da68:	76a3      	strb	r3, [r4, #26]
 800da6a:	9607      	str	r6, [sp, #28]
 800da6c:	002e      	movs	r6, r5
 800da6e:	7833      	ldrb	r3, [r6, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <_vfiprintf_r+0x7c>
 800da74:	2b25      	cmp	r3, #37	; 0x25
 800da76:	d148      	bne.n	800db0a <_vfiprintf_r+0x10e>
 800da78:	1b73      	subs	r3, r6, r5
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	42ae      	cmp	r6, r5
 800da7e:	d00b      	beq.n	800da98 <_vfiprintf_r+0x9c>
 800da80:	002a      	movs	r2, r5
 800da82:	0039      	movs	r1, r7
 800da84:	9803      	ldr	r0, [sp, #12]
 800da86:	f7ff ffa6 	bl	800d9d6 <__sfputs_r>
 800da8a:	3001      	adds	r0, #1
 800da8c:	d100      	bne.n	800da90 <_vfiprintf_r+0x94>
 800da8e:	e0af      	b.n	800dbf0 <_vfiprintf_r+0x1f4>
 800da90:	6963      	ldr	r3, [r4, #20]
 800da92:	9a05      	ldr	r2, [sp, #20]
 800da94:	189b      	adds	r3, r3, r2
 800da96:	6163      	str	r3, [r4, #20]
 800da98:	7833      	ldrb	r3, [r6, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d100      	bne.n	800daa0 <_vfiprintf_r+0xa4>
 800da9e:	e0a7      	b.n	800dbf0 <_vfiprintf_r+0x1f4>
 800daa0:	2201      	movs	r2, #1
 800daa2:	2300      	movs	r3, #0
 800daa4:	4252      	negs	r2, r2
 800daa6:	6062      	str	r2, [r4, #4]
 800daa8:	a904      	add	r1, sp, #16
 800daaa:	3254      	adds	r2, #84	; 0x54
 800daac:	1852      	adds	r2, r2, r1
 800daae:	1c75      	adds	r5, r6, #1
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	60e3      	str	r3, [r4, #12]
 800dab4:	60a3      	str	r3, [r4, #8]
 800dab6:	7013      	strb	r3, [r2, #0]
 800dab8:	65a3      	str	r3, [r4, #88]	; 0x58
 800daba:	4b59      	ldr	r3, [pc, #356]	; (800dc20 <_vfiprintf_r+0x224>)
 800dabc:	2205      	movs	r2, #5
 800dabe:	0018      	movs	r0, r3
 800dac0:	7829      	ldrb	r1, [r5, #0]
 800dac2:	9305      	str	r3, [sp, #20]
 800dac4:	f7fe fabd 	bl	800c042 <memchr>
 800dac8:	1c6e      	adds	r6, r5, #1
 800daca:	2800      	cmp	r0, #0
 800dacc:	d11f      	bne.n	800db0e <_vfiprintf_r+0x112>
 800dace:	6822      	ldr	r2, [r4, #0]
 800dad0:	06d3      	lsls	r3, r2, #27
 800dad2:	d504      	bpl.n	800dade <_vfiprintf_r+0xe2>
 800dad4:	2353      	movs	r3, #83	; 0x53
 800dad6:	a904      	add	r1, sp, #16
 800dad8:	185b      	adds	r3, r3, r1
 800dada:	2120      	movs	r1, #32
 800dadc:	7019      	strb	r1, [r3, #0]
 800dade:	0713      	lsls	r3, r2, #28
 800dae0:	d504      	bpl.n	800daec <_vfiprintf_r+0xf0>
 800dae2:	2353      	movs	r3, #83	; 0x53
 800dae4:	a904      	add	r1, sp, #16
 800dae6:	185b      	adds	r3, r3, r1
 800dae8:	212b      	movs	r1, #43	; 0x2b
 800daea:	7019      	strb	r1, [r3, #0]
 800daec:	782b      	ldrb	r3, [r5, #0]
 800daee:	2b2a      	cmp	r3, #42	; 0x2a
 800daf0:	d016      	beq.n	800db20 <_vfiprintf_r+0x124>
 800daf2:	002e      	movs	r6, r5
 800daf4:	2100      	movs	r1, #0
 800daf6:	200a      	movs	r0, #10
 800daf8:	68e3      	ldr	r3, [r4, #12]
 800dafa:	7832      	ldrb	r2, [r6, #0]
 800dafc:	1c75      	adds	r5, r6, #1
 800dafe:	3a30      	subs	r2, #48	; 0x30
 800db00:	2a09      	cmp	r2, #9
 800db02:	d94e      	bls.n	800dba2 <_vfiprintf_r+0x1a6>
 800db04:	2900      	cmp	r1, #0
 800db06:	d111      	bne.n	800db2c <_vfiprintf_r+0x130>
 800db08:	e017      	b.n	800db3a <_vfiprintf_r+0x13e>
 800db0a:	3601      	adds	r6, #1
 800db0c:	e7af      	b.n	800da6e <_vfiprintf_r+0x72>
 800db0e:	9b05      	ldr	r3, [sp, #20]
 800db10:	6822      	ldr	r2, [r4, #0]
 800db12:	1ac0      	subs	r0, r0, r3
 800db14:	2301      	movs	r3, #1
 800db16:	4083      	lsls	r3, r0
 800db18:	4313      	orrs	r3, r2
 800db1a:	0035      	movs	r5, r6
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	e7cc      	b.n	800daba <_vfiprintf_r+0xbe>
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	1d19      	adds	r1, r3, #4
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	9107      	str	r1, [sp, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	db01      	blt.n	800db30 <_vfiprintf_r+0x134>
 800db2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2e:	e004      	b.n	800db3a <_vfiprintf_r+0x13e>
 800db30:	425b      	negs	r3, r3
 800db32:	60e3      	str	r3, [r4, #12]
 800db34:	2302      	movs	r3, #2
 800db36:	4313      	orrs	r3, r2
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	7833      	ldrb	r3, [r6, #0]
 800db3c:	2b2e      	cmp	r3, #46	; 0x2e
 800db3e:	d10a      	bne.n	800db56 <_vfiprintf_r+0x15a>
 800db40:	7873      	ldrb	r3, [r6, #1]
 800db42:	2b2a      	cmp	r3, #42	; 0x2a
 800db44:	d135      	bne.n	800dbb2 <_vfiprintf_r+0x1b6>
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	3602      	adds	r6, #2
 800db4a:	1d1a      	adds	r2, r3, #4
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	9207      	str	r2, [sp, #28]
 800db50:	2b00      	cmp	r3, #0
 800db52:	db2b      	blt.n	800dbac <_vfiprintf_r+0x1b0>
 800db54:	9309      	str	r3, [sp, #36]	; 0x24
 800db56:	4d33      	ldr	r5, [pc, #204]	; (800dc24 <_vfiprintf_r+0x228>)
 800db58:	2203      	movs	r2, #3
 800db5a:	0028      	movs	r0, r5
 800db5c:	7831      	ldrb	r1, [r6, #0]
 800db5e:	f7fe fa70 	bl	800c042 <memchr>
 800db62:	2800      	cmp	r0, #0
 800db64:	d006      	beq.n	800db74 <_vfiprintf_r+0x178>
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	1b40      	subs	r0, r0, r5
 800db6a:	4083      	lsls	r3, r0
 800db6c:	6822      	ldr	r2, [r4, #0]
 800db6e:	3601      	adds	r6, #1
 800db70:	4313      	orrs	r3, r2
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	7831      	ldrb	r1, [r6, #0]
 800db76:	2206      	movs	r2, #6
 800db78:	482b      	ldr	r0, [pc, #172]	; (800dc28 <_vfiprintf_r+0x22c>)
 800db7a:	1c75      	adds	r5, r6, #1
 800db7c:	7621      	strb	r1, [r4, #24]
 800db7e:	f7fe fa60 	bl	800c042 <memchr>
 800db82:	2800      	cmp	r0, #0
 800db84:	d043      	beq.n	800dc0e <_vfiprintf_r+0x212>
 800db86:	4b29      	ldr	r3, [pc, #164]	; (800dc2c <_vfiprintf_r+0x230>)
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d125      	bne.n	800dbd8 <_vfiprintf_r+0x1dc>
 800db8c:	2207      	movs	r2, #7
 800db8e:	9b07      	ldr	r3, [sp, #28]
 800db90:	3307      	adds	r3, #7
 800db92:	4393      	bics	r3, r2
 800db94:	3308      	adds	r3, #8
 800db96:	9307      	str	r3, [sp, #28]
 800db98:	6963      	ldr	r3, [r4, #20]
 800db9a:	9a04      	ldr	r2, [sp, #16]
 800db9c:	189b      	adds	r3, r3, r2
 800db9e:	6163      	str	r3, [r4, #20]
 800dba0:	e764      	b.n	800da6c <_vfiprintf_r+0x70>
 800dba2:	4343      	muls	r3, r0
 800dba4:	002e      	movs	r6, r5
 800dba6:	2101      	movs	r1, #1
 800dba8:	189b      	adds	r3, r3, r2
 800dbaa:	e7a6      	b.n	800dafa <_vfiprintf_r+0xfe>
 800dbac:	2301      	movs	r3, #1
 800dbae:	425b      	negs	r3, r3
 800dbb0:	e7d0      	b.n	800db54 <_vfiprintf_r+0x158>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	200a      	movs	r0, #10
 800dbb6:	001a      	movs	r2, r3
 800dbb8:	3601      	adds	r6, #1
 800dbba:	6063      	str	r3, [r4, #4]
 800dbbc:	7831      	ldrb	r1, [r6, #0]
 800dbbe:	1c75      	adds	r5, r6, #1
 800dbc0:	3930      	subs	r1, #48	; 0x30
 800dbc2:	2909      	cmp	r1, #9
 800dbc4:	d903      	bls.n	800dbce <_vfiprintf_r+0x1d2>
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0c5      	beq.n	800db56 <_vfiprintf_r+0x15a>
 800dbca:	9209      	str	r2, [sp, #36]	; 0x24
 800dbcc:	e7c3      	b.n	800db56 <_vfiprintf_r+0x15a>
 800dbce:	4342      	muls	r2, r0
 800dbd0:	002e      	movs	r6, r5
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	1852      	adds	r2, r2, r1
 800dbd6:	e7f1      	b.n	800dbbc <_vfiprintf_r+0x1c0>
 800dbd8:	aa07      	add	r2, sp, #28
 800dbda:	9200      	str	r2, [sp, #0]
 800dbdc:	0021      	movs	r1, r4
 800dbde:	003a      	movs	r2, r7
 800dbe0:	4b13      	ldr	r3, [pc, #76]	; (800dc30 <_vfiprintf_r+0x234>)
 800dbe2:	9803      	ldr	r0, [sp, #12]
 800dbe4:	f7fd fc7c 	bl	800b4e0 <_printf_float>
 800dbe8:	9004      	str	r0, [sp, #16]
 800dbea:	9b04      	ldr	r3, [sp, #16]
 800dbec:	3301      	adds	r3, #1
 800dbee:	d1d3      	bne.n	800db98 <_vfiprintf_r+0x19c>
 800dbf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbf2:	07db      	lsls	r3, r3, #31
 800dbf4:	d405      	bmi.n	800dc02 <_vfiprintf_r+0x206>
 800dbf6:	89bb      	ldrh	r3, [r7, #12]
 800dbf8:	059b      	lsls	r3, r3, #22
 800dbfa:	d402      	bmi.n	800dc02 <_vfiprintf_r+0x206>
 800dbfc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dbfe:	f7fe fa1f 	bl	800c040 <__retarget_lock_release_recursive>
 800dc02:	89bb      	ldrh	r3, [r7, #12]
 800dc04:	065b      	lsls	r3, r3, #25
 800dc06:	d500      	bpl.n	800dc0a <_vfiprintf_r+0x20e>
 800dc08:	e71d      	b.n	800da46 <_vfiprintf_r+0x4a>
 800dc0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc0c:	e71d      	b.n	800da4a <_vfiprintf_r+0x4e>
 800dc0e:	aa07      	add	r2, sp, #28
 800dc10:	9200      	str	r2, [sp, #0]
 800dc12:	0021      	movs	r1, r4
 800dc14:	003a      	movs	r2, r7
 800dc16:	4b06      	ldr	r3, [pc, #24]	; (800dc30 <_vfiprintf_r+0x234>)
 800dc18:	9803      	ldr	r0, [sp, #12]
 800dc1a:	f7fd ff27 	bl	800ba6c <_printf_i>
 800dc1e:	e7e3      	b.n	800dbe8 <_vfiprintf_r+0x1ec>
 800dc20:	0800e84c 	.word	0x0800e84c
 800dc24:	0800e852 	.word	0x0800e852
 800dc28:	0800e856 	.word	0x0800e856
 800dc2c:	0800b4e1 	.word	0x0800b4e1
 800dc30:	0800d9d7 	.word	0x0800d9d7

0800dc34 <__sflush_r>:
 800dc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc36:	898b      	ldrh	r3, [r1, #12]
 800dc38:	0005      	movs	r5, r0
 800dc3a:	000c      	movs	r4, r1
 800dc3c:	071a      	lsls	r2, r3, #28
 800dc3e:	d45c      	bmi.n	800dcfa <__sflush_r+0xc6>
 800dc40:	684a      	ldr	r2, [r1, #4]
 800dc42:	2a00      	cmp	r2, #0
 800dc44:	dc04      	bgt.n	800dc50 <__sflush_r+0x1c>
 800dc46:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800dc48:	2a00      	cmp	r2, #0
 800dc4a:	dc01      	bgt.n	800dc50 <__sflush_r+0x1c>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dc52:	2f00      	cmp	r7, #0
 800dc54:	d0fa      	beq.n	800dc4c <__sflush_r+0x18>
 800dc56:	2200      	movs	r2, #0
 800dc58:	2080      	movs	r0, #128	; 0x80
 800dc5a:	682e      	ldr	r6, [r5, #0]
 800dc5c:	602a      	str	r2, [r5, #0]
 800dc5e:	001a      	movs	r2, r3
 800dc60:	0140      	lsls	r0, r0, #5
 800dc62:	6a21      	ldr	r1, [r4, #32]
 800dc64:	4002      	ands	r2, r0
 800dc66:	4203      	tst	r3, r0
 800dc68:	d034      	beq.n	800dcd4 <__sflush_r+0xa0>
 800dc6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	075b      	lsls	r3, r3, #29
 800dc70:	d506      	bpl.n	800dc80 <__sflush_r+0x4c>
 800dc72:	6863      	ldr	r3, [r4, #4]
 800dc74:	1ac0      	subs	r0, r0, r3
 800dc76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <__sflush_r+0x4c>
 800dc7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc7e:	1ac0      	subs	r0, r0, r3
 800dc80:	0002      	movs	r2, r0
 800dc82:	2300      	movs	r3, #0
 800dc84:	0028      	movs	r0, r5
 800dc86:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dc88:	6a21      	ldr	r1, [r4, #32]
 800dc8a:	47b8      	blx	r7
 800dc8c:	89a2      	ldrh	r2, [r4, #12]
 800dc8e:	1c43      	adds	r3, r0, #1
 800dc90:	d106      	bne.n	800dca0 <__sflush_r+0x6c>
 800dc92:	6829      	ldr	r1, [r5, #0]
 800dc94:	291d      	cmp	r1, #29
 800dc96:	d82c      	bhi.n	800dcf2 <__sflush_r+0xbe>
 800dc98:	4b2a      	ldr	r3, [pc, #168]	; (800dd44 <__sflush_r+0x110>)
 800dc9a:	410b      	asrs	r3, r1
 800dc9c:	07db      	lsls	r3, r3, #31
 800dc9e:	d428      	bmi.n	800dcf2 <__sflush_r+0xbe>
 800dca0:	2300      	movs	r3, #0
 800dca2:	6063      	str	r3, [r4, #4]
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	6023      	str	r3, [r4, #0]
 800dca8:	04d2      	lsls	r2, r2, #19
 800dcaa:	d505      	bpl.n	800dcb8 <__sflush_r+0x84>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <__sflush_r+0x82>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d100      	bne.n	800dcb8 <__sflush_r+0x84>
 800dcb6:	6560      	str	r0, [r4, #84]	; 0x54
 800dcb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcba:	602e      	str	r6, [r5, #0]
 800dcbc:	2900      	cmp	r1, #0
 800dcbe:	d0c5      	beq.n	800dc4c <__sflush_r+0x18>
 800dcc0:	0023      	movs	r3, r4
 800dcc2:	3344      	adds	r3, #68	; 0x44
 800dcc4:	4299      	cmp	r1, r3
 800dcc6:	d002      	beq.n	800dcce <__sflush_r+0x9a>
 800dcc8:	0028      	movs	r0, r5
 800dcca:	f7ff f86b 	bl	800cda4 <_free_r>
 800dcce:	2000      	movs	r0, #0
 800dcd0:	6360      	str	r0, [r4, #52]	; 0x34
 800dcd2:	e7bc      	b.n	800dc4e <__sflush_r+0x1a>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	0028      	movs	r0, r5
 800dcd8:	47b8      	blx	r7
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	d1c6      	bne.n	800dc6c <__sflush_r+0x38>
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d0c3      	beq.n	800dc6c <__sflush_r+0x38>
 800dce4:	2b1d      	cmp	r3, #29
 800dce6:	d001      	beq.n	800dcec <__sflush_r+0xb8>
 800dce8:	2b16      	cmp	r3, #22
 800dcea:	d101      	bne.n	800dcf0 <__sflush_r+0xbc>
 800dcec:	602e      	str	r6, [r5, #0]
 800dcee:	e7ad      	b.n	800dc4c <__sflush_r+0x18>
 800dcf0:	89a2      	ldrh	r2, [r4, #12]
 800dcf2:	2340      	movs	r3, #64	; 0x40
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	81a3      	strh	r3, [r4, #12]
 800dcf8:	e7a9      	b.n	800dc4e <__sflush_r+0x1a>
 800dcfa:	690e      	ldr	r6, [r1, #16]
 800dcfc:	2e00      	cmp	r6, #0
 800dcfe:	d0a5      	beq.n	800dc4c <__sflush_r+0x18>
 800dd00:	680f      	ldr	r7, [r1, #0]
 800dd02:	600e      	str	r6, [r1, #0]
 800dd04:	1bba      	subs	r2, r7, r6
 800dd06:	9201      	str	r2, [sp, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	079b      	lsls	r3, r3, #30
 800dd0c:	d100      	bne.n	800dd10 <__sflush_r+0xdc>
 800dd0e:	694a      	ldr	r2, [r1, #20]
 800dd10:	60a2      	str	r2, [r4, #8]
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dd99      	ble.n	800dc4c <__sflush_r+0x18>
 800dd18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd1a:	0032      	movs	r2, r6
 800dd1c:	001f      	movs	r7, r3
 800dd1e:	0028      	movs	r0, r5
 800dd20:	9b01      	ldr	r3, [sp, #4]
 800dd22:	6a21      	ldr	r1, [r4, #32]
 800dd24:	47b8      	blx	r7
 800dd26:	2800      	cmp	r0, #0
 800dd28:	dc06      	bgt.n	800dd38 <__sflush_r+0x104>
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	89a2      	ldrh	r2, [r4, #12]
 800dd30:	4240      	negs	r0, r0
 800dd32:	4313      	orrs	r3, r2
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	e78a      	b.n	800dc4e <__sflush_r+0x1a>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	1836      	adds	r6, r6, r0
 800dd3c:	1a1b      	subs	r3, r3, r0
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	e7e7      	b.n	800dd12 <__sflush_r+0xde>
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	dfbffffe 	.word	0xdfbffffe

0800dd48 <_fflush_r>:
 800dd48:	690b      	ldr	r3, [r1, #16]
 800dd4a:	b570      	push	{r4, r5, r6, lr}
 800dd4c:	0005      	movs	r5, r0
 800dd4e:	000c      	movs	r4, r1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d102      	bne.n	800dd5a <_fflush_r+0x12>
 800dd54:	2500      	movs	r5, #0
 800dd56:	0028      	movs	r0, r5
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d004      	beq.n	800dd68 <_fflush_r+0x20>
 800dd5e:	6a03      	ldr	r3, [r0, #32]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <_fflush_r+0x20>
 800dd64:	f7fe f822 	bl	800bdac <__sinit>
 800dd68:	220c      	movs	r2, #12
 800dd6a:	5ea3      	ldrsh	r3, [r4, r2]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d0f1      	beq.n	800dd54 <_fflush_r+0xc>
 800dd70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd72:	07d2      	lsls	r2, r2, #31
 800dd74:	d404      	bmi.n	800dd80 <_fflush_r+0x38>
 800dd76:	059b      	lsls	r3, r3, #22
 800dd78:	d402      	bmi.n	800dd80 <_fflush_r+0x38>
 800dd7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd7c:	f7fe f95f 	bl	800c03e <__retarget_lock_acquire_recursive>
 800dd80:	0028      	movs	r0, r5
 800dd82:	0021      	movs	r1, r4
 800dd84:	f7ff ff56 	bl	800dc34 <__sflush_r>
 800dd88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd8a:	0005      	movs	r5, r0
 800dd8c:	07db      	lsls	r3, r3, #31
 800dd8e:	d4e2      	bmi.n	800dd56 <_fflush_r+0xe>
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	059b      	lsls	r3, r3, #22
 800dd94:	d4df      	bmi.n	800dd56 <_fflush_r+0xe>
 800dd96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd98:	f7fe f952 	bl	800c040 <__retarget_lock_release_recursive>
 800dd9c:	e7db      	b.n	800dd56 <_fflush_r+0xe>

0800dd9e <__swbuf_r>:
 800dd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda0:	0006      	movs	r6, r0
 800dda2:	000d      	movs	r5, r1
 800dda4:	0014      	movs	r4, r2
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d004      	beq.n	800ddb4 <__swbuf_r+0x16>
 800ddaa:	6a03      	ldr	r3, [r0, #32]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <__swbuf_r+0x16>
 800ddb0:	f7fd fffc 	bl	800bdac <__sinit>
 800ddb4:	69a3      	ldr	r3, [r4, #24]
 800ddb6:	60a3      	str	r3, [r4, #8]
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	071b      	lsls	r3, r3, #28
 800ddbc:	d528      	bpl.n	800de10 <__swbuf_r+0x72>
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d025      	beq.n	800de10 <__swbuf_r+0x72>
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	6820      	ldr	r0, [r4, #0]
 800ddc8:	b2ef      	uxtb	r7, r5
 800ddca:	1ac0      	subs	r0, r0, r3
 800ddcc:	6963      	ldr	r3, [r4, #20]
 800ddce:	b2ed      	uxtb	r5, r5
 800ddd0:	4283      	cmp	r3, r0
 800ddd2:	dc05      	bgt.n	800dde0 <__swbuf_r+0x42>
 800ddd4:	0021      	movs	r1, r4
 800ddd6:	0030      	movs	r0, r6
 800ddd8:	f7ff ffb6 	bl	800dd48 <_fflush_r>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d11d      	bne.n	800de1c <__swbuf_r+0x7e>
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	3001      	adds	r0, #1
 800dde4:	3b01      	subs	r3, #1
 800dde6:	60a3      	str	r3, [r4, #8]
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	6022      	str	r2, [r4, #0]
 800ddee:	701f      	strb	r7, [r3, #0]
 800ddf0:	6963      	ldr	r3, [r4, #20]
 800ddf2:	4283      	cmp	r3, r0
 800ddf4:	d004      	beq.n	800de00 <__swbuf_r+0x62>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	07db      	lsls	r3, r3, #31
 800ddfa:	d507      	bpl.n	800de0c <__swbuf_r+0x6e>
 800ddfc:	2d0a      	cmp	r5, #10
 800ddfe:	d105      	bne.n	800de0c <__swbuf_r+0x6e>
 800de00:	0021      	movs	r1, r4
 800de02:	0030      	movs	r0, r6
 800de04:	f7ff ffa0 	bl	800dd48 <_fflush_r>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d107      	bne.n	800de1c <__swbuf_r+0x7e>
 800de0c:	0028      	movs	r0, r5
 800de0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de10:	0021      	movs	r1, r4
 800de12:	0030      	movs	r0, r6
 800de14:	f000 f806 	bl	800de24 <__swsetup_r>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d0d3      	beq.n	800ddc4 <__swbuf_r+0x26>
 800de1c:	2501      	movs	r5, #1
 800de1e:	426d      	negs	r5, r5
 800de20:	e7f4      	b.n	800de0c <__swbuf_r+0x6e>
	...

0800de24 <__swsetup_r>:
 800de24:	4b30      	ldr	r3, [pc, #192]	; (800dee8 <__swsetup_r+0xc4>)
 800de26:	b570      	push	{r4, r5, r6, lr}
 800de28:	0005      	movs	r5, r0
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	000c      	movs	r4, r1
 800de2e:	2800      	cmp	r0, #0
 800de30:	d004      	beq.n	800de3c <__swsetup_r+0x18>
 800de32:	6a03      	ldr	r3, [r0, #32]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d101      	bne.n	800de3c <__swsetup_r+0x18>
 800de38:	f7fd ffb8 	bl	800bdac <__sinit>
 800de3c:	230c      	movs	r3, #12
 800de3e:	5ee2      	ldrsh	r2, [r4, r3]
 800de40:	b293      	uxth	r3, r2
 800de42:	0711      	lsls	r1, r2, #28
 800de44:	d423      	bmi.n	800de8e <__swsetup_r+0x6a>
 800de46:	06d9      	lsls	r1, r3, #27
 800de48:	d407      	bmi.n	800de5a <__swsetup_r+0x36>
 800de4a:	2309      	movs	r3, #9
 800de4c:	2001      	movs	r0, #1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	3337      	adds	r3, #55	; 0x37
 800de52:	4313      	orrs	r3, r2
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	4240      	negs	r0, r0
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	075b      	lsls	r3, r3, #29
 800de5c:	d513      	bpl.n	800de86 <__swsetup_r+0x62>
 800de5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de60:	2900      	cmp	r1, #0
 800de62:	d008      	beq.n	800de76 <__swsetup_r+0x52>
 800de64:	0023      	movs	r3, r4
 800de66:	3344      	adds	r3, #68	; 0x44
 800de68:	4299      	cmp	r1, r3
 800de6a:	d002      	beq.n	800de72 <__swsetup_r+0x4e>
 800de6c:	0028      	movs	r0, r5
 800de6e:	f7fe ff99 	bl	800cda4 <_free_r>
 800de72:	2300      	movs	r3, #0
 800de74:	6363      	str	r3, [r4, #52]	; 0x34
 800de76:	2224      	movs	r2, #36	; 0x24
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	4393      	bics	r3, r2
 800de7c:	81a3      	strh	r3, [r4, #12]
 800de7e:	2300      	movs	r3, #0
 800de80:	6063      	str	r3, [r4, #4]
 800de82:	6923      	ldr	r3, [r4, #16]
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	2308      	movs	r3, #8
 800de88:	89a2      	ldrh	r2, [r4, #12]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10b      	bne.n	800deac <__swsetup_r+0x88>
 800de94:	21a0      	movs	r1, #160	; 0xa0
 800de96:	2280      	movs	r2, #128	; 0x80
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	0089      	lsls	r1, r1, #2
 800de9c:	0092      	lsls	r2, r2, #2
 800de9e:	400b      	ands	r3, r1
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d003      	beq.n	800deac <__swsetup_r+0x88>
 800dea4:	0021      	movs	r1, r4
 800dea6:	0028      	movs	r0, r5
 800dea8:	f000 f918 	bl	800e0dc <__smakebuf_r>
 800deac:	220c      	movs	r2, #12
 800deae:	5ea3      	ldrsh	r3, [r4, r2]
 800deb0:	2001      	movs	r0, #1
 800deb2:	001a      	movs	r2, r3
 800deb4:	b299      	uxth	r1, r3
 800deb6:	4002      	ands	r2, r0
 800deb8:	4203      	tst	r3, r0
 800deba:	d00f      	beq.n	800dedc <__swsetup_r+0xb8>
 800debc:	2200      	movs	r2, #0
 800debe:	60a2      	str	r2, [r4, #8]
 800dec0:	6962      	ldr	r2, [r4, #20]
 800dec2:	4252      	negs	r2, r2
 800dec4:	61a2      	str	r2, [r4, #24]
 800dec6:	2000      	movs	r0, #0
 800dec8:	6922      	ldr	r2, [r4, #16]
 800deca:	4282      	cmp	r2, r0
 800decc:	d1c4      	bne.n	800de58 <__swsetup_r+0x34>
 800dece:	0609      	lsls	r1, r1, #24
 800ded0:	d5c2      	bpl.n	800de58 <__swsetup_r+0x34>
 800ded2:	2240      	movs	r2, #64	; 0x40
 800ded4:	4313      	orrs	r3, r2
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	3801      	subs	r0, #1
 800deda:	e7bd      	b.n	800de58 <__swsetup_r+0x34>
 800dedc:	0788      	lsls	r0, r1, #30
 800dede:	d400      	bmi.n	800dee2 <__swsetup_r+0xbe>
 800dee0:	6962      	ldr	r2, [r4, #20]
 800dee2:	60a2      	str	r2, [r4, #8]
 800dee4:	e7ef      	b.n	800dec6 <__swsetup_r+0xa2>
 800dee6:	46c0      	nop			; (mov r8, r8)
 800dee8:	20000098 	.word	0x20000098

0800deec <memmove>:
 800deec:	b510      	push	{r4, lr}
 800deee:	4288      	cmp	r0, r1
 800def0:	d902      	bls.n	800def8 <memmove+0xc>
 800def2:	188b      	adds	r3, r1, r2
 800def4:	4298      	cmp	r0, r3
 800def6:	d303      	bcc.n	800df00 <memmove+0x14>
 800def8:	2300      	movs	r3, #0
 800defa:	e007      	b.n	800df0c <memmove+0x20>
 800defc:	5c8b      	ldrb	r3, [r1, r2]
 800defe:	5483      	strb	r3, [r0, r2]
 800df00:	3a01      	subs	r2, #1
 800df02:	d2fb      	bcs.n	800defc <memmove+0x10>
 800df04:	bd10      	pop	{r4, pc}
 800df06:	5ccc      	ldrb	r4, [r1, r3]
 800df08:	54c4      	strb	r4, [r0, r3]
 800df0a:	3301      	adds	r3, #1
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d1fa      	bne.n	800df06 <memmove+0x1a>
 800df10:	e7f8      	b.n	800df04 <memmove+0x18>
	...

0800df14 <_sbrk_r>:
 800df14:	2300      	movs	r3, #0
 800df16:	b570      	push	{r4, r5, r6, lr}
 800df18:	4d06      	ldr	r5, [pc, #24]	; (800df34 <_sbrk_r+0x20>)
 800df1a:	0004      	movs	r4, r0
 800df1c:	0008      	movs	r0, r1
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	f7f4 fdca 	bl	8002ab8 <_sbrk>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d103      	bne.n	800df30 <_sbrk_r+0x1c>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d000      	beq.n	800df30 <_sbrk_r+0x1c>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	46c0      	nop			; (mov r8, r8)
 800df34:	2000093c 	.word	0x2000093c

0800df38 <__assert_func>:
 800df38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800df3a:	0014      	movs	r4, r2
 800df3c:	001a      	movs	r2, r3
 800df3e:	4b09      	ldr	r3, [pc, #36]	; (800df64 <__assert_func+0x2c>)
 800df40:	0005      	movs	r5, r0
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	000e      	movs	r6, r1
 800df46:	68d8      	ldr	r0, [r3, #12]
 800df48:	4b07      	ldr	r3, [pc, #28]	; (800df68 <__assert_func+0x30>)
 800df4a:	2c00      	cmp	r4, #0
 800df4c:	d101      	bne.n	800df52 <__assert_func+0x1a>
 800df4e:	4b07      	ldr	r3, [pc, #28]	; (800df6c <__assert_func+0x34>)
 800df50:	001c      	movs	r4, r3
 800df52:	4907      	ldr	r1, [pc, #28]	; (800df70 <__assert_func+0x38>)
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	9402      	str	r4, [sp, #8]
 800df58:	002b      	movs	r3, r5
 800df5a:	9600      	str	r6, [sp, #0]
 800df5c:	f000 f886 	bl	800e06c <fiprintf>
 800df60:	f000 f91e 	bl	800e1a0 <abort>
 800df64:	20000098 	.word	0x20000098
 800df68:	0800e867 	.word	0x0800e867
 800df6c:	0800e8a2 	.word	0x0800e8a2
 800df70:	0800e874 	.word	0x0800e874

0800df74 <_calloc_r>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	0c0b      	lsrs	r3, r1, #16
 800df78:	0c15      	lsrs	r5, r2, #16
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d11e      	bne.n	800dfbc <_calloc_r+0x48>
 800df7e:	2d00      	cmp	r5, #0
 800df80:	d10c      	bne.n	800df9c <_calloc_r+0x28>
 800df82:	b289      	uxth	r1, r1
 800df84:	b294      	uxth	r4, r2
 800df86:	434c      	muls	r4, r1
 800df88:	0021      	movs	r1, r4
 800df8a:	f7fe ff81 	bl	800ce90 <_malloc_r>
 800df8e:	1e05      	subs	r5, r0, #0
 800df90:	d01b      	beq.n	800dfca <_calloc_r+0x56>
 800df92:	0022      	movs	r2, r4
 800df94:	2100      	movs	r1, #0
 800df96:	f7fd ffb9 	bl	800bf0c <memset>
 800df9a:	e016      	b.n	800dfca <_calloc_r+0x56>
 800df9c:	1c2b      	adds	r3, r5, #0
 800df9e:	1c0c      	adds	r4, r1, #0
 800dfa0:	b289      	uxth	r1, r1
 800dfa2:	b292      	uxth	r2, r2
 800dfa4:	434a      	muls	r2, r1
 800dfa6:	b2a1      	uxth	r1, r4
 800dfa8:	b29c      	uxth	r4, r3
 800dfaa:	434c      	muls	r4, r1
 800dfac:	0c13      	lsrs	r3, r2, #16
 800dfae:	18e4      	adds	r4, r4, r3
 800dfb0:	0c23      	lsrs	r3, r4, #16
 800dfb2:	d107      	bne.n	800dfc4 <_calloc_r+0x50>
 800dfb4:	0424      	lsls	r4, r4, #16
 800dfb6:	b292      	uxth	r2, r2
 800dfb8:	4314      	orrs	r4, r2
 800dfba:	e7e5      	b.n	800df88 <_calloc_r+0x14>
 800dfbc:	2d00      	cmp	r5, #0
 800dfbe:	d101      	bne.n	800dfc4 <_calloc_r+0x50>
 800dfc0:	1c14      	adds	r4, r2, #0
 800dfc2:	e7ed      	b.n	800dfa0 <_calloc_r+0x2c>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	6003      	str	r3, [r0, #0]
 800dfca:	0028      	movs	r0, r5
 800dfcc:	bd70      	pop	{r4, r5, r6, pc}

0800dfce <__ascii_mbtowc>:
 800dfce:	b082      	sub	sp, #8
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	d100      	bne.n	800dfd6 <__ascii_mbtowc+0x8>
 800dfd4:	a901      	add	r1, sp, #4
 800dfd6:	1e10      	subs	r0, r2, #0
 800dfd8:	d006      	beq.n	800dfe8 <__ascii_mbtowc+0x1a>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d006      	beq.n	800dfec <__ascii_mbtowc+0x1e>
 800dfde:	7813      	ldrb	r3, [r2, #0]
 800dfe0:	600b      	str	r3, [r1, #0]
 800dfe2:	7810      	ldrb	r0, [r2, #0]
 800dfe4:	1e43      	subs	r3, r0, #1
 800dfe6:	4198      	sbcs	r0, r3
 800dfe8:	b002      	add	sp, #8
 800dfea:	4770      	bx	lr
 800dfec:	2002      	movs	r0, #2
 800dfee:	4240      	negs	r0, r0
 800dff0:	e7fa      	b.n	800dfe8 <__ascii_mbtowc+0x1a>

0800dff2 <_realloc_r>:
 800dff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dff4:	0007      	movs	r7, r0
 800dff6:	000e      	movs	r6, r1
 800dff8:	0014      	movs	r4, r2
 800dffa:	2900      	cmp	r1, #0
 800dffc:	d105      	bne.n	800e00a <_realloc_r+0x18>
 800dffe:	0011      	movs	r1, r2
 800e000:	f7fe ff46 	bl	800ce90 <_malloc_r>
 800e004:	0005      	movs	r5, r0
 800e006:	0028      	movs	r0, r5
 800e008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e00a:	2a00      	cmp	r2, #0
 800e00c:	d103      	bne.n	800e016 <_realloc_r+0x24>
 800e00e:	f7fe fec9 	bl	800cda4 <_free_r>
 800e012:	0025      	movs	r5, r4
 800e014:	e7f7      	b.n	800e006 <_realloc_r+0x14>
 800e016:	f000 f8ca 	bl	800e1ae <_malloc_usable_size_r>
 800e01a:	9001      	str	r0, [sp, #4]
 800e01c:	4284      	cmp	r4, r0
 800e01e:	d803      	bhi.n	800e028 <_realloc_r+0x36>
 800e020:	0035      	movs	r5, r6
 800e022:	0843      	lsrs	r3, r0, #1
 800e024:	42a3      	cmp	r3, r4
 800e026:	d3ee      	bcc.n	800e006 <_realloc_r+0x14>
 800e028:	0021      	movs	r1, r4
 800e02a:	0038      	movs	r0, r7
 800e02c:	f7fe ff30 	bl	800ce90 <_malloc_r>
 800e030:	1e05      	subs	r5, r0, #0
 800e032:	d0e8      	beq.n	800e006 <_realloc_r+0x14>
 800e034:	9b01      	ldr	r3, [sp, #4]
 800e036:	0022      	movs	r2, r4
 800e038:	429c      	cmp	r4, r3
 800e03a:	d900      	bls.n	800e03e <_realloc_r+0x4c>
 800e03c:	001a      	movs	r2, r3
 800e03e:	0031      	movs	r1, r6
 800e040:	0028      	movs	r0, r5
 800e042:	f7fe f809 	bl	800c058 <memcpy>
 800e046:	0031      	movs	r1, r6
 800e048:	0038      	movs	r0, r7
 800e04a:	f7fe feab 	bl	800cda4 <_free_r>
 800e04e:	e7da      	b.n	800e006 <_realloc_r+0x14>

0800e050 <__ascii_wctomb>:
 800e050:	0003      	movs	r3, r0
 800e052:	1e08      	subs	r0, r1, #0
 800e054:	d005      	beq.n	800e062 <__ascii_wctomb+0x12>
 800e056:	2aff      	cmp	r2, #255	; 0xff
 800e058:	d904      	bls.n	800e064 <__ascii_wctomb+0x14>
 800e05a:	228a      	movs	r2, #138	; 0x8a
 800e05c:	2001      	movs	r0, #1
 800e05e:	601a      	str	r2, [r3, #0]
 800e060:	4240      	negs	r0, r0
 800e062:	4770      	bx	lr
 800e064:	2001      	movs	r0, #1
 800e066:	700a      	strb	r2, [r1, #0]
 800e068:	e7fb      	b.n	800e062 <__ascii_wctomb+0x12>
	...

0800e06c <fiprintf>:
 800e06c:	b40e      	push	{r1, r2, r3}
 800e06e:	b517      	push	{r0, r1, r2, r4, lr}
 800e070:	4c05      	ldr	r4, [pc, #20]	; (800e088 <fiprintf+0x1c>)
 800e072:	ab05      	add	r3, sp, #20
 800e074:	cb04      	ldmia	r3!, {r2}
 800e076:	0001      	movs	r1, r0
 800e078:	6820      	ldr	r0, [r4, #0]
 800e07a:	9301      	str	r3, [sp, #4]
 800e07c:	f7ff fcbe 	bl	800d9fc <_vfiprintf_r>
 800e080:	bc1e      	pop	{r1, r2, r3, r4}
 800e082:	bc08      	pop	{r3}
 800e084:	b003      	add	sp, #12
 800e086:	4718      	bx	r3
 800e088:	20000098 	.word	0x20000098

0800e08c <__swhatbuf_r>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	000e      	movs	r6, r1
 800e090:	001d      	movs	r5, r3
 800e092:	230e      	movs	r3, #14
 800e094:	5ec9      	ldrsh	r1, [r1, r3]
 800e096:	0014      	movs	r4, r2
 800e098:	b096      	sub	sp, #88	; 0x58
 800e09a:	2900      	cmp	r1, #0
 800e09c:	da0c      	bge.n	800e0b8 <__swhatbuf_r+0x2c>
 800e09e:	89b2      	ldrh	r2, [r6, #12]
 800e0a0:	2380      	movs	r3, #128	; 0x80
 800e0a2:	0011      	movs	r1, r2
 800e0a4:	4019      	ands	r1, r3
 800e0a6:	421a      	tst	r2, r3
 800e0a8:	d013      	beq.n	800e0d2 <__swhatbuf_r+0x46>
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	3b40      	subs	r3, #64	; 0x40
 800e0ae:	2000      	movs	r0, #0
 800e0b0:	6029      	str	r1, [r5, #0]
 800e0b2:	6023      	str	r3, [r4, #0]
 800e0b4:	b016      	add	sp, #88	; 0x58
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	466a      	mov	r2, sp
 800e0ba:	f000 f84d 	bl	800e158 <_fstat_r>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	dbed      	blt.n	800e09e <__swhatbuf_r+0x12>
 800e0c2:	23f0      	movs	r3, #240	; 0xf0
 800e0c4:	9901      	ldr	r1, [sp, #4]
 800e0c6:	021b      	lsls	r3, r3, #8
 800e0c8:	4019      	ands	r1, r3
 800e0ca:	4b03      	ldr	r3, [pc, #12]	; (800e0d8 <__swhatbuf_r+0x4c>)
 800e0cc:	18c9      	adds	r1, r1, r3
 800e0ce:	424b      	negs	r3, r1
 800e0d0:	4159      	adcs	r1, r3
 800e0d2:	2380      	movs	r3, #128	; 0x80
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	e7ea      	b.n	800e0ae <__swhatbuf_r+0x22>
 800e0d8:	ffffe000 	.word	0xffffe000

0800e0dc <__smakebuf_r>:
 800e0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0de:	2602      	movs	r6, #2
 800e0e0:	898b      	ldrh	r3, [r1, #12]
 800e0e2:	0005      	movs	r5, r0
 800e0e4:	000c      	movs	r4, r1
 800e0e6:	4233      	tst	r3, r6
 800e0e8:	d006      	beq.n	800e0f8 <__smakebuf_r+0x1c>
 800e0ea:	0023      	movs	r3, r4
 800e0ec:	3347      	adds	r3, #71	; 0x47
 800e0ee:	6023      	str	r3, [r4, #0]
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	6163      	str	r3, [r4, #20]
 800e0f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e0f8:	466a      	mov	r2, sp
 800e0fa:	ab01      	add	r3, sp, #4
 800e0fc:	f7ff ffc6 	bl	800e08c <__swhatbuf_r>
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	0007      	movs	r7, r0
 800e104:	0028      	movs	r0, r5
 800e106:	f7fe fec3 	bl	800ce90 <_malloc_r>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d108      	bne.n	800e120 <__smakebuf_r+0x44>
 800e10e:	220c      	movs	r2, #12
 800e110:	5ea3      	ldrsh	r3, [r4, r2]
 800e112:	059a      	lsls	r2, r3, #22
 800e114:	d4ef      	bmi.n	800e0f6 <__smakebuf_r+0x1a>
 800e116:	2203      	movs	r2, #3
 800e118:	4393      	bics	r3, r2
 800e11a:	431e      	orrs	r6, r3
 800e11c:	81a6      	strh	r6, [r4, #12]
 800e11e:	e7e4      	b.n	800e0ea <__smakebuf_r+0xe>
 800e120:	2380      	movs	r3, #128	; 0x80
 800e122:	89a2      	ldrh	r2, [r4, #12]
 800e124:	6020      	str	r0, [r4, #0]
 800e126:	4313      	orrs	r3, r2
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	9b00      	ldr	r3, [sp, #0]
 800e12c:	6120      	str	r0, [r4, #16]
 800e12e:	6163      	str	r3, [r4, #20]
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00c      	beq.n	800e150 <__smakebuf_r+0x74>
 800e136:	0028      	movs	r0, r5
 800e138:	230e      	movs	r3, #14
 800e13a:	5ee1      	ldrsh	r1, [r4, r3]
 800e13c:	f000 f81e 	bl	800e17c <_isatty_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	d005      	beq.n	800e150 <__smakebuf_r+0x74>
 800e144:	2303      	movs	r3, #3
 800e146:	89a2      	ldrh	r2, [r4, #12]
 800e148:	439a      	bics	r2, r3
 800e14a:	3b02      	subs	r3, #2
 800e14c:	4313      	orrs	r3, r2
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	89a3      	ldrh	r3, [r4, #12]
 800e152:	433b      	orrs	r3, r7
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	e7ce      	b.n	800e0f6 <__smakebuf_r+0x1a>

0800e158 <_fstat_r>:
 800e158:	2300      	movs	r3, #0
 800e15a:	b570      	push	{r4, r5, r6, lr}
 800e15c:	4d06      	ldr	r5, [pc, #24]	; (800e178 <_fstat_r+0x20>)
 800e15e:	0004      	movs	r4, r0
 800e160:	0008      	movs	r0, r1
 800e162:	0011      	movs	r1, r2
 800e164:	602b      	str	r3, [r5, #0]
 800e166:	f7f4 fc85 	bl	8002a74 <_fstat>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	d103      	bne.n	800e176 <_fstat_r+0x1e>
 800e16e:	682b      	ldr	r3, [r5, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d000      	beq.n	800e176 <_fstat_r+0x1e>
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	2000093c 	.word	0x2000093c

0800e17c <_isatty_r>:
 800e17c:	2300      	movs	r3, #0
 800e17e:	b570      	push	{r4, r5, r6, lr}
 800e180:	4d06      	ldr	r5, [pc, #24]	; (800e19c <_isatty_r+0x20>)
 800e182:	0004      	movs	r4, r0
 800e184:	0008      	movs	r0, r1
 800e186:	602b      	str	r3, [r5, #0]
 800e188:	f7f4 fc82 	bl	8002a90 <_isatty>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	d103      	bne.n	800e198 <_isatty_r+0x1c>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d000      	beq.n	800e198 <_isatty_r+0x1c>
 800e196:	6023      	str	r3, [r4, #0]
 800e198:	bd70      	pop	{r4, r5, r6, pc}
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	2000093c 	.word	0x2000093c

0800e1a0 <abort>:
 800e1a0:	2006      	movs	r0, #6
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	f000 f836 	bl	800e214 <raise>
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	f7f4 fc14 	bl	80029d6 <_exit>

0800e1ae <_malloc_usable_size_r>:
 800e1ae:	1f0b      	subs	r3, r1, #4
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	1f18      	subs	r0, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	da01      	bge.n	800e1bc <_malloc_usable_size_r+0xe>
 800e1b8:	580b      	ldr	r3, [r1, r0]
 800e1ba:	18c0      	adds	r0, r0, r3
 800e1bc:	4770      	bx	lr

0800e1be <_raise_r>:
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	0004      	movs	r4, r0
 800e1c2:	000d      	movs	r5, r1
 800e1c4:	291f      	cmp	r1, #31
 800e1c6:	d904      	bls.n	800e1d2 <_raise_r+0x14>
 800e1c8:	2316      	movs	r3, #22
 800e1ca:	6003      	str	r3, [r0, #0]
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	4240      	negs	r0, r0
 800e1d0:	bd70      	pop	{r4, r5, r6, pc}
 800e1d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d004      	beq.n	800e1e2 <_raise_r+0x24>
 800e1d8:	008a      	lsls	r2, r1, #2
 800e1da:	189b      	adds	r3, r3, r2
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	2a00      	cmp	r2, #0
 800e1e0:	d108      	bne.n	800e1f4 <_raise_r+0x36>
 800e1e2:	0020      	movs	r0, r4
 800e1e4:	f000 f832 	bl	800e24c <_getpid_r>
 800e1e8:	002a      	movs	r2, r5
 800e1ea:	0001      	movs	r1, r0
 800e1ec:	0020      	movs	r0, r4
 800e1ee:	f000 f81b 	bl	800e228 <_kill_r>
 800e1f2:	e7ed      	b.n	800e1d0 <_raise_r+0x12>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	2a01      	cmp	r2, #1
 800e1f8:	d0ea      	beq.n	800e1d0 <_raise_r+0x12>
 800e1fa:	1c51      	adds	r1, r2, #1
 800e1fc:	d103      	bne.n	800e206 <_raise_r+0x48>
 800e1fe:	2316      	movs	r3, #22
 800e200:	3001      	adds	r0, #1
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	e7e4      	b.n	800e1d0 <_raise_r+0x12>
 800e206:	2400      	movs	r4, #0
 800e208:	0028      	movs	r0, r5
 800e20a:	601c      	str	r4, [r3, #0]
 800e20c:	4790      	blx	r2
 800e20e:	0020      	movs	r0, r4
 800e210:	e7de      	b.n	800e1d0 <_raise_r+0x12>
	...

0800e214 <raise>:
 800e214:	b510      	push	{r4, lr}
 800e216:	4b03      	ldr	r3, [pc, #12]	; (800e224 <raise+0x10>)
 800e218:	0001      	movs	r1, r0
 800e21a:	6818      	ldr	r0, [r3, #0]
 800e21c:	f7ff ffcf 	bl	800e1be <_raise_r>
 800e220:	bd10      	pop	{r4, pc}
 800e222:	46c0      	nop			; (mov r8, r8)
 800e224:	20000098 	.word	0x20000098

0800e228 <_kill_r>:
 800e228:	2300      	movs	r3, #0
 800e22a:	b570      	push	{r4, r5, r6, lr}
 800e22c:	4d06      	ldr	r5, [pc, #24]	; (800e248 <_kill_r+0x20>)
 800e22e:	0004      	movs	r4, r0
 800e230:	0008      	movs	r0, r1
 800e232:	0011      	movs	r1, r2
 800e234:	602b      	str	r3, [r5, #0]
 800e236:	f7f4 fbbe 	bl	80029b6 <_kill>
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	d103      	bne.n	800e246 <_kill_r+0x1e>
 800e23e:	682b      	ldr	r3, [r5, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d000      	beq.n	800e246 <_kill_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd70      	pop	{r4, r5, r6, pc}
 800e248:	2000093c 	.word	0x2000093c

0800e24c <_getpid_r>:
 800e24c:	b510      	push	{r4, lr}
 800e24e:	f7f4 fbac 	bl	80029aa <_getpid>
 800e252:	bd10      	pop	{r4, pc}

0800e254 <_init>:
 800e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e256:	46c0      	nop			; (mov r8, r8)
 800e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e25a:	bc08      	pop	{r3}
 800e25c:	469e      	mov	lr, r3
 800e25e:	4770      	bx	lr

0800e260 <_fini>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	46c0      	nop			; (mov r8, r8)
 800e264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e266:	bc08      	pop	{r3}
 800e268:	469e      	mov	lr, r3
 800e26a:	4770      	bx	lr


Sensor Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008978  08008978  00009978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008df8  08008df8  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e00  08008e00  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e00  08008e00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e04  08008e04  00009e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008e08  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001ec  08008ff4  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08008ff4  0000a4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012278  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ad  00000000  00000000  0001c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4b  00000000  00000000  0001f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017077  00000000  00000000  0002065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001451f  00000000  00000000  000376d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980be  00000000  00000000  0004bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db8  00000000  00000000  000e3cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e8aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001ec 	.word	0x200001ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800895c 	.word	0x0800895c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f0 	.word	0x200001f0
 8000100:	0800895c 	.word	0x0800895c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f855 	bl	80014e8 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff95 	bl	8001378 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f847 	bl	80014e8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f83d 	bl	80014e8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffbf 	bl	8001400 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffb5 	bl	8001400 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	@ (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff94 	bl	8002430 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff8f 	bl	8002430 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	4657      	mov	r7, sl
 8000680:	464e      	mov	r6, r9
 8000682:	4645      	mov	r5, r8
 8000684:	46de      	mov	lr, fp
 8000686:	b5e0      	push	{r5, r6, r7, lr}
 8000688:	b083      	sub	sp, #12
 800068a:	9000      	str	r0, [sp, #0]
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	030c      	lsls	r4, r1, #12
 8000690:	004f      	lsls	r7, r1, #1
 8000692:	0fce      	lsrs	r6, r1, #31
 8000694:	0a61      	lsrs	r1, r4, #9
 8000696:	9c00      	ldr	r4, [sp, #0]
 8000698:	031d      	lsls	r5, r3, #12
 800069a:	0f64      	lsrs	r4, r4, #29
 800069c:	430c      	orrs	r4, r1
 800069e:	9900      	ldr	r1, [sp, #0]
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	00c8      	lsls	r0, r1, #3
 80006a6:	0059      	lsls	r1, r3, #1
 80006a8:	0d4b      	lsrs	r3, r1, #21
 80006aa:	4699      	mov	r9, r3
 80006ac:	9a00      	ldr	r2, [sp, #0]
 80006ae:	9b01      	ldr	r3, [sp, #4]
 80006b0:	0a6d      	lsrs	r5, r5, #9
 80006b2:	0fd9      	lsrs	r1, r3, #31
 80006b4:	0f53      	lsrs	r3, r2, #29
 80006b6:	432b      	orrs	r3, r5
 80006b8:	469a      	mov	sl, r3
 80006ba:	9b00      	ldr	r3, [sp, #0]
 80006bc:	0d7f      	lsrs	r7, r7, #21
 80006be:	00da      	lsls	r2, r3, #3
 80006c0:	4694      	mov	ip, r2
 80006c2:	464a      	mov	r2, r9
 80006c4:	46b0      	mov	r8, r6
 80006c6:	1aba      	subs	r2, r7, r2
 80006c8:	428e      	cmp	r6, r1
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b0      	b.n	8000830 <__aeabi_dadd+0x1b4>
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_dadd+0x58>
 80006d2:	e078      	b.n	80007c6 <__aeabi_dadd+0x14a>
 80006d4:	4649      	mov	r1, r9
 80006d6:	2900      	cmp	r1, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x60>
 80006da:	e0e9      	b.n	80008b0 <__aeabi_dadd+0x234>
 80006dc:	49c9      	ldr	r1, [pc, #804]	@ (8000a04 <__aeabi_dadd+0x388>)
 80006de:	428f      	cmp	r7, r1
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e195      	b.n	8000a10 <__aeabi_dadd+0x394>
 80006e4:	2501      	movs	r5, #1
 80006e6:	2a38      	cmp	r2, #56	@ 0x38
 80006e8:	dc16      	bgt.n	8000718 <__aeabi_dadd+0x9c>
 80006ea:	2180      	movs	r1, #128	@ 0x80
 80006ec:	4653      	mov	r3, sl
 80006ee:	0409      	lsls	r1, r1, #16
 80006f0:	430b      	orrs	r3, r1
 80006f2:	469a      	mov	sl, r3
 80006f4:	2a1f      	cmp	r2, #31
 80006f6:	dd00      	ble.n	80006fa <__aeabi_dadd+0x7e>
 80006f8:	e1e7      	b.n	8000aca <__aeabi_dadd+0x44e>
 80006fa:	2120      	movs	r1, #32
 80006fc:	4655      	mov	r5, sl
 80006fe:	1a8b      	subs	r3, r1, r2
 8000700:	4661      	mov	r1, ip
 8000702:	409d      	lsls	r5, r3
 8000704:	40d1      	lsrs	r1, r2
 8000706:	430d      	orrs	r5, r1
 8000708:	4661      	mov	r1, ip
 800070a:	4099      	lsls	r1, r3
 800070c:	1e4b      	subs	r3, r1, #1
 800070e:	4199      	sbcs	r1, r3
 8000710:	4653      	mov	r3, sl
 8000712:	40d3      	lsrs	r3, r2
 8000714:	430d      	orrs	r5, r1
 8000716:	1ae4      	subs	r4, r4, r3
 8000718:	1b45      	subs	r5, r0, r5
 800071a:	42a8      	cmp	r0, r5
 800071c:	4180      	sbcs	r0, r0
 800071e:	4240      	negs	r0, r0
 8000720:	1a24      	subs	r4, r4, r0
 8000722:	0223      	lsls	r3, r4, #8
 8000724:	d400      	bmi.n	8000728 <__aeabi_dadd+0xac>
 8000726:	e10f      	b.n	8000948 <__aeabi_dadd+0x2cc>
 8000728:	0264      	lsls	r4, r4, #9
 800072a:	0a64      	lsrs	r4, r4, #9
 800072c:	2c00      	cmp	r4, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0xb6>
 8000730:	e139      	b.n	80009a6 <__aeabi_dadd+0x32a>
 8000732:	0020      	movs	r0, r4
 8000734:	f001 fe5e 	bl	80023f4 <__clzsi2>
 8000738:	0003      	movs	r3, r0
 800073a:	3b08      	subs	r3, #8
 800073c:	2120      	movs	r1, #32
 800073e:	0028      	movs	r0, r5
 8000740:	1aca      	subs	r2, r1, r3
 8000742:	40d0      	lsrs	r0, r2
 8000744:	409c      	lsls	r4, r3
 8000746:	0002      	movs	r2, r0
 8000748:	409d      	lsls	r5, r3
 800074a:	4322      	orrs	r2, r4
 800074c:	429f      	cmp	r7, r3
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0xd6>
 8000750:	e173      	b.n	8000a3a <__aeabi_dadd+0x3be>
 8000752:	1bd8      	subs	r0, r3, r7
 8000754:	3001      	adds	r0, #1
 8000756:	1a09      	subs	r1, r1, r0
 8000758:	002c      	movs	r4, r5
 800075a:	408d      	lsls	r5, r1
 800075c:	40c4      	lsrs	r4, r0
 800075e:	1e6b      	subs	r3, r5, #1
 8000760:	419d      	sbcs	r5, r3
 8000762:	0013      	movs	r3, r2
 8000764:	40c2      	lsrs	r2, r0
 8000766:	408b      	lsls	r3, r1
 8000768:	4325      	orrs	r5, r4
 800076a:	2700      	movs	r7, #0
 800076c:	0014      	movs	r4, r2
 800076e:	431d      	orrs	r5, r3
 8000770:	076b      	lsls	r3, r5, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	402b      	ands	r3, r5
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d2b      	adds	r3, r5, #4
 800077e:	42ab      	cmp	r3, r5
 8000780:	41ad      	sbcs	r5, r5
 8000782:	426d      	negs	r5, r5
 8000784:	1964      	adds	r4, r4, r5
 8000786:	001d      	movs	r5, r3
 8000788:	0223      	lsls	r3, r4, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e12d      	b.n	80009ea <__aeabi_dadd+0x36e>
 800078e:	4a9d      	ldr	r2, [pc, #628]	@ (8000a04 <__aeabi_dadd+0x388>)
 8000790:	3701      	adds	r7, #1
 8000792:	4297      	cmp	r7, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0d3      	b.n	8000940 <__aeabi_dadd+0x2c4>
 8000798:	4646      	mov	r6, r8
 800079a:	499b      	ldr	r1, [pc, #620]	@ (8000a08 <__aeabi_dadd+0x38c>)
 800079c:	08ed      	lsrs	r5, r5, #3
 800079e:	4021      	ands	r1, r4
 80007a0:	074a      	lsls	r2, r1, #29
 80007a2:	432a      	orrs	r2, r5
 80007a4:	057c      	lsls	r4, r7, #21
 80007a6:	024d      	lsls	r5, r1, #9
 80007a8:	0b2d      	lsrs	r5, r5, #12
 80007aa:	0d64      	lsrs	r4, r4, #21
 80007ac:	0524      	lsls	r4, r4, #20
 80007ae:	432c      	orrs	r4, r5
 80007b0:	07f6      	lsls	r6, r6, #31
 80007b2:	4334      	orrs	r4, r6
 80007b4:	0010      	movs	r0, r2
 80007b6:	0021      	movs	r1, r4
 80007b8:	b003      	add	sp, #12
 80007ba:	bcf0      	pop	{r4, r5, r6, r7}
 80007bc:	46bb      	mov	fp, r7
 80007be:	46b2      	mov	sl, r6
 80007c0:	46a9      	mov	r9, r5
 80007c2:	46a0      	mov	r8, r4
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x150>
 80007ca:	e084      	b.n	80008d6 <__aeabi_dadd+0x25a>
 80007cc:	464a      	mov	r2, r9
 80007ce:	1bd2      	subs	r2, r2, r7
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e16d      	b.n	8000ab2 <__aeabi_dadd+0x436>
 80007d6:	0025      	movs	r5, r4
 80007d8:	4305      	orrs	r5, r0
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e127      	b.n	8000a2e <__aeabi_dadd+0x3b2>
 80007de:	1e56      	subs	r6, r2, #1
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e23b      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80007e6:	4d87      	ldr	r5, [pc, #540]	@ (8000a04 <__aeabi_dadd+0x388>)
 80007e8:	42aa      	cmp	r2, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e26a      	b.n	8000cc4 <__aeabi_dadd+0x648>
 80007ee:	2501      	movs	r5, #1
 80007f0:	2e38      	cmp	r6, #56	@ 0x38
 80007f2:	dc12      	bgt.n	800081a <__aeabi_dadd+0x19e>
 80007f4:	0032      	movs	r2, r6
 80007f6:	2a1f      	cmp	r2, #31
 80007f8:	dd00      	ble.n	80007fc <__aeabi_dadd+0x180>
 80007fa:	e1f8      	b.n	8000bee <__aeabi_dadd+0x572>
 80007fc:	2620      	movs	r6, #32
 80007fe:	0025      	movs	r5, r4
 8000800:	1ab6      	subs	r6, r6, r2
 8000802:	0007      	movs	r7, r0
 8000804:	4653      	mov	r3, sl
 8000806:	40b0      	lsls	r0, r6
 8000808:	40d4      	lsrs	r4, r2
 800080a:	40b5      	lsls	r5, r6
 800080c:	40d7      	lsrs	r7, r2
 800080e:	1e46      	subs	r6, r0, #1
 8000810:	41b0      	sbcs	r0, r6
 8000812:	1b1b      	subs	r3, r3, r4
 8000814:	469a      	mov	sl, r3
 8000816:	433d      	orrs	r5, r7
 8000818:	4305      	orrs	r5, r0
 800081a:	4662      	mov	r2, ip
 800081c:	1b55      	subs	r5, r2, r5
 800081e:	45ac      	cmp	ip, r5
 8000820:	4192      	sbcs	r2, r2
 8000822:	4653      	mov	r3, sl
 8000824:	4252      	negs	r2, r2
 8000826:	000e      	movs	r6, r1
 8000828:	464f      	mov	r7, r9
 800082a:	4688      	mov	r8, r1
 800082c:	1a9c      	subs	r4, r3, r2
 800082e:	e778      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000830:	2a00      	cmp	r2, #0
 8000832:	dc00      	bgt.n	8000836 <__aeabi_dadd+0x1ba>
 8000834:	e08e      	b.n	8000954 <__aeabi_dadd+0x2d8>
 8000836:	4649      	mov	r1, r9
 8000838:	2900      	cmp	r1, #0
 800083a:	d175      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 800083c:	4661      	mov	r1, ip
 800083e:	4653      	mov	r3, sl
 8000840:	4319      	orrs	r1, r3
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1ca>
 8000844:	e0f6      	b.n	8000a34 <__aeabi_dadd+0x3b8>
 8000846:	1e51      	subs	r1, r2, #1
 8000848:	2a01      	cmp	r2, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d2>
 800084c:	e191      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800084e:	4d6d      	ldr	r5, [pc, #436]	@ (8000a04 <__aeabi_dadd+0x388>)
 8000850:	42aa      	cmp	r2, r5
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1da>
 8000854:	e0dc      	b.n	8000a10 <__aeabi_dadd+0x394>
 8000856:	2501      	movs	r5, #1
 8000858:	2938      	cmp	r1, #56	@ 0x38
 800085a:	dc14      	bgt.n	8000886 <__aeabi_dadd+0x20a>
 800085c:	000a      	movs	r2, r1
 800085e:	2a1f      	cmp	r2, #31
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x1e8>
 8000862:	e1a2      	b.n	8000baa <__aeabi_dadd+0x52e>
 8000864:	2120      	movs	r1, #32
 8000866:	4653      	mov	r3, sl
 8000868:	1a89      	subs	r1, r1, r2
 800086a:	408b      	lsls	r3, r1
 800086c:	001d      	movs	r5, r3
 800086e:	4663      	mov	r3, ip
 8000870:	40d3      	lsrs	r3, r2
 8000872:	431d      	orrs	r5, r3
 8000874:	4663      	mov	r3, ip
 8000876:	408b      	lsls	r3, r1
 8000878:	0019      	movs	r1, r3
 800087a:	1e4b      	subs	r3, r1, #1
 800087c:	4199      	sbcs	r1, r3
 800087e:	4653      	mov	r3, sl
 8000880:	40d3      	lsrs	r3, r2
 8000882:	430d      	orrs	r5, r1
 8000884:	18e4      	adds	r4, r4, r3
 8000886:	182d      	adds	r5, r5, r0
 8000888:	4285      	cmp	r5, r0
 800088a:	4180      	sbcs	r0, r0
 800088c:	4240      	negs	r0, r0
 800088e:	1824      	adds	r4, r4, r0
 8000890:	0223      	lsls	r3, r4, #8
 8000892:	d559      	bpl.n	8000948 <__aeabi_dadd+0x2cc>
 8000894:	4b5b      	ldr	r3, [pc, #364]	@ (8000a04 <__aeabi_dadd+0x388>)
 8000896:	3701      	adds	r7, #1
 8000898:	429f      	cmp	r7, r3
 800089a:	d051      	beq.n	8000940 <__aeabi_dadd+0x2c4>
 800089c:	2101      	movs	r1, #1
 800089e:	4b5a      	ldr	r3, [pc, #360]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80008a0:	086a      	lsrs	r2, r5, #1
 80008a2:	401c      	ands	r4, r3
 80008a4:	4029      	ands	r1, r5
 80008a6:	430a      	orrs	r2, r1
 80008a8:	07e5      	lsls	r5, r4, #31
 80008aa:	4315      	orrs	r5, r2
 80008ac:	0864      	lsrs	r4, r4, #1
 80008ae:	e75f      	b.n	8000770 <__aeabi_dadd+0xf4>
 80008b0:	4661      	mov	r1, ip
 80008b2:	4653      	mov	r3, sl
 80008b4:	4319      	orrs	r1, r3
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x23e>
 80008b8:	e0bc      	b.n	8000a34 <__aeabi_dadd+0x3b8>
 80008ba:	1e51      	subs	r1, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x246>
 80008c0:	e164      	b.n	8000b8c <__aeabi_dadd+0x510>
 80008c2:	4d50      	ldr	r5, [pc, #320]	@ (8000a04 <__aeabi_dadd+0x388>)
 80008c4:	42aa      	cmp	r2, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x24e>
 80008c8:	e16a      	b.n	8000ba0 <__aeabi_dadd+0x524>
 80008ca:	2501      	movs	r5, #1
 80008cc:	2938      	cmp	r1, #56	@ 0x38
 80008ce:	dd00      	ble.n	80008d2 <__aeabi_dadd+0x256>
 80008d0:	e722      	b.n	8000718 <__aeabi_dadd+0x9c>
 80008d2:	000a      	movs	r2, r1
 80008d4:	e70e      	b.n	80006f4 <__aeabi_dadd+0x78>
 80008d6:	4a4d      	ldr	r2, [pc, #308]	@ (8000a0c <__aeabi_dadd+0x390>)
 80008d8:	1c7d      	adds	r5, r7, #1
 80008da:	4215      	tst	r5, r2
 80008dc:	d000      	beq.n	80008e0 <__aeabi_dadd+0x264>
 80008de:	e0d0      	b.n	8000a82 <__aeabi_dadd+0x406>
 80008e0:	0025      	movs	r5, r4
 80008e2:	4662      	mov	r2, ip
 80008e4:	4653      	mov	r3, sl
 80008e6:	4305      	orrs	r5, r0
 80008e8:	431a      	orrs	r2, r3
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_dadd+0x274>
 80008ee:	e137      	b.n	8000b60 <__aeabi_dadd+0x4e4>
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x27a>
 80008f4:	e1a8      	b.n	8000c48 <__aeabi_dadd+0x5cc>
 80008f6:	2a00      	cmp	r2, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x280>
 80008fa:	e16a      	b.n	8000bd2 <__aeabi_dadd+0x556>
 80008fc:	4663      	mov	r3, ip
 80008fe:	1ac5      	subs	r5, r0, r3
 8000900:	4653      	mov	r3, sl
 8000902:	1ae2      	subs	r2, r4, r3
 8000904:	42a8      	cmp	r0, r5
 8000906:	419b      	sbcs	r3, r3
 8000908:	425b      	negs	r3, r3
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	021a      	lsls	r2, r3, #8
 800090e:	d400      	bmi.n	8000912 <__aeabi_dadd+0x296>
 8000910:	e203      	b.n	8000d1a <__aeabi_dadd+0x69e>
 8000912:	4663      	mov	r3, ip
 8000914:	1a1d      	subs	r5, r3, r0
 8000916:	45ac      	cmp	ip, r5
 8000918:	4192      	sbcs	r2, r2
 800091a:	4653      	mov	r3, sl
 800091c:	4252      	negs	r2, r2
 800091e:	1b1c      	subs	r4, r3, r4
 8000920:	000e      	movs	r6, r1
 8000922:	4688      	mov	r8, r1
 8000924:	1aa4      	subs	r4, r4, r2
 8000926:	e723      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000928:	4936      	ldr	r1, [pc, #216]	@ (8000a04 <__aeabi_dadd+0x388>)
 800092a:	428f      	cmp	r7, r1
 800092c:	d070      	beq.n	8000a10 <__aeabi_dadd+0x394>
 800092e:	2501      	movs	r5, #1
 8000930:	2a38      	cmp	r2, #56	@ 0x38
 8000932:	dca8      	bgt.n	8000886 <__aeabi_dadd+0x20a>
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	4653      	mov	r3, sl
 8000938:	0409      	lsls	r1, r1, #16
 800093a:	430b      	orrs	r3, r1
 800093c:	469a      	mov	sl, r3
 800093e:	e78e      	b.n	800085e <__aeabi_dadd+0x1e2>
 8000940:	003c      	movs	r4, r7
 8000942:	2500      	movs	r5, #0
 8000944:	2200      	movs	r2, #0
 8000946:	e731      	b.n	80007ac <__aeabi_dadd+0x130>
 8000948:	2307      	movs	r3, #7
 800094a:	402b      	ands	r3, r5
 800094c:	2b00      	cmp	r3, #0
 800094e:	d000      	beq.n	8000952 <__aeabi_dadd+0x2d6>
 8000950:	e710      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000952:	e093      	b.n	8000a7c <__aeabi_dadd+0x400>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d074      	beq.n	8000a42 <__aeabi_dadd+0x3c6>
 8000958:	464a      	mov	r2, r9
 800095a:	1bd2      	subs	r2, r2, r7
 800095c:	2f00      	cmp	r7, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x2e6>
 8000960:	e0c7      	b.n	8000af2 <__aeabi_dadd+0x476>
 8000962:	4928      	ldr	r1, [pc, #160]	@ (8000a04 <__aeabi_dadd+0x388>)
 8000964:	4589      	cmp	r9, r1
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e185      	b.n	8000c76 <__aeabi_dadd+0x5fa>
 800096a:	2501      	movs	r5, #1
 800096c:	2a38      	cmp	r2, #56	@ 0x38
 800096e:	dc12      	bgt.n	8000996 <__aeabi_dadd+0x31a>
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0409      	lsls	r1, r1, #16
 8000974:	430c      	orrs	r4, r1
 8000976:	2a1f      	cmp	r2, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x300>
 800097a:	e1ab      	b.n	8000cd4 <__aeabi_dadd+0x658>
 800097c:	2120      	movs	r1, #32
 800097e:	0025      	movs	r5, r4
 8000980:	1a89      	subs	r1, r1, r2
 8000982:	0007      	movs	r7, r0
 8000984:	4088      	lsls	r0, r1
 8000986:	408d      	lsls	r5, r1
 8000988:	40d7      	lsrs	r7, r2
 800098a:	1e41      	subs	r1, r0, #1
 800098c:	4188      	sbcs	r0, r1
 800098e:	40d4      	lsrs	r4, r2
 8000990:	433d      	orrs	r5, r7
 8000992:	4305      	orrs	r5, r0
 8000994:	44a2      	add	sl, r4
 8000996:	4465      	add	r5, ip
 8000998:	4565      	cmp	r5, ip
 800099a:	4192      	sbcs	r2, r2
 800099c:	4252      	negs	r2, r2
 800099e:	4452      	add	r2, sl
 80009a0:	0014      	movs	r4, r2
 80009a2:	464f      	mov	r7, r9
 80009a4:	e774      	b.n	8000890 <__aeabi_dadd+0x214>
 80009a6:	0028      	movs	r0, r5
 80009a8:	f001 fd24 	bl	80023f4 <__clzsi2>
 80009ac:	0003      	movs	r3, r0
 80009ae:	3318      	adds	r3, #24
 80009b0:	2b1f      	cmp	r3, #31
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_dadd+0x33a>
 80009b4:	e6c2      	b.n	800073c <__aeabi_dadd+0xc0>
 80009b6:	002a      	movs	r2, r5
 80009b8:	3808      	subs	r0, #8
 80009ba:	4082      	lsls	r2, r0
 80009bc:	429f      	cmp	r7, r3
 80009be:	dd00      	ble.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a9      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c2:	1bdb      	subs	r3, r3, r7
 80009c4:	1c58      	adds	r0, r3, #1
 80009c6:	281f      	cmp	r0, #31
 80009c8:	dc00      	bgt.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e1ac      	b.n	8000d26 <__aeabi_dadd+0x6aa>
 80009cc:	0015      	movs	r5, r2
 80009ce:	3b1f      	subs	r3, #31
 80009d0:	40dd      	lsrs	r5, r3
 80009d2:	2820      	cmp	r0, #32
 80009d4:	d005      	beq.n	80009e2 <__aeabi_dadd+0x366>
 80009d6:	2340      	movs	r3, #64	@ 0x40
 80009d8:	1a1b      	subs	r3, r3, r0
 80009da:	409a      	lsls	r2, r3
 80009dc:	1e53      	subs	r3, r2, #1
 80009de:	419a      	sbcs	r2, r3
 80009e0:	4315      	orrs	r5, r2
 80009e2:	2307      	movs	r3, #7
 80009e4:	2700      	movs	r7, #0
 80009e6:	402b      	ands	r3, r5
 80009e8:	e7b0      	b.n	800094c <__aeabi_dadd+0x2d0>
 80009ea:	08ed      	lsrs	r5, r5, #3
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <__aeabi_dadd+0x388>)
 80009ee:	0762      	lsls	r2, r4, #29
 80009f0:	432a      	orrs	r2, r5
 80009f2:	08e4      	lsrs	r4, r4, #3
 80009f4:	429f      	cmp	r7, r3
 80009f6:	d00f      	beq.n	8000a18 <__aeabi_dadd+0x39c>
 80009f8:	0324      	lsls	r4, r4, #12
 80009fa:	0b25      	lsrs	r5, r4, #12
 80009fc:	057c      	lsls	r4, r7, #21
 80009fe:	0d64      	lsrs	r4, r4, #21
 8000a00:	e6d4      	b.n	80007ac <__aeabi_dadd+0x130>
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	ff7fffff 	.word	0xff7fffff
 8000a0c:	000007fe 	.word	0x000007fe
 8000a10:	08c0      	lsrs	r0, r0, #3
 8000a12:	0762      	lsls	r2, r4, #29
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08e4      	lsrs	r4, r4, #3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	4323      	orrs	r3, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e186      	b.n	8000d2e <__aeabi_dadd+0x6b2>
 8000a20:	2580      	movs	r5, #128	@ 0x80
 8000a22:	032d      	lsls	r5, r5, #12
 8000a24:	4325      	orrs	r5, r4
 8000a26:	032d      	lsls	r5, r5, #12
 8000a28:	4cc3      	ldr	r4, [pc, #780]	@ (8000d38 <__aeabi_dadd+0x6bc>)
 8000a2a:	0b2d      	lsrs	r5, r5, #12
 8000a2c:	e6be      	b.n	80007ac <__aeabi_dadd+0x130>
 8000a2e:	4660      	mov	r0, ip
 8000a30:	4654      	mov	r4, sl
 8000a32:	000e      	movs	r6, r1
 8000a34:	0017      	movs	r7, r2
 8000a36:	08c5      	lsrs	r5, r0, #3
 8000a38:	e7d8      	b.n	80009ec <__aeabi_dadd+0x370>
 8000a3a:	4cc0      	ldr	r4, [pc, #768]	@ (8000d3c <__aeabi_dadd+0x6c0>)
 8000a3c:	1aff      	subs	r7, r7, r3
 8000a3e:	4014      	ands	r4, r2
 8000a40:	e696      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a42:	4abf      	ldr	r2, [pc, #764]	@ (8000d40 <__aeabi_dadd+0x6c4>)
 8000a44:	1c79      	adds	r1, r7, #1
 8000a46:	4211      	tst	r1, r2
 8000a48:	d16b      	bne.n	8000b22 <__aeabi_dadd+0x4a6>
 8000a4a:	0022      	movs	r2, r4
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x3d8>
 8000a52:	e0db      	b.n	8000c0c <__aeabi_dadd+0x590>
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x3de>
 8000a58:	e12d      	b.n	8000cb6 <__aeabi_dadd+0x63a>
 8000a5a:	4662      	mov	r2, ip
 8000a5c:	4653      	mov	r3, sl
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x3e8>
 8000a62:	e0b6      	b.n	8000bd2 <__aeabi_dadd+0x556>
 8000a64:	4663      	mov	r3, ip
 8000a66:	18c5      	adds	r5, r0, r3
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	4180      	sbcs	r0, r0
 8000a6c:	4454      	add	r4, sl
 8000a6e:	4240      	negs	r0, r0
 8000a70:	1824      	adds	r4, r4, r0
 8000a72:	0223      	lsls	r3, r4, #8
 8000a74:	d502      	bpl.n	8000a7c <__aeabi_dadd+0x400>
 8000a76:	000f      	movs	r7, r1
 8000a78:	4bb0      	ldr	r3, [pc, #704]	@ (8000d3c <__aeabi_dadd+0x6c0>)
 8000a7a:	401c      	ands	r4, r3
 8000a7c:	003a      	movs	r2, r7
 8000a7e:	0028      	movs	r0, r5
 8000a80:	e7d8      	b.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a82:	4662      	mov	r2, ip
 8000a84:	1a85      	subs	r5, r0, r2
 8000a86:	42a8      	cmp	r0, r5
 8000a88:	4192      	sbcs	r2, r2
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	4691      	mov	r9, r2
 8000a90:	1ae3      	subs	r3, r4, r3
 8000a92:	001a      	movs	r2, r3
 8000a94:	464b      	mov	r3, r9
 8000a96:	1ad2      	subs	r2, r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	021a      	lsls	r2, r3, #8
 8000a9e:	d454      	bmi.n	8000b4a <__aeabi_dadd+0x4ce>
 8000aa0:	464a      	mov	r2, r9
 8000aa2:	464c      	mov	r4, r9
 8000aa4:	432a      	orrs	r2, r5
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x42e>
 8000aa8:	e640      	b.n	800072c <__aeabi_dadd+0xb0>
 8000aaa:	2600      	movs	r6, #0
 8000aac:	2400      	movs	r4, #0
 8000aae:	2500      	movs	r5, #0
 8000ab0:	e67c      	b.n	80007ac <__aeabi_dadd+0x130>
 8000ab2:	4da1      	ldr	r5, [pc, #644]	@ (8000d38 <__aeabi_dadd+0x6bc>)
 8000ab4:	45a9      	cmp	r9, r5
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x43e>
 8000ab8:	e090      	b.n	8000bdc <__aeabi_dadd+0x560>
 8000aba:	2501      	movs	r5, #1
 8000abc:	2a38      	cmp	r2, #56	@ 0x38
 8000abe:	dd00      	ble.n	8000ac2 <__aeabi_dadd+0x446>
 8000ac0:	e6ab      	b.n	800081a <__aeabi_dadd+0x19e>
 8000ac2:	2580      	movs	r5, #128	@ 0x80
 8000ac4:	042d      	lsls	r5, r5, #16
 8000ac6:	432c      	orrs	r4, r5
 8000ac8:	e695      	b.n	80007f6 <__aeabi_dadd+0x17a>
 8000aca:	0011      	movs	r1, r2
 8000acc:	4655      	mov	r5, sl
 8000ace:	3920      	subs	r1, #32
 8000ad0:	40cd      	lsrs	r5, r1
 8000ad2:	46a9      	mov	r9, r5
 8000ad4:	2a20      	cmp	r2, #32
 8000ad6:	d006      	beq.n	8000ae6 <__aeabi_dadd+0x46a>
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	4653      	mov	r3, sl
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	4665      	mov	r5, ip
 8000ae8:	1e6b      	subs	r3, r5, #1
 8000aea:	419d      	sbcs	r5, r3
 8000aec:	464b      	mov	r3, r9
 8000aee:	431d      	orrs	r5, r3
 8000af0:	e612      	b.n	8000718 <__aeabi_dadd+0x9c>
 8000af2:	0021      	movs	r1, r4
 8000af4:	4301      	orrs	r1, r0
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0x47e>
 8000af8:	e0c4      	b.n	8000c84 <__aeabi_dadd+0x608>
 8000afa:	1e51      	subs	r1, r2, #1
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x486>
 8000b00:	e0fb      	b.n	8000cfa <__aeabi_dadd+0x67e>
 8000b02:	4d8d      	ldr	r5, [pc, #564]	@ (8000d38 <__aeabi_dadd+0x6bc>)
 8000b04:	42aa      	cmp	r2, r5
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x48e>
 8000b08:	e0b5      	b.n	8000c76 <__aeabi_dadd+0x5fa>
 8000b0a:	2501      	movs	r5, #1
 8000b0c:	2938      	cmp	r1, #56	@ 0x38
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_dadd+0x496>
 8000b10:	e741      	b.n	8000996 <__aeabi_dadd+0x31a>
 8000b12:	000a      	movs	r2, r1
 8000b14:	e72f      	b.n	8000976 <__aeabi_dadd+0x2fa>
 8000b16:	4c89      	ldr	r4, [pc, #548]	@ (8000d3c <__aeabi_dadd+0x6c0>)
 8000b18:	1aff      	subs	r7, r7, r3
 8000b1a:	4014      	ands	r4, r2
 8000b1c:	0762      	lsls	r2, r4, #29
 8000b1e:	08e4      	lsrs	r4, r4, #3
 8000b20:	e76a      	b.n	80009f8 <__aeabi_dadd+0x37c>
 8000b22:	4a85      	ldr	r2, [pc, #532]	@ (8000d38 <__aeabi_dadd+0x6bc>)
 8000b24:	4291      	cmp	r1, r2
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x4ae>
 8000b28:	e0e3      	b.n	8000cf2 <__aeabi_dadd+0x676>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	18c2      	adds	r2, r0, r3
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	4180      	sbcs	r0, r0
 8000b32:	0023      	movs	r3, r4
 8000b34:	4240      	negs	r0, r0
 8000b36:	4453      	add	r3, sl
 8000b38:	181b      	adds	r3, r3, r0
 8000b3a:	07dd      	lsls	r5, r3, #31
 8000b3c:	085c      	lsrs	r4, r3, #1
 8000b3e:	2307      	movs	r3, #7
 8000b40:	0852      	lsrs	r2, r2, #1
 8000b42:	4315      	orrs	r5, r2
 8000b44:	000f      	movs	r7, r1
 8000b46:	402b      	ands	r3, r5
 8000b48:	e700      	b.n	800094c <__aeabi_dadd+0x2d0>
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	1a1d      	subs	r5, r3, r0
 8000b4e:	45ac      	cmp	ip, r5
 8000b50:	4192      	sbcs	r2, r2
 8000b52:	4653      	mov	r3, sl
 8000b54:	4252      	negs	r2, r2
 8000b56:	1b1c      	subs	r4, r3, r4
 8000b58:	000e      	movs	r6, r1
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	1aa4      	subs	r4, r4, r2
 8000b5e:	e5e5      	b.n	800072c <__aeabi_dadd+0xb0>
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d000      	beq.n	8000b66 <__aeabi_dadd+0x4ea>
 8000b64:	e091      	b.n	8000c8a <__aeabi_dadd+0x60e>
 8000b66:	2a00      	cmp	r2, #0
 8000b68:	d138      	bne.n	8000bdc <__aeabi_dadd+0x560>
 8000b6a:	2480      	movs	r4, #128	@ 0x80
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	0324      	lsls	r4, r4, #12
 8000b70:	e756      	b.n	8000a20 <__aeabi_dadd+0x3a4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	18c5      	adds	r5, r0, r3
 8000b76:	4285      	cmp	r5, r0
 8000b78:	4180      	sbcs	r0, r0
 8000b7a:	4454      	add	r4, sl
 8000b7c:	4240      	negs	r0, r0
 8000b7e:	1824      	adds	r4, r4, r0
 8000b80:	2701      	movs	r7, #1
 8000b82:	0223      	lsls	r3, r4, #8
 8000b84:	d400      	bmi.n	8000b88 <__aeabi_dadd+0x50c>
 8000b86:	e6df      	b.n	8000948 <__aeabi_dadd+0x2cc>
 8000b88:	2702      	movs	r7, #2
 8000b8a:	e687      	b.n	800089c <__aeabi_dadd+0x220>
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	1ac5      	subs	r5, r0, r3
 8000b90:	42a8      	cmp	r0, r5
 8000b92:	4180      	sbcs	r0, r0
 8000b94:	4653      	mov	r3, sl
 8000b96:	4240      	negs	r0, r0
 8000b98:	1ae4      	subs	r4, r4, r3
 8000b9a:	2701      	movs	r7, #1
 8000b9c:	1a24      	subs	r4, r4, r0
 8000b9e:	e5c0      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000ba0:	0762      	lsls	r2, r4, #29
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	4302      	orrs	r2, r0
 8000ba6:	08e4      	lsrs	r4, r4, #3
 8000ba8:	e736      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000baa:	0011      	movs	r1, r2
 8000bac:	4653      	mov	r3, sl
 8000bae:	3920      	subs	r1, #32
 8000bb0:	40cb      	lsrs	r3, r1
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	2a20      	cmp	r2, #32
 8000bb6:	d006      	beq.n	8000bc6 <__aeabi_dadd+0x54a>
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4653      	mov	r3, sl
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	4662      	mov	r2, ip
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	4665      	mov	r5, ip
 8000bc8:	1e6b      	subs	r3, r5, #1
 8000bca:	419d      	sbcs	r5, r3
 8000bcc:	464b      	mov	r3, r9
 8000bce:	431d      	orrs	r5, r3
 8000bd0:	e659      	b.n	8000886 <__aeabi_dadd+0x20a>
 8000bd2:	0762      	lsls	r2, r4, #29
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	08e4      	lsrs	r4, r4, #3
 8000bda:	e70d      	b.n	80009f8 <__aeabi_dadd+0x37c>
 8000bdc:	4653      	mov	r3, sl
 8000bde:	075a      	lsls	r2, r3, #29
 8000be0:	4663      	mov	r3, ip
 8000be2:	08d8      	lsrs	r0, r3, #3
 8000be4:	4653      	mov	r3, sl
 8000be6:	000e      	movs	r6, r1
 8000be8:	4302      	orrs	r2, r0
 8000bea:	08dc      	lsrs	r4, r3, #3
 8000bec:	e714      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000bee:	0015      	movs	r5, r2
 8000bf0:	0026      	movs	r6, r4
 8000bf2:	3d20      	subs	r5, #32
 8000bf4:	40ee      	lsrs	r6, r5
 8000bf6:	2a20      	cmp	r2, #32
 8000bf8:	d003      	beq.n	8000c02 <__aeabi_dadd+0x586>
 8000bfa:	2540      	movs	r5, #64	@ 0x40
 8000bfc:	1aaa      	subs	r2, r5, r2
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	4320      	orrs	r0, r4
 8000c02:	1e42      	subs	r2, r0, #1
 8000c04:	4190      	sbcs	r0, r2
 8000c06:	0005      	movs	r5, r0
 8000c08:	4335      	orrs	r5, r6
 8000c0a:	e606      	b.n	800081a <__aeabi_dadd+0x19e>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d07c      	beq.n	8000d0a <__aeabi_dadd+0x68e>
 8000c10:	4662      	mov	r2, ip
 8000c12:	4653      	mov	r3, sl
 8000c14:	08c0      	lsrs	r0, r0, #3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x5a0>
 8000c1a:	e6fa      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	4310      	orrs	r0, r2
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	0312      	lsls	r2, r2, #12
 8000c26:	4214      	tst	r4, r2
 8000c28:	d008      	beq.n	8000c3c <__aeabi_dadd+0x5c0>
 8000c2a:	08d9      	lsrs	r1, r3, #3
 8000c2c:	4211      	tst	r1, r2
 8000c2e:	d105      	bne.n	8000c3c <__aeabi_dadd+0x5c0>
 8000c30:	4663      	mov	r3, ip
 8000c32:	08d8      	lsrs	r0, r3, #3
 8000c34:	4653      	mov	r3, sl
 8000c36:	000c      	movs	r4, r1
 8000c38:	075b      	lsls	r3, r3, #29
 8000c3a:	4318      	orrs	r0, r3
 8000c3c:	0f42      	lsrs	r2, r0, #29
 8000c3e:	00c0      	lsls	r0, r0, #3
 8000c40:	08c0      	lsrs	r0, r0, #3
 8000c42:	0752      	lsls	r2, r2, #29
 8000c44:	4302      	orrs	r2, r0
 8000c46:	e6e7      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x5d2>
 8000c4c:	e72d      	b.n	8000aaa <__aeabi_dadd+0x42e>
 8000c4e:	4663      	mov	r3, ip
 8000c50:	08d8      	lsrs	r0, r3, #3
 8000c52:	4653      	mov	r3, sl
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	000e      	movs	r6, r1
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	08dc      	lsrs	r4, r3, #3
 8000c5c:	e6cc      	b.n	80009f8 <__aeabi_dadd+0x37c>
 8000c5e:	4663      	mov	r3, ip
 8000c60:	1a1d      	subs	r5, r3, r0
 8000c62:	45ac      	cmp	ip, r5
 8000c64:	4192      	sbcs	r2, r2
 8000c66:	4653      	mov	r3, sl
 8000c68:	4252      	negs	r2, r2
 8000c6a:	1b1c      	subs	r4, r3, r4
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	4688      	mov	r8, r1
 8000c70:	1aa4      	subs	r4, r4, r2
 8000c72:	3701      	adds	r7, #1
 8000c74:	e555      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000c76:	4663      	mov	r3, ip
 8000c78:	08d9      	lsrs	r1, r3, #3
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	075a      	lsls	r2, r3, #29
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	08dc      	lsrs	r4, r3, #3
 8000c82:	e6c9      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000c84:	4660      	mov	r0, ip
 8000c86:	4654      	mov	r4, sl
 8000c88:	e6d4      	b.n	8000a34 <__aeabi_dadd+0x3b8>
 8000c8a:	08c0      	lsrs	r0, r0, #3
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x616>
 8000c90:	e6bf      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000c92:	0762      	lsls	r2, r4, #29
 8000c94:	4310      	orrs	r0, r2
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	08e4      	lsrs	r4, r4, #3
 8000c9a:	0312      	lsls	r2, r2, #12
 8000c9c:	4214      	tst	r4, r2
 8000c9e:	d0cd      	beq.n	8000c3c <__aeabi_dadd+0x5c0>
 8000ca0:	08dd      	lsrs	r5, r3, #3
 8000ca2:	4215      	tst	r5, r2
 8000ca4:	d1ca      	bne.n	8000c3c <__aeabi_dadd+0x5c0>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	08d8      	lsrs	r0, r3, #3
 8000caa:	4653      	mov	r3, sl
 8000cac:	075b      	lsls	r3, r3, #29
 8000cae:	000e      	movs	r6, r1
 8000cb0:	002c      	movs	r4, r5
 8000cb2:	4318      	orrs	r0, r3
 8000cb4:	e7c2      	b.n	8000c3c <__aeabi_dadd+0x5c0>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	08d9      	lsrs	r1, r3, #3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	075a      	lsls	r2, r3, #29
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	08dc      	lsrs	r4, r3, #3
 8000cc2:	e699      	b.n	80009f8 <__aeabi_dadd+0x37c>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	08d8      	lsrs	r0, r3, #3
 8000cc8:	4653      	mov	r3, sl
 8000cca:	075a      	lsls	r2, r3, #29
 8000ccc:	000e      	movs	r6, r1
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	08dc      	lsrs	r4, r3, #3
 8000cd2:	e6a1      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0027      	movs	r7, r4
 8000cd8:	3920      	subs	r1, #32
 8000cda:	40cf      	lsrs	r7, r1
 8000cdc:	2a20      	cmp	r2, #32
 8000cde:	d003      	beq.n	8000ce8 <__aeabi_dadd+0x66c>
 8000ce0:	2140      	movs	r1, #64	@ 0x40
 8000ce2:	1a8a      	subs	r2, r1, r2
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	4320      	orrs	r0, r4
 8000ce8:	1e42      	subs	r2, r0, #1
 8000cea:	4190      	sbcs	r0, r2
 8000cec:	0005      	movs	r5, r0
 8000cee:	433d      	orrs	r5, r7
 8000cf0:	e651      	b.n	8000996 <__aeabi_dadd+0x31a>
 8000cf2:	000c      	movs	r4, r1
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	e558      	b.n	80007ac <__aeabi_dadd+0x130>
 8000cfa:	4460      	add	r0, ip
 8000cfc:	4560      	cmp	r0, ip
 8000cfe:	4192      	sbcs	r2, r2
 8000d00:	4454      	add	r4, sl
 8000d02:	4252      	negs	r2, r2
 8000d04:	0005      	movs	r5, r0
 8000d06:	18a4      	adds	r4, r4, r2
 8000d08:	e73a      	b.n	8000b80 <__aeabi_dadd+0x504>
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	075a      	lsls	r2, r3, #29
 8000d0e:	4663      	mov	r3, ip
 8000d10:	08d9      	lsrs	r1, r3, #3
 8000d12:	4653      	mov	r3, sl
 8000d14:	430a      	orrs	r2, r1
 8000d16:	08dc      	lsrs	r4, r3, #3
 8000d18:	e67e      	b.n	8000a18 <__aeabi_dadd+0x39c>
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	001c      	movs	r4, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	d000      	beq.n	8000d24 <__aeabi_dadd+0x6a8>
 8000d22:	e6ab      	b.n	8000a7c <__aeabi_dadd+0x400>
 8000d24:	e6c1      	b.n	8000aaa <__aeabi_dadd+0x42e>
 8000d26:	2120      	movs	r1, #32
 8000d28:	2500      	movs	r5, #0
 8000d2a:	1a09      	subs	r1, r1, r0
 8000d2c:	e519      	b.n	8000762 <__aeabi_dadd+0xe6>
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2500      	movs	r5, #0
 8000d32:	4c01      	ldr	r4, [pc, #4]	@ (8000d38 <__aeabi_dadd+0x6bc>)
 8000d34:	e53a      	b.n	80007ac <__aeabi_dadd+0x130>
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	000007ff 	.word	0x000007ff
 8000d3c:	ff7fffff 	.word	0xff7fffff
 8000d40:	000007fe 	.word	0x000007fe

08000d44 <__aeabi_ddiv>:
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	46de      	mov	lr, fp
 8000d48:	4645      	mov	r5, r8
 8000d4a:	4657      	mov	r7, sl
 8000d4c:	464e      	mov	r6, r9
 8000d4e:	b5e0      	push	{r5, r6, r7, lr}
 8000d50:	b087      	sub	sp, #28
 8000d52:	9200      	str	r2, [sp, #0]
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	030b      	lsls	r3, r1, #12
 8000d58:	0b1b      	lsrs	r3, r3, #12
 8000d5a:	469b      	mov	fp, r3
 8000d5c:	0fca      	lsrs	r2, r1, #31
 8000d5e:	004b      	lsls	r3, r1, #1
 8000d60:	0004      	movs	r4, r0
 8000d62:	4680      	mov	r8, r0
 8000d64:	0d5b      	lsrs	r3, r3, #21
 8000d66:	9202      	str	r2, [sp, #8]
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x28>
 8000d6a:	e16a      	b.n	8001042 <__aeabi_ddiv+0x2fe>
 8000d6c:	4ad4      	ldr	r2, [pc, #848]	@ (80010c0 <__aeabi_ddiv+0x37c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d100      	bne.n	8000d74 <__aeabi_ddiv+0x30>
 8000d72:	e18c      	b.n	800108e <__aeabi_ddiv+0x34a>
 8000d74:	4659      	mov	r1, fp
 8000d76:	0f42      	lsrs	r2, r0, #29
 8000d78:	00c9      	lsls	r1, r1, #3
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0409      	lsls	r1, r1, #16
 8000d80:	4311      	orrs	r1, r2
 8000d82:	00c2      	lsls	r2, r0, #3
 8000d84:	4690      	mov	r8, r2
 8000d86:	4acf      	ldr	r2, [pc, #828]	@ (80010c4 <__aeabi_ddiv+0x380>)
 8000d88:	4689      	mov	r9, r1
 8000d8a:	4692      	mov	sl, r2
 8000d8c:	449a      	add	sl, r3
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2400      	movs	r4, #0
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	9e00      	ldr	r6, [sp, #0]
 8000d96:	9f01      	ldr	r7, [sp, #4]
 8000d98:	033b      	lsls	r3, r7, #12
 8000d9a:	0b1b      	lsrs	r3, r3, #12
 8000d9c:	469b      	mov	fp, r3
 8000d9e:	007b      	lsls	r3, r7, #1
 8000da0:	0030      	movs	r0, r6
 8000da2:	0d5b      	lsrs	r3, r3, #21
 8000da4:	0ffd      	lsrs	r5, r7, #31
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_ddiv+0x68>
 8000daa:	e128      	b.n	8000ffe <__aeabi_ddiv+0x2ba>
 8000dac:	4ac4      	ldr	r2, [pc, #784]	@ (80010c0 <__aeabi_ddiv+0x37c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d100      	bne.n	8000db4 <__aeabi_ddiv+0x70>
 8000db2:	e177      	b.n	80010a4 <__aeabi_ddiv+0x360>
 8000db4:	4659      	mov	r1, fp
 8000db6:	0f72      	lsrs	r2, r6, #29
 8000db8:	00c9      	lsls	r1, r1, #3
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	2180      	movs	r1, #128	@ 0x80
 8000dbe:	0409      	lsls	r1, r1, #16
 8000dc0:	4311      	orrs	r1, r2
 8000dc2:	468b      	mov	fp, r1
 8000dc4:	49bf      	ldr	r1, [pc, #764]	@ (80010c4 <__aeabi_ddiv+0x380>)
 8000dc6:	00f2      	lsls	r2, r6, #3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	4651      	mov	r1, sl
 8000dcc:	4463      	add	r3, ip
 8000dce:	1acb      	subs	r3, r1, r3
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9e02      	ldr	r6, [sp, #8]
 8000dd6:	406e      	eors	r6, r5
 8000dd8:	2c0f      	cmp	r4, #15
 8000dda:	d827      	bhi.n	8000e2c <__aeabi_ddiv+0xe8>
 8000ddc:	49ba      	ldr	r1, [pc, #744]	@ (80010c8 <__aeabi_ddiv+0x384>)
 8000dde:	00a4      	lsls	r4, r4, #2
 8000de0:	5909      	ldr	r1, [r1, r4]
 8000de2:	468f      	mov	pc, r1
 8000de4:	46cb      	mov	fp, r9
 8000de6:	4642      	mov	r2, r8
 8000de8:	9e02      	ldr	r6, [sp, #8]
 8000dea:	9b03      	ldr	r3, [sp, #12]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <__aeabi_ddiv+0xda>
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0xb2>
 8000df4:	e2a6      	b.n	8001344 <__aeabi_ddiv+0x600>
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d000      	beq.n	8000dfc <__aeabi_ddiv+0xb8>
 8000dfa:	e0df      	b.n	8000fbc <__aeabi_ddiv+0x278>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2400      	movs	r4, #0
 8000e02:	4690      	mov	r8, r2
 8000e04:	051b      	lsls	r3, r3, #20
 8000e06:	4323      	orrs	r3, r4
 8000e08:	07f6      	lsls	r6, r6, #31
 8000e0a:	4333      	orrs	r3, r6
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	0019      	movs	r1, r3
 8000e10:	b007      	add	sp, #28
 8000e12:	bcf0      	pop	{r4, r5, r6, r7}
 8000e14:	46bb      	mov	fp, r7
 8000e16:	46b2      	mov	sl, r6
 8000e18:	46a9      	mov	r9, r5
 8000e1a:	46a0      	mov	r8, r4
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2400      	movs	r4, #0
 8000e22:	4690      	mov	r8, r2
 8000e24:	4ba6      	ldr	r3, [pc, #664]	@ (80010c0 <__aeabi_ddiv+0x37c>)
 8000e26:	e7ed      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 8000e28:	002e      	movs	r6, r5
 8000e2a:	e7df      	b.n	8000dec <__aeabi_ddiv+0xa8>
 8000e2c:	45cb      	cmp	fp, r9
 8000e2e:	d200      	bcs.n	8000e32 <__aeabi_ddiv+0xee>
 8000e30:	e1d4      	b.n	80011dc <__aeabi_ddiv+0x498>
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0xf2>
 8000e34:	e1cf      	b.n	80011d6 <__aeabi_ddiv+0x492>
 8000e36:	2301      	movs	r3, #1
 8000e38:	425b      	negs	r3, r3
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	4644      	mov	r4, r8
 8000e3e:	4648      	mov	r0, r9
 8000e40:	2700      	movs	r7, #0
 8000e42:	44e2      	add	sl, ip
 8000e44:	465b      	mov	r3, fp
 8000e46:	0e15      	lsrs	r5, r2, #24
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	431d      	orrs	r5, r3
 8000e4c:	0c19      	lsrs	r1, r3, #16
 8000e4e:	042b      	lsls	r3, r5, #16
 8000e50:	0212      	lsls	r2, r2, #8
 8000e52:	9500      	str	r5, [sp, #0]
 8000e54:	0c1d      	lsrs	r5, r3, #16
 8000e56:	4691      	mov	r9, r2
 8000e58:	9102      	str	r1, [sp, #8]
 8000e5a:	9503      	str	r5, [sp, #12]
 8000e5c:	f7ff f9f4 	bl	8000248 <__aeabi_uidivmod>
 8000e60:	0002      	movs	r2, r0
 8000e62:	436a      	muls	r2, r5
 8000e64:	040b      	lsls	r3, r1, #16
 8000e66:	0c21      	lsrs	r1, r4, #16
 8000e68:	4680      	mov	r8, r0
 8000e6a:	4319      	orrs	r1, r3
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d909      	bls.n	8000e84 <__aeabi_ddiv+0x140>
 8000e70:	9d00      	ldr	r5, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	46ac      	mov	ip, r5
 8000e76:	425b      	negs	r3, r3
 8000e78:	4461      	add	r1, ip
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	44e0      	add	r8, ip
 8000e7e:	428d      	cmp	r5, r1
 8000e80:	d800      	bhi.n	8000e84 <__aeabi_ddiv+0x140>
 8000e82:	e1fb      	b.n	800127c <__aeabi_ddiv+0x538>
 8000e84:	1a88      	subs	r0, r1, r2
 8000e86:	9902      	ldr	r1, [sp, #8]
 8000e88:	f7ff f9de 	bl	8000248 <__aeabi_uidivmod>
 8000e8c:	9a03      	ldr	r2, [sp, #12]
 8000e8e:	0424      	lsls	r4, r4, #16
 8000e90:	4342      	muls	r2, r0
 8000e92:	0409      	lsls	r1, r1, #16
 8000e94:	0c24      	lsrs	r4, r4, #16
 8000e96:	0003      	movs	r3, r0
 8000e98:	430c      	orrs	r4, r1
 8000e9a:	42a2      	cmp	r2, r4
 8000e9c:	d906      	bls.n	8000eac <__aeabi_ddiv+0x168>
 8000e9e:	9900      	ldr	r1, [sp, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	468c      	mov	ip, r1
 8000ea4:	4464      	add	r4, ip
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	d800      	bhi.n	8000eac <__aeabi_ddiv+0x168>
 8000eaa:	e1e1      	b.n	8001270 <__aeabi_ddiv+0x52c>
 8000eac:	1aa0      	subs	r0, r4, r2
 8000eae:	4642      	mov	r2, r8
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	4693      	mov	fp, r2
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	4659      	mov	r1, fp
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001d      	movs	r5, r3
 8000ebe:	9304      	str	r3, [sp, #16]
 8000ec0:	040b      	lsls	r3, r1, #16
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	0409      	lsls	r1, r1, #16
 8000ec6:	0c09      	lsrs	r1, r1, #16
 8000ec8:	000c      	movs	r4, r1
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	435c      	muls	r4, r3
 8000ece:	0c12      	lsrs	r2, r2, #16
 8000ed0:	436b      	muls	r3, r5
 8000ed2:	4688      	mov	r8, r1
 8000ed4:	4351      	muls	r1, r2
 8000ed6:	436a      	muls	r2, r5
 8000ed8:	0c25      	lsrs	r5, r4, #16
 8000eda:	46ac      	mov	ip, r5
 8000edc:	185b      	adds	r3, r3, r1
 8000ede:	4463      	add	r3, ip
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	d903      	bls.n	8000eec <__aeabi_ddiv+0x1a8>
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0249      	lsls	r1, r1, #9
 8000ee8:	468c      	mov	ip, r1
 8000eea:	4462      	add	r2, ip
 8000eec:	0c19      	lsrs	r1, r3, #16
 8000eee:	0424      	lsls	r4, r4, #16
 8000ef0:	041b      	lsls	r3, r3, #16
 8000ef2:	0c24      	lsrs	r4, r4, #16
 8000ef4:	188a      	adds	r2, r1, r2
 8000ef6:	191c      	adds	r4, r3, r4
 8000ef8:	4290      	cmp	r0, r2
 8000efa:	d302      	bcc.n	8000f02 <__aeabi_ddiv+0x1be>
 8000efc:	d116      	bne.n	8000f2c <__aeabi_ddiv+0x1e8>
 8000efe:	42a7      	cmp	r7, r4
 8000f00:	d214      	bcs.n	8000f2c <__aeabi_ddiv+0x1e8>
 8000f02:	465b      	mov	r3, fp
 8000f04:	9d00      	ldr	r5, [sp, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	444f      	add	r7, r9
 8000f0a:	9305      	str	r3, [sp, #20]
 8000f0c:	454f      	cmp	r7, r9
 8000f0e:	419b      	sbcs	r3, r3
 8000f10:	46ac      	mov	ip, r5
 8000f12:	425b      	negs	r3, r3
 8000f14:	4463      	add	r3, ip
 8000f16:	18c0      	adds	r0, r0, r3
 8000f18:	4285      	cmp	r5, r0
 8000f1a:	d300      	bcc.n	8000f1e <__aeabi_ddiv+0x1da>
 8000f1c:	e1a1      	b.n	8001262 <__aeabi_ddiv+0x51e>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	d900      	bls.n	8000f24 <__aeabi_ddiv+0x1e0>
 8000f22:	e1f6      	b.n	8001312 <__aeabi_ddiv+0x5ce>
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0x1e4>
 8000f26:	e1f1      	b.n	800130c <__aeabi_ddiv+0x5c8>
 8000f28:	9b05      	ldr	r3, [sp, #20]
 8000f2a:	469b      	mov	fp, r3
 8000f2c:	1b3c      	subs	r4, r7, r4
 8000f2e:	42a7      	cmp	r7, r4
 8000f30:	41bf      	sbcs	r7, r7
 8000f32:	9d00      	ldr	r5, [sp, #0]
 8000f34:	1a80      	subs	r0, r0, r2
 8000f36:	427f      	negs	r7, r7
 8000f38:	1bc0      	subs	r0, r0, r7
 8000f3a:	4285      	cmp	r5, r0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_ddiv+0x1fc>
 8000f3e:	e1d0      	b.n	80012e2 <__aeabi_ddiv+0x59e>
 8000f40:	9902      	ldr	r1, [sp, #8]
 8000f42:	f7ff f981 	bl	8000248 <__aeabi_uidivmod>
 8000f46:	9a03      	ldr	r2, [sp, #12]
 8000f48:	040b      	lsls	r3, r1, #16
 8000f4a:	4342      	muls	r2, r0
 8000f4c:	0c21      	lsrs	r1, r4, #16
 8000f4e:	0007      	movs	r7, r0
 8000f50:	4319      	orrs	r1, r3
 8000f52:	428a      	cmp	r2, r1
 8000f54:	d900      	bls.n	8000f58 <__aeabi_ddiv+0x214>
 8000f56:	e178      	b.n	800124a <__aeabi_ddiv+0x506>
 8000f58:	1a88      	subs	r0, r1, r2
 8000f5a:	9902      	ldr	r1, [sp, #8]
 8000f5c:	f7ff f974 	bl	8000248 <__aeabi_uidivmod>
 8000f60:	9a03      	ldr	r2, [sp, #12]
 8000f62:	0424      	lsls	r4, r4, #16
 8000f64:	4342      	muls	r2, r0
 8000f66:	0409      	lsls	r1, r1, #16
 8000f68:	0c24      	lsrs	r4, r4, #16
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	430c      	orrs	r4, r1
 8000f6e:	42a2      	cmp	r2, r4
 8000f70:	d900      	bls.n	8000f74 <__aeabi_ddiv+0x230>
 8000f72:	e15d      	b.n	8001230 <__aeabi_ddiv+0x4ec>
 8000f74:	4641      	mov	r1, r8
 8000f76:	1aa4      	subs	r4, r4, r2
 8000f78:	043a      	lsls	r2, r7, #16
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	9d04      	ldr	r5, [sp, #16]
 8000f7e:	0413      	lsls	r3, r2, #16
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	4359      	muls	r1, r3
 8000f84:	4647      	mov	r7, r8
 8000f86:	436b      	muls	r3, r5
 8000f88:	469c      	mov	ip, r3
 8000f8a:	0c10      	lsrs	r0, r2, #16
 8000f8c:	4347      	muls	r7, r0
 8000f8e:	0c0b      	lsrs	r3, r1, #16
 8000f90:	44bc      	add	ip, r7
 8000f92:	4463      	add	r3, ip
 8000f94:	4368      	muls	r0, r5
 8000f96:	429f      	cmp	r7, r3
 8000f98:	d903      	bls.n	8000fa2 <__aeabi_ddiv+0x25e>
 8000f9a:	2580      	movs	r5, #128	@ 0x80
 8000f9c:	026d      	lsls	r5, r5, #9
 8000f9e:	46ac      	mov	ip, r5
 8000fa0:	4460      	add	r0, ip
 8000fa2:	0c1f      	lsrs	r7, r3, #16
 8000fa4:	0409      	lsls	r1, r1, #16
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	0c09      	lsrs	r1, r1, #16
 8000faa:	183f      	adds	r7, r7, r0
 8000fac:	185b      	adds	r3, r3, r1
 8000fae:	42bc      	cmp	r4, r7
 8000fb0:	d200      	bcs.n	8000fb4 <__aeabi_ddiv+0x270>
 8000fb2:	e102      	b.n	80011ba <__aeabi_ddiv+0x476>
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x274>
 8000fb6:	e0fd      	b.n	80011b4 <__aeabi_ddiv+0x470>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <__aeabi_ddiv+0x388>)
 8000fbe:	4453      	add	r3, sl
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_ddiv+0x282>
 8000fc4:	e0ae      	b.n	8001124 <__aeabi_ddiv+0x3e0>
 8000fc6:	0751      	lsls	r1, r2, #29
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_ddiv+0x288>
 8000fca:	e198      	b.n	80012fe <__aeabi_ddiv+0x5ba>
 8000fcc:	4659      	mov	r1, fp
 8000fce:	01c9      	lsls	r1, r1, #7
 8000fd0:	d506      	bpl.n	8000fe0 <__aeabi_ddiv+0x29c>
 8000fd2:	4659      	mov	r1, fp
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <__aeabi_ddiv+0x38c>)
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	468b      	mov	fp, r1
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4453      	add	r3, sl
 8000fe0:	493c      	ldr	r1, [pc, #240]	@ (80010d4 <__aeabi_ddiv+0x390>)
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_ddiv+0x2a4>
 8000fe6:	e71a      	b.n	8000e1e <__aeabi_ddiv+0xda>
 8000fe8:	4659      	mov	r1, fp
 8000fea:	08d2      	lsrs	r2, r2, #3
 8000fec:	0749      	lsls	r1, r1, #29
 8000fee:	4311      	orrs	r1, r2
 8000ff0:	465a      	mov	r2, fp
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	0254      	lsls	r4, r2, #9
 8000ff6:	4688      	mov	r8, r1
 8000ff8:	0b24      	lsrs	r4, r4, #12
 8000ffa:	0d5b      	lsrs	r3, r3, #21
 8000ffc:	e702      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 8000ffe:	465a      	mov	r2, fp
 8001000:	9b00      	ldr	r3, [sp, #0]
 8001002:	431a      	orrs	r2, r3
 8001004:	d100      	bne.n	8001008 <__aeabi_ddiv+0x2c4>
 8001006:	e07e      	b.n	8001106 <__aeabi_ddiv+0x3c2>
 8001008:	465b      	mov	r3, fp
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x2cc>
 800100e:	e100      	b.n	8001212 <__aeabi_ddiv+0x4ce>
 8001010:	4658      	mov	r0, fp
 8001012:	f001 f9ef 	bl	80023f4 <__clzsi2>
 8001016:	0002      	movs	r2, r0
 8001018:	0003      	movs	r3, r0
 800101a:	3a0b      	subs	r2, #11
 800101c:	271d      	movs	r7, #29
 800101e:	9e00      	ldr	r6, [sp, #0]
 8001020:	1aba      	subs	r2, r7, r2
 8001022:	0019      	movs	r1, r3
 8001024:	4658      	mov	r0, fp
 8001026:	40d6      	lsrs	r6, r2
 8001028:	3908      	subs	r1, #8
 800102a:	4088      	lsls	r0, r1
 800102c:	0032      	movs	r2, r6
 800102e:	4302      	orrs	r2, r0
 8001030:	4693      	mov	fp, r2
 8001032:	9a00      	ldr	r2, [sp, #0]
 8001034:	408a      	lsls	r2, r1
 8001036:	4928      	ldr	r1, [pc, #160]	@ (80010d8 <__aeabi_ddiv+0x394>)
 8001038:	4453      	add	r3, sl
 800103a:	468a      	mov	sl, r1
 800103c:	449a      	add	sl, r3
 800103e:	2300      	movs	r3, #0
 8001040:	e6c8      	b.n	8000dd4 <__aeabi_ddiv+0x90>
 8001042:	465b      	mov	r3, fp
 8001044:	4303      	orrs	r3, r0
 8001046:	4699      	mov	r9, r3
 8001048:	d056      	beq.n	80010f8 <__aeabi_ddiv+0x3b4>
 800104a:	465b      	mov	r3, fp
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x30e>
 8001050:	e0cd      	b.n	80011ee <__aeabi_ddiv+0x4aa>
 8001052:	4658      	mov	r0, fp
 8001054:	f001 f9ce 	bl	80023f4 <__clzsi2>
 8001058:	230b      	movs	r3, #11
 800105a:	425b      	negs	r3, r3
 800105c:	469c      	mov	ip, r3
 800105e:	0002      	movs	r2, r0
 8001060:	4484      	add	ip, r0
 8001062:	4666      	mov	r6, ip
 8001064:	231d      	movs	r3, #29
 8001066:	1b9b      	subs	r3, r3, r6
 8001068:	0026      	movs	r6, r4
 800106a:	0011      	movs	r1, r2
 800106c:	4658      	mov	r0, fp
 800106e:	40de      	lsrs	r6, r3
 8001070:	3908      	subs	r1, #8
 8001072:	4088      	lsls	r0, r1
 8001074:	0033      	movs	r3, r6
 8001076:	4303      	orrs	r3, r0
 8001078:	4699      	mov	r9, r3
 800107a:	0023      	movs	r3, r4
 800107c:	408b      	lsls	r3, r1
 800107e:	4698      	mov	r8, r3
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <__aeabi_ddiv+0x398>)
 8001082:	2400      	movs	r4, #0
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	469a      	mov	sl, r3
 8001088:	2300      	movs	r3, #0
 800108a:	9303      	str	r3, [sp, #12]
 800108c:	e682      	b.n	8000d94 <__aeabi_ddiv+0x50>
 800108e:	465a      	mov	r2, fp
 8001090:	4302      	orrs	r2, r0
 8001092:	4691      	mov	r9, r2
 8001094:	d12a      	bne.n	80010ec <__aeabi_ddiv+0x3a8>
 8001096:	2200      	movs	r2, #0
 8001098:	469a      	mov	sl, r3
 800109a:	2302      	movs	r3, #2
 800109c:	4690      	mov	r8, r2
 800109e:	2408      	movs	r4, #8
 80010a0:	9303      	str	r3, [sp, #12]
 80010a2:	e677      	b.n	8000d94 <__aeabi_ddiv+0x50>
 80010a4:	465a      	mov	r2, fp
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <__aeabi_ddiv+0x39c>)
 80010ac:	469c      	mov	ip, r3
 80010ae:	44e2      	add	sl, ip
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	d117      	bne.n	80010e4 <__aeabi_ddiv+0x3a0>
 80010b4:	2302      	movs	r3, #2
 80010b6:	431c      	orrs	r4, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	469b      	mov	fp, r3
 80010bc:	3302      	adds	r3, #2
 80010be:	e689      	b.n	8000dd4 <__aeabi_ddiv+0x90>
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	fffffc01 	.word	0xfffffc01
 80010c8:	08008978 	.word	0x08008978
 80010cc:	000003ff 	.word	0x000003ff
 80010d0:	feffffff 	.word	0xfeffffff
 80010d4:	000007fe 	.word	0x000007fe
 80010d8:	000003f3 	.word	0x000003f3
 80010dc:	fffffc0d 	.word	0xfffffc0d
 80010e0:	fffff801 	.word	0xfffff801
 80010e4:	2303      	movs	r3, #3
 80010e6:	0032      	movs	r2, r6
 80010e8:	431c      	orrs	r4, r3
 80010ea:	e673      	b.n	8000dd4 <__aeabi_ddiv+0x90>
 80010ec:	469a      	mov	sl, r3
 80010ee:	2303      	movs	r3, #3
 80010f0:	46d9      	mov	r9, fp
 80010f2:	240c      	movs	r4, #12
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	e64d      	b.n	8000d94 <__aeabi_ddiv+0x50>
 80010f8:	2300      	movs	r3, #0
 80010fa:	4698      	mov	r8, r3
 80010fc:	469a      	mov	sl, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	2404      	movs	r4, #4
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	e646      	b.n	8000d94 <__aeabi_ddiv+0x50>
 8001106:	2301      	movs	r3, #1
 8001108:	431c      	orrs	r4, r3
 800110a:	2300      	movs	r3, #0
 800110c:	469b      	mov	fp, r3
 800110e:	3301      	adds	r3, #1
 8001110:	e660      	b.n	8000dd4 <__aeabi_ddiv+0x90>
 8001112:	2300      	movs	r3, #0
 8001114:	2480      	movs	r4, #128	@ 0x80
 8001116:	4698      	mov	r8, r3
 8001118:	2600      	movs	r6, #0
 800111a:	4b92      	ldr	r3, [pc, #584]	@ (8001364 <__aeabi_ddiv+0x620>)
 800111c:	0324      	lsls	r4, r4, #12
 800111e:	e671      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 8001120:	2201      	movs	r2, #1
 8001122:	4252      	negs	r2, r2
 8001124:	2101      	movs	r1, #1
 8001126:	1ac9      	subs	r1, r1, r3
 8001128:	2938      	cmp	r1, #56	@ 0x38
 800112a:	dd00      	ble.n	800112e <__aeabi_ddiv+0x3ea>
 800112c:	e666      	b.n	8000dfc <__aeabi_ddiv+0xb8>
 800112e:	291f      	cmp	r1, #31
 8001130:	dc00      	bgt.n	8001134 <__aeabi_ddiv+0x3f0>
 8001132:	e0ab      	b.n	800128c <__aeabi_ddiv+0x548>
 8001134:	201f      	movs	r0, #31
 8001136:	4240      	negs	r0, r0
 8001138:	1ac3      	subs	r3, r0, r3
 800113a:	4658      	mov	r0, fp
 800113c:	40d8      	lsrs	r0, r3
 800113e:	0003      	movs	r3, r0
 8001140:	2920      	cmp	r1, #32
 8001142:	d004      	beq.n	800114e <__aeabi_ddiv+0x40a>
 8001144:	4658      	mov	r0, fp
 8001146:	4988      	ldr	r1, [pc, #544]	@ (8001368 <__aeabi_ddiv+0x624>)
 8001148:	4451      	add	r1, sl
 800114a:	4088      	lsls	r0, r1
 800114c:	4302      	orrs	r2, r0
 800114e:	1e51      	subs	r1, r2, #1
 8001150:	418a      	sbcs	r2, r1
 8001152:	431a      	orrs	r2, r3
 8001154:	2307      	movs	r3, #7
 8001156:	0019      	movs	r1, r3
 8001158:	2400      	movs	r4, #0
 800115a:	4011      	ands	r1, r2
 800115c:	4213      	tst	r3, r2
 800115e:	d00c      	beq.n	800117a <__aeabi_ddiv+0x436>
 8001160:	230f      	movs	r3, #15
 8001162:	4013      	ands	r3, r2
 8001164:	2b04      	cmp	r3, #4
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0x426>
 8001168:	e0f9      	b.n	800135e <__aeabi_ddiv+0x61a>
 800116a:	1d11      	adds	r1, r2, #4
 800116c:	4291      	cmp	r1, r2
 800116e:	419b      	sbcs	r3, r3
 8001170:	000a      	movs	r2, r1
 8001172:	425b      	negs	r3, r3
 8001174:	0759      	lsls	r1, r3, #29
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	0b1c      	lsrs	r4, r3, #12
 800117a:	08d2      	lsrs	r2, r2, #3
 800117c:	430a      	orrs	r2, r1
 800117e:	4690      	mov	r8, r2
 8001180:	2300      	movs	r3, #0
 8001182:	e63f      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 8001184:	2480      	movs	r4, #128	@ 0x80
 8001186:	464b      	mov	r3, r9
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	4223      	tst	r3, r4
 800118c:	d009      	beq.n	80011a2 <__aeabi_ddiv+0x45e>
 800118e:	465b      	mov	r3, fp
 8001190:	4223      	tst	r3, r4
 8001192:	d106      	bne.n	80011a2 <__aeabi_ddiv+0x45e>
 8001194:	431c      	orrs	r4, r3
 8001196:	0324      	lsls	r4, r4, #12
 8001198:	002e      	movs	r6, r5
 800119a:	4690      	mov	r8, r2
 800119c:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <__aeabi_ddiv+0x620>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e630      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 80011a2:	2480      	movs	r4, #128	@ 0x80
 80011a4:	464b      	mov	r3, r9
 80011a6:	0324      	lsls	r4, r4, #12
 80011a8:	431c      	orrs	r4, r3
 80011aa:	0324      	lsls	r4, r4, #12
 80011ac:	9e02      	ldr	r6, [sp, #8]
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <__aeabi_ddiv+0x620>)
 80011b0:	0b24      	lsrs	r4, r4, #12
 80011b2:	e627      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x476>
 80011b8:	e700      	b.n	8000fbc <__aeabi_ddiv+0x278>
 80011ba:	9800      	ldr	r0, [sp, #0]
 80011bc:	1e51      	subs	r1, r2, #1
 80011be:	4684      	mov	ip, r0
 80011c0:	4464      	add	r4, ip
 80011c2:	4284      	cmp	r4, r0
 80011c4:	d200      	bcs.n	80011c8 <__aeabi_ddiv+0x484>
 80011c6:	e084      	b.n	80012d2 <__aeabi_ddiv+0x58e>
 80011c8:	42bc      	cmp	r4, r7
 80011ca:	d200      	bcs.n	80011ce <__aeabi_ddiv+0x48a>
 80011cc:	e0ae      	b.n	800132c <__aeabi_ddiv+0x5e8>
 80011ce:	d100      	bne.n	80011d2 <__aeabi_ddiv+0x48e>
 80011d0:	e0c1      	b.n	8001356 <__aeabi_ddiv+0x612>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e6f0      	b.n	8000fb8 <__aeabi_ddiv+0x274>
 80011d6:	4542      	cmp	r2, r8
 80011d8:	d900      	bls.n	80011dc <__aeabi_ddiv+0x498>
 80011da:	e62c      	b.n	8000e36 <__aeabi_ddiv+0xf2>
 80011dc:	464b      	mov	r3, r9
 80011de:	07dc      	lsls	r4, r3, #31
 80011e0:	0858      	lsrs	r0, r3, #1
 80011e2:	4643      	mov	r3, r8
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	431c      	orrs	r4, r3
 80011e8:	4643      	mov	r3, r8
 80011ea:	07df      	lsls	r7, r3, #31
 80011ec:	e62a      	b.n	8000e44 <__aeabi_ddiv+0x100>
 80011ee:	f001 f901 	bl	80023f4 <__clzsi2>
 80011f2:	2315      	movs	r3, #21
 80011f4:	469c      	mov	ip, r3
 80011f6:	4484      	add	ip, r0
 80011f8:	0002      	movs	r2, r0
 80011fa:	4663      	mov	r3, ip
 80011fc:	3220      	adds	r2, #32
 80011fe:	2b1c      	cmp	r3, #28
 8001200:	dc00      	bgt.n	8001204 <__aeabi_ddiv+0x4c0>
 8001202:	e72e      	b.n	8001062 <__aeabi_ddiv+0x31e>
 8001204:	0023      	movs	r3, r4
 8001206:	3808      	subs	r0, #8
 8001208:	4083      	lsls	r3, r0
 800120a:	4699      	mov	r9, r3
 800120c:	2300      	movs	r3, #0
 800120e:	4698      	mov	r8, r3
 8001210:	e736      	b.n	8001080 <__aeabi_ddiv+0x33c>
 8001212:	f001 f8ef 	bl	80023f4 <__clzsi2>
 8001216:	0002      	movs	r2, r0
 8001218:	0003      	movs	r3, r0
 800121a:	3215      	adds	r2, #21
 800121c:	3320      	adds	r3, #32
 800121e:	2a1c      	cmp	r2, #28
 8001220:	dc00      	bgt.n	8001224 <__aeabi_ddiv+0x4e0>
 8001222:	e6fb      	b.n	800101c <__aeabi_ddiv+0x2d8>
 8001224:	9900      	ldr	r1, [sp, #0]
 8001226:	3808      	subs	r0, #8
 8001228:	4081      	lsls	r1, r0
 800122a:	2200      	movs	r2, #0
 800122c:	468b      	mov	fp, r1
 800122e:	e702      	b.n	8001036 <__aeabi_ddiv+0x2f2>
 8001230:	9900      	ldr	r1, [sp, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	468c      	mov	ip, r1
 8001236:	4464      	add	r4, ip
 8001238:	42a1      	cmp	r1, r4
 800123a:	d900      	bls.n	800123e <__aeabi_ddiv+0x4fa>
 800123c:	e69a      	b.n	8000f74 <__aeabi_ddiv+0x230>
 800123e:	42a2      	cmp	r2, r4
 8001240:	d800      	bhi.n	8001244 <__aeabi_ddiv+0x500>
 8001242:	e697      	b.n	8000f74 <__aeabi_ddiv+0x230>
 8001244:	1e83      	subs	r3, r0, #2
 8001246:	4464      	add	r4, ip
 8001248:	e694      	b.n	8000f74 <__aeabi_ddiv+0x230>
 800124a:	46ac      	mov	ip, r5
 800124c:	4461      	add	r1, ip
 800124e:	3f01      	subs	r7, #1
 8001250:	428d      	cmp	r5, r1
 8001252:	d900      	bls.n	8001256 <__aeabi_ddiv+0x512>
 8001254:	e680      	b.n	8000f58 <__aeabi_ddiv+0x214>
 8001256:	428a      	cmp	r2, r1
 8001258:	d800      	bhi.n	800125c <__aeabi_ddiv+0x518>
 800125a:	e67d      	b.n	8000f58 <__aeabi_ddiv+0x214>
 800125c:	1e87      	subs	r7, r0, #2
 800125e:	4461      	add	r1, ip
 8001260:	e67a      	b.n	8000f58 <__aeabi_ddiv+0x214>
 8001262:	4285      	cmp	r5, r0
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x524>
 8001266:	e65f      	b.n	8000f28 <__aeabi_ddiv+0x1e4>
 8001268:	45b9      	cmp	r9, r7
 800126a:	d900      	bls.n	800126e <__aeabi_ddiv+0x52a>
 800126c:	e65c      	b.n	8000f28 <__aeabi_ddiv+0x1e4>
 800126e:	e656      	b.n	8000f1e <__aeabi_ddiv+0x1da>
 8001270:	42a2      	cmp	r2, r4
 8001272:	d800      	bhi.n	8001276 <__aeabi_ddiv+0x532>
 8001274:	e61a      	b.n	8000eac <__aeabi_ddiv+0x168>
 8001276:	1e83      	subs	r3, r0, #2
 8001278:	4464      	add	r4, ip
 800127a:	e617      	b.n	8000eac <__aeabi_ddiv+0x168>
 800127c:	428a      	cmp	r2, r1
 800127e:	d800      	bhi.n	8001282 <__aeabi_ddiv+0x53e>
 8001280:	e600      	b.n	8000e84 <__aeabi_ddiv+0x140>
 8001282:	46ac      	mov	ip, r5
 8001284:	1e83      	subs	r3, r0, #2
 8001286:	4698      	mov	r8, r3
 8001288:	4461      	add	r1, ip
 800128a:	e5fb      	b.n	8000e84 <__aeabi_ddiv+0x140>
 800128c:	4837      	ldr	r0, [pc, #220]	@ (800136c <__aeabi_ddiv+0x628>)
 800128e:	0014      	movs	r4, r2
 8001290:	4450      	add	r0, sl
 8001292:	4082      	lsls	r2, r0
 8001294:	465b      	mov	r3, fp
 8001296:	0017      	movs	r7, r2
 8001298:	4083      	lsls	r3, r0
 800129a:	40cc      	lsrs	r4, r1
 800129c:	1e7a      	subs	r2, r7, #1
 800129e:	4197      	sbcs	r7, r2
 80012a0:	4323      	orrs	r3, r4
 80012a2:	433b      	orrs	r3, r7
 80012a4:	001a      	movs	r2, r3
 80012a6:	465b      	mov	r3, fp
 80012a8:	40cb      	lsrs	r3, r1
 80012aa:	0751      	lsls	r1, r2, #29
 80012ac:	d009      	beq.n	80012c2 <__aeabi_ddiv+0x57e>
 80012ae:	210f      	movs	r1, #15
 80012b0:	4011      	ands	r1, r2
 80012b2:	2904      	cmp	r1, #4
 80012b4:	d005      	beq.n	80012c2 <__aeabi_ddiv+0x57e>
 80012b6:	1d11      	adds	r1, r2, #4
 80012b8:	4291      	cmp	r1, r2
 80012ba:	4192      	sbcs	r2, r2
 80012bc:	4252      	negs	r2, r2
 80012be:	189b      	adds	r3, r3, r2
 80012c0:	000a      	movs	r2, r1
 80012c2:	0219      	lsls	r1, r3, #8
 80012c4:	d400      	bmi.n	80012c8 <__aeabi_ddiv+0x584>
 80012c6:	e755      	b.n	8001174 <__aeabi_ddiv+0x430>
 80012c8:	2200      	movs	r2, #0
 80012ca:	2301      	movs	r3, #1
 80012cc:	2400      	movs	r4, #0
 80012ce:	4690      	mov	r8, r2
 80012d0:	e598      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 80012d2:	000a      	movs	r2, r1
 80012d4:	42bc      	cmp	r4, r7
 80012d6:	d000      	beq.n	80012da <__aeabi_ddiv+0x596>
 80012d8:	e66e      	b.n	8000fb8 <__aeabi_ddiv+0x274>
 80012da:	454b      	cmp	r3, r9
 80012dc:	d000      	beq.n	80012e0 <__aeabi_ddiv+0x59c>
 80012de:	e66b      	b.n	8000fb8 <__aeabi_ddiv+0x274>
 80012e0:	e66c      	b.n	8000fbc <__aeabi_ddiv+0x278>
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <__aeabi_ddiv+0x62c>)
 80012e4:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <__aeabi_ddiv+0x630>)
 80012e6:	4453      	add	r3, sl
 80012e8:	4592      	cmp	sl, r2
 80012ea:	da00      	bge.n	80012ee <__aeabi_ddiv+0x5aa>
 80012ec:	e718      	b.n	8001120 <__aeabi_ddiv+0x3dc>
 80012ee:	2101      	movs	r1, #1
 80012f0:	4249      	negs	r1, r1
 80012f2:	1d0a      	adds	r2, r1, #4
 80012f4:	428a      	cmp	r2, r1
 80012f6:	4189      	sbcs	r1, r1
 80012f8:	4249      	negs	r1, r1
 80012fa:	448b      	add	fp, r1
 80012fc:	e666      	b.n	8000fcc <__aeabi_ddiv+0x288>
 80012fe:	210f      	movs	r1, #15
 8001300:	4011      	ands	r1, r2
 8001302:	2904      	cmp	r1, #4
 8001304:	d100      	bne.n	8001308 <__aeabi_ddiv+0x5c4>
 8001306:	e661      	b.n	8000fcc <__aeabi_ddiv+0x288>
 8001308:	0011      	movs	r1, r2
 800130a:	e7f2      	b.n	80012f2 <__aeabi_ddiv+0x5ae>
 800130c:	42bc      	cmp	r4, r7
 800130e:	d800      	bhi.n	8001312 <__aeabi_ddiv+0x5ce>
 8001310:	e60a      	b.n	8000f28 <__aeabi_ddiv+0x1e4>
 8001312:	2302      	movs	r3, #2
 8001314:	425b      	negs	r3, r3
 8001316:	469c      	mov	ip, r3
 8001318:	9900      	ldr	r1, [sp, #0]
 800131a:	444f      	add	r7, r9
 800131c:	454f      	cmp	r7, r9
 800131e:	419b      	sbcs	r3, r3
 8001320:	44e3      	add	fp, ip
 8001322:	468c      	mov	ip, r1
 8001324:	425b      	negs	r3, r3
 8001326:	4463      	add	r3, ip
 8001328:	18c0      	adds	r0, r0, r3
 800132a:	e5ff      	b.n	8000f2c <__aeabi_ddiv+0x1e8>
 800132c:	4649      	mov	r1, r9
 800132e:	9d00      	ldr	r5, [sp, #0]
 8001330:	0048      	lsls	r0, r1, #1
 8001332:	4548      	cmp	r0, r9
 8001334:	4189      	sbcs	r1, r1
 8001336:	46ac      	mov	ip, r5
 8001338:	4249      	negs	r1, r1
 800133a:	4461      	add	r1, ip
 800133c:	4681      	mov	r9, r0
 800133e:	3a02      	subs	r2, #2
 8001340:	1864      	adds	r4, r4, r1
 8001342:	e7c7      	b.n	80012d4 <__aeabi_ddiv+0x590>
 8001344:	2480      	movs	r4, #128	@ 0x80
 8001346:	465b      	mov	r3, fp
 8001348:	0324      	lsls	r4, r4, #12
 800134a:	431c      	orrs	r4, r3
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	4690      	mov	r8, r2
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <__aeabi_ddiv+0x620>)
 8001352:	0b24      	lsrs	r4, r4, #12
 8001354:	e556      	b.n	8000e04 <__aeabi_ddiv+0xc0>
 8001356:	4599      	cmp	r9, r3
 8001358:	d3e8      	bcc.n	800132c <__aeabi_ddiv+0x5e8>
 800135a:	000a      	movs	r2, r1
 800135c:	e7bd      	b.n	80012da <__aeabi_ddiv+0x596>
 800135e:	2300      	movs	r3, #0
 8001360:	e708      	b.n	8001174 <__aeabi_ddiv+0x430>
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff
 8001368:	0000043e 	.word	0x0000043e
 800136c:	0000041e 	.word	0x0000041e
 8001370:	000003ff 	.word	0x000003ff
 8001374:	fffffc02 	.word	0xfffffc02

08001378 <__eqdf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	4657      	mov	r7, sl
 800137c:	46de      	mov	lr, fp
 800137e:	464e      	mov	r6, r9
 8001380:	4645      	mov	r5, r8
 8001382:	b5e0      	push	{r5, r6, r7, lr}
 8001384:	000d      	movs	r5, r1
 8001386:	0004      	movs	r4, r0
 8001388:	0fe8      	lsrs	r0, r5, #31
 800138a:	4683      	mov	fp, r0
 800138c:	0309      	lsls	r1, r1, #12
 800138e:	0fd8      	lsrs	r0, r3, #31
 8001390:	0b09      	lsrs	r1, r1, #12
 8001392:	4682      	mov	sl, r0
 8001394:	4819      	ldr	r0, [pc, #100]	@ (80013fc <__eqdf2+0x84>)
 8001396:	468c      	mov	ip, r1
 8001398:	031f      	lsls	r7, r3, #12
 800139a:	0069      	lsls	r1, r5, #1
 800139c:	005e      	lsls	r6, r3, #1
 800139e:	0d49      	lsrs	r1, r1, #21
 80013a0:	0b3f      	lsrs	r7, r7, #12
 80013a2:	0d76      	lsrs	r6, r6, #21
 80013a4:	4281      	cmp	r1, r0
 80013a6:	d018      	beq.n	80013da <__eqdf2+0x62>
 80013a8:	4286      	cmp	r6, r0
 80013aa:	d00f      	beq.n	80013cc <__eqdf2+0x54>
 80013ac:	2001      	movs	r0, #1
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	d10d      	bne.n	80013ce <__eqdf2+0x56>
 80013b2:	45bc      	cmp	ip, r7
 80013b4:	d10b      	bne.n	80013ce <__eqdf2+0x56>
 80013b6:	4294      	cmp	r4, r2
 80013b8:	d109      	bne.n	80013ce <__eqdf2+0x56>
 80013ba:	45d3      	cmp	fp, sl
 80013bc:	d01c      	beq.n	80013f8 <__eqdf2+0x80>
 80013be:	2900      	cmp	r1, #0
 80013c0:	d105      	bne.n	80013ce <__eqdf2+0x56>
 80013c2:	4660      	mov	r0, ip
 80013c4:	4320      	orrs	r0, r4
 80013c6:	1e43      	subs	r3, r0, #1
 80013c8:	4198      	sbcs	r0, r3
 80013ca:	e000      	b.n	80013ce <__eqdf2+0x56>
 80013cc:	2001      	movs	r0, #1
 80013ce:	bcf0      	pop	{r4, r5, r6, r7}
 80013d0:	46bb      	mov	fp, r7
 80013d2:	46b2      	mov	sl, r6
 80013d4:	46a9      	mov	r9, r5
 80013d6:	46a0      	mov	r8, r4
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	2001      	movs	r0, #1
 80013dc:	428e      	cmp	r6, r1
 80013de:	d1f6      	bne.n	80013ce <__eqdf2+0x56>
 80013e0:	4661      	mov	r1, ip
 80013e2:	4339      	orrs	r1, r7
 80013e4:	000f      	movs	r7, r1
 80013e6:	4317      	orrs	r7, r2
 80013e8:	4327      	orrs	r7, r4
 80013ea:	d1f0      	bne.n	80013ce <__eqdf2+0x56>
 80013ec:	465b      	mov	r3, fp
 80013ee:	4652      	mov	r2, sl
 80013f0:	1a98      	subs	r0, r3, r2
 80013f2:	1e43      	subs	r3, r0, #1
 80013f4:	4198      	sbcs	r0, r3
 80013f6:	e7ea      	b.n	80013ce <__eqdf2+0x56>
 80013f8:	2000      	movs	r0, #0
 80013fa:	e7e8      	b.n	80013ce <__eqdf2+0x56>
 80013fc:	000007ff 	.word	0x000007ff

08001400 <__gedf2>:
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	4657      	mov	r7, sl
 8001404:	464e      	mov	r6, r9
 8001406:	4645      	mov	r5, r8
 8001408:	46de      	mov	lr, fp
 800140a:	b5e0      	push	{r5, r6, r7, lr}
 800140c:	000d      	movs	r5, r1
 800140e:	030f      	lsls	r7, r1, #12
 8001410:	0b39      	lsrs	r1, r7, #12
 8001412:	b083      	sub	sp, #12
 8001414:	0004      	movs	r4, r0
 8001416:	4680      	mov	r8, r0
 8001418:	9101      	str	r1, [sp, #4]
 800141a:	0058      	lsls	r0, r3, #1
 800141c:	0fe9      	lsrs	r1, r5, #31
 800141e:	4f31      	ldr	r7, [pc, #196]	@ (80014e4 <__gedf2+0xe4>)
 8001420:	0d40      	lsrs	r0, r0, #21
 8001422:	468c      	mov	ip, r1
 8001424:	006e      	lsls	r6, r5, #1
 8001426:	0319      	lsls	r1, r3, #12
 8001428:	4682      	mov	sl, r0
 800142a:	4691      	mov	r9, r2
 800142c:	0d76      	lsrs	r6, r6, #21
 800142e:	0b09      	lsrs	r1, r1, #12
 8001430:	0fd8      	lsrs	r0, r3, #31
 8001432:	42be      	cmp	r6, r7
 8001434:	d01f      	beq.n	8001476 <__gedf2+0x76>
 8001436:	45ba      	cmp	sl, r7
 8001438:	d00f      	beq.n	800145a <__gedf2+0x5a>
 800143a:	2e00      	cmp	r6, #0
 800143c:	d12f      	bne.n	800149e <__gedf2+0x9e>
 800143e:	4655      	mov	r5, sl
 8001440:	9e01      	ldr	r6, [sp, #4]
 8001442:	4334      	orrs	r4, r6
 8001444:	2d00      	cmp	r5, #0
 8001446:	d127      	bne.n	8001498 <__gedf2+0x98>
 8001448:	430a      	orrs	r2, r1
 800144a:	d03a      	beq.n	80014c2 <__gedf2+0xc2>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d145      	bne.n	80014dc <__gedf2+0xdc>
 8001450:	2800      	cmp	r0, #0
 8001452:	d11a      	bne.n	800148a <__gedf2+0x8a>
 8001454:	2001      	movs	r0, #1
 8001456:	4240      	negs	r0, r0
 8001458:	e017      	b.n	800148a <__gedf2+0x8a>
 800145a:	4311      	orrs	r1, r2
 800145c:	d13b      	bne.n	80014d6 <__gedf2+0xd6>
 800145e:	2e00      	cmp	r6, #0
 8001460:	d102      	bne.n	8001468 <__gedf2+0x68>
 8001462:	9f01      	ldr	r7, [sp, #4]
 8001464:	4327      	orrs	r7, r4
 8001466:	d0f3      	beq.n	8001450 <__gedf2+0x50>
 8001468:	4584      	cmp	ip, r0
 800146a:	d109      	bne.n	8001480 <__gedf2+0x80>
 800146c:	4663      	mov	r3, ip
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <__gedf2+0x54>
 8001472:	4660      	mov	r0, ip
 8001474:	e009      	b.n	800148a <__gedf2+0x8a>
 8001476:	9f01      	ldr	r7, [sp, #4]
 8001478:	4327      	orrs	r7, r4
 800147a:	d12c      	bne.n	80014d6 <__gedf2+0xd6>
 800147c:	45b2      	cmp	sl, r6
 800147e:	d024      	beq.n	80014ca <__gedf2+0xca>
 8001480:	4663      	mov	r3, ip
 8001482:	2002      	movs	r0, #2
 8001484:	3b01      	subs	r3, #1
 8001486:	4018      	ands	r0, r3
 8001488:	3801      	subs	r0, #1
 800148a:	b003      	add	sp, #12
 800148c:	bcf0      	pop	{r4, r5, r6, r7}
 800148e:	46bb      	mov	fp, r7
 8001490:	46b2      	mov	sl, r6
 8001492:	46a9      	mov	r9, r5
 8001494:	46a0      	mov	r8, r4
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	2c00      	cmp	r4, #0
 800149a:	d0d9      	beq.n	8001450 <__gedf2+0x50>
 800149c:	e7e4      	b.n	8001468 <__gedf2+0x68>
 800149e:	4654      	mov	r4, sl
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d0ed      	beq.n	8001480 <__gedf2+0x80>
 80014a4:	4584      	cmp	ip, r0
 80014a6:	d1eb      	bne.n	8001480 <__gedf2+0x80>
 80014a8:	4556      	cmp	r6, sl
 80014aa:	dce9      	bgt.n	8001480 <__gedf2+0x80>
 80014ac:	dbde      	blt.n	800146c <__gedf2+0x6c>
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	428b      	cmp	r3, r1
 80014b2:	d8e5      	bhi.n	8001480 <__gedf2+0x80>
 80014b4:	d1da      	bne.n	800146c <__gedf2+0x6c>
 80014b6:	45c8      	cmp	r8, r9
 80014b8:	d8e2      	bhi.n	8001480 <__gedf2+0x80>
 80014ba:	2000      	movs	r0, #0
 80014bc:	45c8      	cmp	r8, r9
 80014be:	d2e4      	bcs.n	800148a <__gedf2+0x8a>
 80014c0:	e7d4      	b.n	800146c <__gedf2+0x6c>
 80014c2:	2000      	movs	r0, #0
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0e0      	beq.n	800148a <__gedf2+0x8a>
 80014c8:	e7da      	b.n	8001480 <__gedf2+0x80>
 80014ca:	4311      	orrs	r1, r2
 80014cc:	d103      	bne.n	80014d6 <__gedf2+0xd6>
 80014ce:	4584      	cmp	ip, r0
 80014d0:	d1d6      	bne.n	8001480 <__gedf2+0x80>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7d9      	b.n	800148a <__gedf2+0x8a>
 80014d6:	2002      	movs	r0, #2
 80014d8:	4240      	negs	r0, r0
 80014da:	e7d6      	b.n	800148a <__gedf2+0x8a>
 80014dc:	4584      	cmp	ip, r0
 80014de:	d0e6      	beq.n	80014ae <__gedf2+0xae>
 80014e0:	e7ce      	b.n	8001480 <__gedf2+0x80>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__ledf2>:
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	4657      	mov	r7, sl
 80014ec:	464e      	mov	r6, r9
 80014ee:	4645      	mov	r5, r8
 80014f0:	46de      	mov	lr, fp
 80014f2:	b5e0      	push	{r5, r6, r7, lr}
 80014f4:	000d      	movs	r5, r1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	0004      	movs	r4, r0
 80014fa:	4680      	mov	r8, r0
 80014fc:	0fe8      	lsrs	r0, r5, #31
 80014fe:	0b39      	lsrs	r1, r7, #12
 8001500:	4684      	mov	ip, r0
 8001502:	b083      	sub	sp, #12
 8001504:	0058      	lsls	r0, r3, #1
 8001506:	4f30      	ldr	r7, [pc, #192]	@ (80015c8 <__ledf2+0xe0>)
 8001508:	0d40      	lsrs	r0, r0, #21
 800150a:	9101      	str	r1, [sp, #4]
 800150c:	031e      	lsls	r6, r3, #12
 800150e:	0069      	lsls	r1, r5, #1
 8001510:	4682      	mov	sl, r0
 8001512:	4691      	mov	r9, r2
 8001514:	0d49      	lsrs	r1, r1, #21
 8001516:	0b36      	lsrs	r6, r6, #12
 8001518:	0fd8      	lsrs	r0, r3, #31
 800151a:	42b9      	cmp	r1, r7
 800151c:	d020      	beq.n	8001560 <__ledf2+0x78>
 800151e:	45ba      	cmp	sl, r7
 8001520:	d00f      	beq.n	8001542 <__ledf2+0x5a>
 8001522:	2900      	cmp	r1, #0
 8001524:	d12b      	bne.n	800157e <__ledf2+0x96>
 8001526:	9901      	ldr	r1, [sp, #4]
 8001528:	430c      	orrs	r4, r1
 800152a:	4651      	mov	r1, sl
 800152c:	2900      	cmp	r1, #0
 800152e:	d137      	bne.n	80015a0 <__ledf2+0xb8>
 8001530:	4332      	orrs	r2, r6
 8001532:	d038      	beq.n	80015a6 <__ledf2+0xbe>
 8001534:	2c00      	cmp	r4, #0
 8001536:	d144      	bne.n	80015c2 <__ledf2+0xda>
 8001538:	2800      	cmp	r0, #0
 800153a:	d119      	bne.n	8001570 <__ledf2+0x88>
 800153c:	2001      	movs	r0, #1
 800153e:	4240      	negs	r0, r0
 8001540:	e016      	b.n	8001570 <__ledf2+0x88>
 8001542:	4316      	orrs	r6, r2
 8001544:	d113      	bne.n	800156e <__ledf2+0x86>
 8001546:	2900      	cmp	r1, #0
 8001548:	d102      	bne.n	8001550 <__ledf2+0x68>
 800154a:	9f01      	ldr	r7, [sp, #4]
 800154c:	4327      	orrs	r7, r4
 800154e:	d0f3      	beq.n	8001538 <__ledf2+0x50>
 8001550:	4584      	cmp	ip, r0
 8001552:	d020      	beq.n	8001596 <__ledf2+0xae>
 8001554:	4663      	mov	r3, ip
 8001556:	2002      	movs	r0, #2
 8001558:	3b01      	subs	r3, #1
 800155a:	4018      	ands	r0, r3
 800155c:	3801      	subs	r0, #1
 800155e:	e007      	b.n	8001570 <__ledf2+0x88>
 8001560:	9f01      	ldr	r7, [sp, #4]
 8001562:	4327      	orrs	r7, r4
 8001564:	d103      	bne.n	800156e <__ledf2+0x86>
 8001566:	458a      	cmp	sl, r1
 8001568:	d1f4      	bne.n	8001554 <__ledf2+0x6c>
 800156a:	4316      	orrs	r6, r2
 800156c:	d01f      	beq.n	80015ae <__ledf2+0xc6>
 800156e:	2002      	movs	r0, #2
 8001570:	b003      	add	sp, #12
 8001572:	bcf0      	pop	{r4, r5, r6, r7}
 8001574:	46bb      	mov	fp, r7
 8001576:	46b2      	mov	sl, r6
 8001578:	46a9      	mov	r9, r5
 800157a:	46a0      	mov	r8, r4
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	4654      	mov	r4, sl
 8001580:	2c00      	cmp	r4, #0
 8001582:	d0e7      	beq.n	8001554 <__ledf2+0x6c>
 8001584:	4584      	cmp	ip, r0
 8001586:	d1e5      	bne.n	8001554 <__ledf2+0x6c>
 8001588:	4551      	cmp	r1, sl
 800158a:	dce3      	bgt.n	8001554 <__ledf2+0x6c>
 800158c:	db03      	blt.n	8001596 <__ledf2+0xae>
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	42b3      	cmp	r3, r6
 8001592:	d8df      	bhi.n	8001554 <__ledf2+0x6c>
 8001594:	d00f      	beq.n	80015b6 <__ledf2+0xce>
 8001596:	4663      	mov	r3, ip
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0cf      	beq.n	800153c <__ledf2+0x54>
 800159c:	4660      	mov	r0, ip
 800159e:	e7e7      	b.n	8001570 <__ledf2+0x88>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d0c9      	beq.n	8001538 <__ledf2+0x50>
 80015a4:	e7d4      	b.n	8001550 <__ledf2+0x68>
 80015a6:	2000      	movs	r0, #0
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d0e1      	beq.n	8001570 <__ledf2+0x88>
 80015ac:	e7d2      	b.n	8001554 <__ledf2+0x6c>
 80015ae:	4584      	cmp	ip, r0
 80015b0:	d1d0      	bne.n	8001554 <__ledf2+0x6c>
 80015b2:	2000      	movs	r0, #0
 80015b4:	e7dc      	b.n	8001570 <__ledf2+0x88>
 80015b6:	45c8      	cmp	r8, r9
 80015b8:	d8cc      	bhi.n	8001554 <__ledf2+0x6c>
 80015ba:	2000      	movs	r0, #0
 80015bc:	45c8      	cmp	r8, r9
 80015be:	d2d7      	bcs.n	8001570 <__ledf2+0x88>
 80015c0:	e7e9      	b.n	8001596 <__ledf2+0xae>
 80015c2:	4584      	cmp	ip, r0
 80015c4:	d0e3      	beq.n	800158e <__ledf2+0xa6>
 80015c6:	e7c5      	b.n	8001554 <__ledf2+0x6c>
 80015c8:	000007ff 	.word	0x000007ff

080015cc <__aeabi_dmul>:
 80015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ce:	4657      	mov	r7, sl
 80015d0:	46de      	mov	lr, fp
 80015d2:	464e      	mov	r6, r9
 80015d4:	4645      	mov	r5, r8
 80015d6:	b5e0      	push	{r5, r6, r7, lr}
 80015d8:	001f      	movs	r7, r3
 80015da:	030b      	lsls	r3, r1, #12
 80015dc:	0b1b      	lsrs	r3, r3, #12
 80015de:	0016      	movs	r6, r2
 80015e0:	469a      	mov	sl, r3
 80015e2:	0fca      	lsrs	r2, r1, #31
 80015e4:	004b      	lsls	r3, r1, #1
 80015e6:	0004      	movs	r4, r0
 80015e8:	4693      	mov	fp, r2
 80015ea:	b087      	sub	sp, #28
 80015ec:	0d5b      	lsrs	r3, r3, #21
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dmul+0x26>
 80015f0:	e0d5      	b.n	800179e <__aeabi_dmul+0x1d2>
 80015f2:	4abb      	ldr	r2, [pc, #748]	@ (80018e0 <__aeabi_dmul+0x314>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0x2e>
 80015f8:	e0f8      	b.n	80017ec <__aeabi_dmul+0x220>
 80015fa:	4651      	mov	r1, sl
 80015fc:	0f42      	lsrs	r2, r0, #29
 80015fe:	00c9      	lsls	r1, r1, #3
 8001600:	430a      	orrs	r2, r1
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	0409      	lsls	r1, r1, #16
 8001606:	4311      	orrs	r1, r2
 8001608:	00c2      	lsls	r2, r0, #3
 800160a:	4691      	mov	r9, r2
 800160c:	4ab5      	ldr	r2, [pc, #724]	@ (80018e4 <__aeabi_dmul+0x318>)
 800160e:	468a      	mov	sl, r1
 8001610:	189d      	adds	r5, r3, r2
 8001612:	2300      	movs	r3, #0
 8001614:	4698      	mov	r8, r3
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	033c      	lsls	r4, r7, #12
 800161a:	007b      	lsls	r3, r7, #1
 800161c:	0ffa      	lsrs	r2, r7, #31
 800161e:	0030      	movs	r0, r6
 8001620:	0b24      	lsrs	r4, r4, #12
 8001622:	0d5b      	lsrs	r3, r3, #21
 8001624:	9200      	str	r2, [sp, #0]
 8001626:	d100      	bne.n	800162a <__aeabi_dmul+0x5e>
 8001628:	e096      	b.n	8001758 <__aeabi_dmul+0x18c>
 800162a:	4aad      	ldr	r2, [pc, #692]	@ (80018e0 <__aeabi_dmul+0x314>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d031      	beq.n	8001694 <__aeabi_dmul+0xc8>
 8001630:	0f72      	lsrs	r2, r6, #29
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4322      	orrs	r2, r4
 8001636:	2480      	movs	r4, #128	@ 0x80
 8001638:	0424      	lsls	r4, r4, #16
 800163a:	4314      	orrs	r4, r2
 800163c:	4aa9      	ldr	r2, [pc, #676]	@ (80018e4 <__aeabi_dmul+0x318>)
 800163e:	00f0      	lsls	r0, r6, #3
 8001640:	4694      	mov	ip, r2
 8001642:	4463      	add	r3, ip
 8001644:	195b      	adds	r3, r3, r5
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	4642      	mov	r2, r8
 800164c:	2600      	movs	r6, #0
 800164e:	2a0a      	cmp	r2, #10
 8001650:	dc42      	bgt.n	80016d8 <__aeabi_dmul+0x10c>
 8001652:	465a      	mov	r2, fp
 8001654:	9900      	ldr	r1, [sp, #0]
 8001656:	404a      	eors	r2, r1
 8001658:	4693      	mov	fp, r2
 800165a:	4642      	mov	r2, r8
 800165c:	2a02      	cmp	r2, #2
 800165e:	dc32      	bgt.n	80016c6 <__aeabi_dmul+0xfa>
 8001660:	3a01      	subs	r2, #1
 8001662:	2a01      	cmp	r2, #1
 8001664:	d900      	bls.n	8001668 <__aeabi_dmul+0x9c>
 8001666:	e149      	b.n	80018fc <__aeabi_dmul+0x330>
 8001668:	2e02      	cmp	r6, #2
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0xa2>
 800166c:	e0ca      	b.n	8001804 <__aeabi_dmul+0x238>
 800166e:	2e01      	cmp	r6, #1
 8001670:	d13d      	bne.n	80016ee <__aeabi_dmul+0x122>
 8001672:	2300      	movs	r3, #0
 8001674:	2400      	movs	r4, #0
 8001676:	2200      	movs	r2, #0
 8001678:	0010      	movs	r0, r2
 800167a:	465a      	mov	r2, fp
 800167c:	051b      	lsls	r3, r3, #20
 800167e:	4323      	orrs	r3, r4
 8001680:	07d2      	lsls	r2, r2, #31
 8001682:	4313      	orrs	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	b007      	add	sp, #28
 8001688:	bcf0      	pop	{r4, r5, r6, r7}
 800168a:	46bb      	mov	fp, r7
 800168c:	46b2      	mov	sl, r6
 800168e:	46a9      	mov	r9, r5
 8001690:	46a0      	mov	r8, r4
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001694:	4b92      	ldr	r3, [pc, #584]	@ (80018e0 <__aeabi_dmul+0x314>)
 8001696:	4326      	orrs	r6, r4
 8001698:	18eb      	adds	r3, r5, r3
 800169a:	2e00      	cmp	r6, #0
 800169c:	d100      	bne.n	80016a0 <__aeabi_dmul+0xd4>
 800169e:	e0bb      	b.n	8001818 <__aeabi_dmul+0x24c>
 80016a0:	2203      	movs	r2, #3
 80016a2:	4641      	mov	r1, r8
 80016a4:	4311      	orrs	r1, r2
 80016a6:	465a      	mov	r2, fp
 80016a8:	4688      	mov	r8, r1
 80016aa:	9900      	ldr	r1, [sp, #0]
 80016ac:	404a      	eors	r2, r1
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0109      	lsls	r1, r1, #4
 80016b2:	468c      	mov	ip, r1
 80016b4:	0029      	movs	r1, r5
 80016b6:	4461      	add	r1, ip
 80016b8:	9101      	str	r1, [sp, #4]
 80016ba:	4641      	mov	r1, r8
 80016bc:	290a      	cmp	r1, #10
 80016be:	dd00      	ble.n	80016c2 <__aeabi_dmul+0xf6>
 80016c0:	e233      	b.n	8001b2a <__aeabi_dmul+0x55e>
 80016c2:	4693      	mov	fp, r2
 80016c4:	2603      	movs	r6, #3
 80016c6:	4642      	mov	r2, r8
 80016c8:	2701      	movs	r7, #1
 80016ca:	4097      	lsls	r7, r2
 80016cc:	21a6      	movs	r1, #166	@ 0xa6
 80016ce:	003a      	movs	r2, r7
 80016d0:	00c9      	lsls	r1, r1, #3
 80016d2:	400a      	ands	r2, r1
 80016d4:	420f      	tst	r7, r1
 80016d6:	d031      	beq.n	800173c <__aeabi_dmul+0x170>
 80016d8:	9e02      	ldr	r6, [sp, #8]
 80016da:	2e02      	cmp	r6, #2
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dmul+0x114>
 80016de:	e235      	b.n	8001b4c <__aeabi_dmul+0x580>
 80016e0:	2e03      	cmp	r6, #3
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dmul+0x11a>
 80016e4:	e1d2      	b.n	8001a8c <__aeabi_dmul+0x4c0>
 80016e6:	4654      	mov	r4, sl
 80016e8:	4648      	mov	r0, r9
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d0c1      	beq.n	8001672 <__aeabi_dmul+0xa6>
 80016ee:	9a01      	ldr	r2, [sp, #4]
 80016f0:	4b7d      	ldr	r3, [pc, #500]	@ (80018e8 <__aeabi_dmul+0x31c>)
 80016f2:	4694      	mov	ip, r2
 80016f4:	4463      	add	r3, ip
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc00      	bgt.n	80016fc <__aeabi_dmul+0x130>
 80016fa:	e0c0      	b.n	800187e <__aeabi_dmul+0x2b2>
 80016fc:	0742      	lsls	r2, r0, #29
 80016fe:	d009      	beq.n	8001714 <__aeabi_dmul+0x148>
 8001700:	220f      	movs	r2, #15
 8001702:	4002      	ands	r2, r0
 8001704:	2a04      	cmp	r2, #4
 8001706:	d005      	beq.n	8001714 <__aeabi_dmul+0x148>
 8001708:	1d02      	adds	r2, r0, #4
 800170a:	4282      	cmp	r2, r0
 800170c:	4180      	sbcs	r0, r0
 800170e:	4240      	negs	r0, r0
 8001710:	1824      	adds	r4, r4, r0
 8001712:	0010      	movs	r0, r2
 8001714:	01e2      	lsls	r2, r4, #7
 8001716:	d506      	bpl.n	8001726 <__aeabi_dmul+0x15a>
 8001718:	4b74      	ldr	r3, [pc, #464]	@ (80018ec <__aeabi_dmul+0x320>)
 800171a:	9a01      	ldr	r2, [sp, #4]
 800171c:	401c      	ands	r4, r3
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	4694      	mov	ip, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4463      	add	r3, ip
 8001726:	4a72      	ldr	r2, [pc, #456]	@ (80018f0 <__aeabi_dmul+0x324>)
 8001728:	4293      	cmp	r3, r2
 800172a:	dc6b      	bgt.n	8001804 <__aeabi_dmul+0x238>
 800172c:	0762      	lsls	r2, r4, #29
 800172e:	08c0      	lsrs	r0, r0, #3
 8001730:	0264      	lsls	r4, r4, #9
 8001732:	055b      	lsls	r3, r3, #21
 8001734:	4302      	orrs	r2, r0
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	e79d      	b.n	8001678 <__aeabi_dmul+0xac>
 800173c:	2190      	movs	r1, #144	@ 0x90
 800173e:	0089      	lsls	r1, r1, #2
 8001740:	420f      	tst	r7, r1
 8001742:	d163      	bne.n	800180c <__aeabi_dmul+0x240>
 8001744:	2288      	movs	r2, #136	@ 0x88
 8001746:	423a      	tst	r2, r7
 8001748:	d100      	bne.n	800174c <__aeabi_dmul+0x180>
 800174a:	e0d7      	b.n	80018fc <__aeabi_dmul+0x330>
 800174c:	9b00      	ldr	r3, [sp, #0]
 800174e:	46a2      	mov	sl, r4
 8001750:	469b      	mov	fp, r3
 8001752:	4681      	mov	r9, r0
 8001754:	9602      	str	r6, [sp, #8]
 8001756:	e7bf      	b.n	80016d8 <__aeabi_dmul+0x10c>
 8001758:	0023      	movs	r3, r4
 800175a:	4333      	orrs	r3, r6
 800175c:	d100      	bne.n	8001760 <__aeabi_dmul+0x194>
 800175e:	e07f      	b.n	8001860 <__aeabi_dmul+0x294>
 8001760:	2c00      	cmp	r4, #0
 8001762:	d100      	bne.n	8001766 <__aeabi_dmul+0x19a>
 8001764:	e1ad      	b.n	8001ac2 <__aeabi_dmul+0x4f6>
 8001766:	0020      	movs	r0, r4
 8001768:	f000 fe44 	bl	80023f4 <__clzsi2>
 800176c:	0002      	movs	r2, r0
 800176e:	0003      	movs	r3, r0
 8001770:	3a0b      	subs	r2, #11
 8001772:	201d      	movs	r0, #29
 8001774:	0019      	movs	r1, r3
 8001776:	1a82      	subs	r2, r0, r2
 8001778:	0030      	movs	r0, r6
 800177a:	3908      	subs	r1, #8
 800177c:	40d0      	lsrs	r0, r2
 800177e:	408c      	lsls	r4, r1
 8001780:	4304      	orrs	r4, r0
 8001782:	0030      	movs	r0, r6
 8001784:	4088      	lsls	r0, r1
 8001786:	4a5b      	ldr	r2, [pc, #364]	@ (80018f4 <__aeabi_dmul+0x328>)
 8001788:	1aeb      	subs	r3, r5, r3
 800178a:	4694      	mov	ip, r2
 800178c:	4463      	add	r3, ip
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	4642      	mov	r2, r8
 8001794:	2600      	movs	r6, #0
 8001796:	2a0a      	cmp	r2, #10
 8001798:	dc00      	bgt.n	800179c <__aeabi_dmul+0x1d0>
 800179a:	e75a      	b.n	8001652 <__aeabi_dmul+0x86>
 800179c:	e79c      	b.n	80016d8 <__aeabi_dmul+0x10c>
 800179e:	4653      	mov	r3, sl
 80017a0:	4303      	orrs	r3, r0
 80017a2:	4699      	mov	r9, r3
 80017a4:	d054      	beq.n	8001850 <__aeabi_dmul+0x284>
 80017a6:	4653      	mov	r3, sl
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d100      	bne.n	80017ae <__aeabi_dmul+0x1e2>
 80017ac:	e177      	b.n	8001a9e <__aeabi_dmul+0x4d2>
 80017ae:	4650      	mov	r0, sl
 80017b0:	f000 fe20 	bl	80023f4 <__clzsi2>
 80017b4:	230b      	movs	r3, #11
 80017b6:	425b      	negs	r3, r3
 80017b8:	469c      	mov	ip, r3
 80017ba:	0002      	movs	r2, r0
 80017bc:	4484      	add	ip, r0
 80017be:	0011      	movs	r1, r2
 80017c0:	4650      	mov	r0, sl
 80017c2:	3908      	subs	r1, #8
 80017c4:	4088      	lsls	r0, r1
 80017c6:	231d      	movs	r3, #29
 80017c8:	4680      	mov	r8, r0
 80017ca:	4660      	mov	r0, ip
 80017cc:	1a1b      	subs	r3, r3, r0
 80017ce:	0020      	movs	r0, r4
 80017d0:	40d8      	lsrs	r0, r3
 80017d2:	0003      	movs	r3, r0
 80017d4:	4640      	mov	r0, r8
 80017d6:	4303      	orrs	r3, r0
 80017d8:	469a      	mov	sl, r3
 80017da:	0023      	movs	r3, r4
 80017dc:	408b      	lsls	r3, r1
 80017de:	4699      	mov	r9, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	4d44      	ldr	r5, [pc, #272]	@ (80018f4 <__aeabi_dmul+0x328>)
 80017e4:	4698      	mov	r8, r3
 80017e6:	1aad      	subs	r5, r5, r2
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	e715      	b.n	8001618 <__aeabi_dmul+0x4c>
 80017ec:	4652      	mov	r2, sl
 80017ee:	4302      	orrs	r2, r0
 80017f0:	4691      	mov	r9, r2
 80017f2:	d126      	bne.n	8001842 <__aeabi_dmul+0x276>
 80017f4:	2200      	movs	r2, #0
 80017f6:	001d      	movs	r5, r3
 80017f8:	2302      	movs	r3, #2
 80017fa:	4692      	mov	sl, r2
 80017fc:	3208      	adds	r2, #8
 80017fe:	4690      	mov	r8, r2
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	e709      	b.n	8001618 <__aeabi_dmul+0x4c>
 8001804:	2400      	movs	r4, #0
 8001806:	2200      	movs	r2, #0
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <__aeabi_dmul+0x314>)
 800180a:	e735      	b.n	8001678 <__aeabi_dmul+0xac>
 800180c:	2300      	movs	r3, #0
 800180e:	2480      	movs	r4, #128	@ 0x80
 8001810:	469b      	mov	fp, r3
 8001812:	0324      	lsls	r4, r4, #12
 8001814:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <__aeabi_dmul+0x314>)
 8001816:	e72f      	b.n	8001678 <__aeabi_dmul+0xac>
 8001818:	2202      	movs	r2, #2
 800181a:	4641      	mov	r1, r8
 800181c:	4311      	orrs	r1, r2
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	4694      	mov	ip, r2
 8001824:	002a      	movs	r2, r5
 8001826:	4462      	add	r2, ip
 8001828:	4688      	mov	r8, r1
 800182a:	9201      	str	r2, [sp, #4]
 800182c:	290a      	cmp	r1, #10
 800182e:	dd00      	ble.n	8001832 <__aeabi_dmul+0x266>
 8001830:	e752      	b.n	80016d8 <__aeabi_dmul+0x10c>
 8001832:	465a      	mov	r2, fp
 8001834:	2000      	movs	r0, #0
 8001836:	9900      	ldr	r1, [sp, #0]
 8001838:	0004      	movs	r4, r0
 800183a:	404a      	eors	r2, r1
 800183c:	4693      	mov	fp, r2
 800183e:	2602      	movs	r6, #2
 8001840:	e70b      	b.n	800165a <__aeabi_dmul+0x8e>
 8001842:	220c      	movs	r2, #12
 8001844:	001d      	movs	r5, r3
 8001846:	2303      	movs	r3, #3
 8001848:	4681      	mov	r9, r0
 800184a:	4690      	mov	r8, r2
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	e6e3      	b.n	8001618 <__aeabi_dmul+0x4c>
 8001850:	2300      	movs	r3, #0
 8001852:	469a      	mov	sl, r3
 8001854:	3304      	adds	r3, #4
 8001856:	4698      	mov	r8, r3
 8001858:	3b03      	subs	r3, #3
 800185a:	2500      	movs	r5, #0
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	e6db      	b.n	8001618 <__aeabi_dmul+0x4c>
 8001860:	4642      	mov	r2, r8
 8001862:	3301      	adds	r3, #1
 8001864:	431a      	orrs	r2, r3
 8001866:	002b      	movs	r3, r5
 8001868:	4690      	mov	r8, r2
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	4642      	mov	r2, r8
 8001870:	2400      	movs	r4, #0
 8001872:	2000      	movs	r0, #0
 8001874:	2601      	movs	r6, #1
 8001876:	2a0a      	cmp	r2, #10
 8001878:	dc00      	bgt.n	800187c <__aeabi_dmul+0x2b0>
 800187a:	e6ea      	b.n	8001652 <__aeabi_dmul+0x86>
 800187c:	e72c      	b.n	80016d8 <__aeabi_dmul+0x10c>
 800187e:	2201      	movs	r2, #1
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	2a38      	cmp	r2, #56	@ 0x38
 8001884:	dd00      	ble.n	8001888 <__aeabi_dmul+0x2bc>
 8001886:	e6f4      	b.n	8001672 <__aeabi_dmul+0xa6>
 8001888:	2a1f      	cmp	r2, #31
 800188a:	dc00      	bgt.n	800188e <__aeabi_dmul+0x2c2>
 800188c:	e12a      	b.n	8001ae4 <__aeabi_dmul+0x518>
 800188e:	211f      	movs	r1, #31
 8001890:	4249      	negs	r1, r1
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	0021      	movs	r1, r4
 8001896:	40d9      	lsrs	r1, r3
 8001898:	000b      	movs	r3, r1
 800189a:	2a20      	cmp	r2, #32
 800189c:	d005      	beq.n	80018aa <__aeabi_dmul+0x2de>
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <__aeabi_dmul+0x32c>)
 80018a0:	9d01      	ldr	r5, [sp, #4]
 80018a2:	4694      	mov	ip, r2
 80018a4:	4465      	add	r5, ip
 80018a6:	40ac      	lsls	r4, r5
 80018a8:	4320      	orrs	r0, r4
 80018aa:	1e42      	subs	r2, r0, #1
 80018ac:	4190      	sbcs	r0, r2
 80018ae:	4318      	orrs	r0, r3
 80018b0:	2307      	movs	r3, #7
 80018b2:	0019      	movs	r1, r3
 80018b4:	2400      	movs	r4, #0
 80018b6:	4001      	ands	r1, r0
 80018b8:	4203      	tst	r3, r0
 80018ba:	d00c      	beq.n	80018d6 <__aeabi_dmul+0x30a>
 80018bc:	230f      	movs	r3, #15
 80018be:	4003      	ands	r3, r0
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dmul+0x2fa>
 80018c4:	e140      	b.n	8001b48 <__aeabi_dmul+0x57c>
 80018c6:	1d03      	adds	r3, r0, #4
 80018c8:	4283      	cmp	r3, r0
 80018ca:	41a4      	sbcs	r4, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	4264      	negs	r4, r4
 80018d0:	0761      	lsls	r1, r4, #29
 80018d2:	0264      	lsls	r4, r4, #9
 80018d4:	0b24      	lsrs	r4, r4, #12
 80018d6:	08c2      	lsrs	r2, r0, #3
 80018d8:	2300      	movs	r3, #0
 80018da:	430a      	orrs	r2, r1
 80018dc:	e6cc      	b.n	8001678 <__aeabi_dmul+0xac>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	000007ff 	.word	0x000007ff
 80018e4:	fffffc01 	.word	0xfffffc01
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	000007fe 	.word	0x000007fe
 80018f4:	fffffc0d 	.word	0xfffffc0d
 80018f8:	0000043e 	.word	0x0000043e
 80018fc:	4649      	mov	r1, r9
 80018fe:	464a      	mov	r2, r9
 8001900:	0409      	lsls	r1, r1, #16
 8001902:	0c09      	lsrs	r1, r1, #16
 8001904:	000d      	movs	r5, r1
 8001906:	0c16      	lsrs	r6, r2, #16
 8001908:	0c02      	lsrs	r2, r0, #16
 800190a:	0400      	lsls	r0, r0, #16
 800190c:	0c00      	lsrs	r0, r0, #16
 800190e:	4345      	muls	r5, r0
 8001910:	46ac      	mov	ip, r5
 8001912:	0005      	movs	r5, r0
 8001914:	4375      	muls	r5, r6
 8001916:	46a8      	mov	r8, r5
 8001918:	0015      	movs	r5, r2
 800191a:	000f      	movs	r7, r1
 800191c:	4375      	muls	r5, r6
 800191e:	9200      	str	r2, [sp, #0]
 8001920:	9502      	str	r5, [sp, #8]
 8001922:	002a      	movs	r2, r5
 8001924:	9d00      	ldr	r5, [sp, #0]
 8001926:	436f      	muls	r7, r5
 8001928:	4665      	mov	r5, ip
 800192a:	0c2d      	lsrs	r5, r5, #16
 800192c:	46a9      	mov	r9, r5
 800192e:	4447      	add	r7, r8
 8001930:	444f      	add	r7, r9
 8001932:	45b8      	cmp	r8, r7
 8001934:	d905      	bls.n	8001942 <__aeabi_dmul+0x376>
 8001936:	0015      	movs	r5, r2
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0252      	lsls	r2, r2, #9
 800193c:	4690      	mov	r8, r2
 800193e:	4445      	add	r5, r8
 8001940:	9502      	str	r5, [sp, #8]
 8001942:	0c3d      	lsrs	r5, r7, #16
 8001944:	9503      	str	r5, [sp, #12]
 8001946:	4665      	mov	r5, ip
 8001948:	042d      	lsls	r5, r5, #16
 800194a:	043f      	lsls	r7, r7, #16
 800194c:	0c2d      	lsrs	r5, r5, #16
 800194e:	46ac      	mov	ip, r5
 8001950:	003d      	movs	r5, r7
 8001952:	4465      	add	r5, ip
 8001954:	9504      	str	r5, [sp, #16]
 8001956:	0c25      	lsrs	r5, r4, #16
 8001958:	0424      	lsls	r4, r4, #16
 800195a:	0c24      	lsrs	r4, r4, #16
 800195c:	46ac      	mov	ip, r5
 800195e:	0025      	movs	r5, r4
 8001960:	4375      	muls	r5, r6
 8001962:	46a8      	mov	r8, r5
 8001964:	4665      	mov	r5, ip
 8001966:	000f      	movs	r7, r1
 8001968:	4369      	muls	r1, r5
 800196a:	4441      	add	r1, r8
 800196c:	4689      	mov	r9, r1
 800196e:	4367      	muls	r7, r4
 8001970:	0c39      	lsrs	r1, r7, #16
 8001972:	4449      	add	r1, r9
 8001974:	436e      	muls	r6, r5
 8001976:	4588      	cmp	r8, r1
 8001978:	d903      	bls.n	8001982 <__aeabi_dmul+0x3b6>
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	0252      	lsls	r2, r2, #9
 800197e:	4690      	mov	r8, r2
 8001980:	4446      	add	r6, r8
 8001982:	0c0d      	lsrs	r5, r1, #16
 8001984:	46a8      	mov	r8, r5
 8001986:	0035      	movs	r5, r6
 8001988:	4445      	add	r5, r8
 800198a:	9505      	str	r5, [sp, #20]
 800198c:	9d03      	ldr	r5, [sp, #12]
 800198e:	043f      	lsls	r7, r7, #16
 8001990:	46a8      	mov	r8, r5
 8001992:	0c3f      	lsrs	r7, r7, #16
 8001994:	0409      	lsls	r1, r1, #16
 8001996:	19c9      	adds	r1, r1, r7
 8001998:	4488      	add	r8, r1
 800199a:	4645      	mov	r5, r8
 800199c:	9503      	str	r5, [sp, #12]
 800199e:	4655      	mov	r5, sl
 80019a0:	042e      	lsls	r6, r5, #16
 80019a2:	0c36      	lsrs	r6, r6, #16
 80019a4:	0c2f      	lsrs	r7, r5, #16
 80019a6:	0035      	movs	r5, r6
 80019a8:	4345      	muls	r5, r0
 80019aa:	4378      	muls	r0, r7
 80019ac:	4681      	mov	r9, r0
 80019ae:	0038      	movs	r0, r7
 80019b0:	46a8      	mov	r8, r5
 80019b2:	0c2d      	lsrs	r5, r5, #16
 80019b4:	46aa      	mov	sl, r5
 80019b6:	9a00      	ldr	r2, [sp, #0]
 80019b8:	4350      	muls	r0, r2
 80019ba:	4372      	muls	r2, r6
 80019bc:	444a      	add	r2, r9
 80019be:	4452      	add	r2, sl
 80019c0:	4591      	cmp	r9, r2
 80019c2:	d903      	bls.n	80019cc <__aeabi_dmul+0x400>
 80019c4:	2580      	movs	r5, #128	@ 0x80
 80019c6:	026d      	lsls	r5, r5, #9
 80019c8:	46a9      	mov	r9, r5
 80019ca:	4448      	add	r0, r9
 80019cc:	0c15      	lsrs	r5, r2, #16
 80019ce:	46a9      	mov	r9, r5
 80019d0:	4645      	mov	r5, r8
 80019d2:	042d      	lsls	r5, r5, #16
 80019d4:	0c2d      	lsrs	r5, r5, #16
 80019d6:	46a8      	mov	r8, r5
 80019d8:	4665      	mov	r5, ip
 80019da:	437d      	muls	r5, r7
 80019dc:	0412      	lsls	r2, r2, #16
 80019de:	4448      	add	r0, r9
 80019e0:	4490      	add	r8, r2
 80019e2:	46a9      	mov	r9, r5
 80019e4:	0032      	movs	r2, r6
 80019e6:	4665      	mov	r5, ip
 80019e8:	4362      	muls	r2, r4
 80019ea:	436e      	muls	r6, r5
 80019ec:	437c      	muls	r4, r7
 80019ee:	0c17      	lsrs	r7, r2, #16
 80019f0:	1936      	adds	r6, r6, r4
 80019f2:	19bf      	adds	r7, r7, r6
 80019f4:	42bc      	cmp	r4, r7
 80019f6:	d903      	bls.n	8001a00 <__aeabi_dmul+0x434>
 80019f8:	2480      	movs	r4, #128	@ 0x80
 80019fa:	0264      	lsls	r4, r4, #9
 80019fc:	46a4      	mov	ip, r4
 80019fe:	44e1      	add	r9, ip
 8001a00:	9c02      	ldr	r4, [sp, #8]
 8001a02:	9e03      	ldr	r6, [sp, #12]
 8001a04:	46a4      	mov	ip, r4
 8001a06:	9d05      	ldr	r5, [sp, #20]
 8001a08:	4466      	add	r6, ip
 8001a0a:	428e      	cmp	r6, r1
 8001a0c:	4189      	sbcs	r1, r1
 8001a0e:	46ac      	mov	ip, r5
 8001a10:	0412      	lsls	r2, r2, #16
 8001a12:	043c      	lsls	r4, r7, #16
 8001a14:	0c12      	lsrs	r2, r2, #16
 8001a16:	18a2      	adds	r2, r4, r2
 8001a18:	4462      	add	r2, ip
 8001a1a:	4249      	negs	r1, r1
 8001a1c:	1854      	adds	r4, r2, r1
 8001a1e:	4446      	add	r6, r8
 8001a20:	46a4      	mov	ip, r4
 8001a22:	4546      	cmp	r6, r8
 8001a24:	41a4      	sbcs	r4, r4
 8001a26:	4682      	mov	sl, r0
 8001a28:	4264      	negs	r4, r4
 8001a2a:	46a0      	mov	r8, r4
 8001a2c:	42aa      	cmp	r2, r5
 8001a2e:	4192      	sbcs	r2, r2
 8001a30:	458c      	cmp	ip, r1
 8001a32:	4189      	sbcs	r1, r1
 8001a34:	44e2      	add	sl, ip
 8001a36:	44d0      	add	r8, sl
 8001a38:	4249      	negs	r1, r1
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	45a0      	cmp	r8, r4
 8001a40:	41a4      	sbcs	r4, r4
 8001a42:	4582      	cmp	sl, r0
 8001a44:	4189      	sbcs	r1, r1
 8001a46:	4264      	negs	r4, r4
 8001a48:	4249      	negs	r1, r1
 8001a4a:	430c      	orrs	r4, r1
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	0c3f      	lsrs	r7, r7, #16
 8001a50:	19d2      	adds	r2, r2, r7
 8001a52:	1912      	adds	r2, r2, r4
 8001a54:	0dcc      	lsrs	r4, r1, #23
 8001a56:	9904      	ldr	r1, [sp, #16]
 8001a58:	0270      	lsls	r0, r6, #9
 8001a5a:	4308      	orrs	r0, r1
 8001a5c:	1e41      	subs	r1, r0, #1
 8001a5e:	4188      	sbcs	r0, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	444a      	add	r2, r9
 8001a64:	0df6      	lsrs	r6, r6, #23
 8001a66:	0252      	lsls	r2, r2, #9
 8001a68:	4330      	orrs	r0, r6
 8001a6a:	0249      	lsls	r1, r1, #9
 8001a6c:	4314      	orrs	r4, r2
 8001a6e:	4308      	orrs	r0, r1
 8001a70:	01d2      	lsls	r2, r2, #7
 8001a72:	d535      	bpl.n	8001ae0 <__aeabi_dmul+0x514>
 8001a74:	2201      	movs	r2, #1
 8001a76:	0843      	lsrs	r3, r0, #1
 8001a78:	4002      	ands	r2, r0
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	07e0      	lsls	r0, r4, #31
 8001a7e:	4318      	orrs	r0, r3
 8001a80:	0864      	lsrs	r4, r4, #1
 8001a82:	e634      	b.n	80016ee <__aeabi_dmul+0x122>
 8001a84:	9b00      	ldr	r3, [sp, #0]
 8001a86:	46a2      	mov	sl, r4
 8001a88:	469b      	mov	fp, r3
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	2480      	movs	r4, #128	@ 0x80
 8001a8e:	4653      	mov	r3, sl
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	431c      	orrs	r4, r3
 8001a94:	0324      	lsls	r4, r4, #12
 8001a96:	464a      	mov	r2, r9
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <__aeabi_dmul+0x588>)
 8001a9a:	0b24      	lsrs	r4, r4, #12
 8001a9c:	e5ec      	b.n	8001678 <__aeabi_dmul+0xac>
 8001a9e:	f000 fca9 	bl	80023f4 <__clzsi2>
 8001aa2:	2315      	movs	r3, #21
 8001aa4:	469c      	mov	ip, r3
 8001aa6:	4484      	add	ip, r0
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	4663      	mov	r3, ip
 8001aac:	3220      	adds	r2, #32
 8001aae:	2b1c      	cmp	r3, #28
 8001ab0:	dc00      	bgt.n	8001ab4 <__aeabi_dmul+0x4e8>
 8001ab2:	e684      	b.n	80017be <__aeabi_dmul+0x1f2>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	0023      	movs	r3, r4
 8001aba:	3808      	subs	r0, #8
 8001abc:	4083      	lsls	r3, r0
 8001abe:	469a      	mov	sl, r3
 8001ac0:	e68e      	b.n	80017e0 <__aeabi_dmul+0x214>
 8001ac2:	f000 fc97 	bl	80023f4 <__clzsi2>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	0003      	movs	r3, r0
 8001aca:	3215      	adds	r2, #21
 8001acc:	3320      	adds	r3, #32
 8001ace:	2a1c      	cmp	r2, #28
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_dmul+0x508>
 8001ad2:	e64e      	b.n	8001772 <__aeabi_dmul+0x1a6>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	0034      	movs	r4, r6
 8001ad8:	3a08      	subs	r2, #8
 8001ada:	2000      	movs	r0, #0
 8001adc:	4094      	lsls	r4, r2
 8001ade:	e652      	b.n	8001786 <__aeabi_dmul+0x1ba>
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	e604      	b.n	80016ee <__aeabi_dmul+0x122>
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <__aeabi_dmul+0x58c>)
 8001ae6:	0021      	movs	r1, r4
 8001ae8:	469c      	mov	ip, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	9d01      	ldr	r5, [sp, #4]
 8001aee:	40d3      	lsrs	r3, r2
 8001af0:	4465      	add	r5, ip
 8001af2:	40a9      	lsls	r1, r5
 8001af4:	4319      	orrs	r1, r3
 8001af6:	0003      	movs	r3, r0
 8001af8:	40ab      	lsls	r3, r5
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	4183      	sbcs	r3, r0
 8001afe:	4319      	orrs	r1, r3
 8001b00:	0008      	movs	r0, r1
 8001b02:	40d4      	lsrs	r4, r2
 8001b04:	074b      	lsls	r3, r1, #29
 8001b06:	d009      	beq.n	8001b1c <__aeabi_dmul+0x550>
 8001b08:	230f      	movs	r3, #15
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d005      	beq.n	8001b1c <__aeabi_dmul+0x550>
 8001b10:	1d0b      	adds	r3, r1, #4
 8001b12:	428b      	cmp	r3, r1
 8001b14:	4180      	sbcs	r0, r0
 8001b16:	4240      	negs	r0, r0
 8001b18:	1824      	adds	r4, r4, r0
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	0223      	lsls	r3, r4, #8
 8001b1e:	d400      	bmi.n	8001b22 <__aeabi_dmul+0x556>
 8001b20:	e6d6      	b.n	80018d0 <__aeabi_dmul+0x304>
 8001b22:	2301      	movs	r3, #1
 8001b24:	2400      	movs	r4, #0
 8001b26:	2200      	movs	r2, #0
 8001b28:	e5a6      	b.n	8001678 <__aeabi_dmul+0xac>
 8001b2a:	290f      	cmp	r1, #15
 8001b2c:	d1aa      	bne.n	8001a84 <__aeabi_dmul+0x4b8>
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	4652      	mov	r2, sl
 8001b32:	031b      	lsls	r3, r3, #12
 8001b34:	421a      	tst	r2, r3
 8001b36:	d0a9      	beq.n	8001a8c <__aeabi_dmul+0x4c0>
 8001b38:	421c      	tst	r4, r3
 8001b3a:	d1a7      	bne.n	8001a8c <__aeabi_dmul+0x4c0>
 8001b3c:	431c      	orrs	r4, r3
 8001b3e:	9b00      	ldr	r3, [sp, #0]
 8001b40:	0002      	movs	r2, r0
 8001b42:	469b      	mov	fp, r3
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <__aeabi_dmul+0x588>)
 8001b46:	e597      	b.n	8001678 <__aeabi_dmul+0xac>
 8001b48:	2400      	movs	r4, #0
 8001b4a:	e6c1      	b.n	80018d0 <__aeabi_dmul+0x304>
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	4b01      	ldr	r3, [pc, #4]	@ (8001b54 <__aeabi_dmul+0x588>)
 8001b50:	0022      	movs	r2, r4
 8001b52:	e591      	b.n	8001678 <__aeabi_dmul+0xac>
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	0000041e 	.word	0x0000041e

08001b5c <__aeabi_dsub>:
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	464e      	mov	r6, r9
 8001b60:	4645      	mov	r5, r8
 8001b62:	46de      	mov	lr, fp
 8001b64:	4657      	mov	r7, sl
 8001b66:	b5e0      	push	{r5, r6, r7, lr}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	9000      	str	r0, [sp, #0]
 8001b6c:	9101      	str	r1, [sp, #4]
 8001b6e:	030c      	lsls	r4, r1, #12
 8001b70:	004f      	lsls	r7, r1, #1
 8001b72:	0fce      	lsrs	r6, r1, #31
 8001b74:	0a61      	lsrs	r1, r4, #9
 8001b76:	9c00      	ldr	r4, [sp, #0]
 8001b78:	46b0      	mov	r8, r6
 8001b7a:	0f64      	lsrs	r4, r4, #29
 8001b7c:	430c      	orrs	r4, r1
 8001b7e:	9900      	ldr	r1, [sp, #0]
 8001b80:	0d7f      	lsrs	r7, r7, #21
 8001b82:	00c8      	lsls	r0, r1, #3
 8001b84:	0011      	movs	r1, r2
 8001b86:	001a      	movs	r2, r3
 8001b88:	031b      	lsls	r3, r3, #12
 8001b8a:	469c      	mov	ip, r3
 8001b8c:	9100      	str	r1, [sp, #0]
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	0051      	lsls	r1, r2, #1
 8001b92:	0d4b      	lsrs	r3, r1, #21
 8001b94:	4699      	mov	r9, r3
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	9d00      	ldr	r5, [sp, #0]
 8001b9a:	0fd9      	lsrs	r1, r3, #31
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	0f6a      	lsrs	r2, r5, #29
 8001ba0:	0a5b      	lsrs	r3, r3, #9
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	00ea      	lsls	r2, r5, #3
 8001ba6:	4694      	mov	ip, r2
 8001ba8:	4693      	mov	fp, r2
 8001baa:	4ac1      	ldr	r2, [pc, #772]	@ (8001eb0 <__aeabi_dsub+0x354>)
 8001bac:	9003      	str	r0, [sp, #12]
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	4591      	cmp	r9, r2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x5a>
 8001bb4:	e0cd      	b.n	8001d52 <__aeabi_dsub+0x1f6>
 8001bb6:	2501      	movs	r5, #1
 8001bb8:	4069      	eors	r1, r5
 8001bba:	464d      	mov	r5, r9
 8001bbc:	1b7d      	subs	r5, r7, r5
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	428e      	cmp	r6, r1
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x6a>
 8001bc4:	e080      	b.n	8001cc8 <__aeabi_dsub+0x16c>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x70>
 8001bca:	e335      	b.n	8002238 <__aeabi_dsub+0x6dc>
 8001bcc:	4649      	mov	r1, r9
 8001bce:	2900      	cmp	r1, #0
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x78>
 8001bd2:	e0df      	b.n	8001d94 <__aeabi_dsub+0x238>
 8001bd4:	4297      	cmp	r7, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x7e>
 8001bd8:	e194      	b.n	8001f04 <__aeabi_dsub+0x3a8>
 8001bda:	4652      	mov	r2, sl
 8001bdc:	2501      	movs	r5, #1
 8001bde:	2a38      	cmp	r2, #56	@ 0x38
 8001be0:	dc19      	bgt.n	8001c16 <__aeabi_dsub+0xba>
 8001be2:	2280      	movs	r2, #128	@ 0x80
 8001be4:	9b02      	ldr	r3, [sp, #8]
 8001be6:	0412      	lsls	r2, r2, #16
 8001be8:	4313      	orrs	r3, r2
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	4652      	mov	r2, sl
 8001bee:	2a1f      	cmp	r2, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x98>
 8001bf2:	e1e3      	b.n	8001fbc <__aeabi_dsub+0x460>
 8001bf4:	4653      	mov	r3, sl
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	4661      	mov	r1, ip
 8001bfa:	9d02      	ldr	r5, [sp, #8]
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	4095      	lsls	r5, r2
 8001c00:	40d9      	lsrs	r1, r3
 8001c02:	430d      	orrs	r5, r1
 8001c04:	4661      	mov	r1, ip
 8001c06:	4091      	lsls	r1, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	1e51      	subs	r1, r2, #1
 8001c0c:	418a      	sbcs	r2, r1
 8001c0e:	4315      	orrs	r5, r2
 8001c10:	9a02      	ldr	r2, [sp, #8]
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	1aa4      	subs	r4, r4, r2
 8001c16:	1b45      	subs	r5, r0, r5
 8001c18:	42a8      	cmp	r0, r5
 8001c1a:	4180      	sbcs	r0, r0
 8001c1c:	4240      	negs	r0, r0
 8001c1e:	1a24      	subs	r4, r4, r0
 8001c20:	0223      	lsls	r3, r4, #8
 8001c22:	d400      	bmi.n	8001c26 <__aeabi_dsub+0xca>
 8001c24:	e13d      	b.n	8001ea2 <__aeabi_dsub+0x346>
 8001c26:	0264      	lsls	r4, r4, #9
 8001c28:	0a64      	lsrs	r4, r4, #9
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0xd4>
 8001c2e:	e147      	b.n	8001ec0 <__aeabi_dsub+0x364>
 8001c30:	0020      	movs	r0, r4
 8001c32:	f000 fbdf 	bl	80023f4 <__clzsi2>
 8001c36:	0003      	movs	r3, r0
 8001c38:	3b08      	subs	r3, #8
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	0028      	movs	r0, r5
 8001c3e:	1aca      	subs	r2, r1, r3
 8001c40:	40d0      	lsrs	r0, r2
 8001c42:	409c      	lsls	r4, r3
 8001c44:	0002      	movs	r2, r0
 8001c46:	409d      	lsls	r5, r3
 8001c48:	4322      	orrs	r2, r4
 8001c4a:	429f      	cmp	r7, r3
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dsub+0xf4>
 8001c4e:	e177      	b.n	8001f40 <__aeabi_dsub+0x3e4>
 8001c50:	1bd8      	subs	r0, r3, r7
 8001c52:	3001      	adds	r0, #1
 8001c54:	1a09      	subs	r1, r1, r0
 8001c56:	002c      	movs	r4, r5
 8001c58:	408d      	lsls	r5, r1
 8001c5a:	40c4      	lsrs	r4, r0
 8001c5c:	1e6b      	subs	r3, r5, #1
 8001c5e:	419d      	sbcs	r5, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	40c2      	lsrs	r2, r0
 8001c64:	408b      	lsls	r3, r1
 8001c66:	4325      	orrs	r5, r4
 8001c68:	2700      	movs	r7, #0
 8001c6a:	0014      	movs	r4, r2
 8001c6c:	431d      	orrs	r5, r3
 8001c6e:	076b      	lsls	r3, r5, #29
 8001c70:	d009      	beq.n	8001c86 <__aeabi_dsub+0x12a>
 8001c72:	230f      	movs	r3, #15
 8001c74:	402b      	ands	r3, r5
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d005      	beq.n	8001c86 <__aeabi_dsub+0x12a>
 8001c7a:	1d2b      	adds	r3, r5, #4
 8001c7c:	42ab      	cmp	r3, r5
 8001c7e:	41ad      	sbcs	r5, r5
 8001c80:	426d      	negs	r5, r5
 8001c82:	1964      	adds	r4, r4, r5
 8001c84:	001d      	movs	r5, r3
 8001c86:	0223      	lsls	r3, r4, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_dsub+0x130>
 8001c8a:	e140      	b.n	8001f0e <__aeabi_dsub+0x3b2>
 8001c8c:	4a88      	ldr	r2, [pc, #544]	@ (8001eb0 <__aeabi_dsub+0x354>)
 8001c8e:	3701      	adds	r7, #1
 8001c90:	4297      	cmp	r7, r2
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x13a>
 8001c94:	e101      	b.n	8001e9a <__aeabi_dsub+0x33e>
 8001c96:	2601      	movs	r6, #1
 8001c98:	4643      	mov	r3, r8
 8001c9a:	4986      	ldr	r1, [pc, #536]	@ (8001eb4 <__aeabi_dsub+0x358>)
 8001c9c:	08ed      	lsrs	r5, r5, #3
 8001c9e:	4021      	ands	r1, r4
 8001ca0:	074a      	lsls	r2, r1, #29
 8001ca2:	432a      	orrs	r2, r5
 8001ca4:	057c      	lsls	r4, r7, #21
 8001ca6:	024d      	lsls	r5, r1, #9
 8001ca8:	0b2d      	lsrs	r5, r5, #12
 8001caa:	0d64      	lsrs	r4, r4, #21
 8001cac:	401e      	ands	r6, r3
 8001cae:	0524      	lsls	r4, r4, #20
 8001cb0:	432c      	orrs	r4, r5
 8001cb2:	07f6      	lsls	r6, r6, #31
 8001cb4:	4334      	orrs	r4, r6
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	0021      	movs	r1, r4
 8001cba:	b005      	add	sp, #20
 8001cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8001cbe:	46bb      	mov	fp, r7
 8001cc0:	46b2      	mov	sl, r6
 8001cc2:	46a9      	mov	r9, r5
 8001cc4:	46a0      	mov	r8, r4
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dsub+0x172>
 8001ccc:	e2d0      	b.n	8002270 <__aeabi_dsub+0x714>
 8001cce:	4649      	mov	r1, r9
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x17a>
 8001cd4:	e0d4      	b.n	8001e80 <__aeabi_dsub+0x324>
 8001cd6:	4661      	mov	r1, ip
 8001cd8:	9b02      	ldr	r3, [sp, #8]
 8001cda:	4319      	orrs	r1, r3
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x184>
 8001cde:	e12b      	b.n	8001f38 <__aeabi_dsub+0x3dc>
 8001ce0:	1e69      	subs	r1, r5, #1
 8001ce2:	2d01      	cmp	r5, #1
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x18c>
 8001ce6:	e1d9      	b.n	800209c <__aeabi_dsub+0x540>
 8001ce8:	4295      	cmp	r5, r2
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x192>
 8001cec:	e10a      	b.n	8001f04 <__aeabi_dsub+0x3a8>
 8001cee:	2501      	movs	r5, #1
 8001cf0:	2938      	cmp	r1, #56	@ 0x38
 8001cf2:	dc17      	bgt.n	8001d24 <__aeabi_dsub+0x1c8>
 8001cf4:	468a      	mov	sl, r1
 8001cf6:	4653      	mov	r3, sl
 8001cf8:	2b1f      	cmp	r3, #31
 8001cfa:	dd00      	ble.n	8001cfe <__aeabi_dsub+0x1a2>
 8001cfc:	e1e7      	b.n	80020ce <__aeabi_dsub+0x572>
 8001cfe:	2220      	movs	r2, #32
 8001d00:	1ad2      	subs	r2, r2, r3
 8001d02:	9b02      	ldr	r3, [sp, #8]
 8001d04:	4661      	mov	r1, ip
 8001d06:	4093      	lsls	r3, r2
 8001d08:	001d      	movs	r5, r3
 8001d0a:	4653      	mov	r3, sl
 8001d0c:	40d9      	lsrs	r1, r3
 8001d0e:	4663      	mov	r3, ip
 8001d10:	4093      	lsls	r3, r2
 8001d12:	001a      	movs	r2, r3
 8001d14:	430d      	orrs	r5, r1
 8001d16:	1e51      	subs	r1, r2, #1
 8001d18:	418a      	sbcs	r2, r1
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	4315      	orrs	r5, r2
 8001d1e:	9a02      	ldr	r2, [sp, #8]
 8001d20:	40da      	lsrs	r2, r3
 8001d22:	18a4      	adds	r4, r4, r2
 8001d24:	182d      	adds	r5, r5, r0
 8001d26:	4285      	cmp	r5, r0
 8001d28:	4180      	sbcs	r0, r0
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1824      	adds	r4, r4, r0
 8001d2e:	0223      	lsls	r3, r4, #8
 8001d30:	d400      	bmi.n	8001d34 <__aeabi_dsub+0x1d8>
 8001d32:	e0b6      	b.n	8001ea2 <__aeabi_dsub+0x346>
 8001d34:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb0 <__aeabi_dsub+0x354>)
 8001d36:	3701      	adds	r7, #1
 8001d38:	429f      	cmp	r7, r3
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x1e2>
 8001d3c:	e0ad      	b.n	8001e9a <__aeabi_dsub+0x33e>
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb4 <__aeabi_dsub+0x358>)
 8001d42:	086a      	lsrs	r2, r5, #1
 8001d44:	401c      	ands	r4, r3
 8001d46:	4029      	ands	r1, r5
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	07e5      	lsls	r5, r4, #31
 8001d4c:	4315      	orrs	r5, r2
 8001d4e:	0864      	lsrs	r4, r4, #1
 8001d50:	e78d      	b.n	8001c6e <__aeabi_dsub+0x112>
 8001d52:	4a59      	ldr	r2, [pc, #356]	@ (8001eb8 <__aeabi_dsub+0x35c>)
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4692      	mov	sl, r2
 8001d58:	4662      	mov	r2, ip
 8001d5a:	44ba      	add	sl, r7
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	d02c      	beq.n	8001dba <__aeabi_dsub+0x25e>
 8001d60:	428e      	cmp	r6, r1
 8001d62:	d02e      	beq.n	8001dc2 <__aeabi_dsub+0x266>
 8001d64:	4652      	mov	r2, sl
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d060      	beq.n	8001e2c <__aeabi_dsub+0x2d0>
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x214>
 8001d6e:	e0db      	b.n	8001f28 <__aeabi_dsub+0x3cc>
 8001d70:	4663      	mov	r3, ip
 8001d72:	000e      	movs	r6, r1
 8001d74:	9c02      	ldr	r4, [sp, #8]
 8001d76:	08d8      	lsrs	r0, r3, #3
 8001d78:	0762      	lsls	r2, r4, #29
 8001d7a:	4302      	orrs	r2, r0
 8001d7c:	08e4      	lsrs	r4, r4, #3
 8001d7e:	0013      	movs	r3, r2
 8001d80:	4323      	orrs	r3, r4
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x22a>
 8001d84:	e254      	b.n	8002230 <__aeabi_dsub+0x6d4>
 8001d86:	2580      	movs	r5, #128	@ 0x80
 8001d88:	032d      	lsls	r5, r5, #12
 8001d8a:	4325      	orrs	r5, r4
 8001d8c:	032d      	lsls	r5, r5, #12
 8001d8e:	4c48      	ldr	r4, [pc, #288]	@ (8001eb0 <__aeabi_dsub+0x354>)
 8001d90:	0b2d      	lsrs	r5, r5, #12
 8001d92:	e78c      	b.n	8001cae <__aeabi_dsub+0x152>
 8001d94:	4661      	mov	r1, ip
 8001d96:	9b02      	ldr	r3, [sp, #8]
 8001d98:	4319      	orrs	r1, r3
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x242>
 8001d9c:	e0cc      	b.n	8001f38 <__aeabi_dsub+0x3dc>
 8001d9e:	0029      	movs	r1, r5
 8001da0:	3901      	subs	r1, #1
 8001da2:	2d01      	cmp	r5, #1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x24c>
 8001da6:	e188      	b.n	80020ba <__aeabi_dsub+0x55e>
 8001da8:	4295      	cmp	r5, r2
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x252>
 8001dac:	e0aa      	b.n	8001f04 <__aeabi_dsub+0x3a8>
 8001dae:	2501      	movs	r5, #1
 8001db0:	2938      	cmp	r1, #56	@ 0x38
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dsub+0x25a>
 8001db4:	e72f      	b.n	8001c16 <__aeabi_dsub+0xba>
 8001db6:	468a      	mov	sl, r1
 8001db8:	e718      	b.n	8001bec <__aeabi_dsub+0x90>
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4051      	eors	r1, r2
 8001dbe:	428e      	cmp	r6, r1
 8001dc0:	d1d0      	bne.n	8001d64 <__aeabi_dsub+0x208>
 8001dc2:	4653      	mov	r3, sl
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x26e>
 8001dc8:	e0be      	b.n	8001f48 <__aeabi_dsub+0x3ec>
 8001dca:	2f00      	cmp	r7, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x274>
 8001dce:	e138      	b.n	8002042 <__aeabi_dsub+0x4e6>
 8001dd0:	46ca      	mov	sl, r9
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x27e>
 8001dd8:	e1e2      	b.n	80021a0 <__aeabi_dsub+0x644>
 8001dda:	4653      	mov	r3, sl
 8001ddc:	1e59      	subs	r1, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d100      	bne.n	8001de4 <__aeabi_dsub+0x288>
 8001de2:	e20d      	b.n	8002200 <__aeabi_dsub+0x6a4>
 8001de4:	4a32      	ldr	r2, [pc, #200]	@ (8001eb0 <__aeabi_dsub+0x354>)
 8001de6:	4592      	cmp	sl, r2
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x290>
 8001dea:	e1d2      	b.n	8002192 <__aeabi_dsub+0x636>
 8001dec:	2701      	movs	r7, #1
 8001dee:	2938      	cmp	r1, #56	@ 0x38
 8001df0:	dc13      	bgt.n	8001e1a <__aeabi_dsub+0x2be>
 8001df2:	291f      	cmp	r1, #31
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_dsub+0x29c>
 8001df6:	e1ee      	b.n	80021d6 <__aeabi_dsub+0x67a>
 8001df8:	2220      	movs	r2, #32
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	1a52      	subs	r2, r2, r1
 8001dfe:	0025      	movs	r5, r4
 8001e00:	0007      	movs	r7, r0
 8001e02:	469a      	mov	sl, r3
 8001e04:	40cc      	lsrs	r4, r1
 8001e06:	4090      	lsls	r0, r2
 8001e08:	4095      	lsls	r5, r2
 8001e0a:	40cf      	lsrs	r7, r1
 8001e0c:	44a2      	add	sl, r4
 8001e0e:	1e42      	subs	r2, r0, #1
 8001e10:	4190      	sbcs	r0, r2
 8001e12:	4653      	mov	r3, sl
 8001e14:	432f      	orrs	r7, r5
 8001e16:	4307      	orrs	r7, r0
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	003d      	movs	r5, r7
 8001e1c:	4465      	add	r5, ip
 8001e1e:	4565      	cmp	r5, ip
 8001e20:	4192      	sbcs	r2, r2
 8001e22:	9b02      	ldr	r3, [sp, #8]
 8001e24:	4252      	negs	r2, r2
 8001e26:	464f      	mov	r7, r9
 8001e28:	18d4      	adds	r4, r2, r3
 8001e2a:	e780      	b.n	8001d2e <__aeabi_dsub+0x1d2>
 8001e2c:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <__aeabi_dsub+0x360>)
 8001e2e:	1c7d      	adds	r5, r7, #1
 8001e30:	4215      	tst	r5, r2
 8001e32:	d000      	beq.n	8001e36 <__aeabi_dsub+0x2da>
 8001e34:	e0aa      	b.n	8001f8c <__aeabi_dsub+0x430>
 8001e36:	4662      	mov	r2, ip
 8001e38:	0025      	movs	r5, r4
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	4305      	orrs	r5, r0
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	2f00      	cmp	r7, #0
 8001e42:	d000      	beq.n	8001e46 <__aeabi_dsub+0x2ea>
 8001e44:	e0f5      	b.n	8002032 <__aeabi_dsub+0x4d6>
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x2f0>
 8001e4a:	e16b      	b.n	8002124 <__aeabi_dsub+0x5c8>
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x2f6>
 8001e50:	e152      	b.n	80020f8 <__aeabi_dsub+0x59c>
 8001e52:	4663      	mov	r3, ip
 8001e54:	1ac5      	subs	r5, r0, r3
 8001e56:	9b02      	ldr	r3, [sp, #8]
 8001e58:	1ae2      	subs	r2, r4, r3
 8001e5a:	42a8      	cmp	r0, r5
 8001e5c:	419b      	sbcs	r3, r3
 8001e5e:	425b      	negs	r3, r3
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	d400      	bmi.n	8001e68 <__aeabi_dsub+0x30c>
 8001e66:	e1d5      	b.n	8002214 <__aeabi_dsub+0x6b8>
 8001e68:	4663      	mov	r3, ip
 8001e6a:	1a1d      	subs	r5, r3, r0
 8001e6c:	45ac      	cmp	ip, r5
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	2601      	movs	r6, #1
 8001e72:	9b02      	ldr	r3, [sp, #8]
 8001e74:	4252      	negs	r2, r2
 8001e76:	1b1c      	subs	r4, r3, r4
 8001e78:	4688      	mov	r8, r1
 8001e7a:	1aa4      	subs	r4, r4, r2
 8001e7c:	400e      	ands	r6, r1
 8001e7e:	e6f6      	b.n	8001c6e <__aeabi_dsub+0x112>
 8001e80:	4297      	cmp	r7, r2
 8001e82:	d03f      	beq.n	8001f04 <__aeabi_dsub+0x3a8>
 8001e84:	4652      	mov	r2, sl
 8001e86:	2501      	movs	r5, #1
 8001e88:	2a38      	cmp	r2, #56	@ 0x38
 8001e8a:	dd00      	ble.n	8001e8e <__aeabi_dsub+0x332>
 8001e8c:	e74a      	b.n	8001d24 <__aeabi_dsub+0x1c8>
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	9b02      	ldr	r3, [sp, #8]
 8001e92:	0412      	lsls	r2, r2, #16
 8001e94:	4313      	orrs	r3, r2
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	e72d      	b.n	8001cf6 <__aeabi_dsub+0x19a>
 8001e9a:	003c      	movs	r4, r7
 8001e9c:	2500      	movs	r5, #0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	e705      	b.n	8001cae <__aeabi_dsub+0x152>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	402b      	ands	r3, r5
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d000      	beq.n	8001eac <__aeabi_dsub+0x350>
 8001eaa:	e6e2      	b.n	8001c72 <__aeabi_dsub+0x116>
 8001eac:	e06b      	b.n	8001f86 <__aeabi_dsub+0x42a>
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	000007ff 	.word	0x000007ff
 8001eb4:	ff7fffff 	.word	0xff7fffff
 8001eb8:	fffff801 	.word	0xfffff801
 8001ebc:	000007fe 	.word	0x000007fe
 8001ec0:	0028      	movs	r0, r5
 8001ec2:	f000 fa97 	bl	80023f4 <__clzsi2>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	3318      	adds	r3, #24
 8001eca:	2b1f      	cmp	r3, #31
 8001ecc:	dc00      	bgt.n	8001ed0 <__aeabi_dsub+0x374>
 8001ece:	e6b4      	b.n	8001c3a <__aeabi_dsub+0xde>
 8001ed0:	002a      	movs	r2, r5
 8001ed2:	3808      	subs	r0, #8
 8001ed4:	4082      	lsls	r2, r0
 8001ed6:	429f      	cmp	r7, r3
 8001ed8:	dd00      	ble.n	8001edc <__aeabi_dsub+0x380>
 8001eda:	e0b9      	b.n	8002050 <__aeabi_dsub+0x4f4>
 8001edc:	1bdb      	subs	r3, r3, r7
 8001ede:	1c58      	adds	r0, r3, #1
 8001ee0:	281f      	cmp	r0, #31
 8001ee2:	dc00      	bgt.n	8001ee6 <__aeabi_dsub+0x38a>
 8001ee4:	e1a0      	b.n	8002228 <__aeabi_dsub+0x6cc>
 8001ee6:	0015      	movs	r5, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40dd      	lsrs	r5, r3
 8001eec:	2820      	cmp	r0, #32
 8001eee:	d005      	beq.n	8001efc <__aeabi_dsub+0x3a0>
 8001ef0:	2340      	movs	r3, #64	@ 0x40
 8001ef2:	1a1b      	subs	r3, r3, r0
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	1e53      	subs	r3, r2, #1
 8001ef8:	419a      	sbcs	r2, r3
 8001efa:	4315      	orrs	r5, r2
 8001efc:	2307      	movs	r3, #7
 8001efe:	2700      	movs	r7, #0
 8001f00:	402b      	ands	r3, r5
 8001f02:	e7d0      	b.n	8001ea6 <__aeabi_dsub+0x34a>
 8001f04:	08c0      	lsrs	r0, r0, #3
 8001f06:	0762      	lsls	r2, r4, #29
 8001f08:	4302      	orrs	r2, r0
 8001f0a:	08e4      	lsrs	r4, r4, #3
 8001f0c:	e737      	b.n	8001d7e <__aeabi_dsub+0x222>
 8001f0e:	08ea      	lsrs	r2, r5, #3
 8001f10:	0763      	lsls	r3, r4, #29
 8001f12:	431a      	orrs	r2, r3
 8001f14:	4bd3      	ldr	r3, [pc, #844]	@ (8002264 <__aeabi_dsub+0x708>)
 8001f16:	08e4      	lsrs	r4, r4, #3
 8001f18:	429f      	cmp	r7, r3
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x3c2>
 8001f1c:	e72f      	b.n	8001d7e <__aeabi_dsub+0x222>
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	0b25      	lsrs	r5, r4, #12
 8001f22:	057c      	lsls	r4, r7, #21
 8001f24:	0d64      	lsrs	r4, r4, #21
 8001f26:	e6c2      	b.n	8001cae <__aeabi_dsub+0x152>
 8001f28:	46ca      	mov	sl, r9
 8001f2a:	0022      	movs	r2, r4
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	d158      	bne.n	8001fe2 <__aeabi_dsub+0x486>
 8001f30:	4663      	mov	r3, ip
 8001f32:	000e      	movs	r6, r1
 8001f34:	9c02      	ldr	r4, [sp, #8]
 8001f36:	9303      	str	r3, [sp, #12]
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	4657      	mov	r7, sl
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	e7e7      	b.n	8001f10 <__aeabi_dsub+0x3b4>
 8001f40:	4cc9      	ldr	r4, [pc, #804]	@ (8002268 <__aeabi_dsub+0x70c>)
 8001f42:	1aff      	subs	r7, r7, r3
 8001f44:	4014      	ands	r4, r2
 8001f46:	e692      	b.n	8001c6e <__aeabi_dsub+0x112>
 8001f48:	4dc8      	ldr	r5, [pc, #800]	@ (800226c <__aeabi_dsub+0x710>)
 8001f4a:	1c7a      	adds	r2, r7, #1
 8001f4c:	422a      	tst	r2, r5
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x3f6>
 8001f50:	e084      	b.n	800205c <__aeabi_dsub+0x500>
 8001f52:	0022      	movs	r2, r4
 8001f54:	4302      	orrs	r2, r0
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dsub+0x400>
 8001f5a:	e0ef      	b.n	800213c <__aeabi_dsub+0x5e0>
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x406>
 8001f60:	e0e5      	b.n	800212e <__aeabi_dsub+0x5d2>
 8001f62:	4662      	mov	r2, ip
 8001f64:	9902      	ldr	r1, [sp, #8]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x410>
 8001f6a:	e0c5      	b.n	80020f8 <__aeabi_dsub+0x59c>
 8001f6c:	4663      	mov	r3, ip
 8001f6e:	18c5      	adds	r5, r0, r3
 8001f70:	468c      	mov	ip, r1
 8001f72:	4285      	cmp	r5, r0
 8001f74:	4180      	sbcs	r0, r0
 8001f76:	4464      	add	r4, ip
 8001f78:	4240      	negs	r0, r0
 8001f7a:	1824      	adds	r4, r4, r0
 8001f7c:	0223      	lsls	r3, r4, #8
 8001f7e:	d502      	bpl.n	8001f86 <__aeabi_dsub+0x42a>
 8001f80:	4bb9      	ldr	r3, [pc, #740]	@ (8002268 <__aeabi_dsub+0x70c>)
 8001f82:	3701      	adds	r7, #1
 8001f84:	401c      	ands	r4, r3
 8001f86:	46ba      	mov	sl, r7
 8001f88:	9503      	str	r5, [sp, #12]
 8001f8a:	e7d5      	b.n	8001f38 <__aeabi_dsub+0x3dc>
 8001f8c:	4662      	mov	r2, ip
 8001f8e:	1a85      	subs	r5, r0, r2
 8001f90:	42a8      	cmp	r0, r5
 8001f92:	4192      	sbcs	r2, r2
 8001f94:	4252      	negs	r2, r2
 8001f96:	4691      	mov	r9, r2
 8001f98:	9b02      	ldr	r3, [sp, #8]
 8001f9a:	1ae3      	subs	r3, r4, r3
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	4691      	mov	r9, r2
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	d46c      	bmi.n	8002084 <__aeabi_dsub+0x528>
 8001faa:	464a      	mov	r2, r9
 8001fac:	464c      	mov	r4, r9
 8001fae:	432a      	orrs	r2, r5
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dsub+0x458>
 8001fb2:	e63a      	b.n	8001c2a <__aeabi_dsub+0xce>
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	2400      	movs	r4, #0
 8001fb8:	2500      	movs	r5, #0
 8001fba:	e678      	b.n	8001cae <__aeabi_dsub+0x152>
 8001fbc:	9902      	ldr	r1, [sp, #8]
 8001fbe:	4653      	mov	r3, sl
 8001fc0:	000d      	movs	r5, r1
 8001fc2:	3a20      	subs	r2, #32
 8001fc4:	40d5      	lsrs	r5, r2
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d006      	beq.n	8001fd8 <__aeabi_dsub+0x47c>
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	000b      	movs	r3, r1
 8001fd0:	4093      	lsls	r3, r2
 8001fd2:	4662      	mov	r2, ip
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	4693      	mov	fp, r2
 8001fd8:	465b      	mov	r3, fp
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	4193      	sbcs	r3, r2
 8001fde:	431d      	orrs	r5, r3
 8001fe0:	e619      	b.n	8001c16 <__aeabi_dsub+0xba>
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x490>
 8001fea:	e0c6      	b.n	800217a <__aeabi_dsub+0x61e>
 8001fec:	4e9d      	ldr	r6, [pc, #628]	@ (8002264 <__aeabi_dsub+0x708>)
 8001fee:	45b2      	cmp	sl, r6
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x498>
 8001ff2:	e6bd      	b.n	8001d70 <__aeabi_dsub+0x214>
 8001ff4:	4688      	mov	r8, r1
 8001ff6:	000e      	movs	r6, r1
 8001ff8:	2501      	movs	r5, #1
 8001ffa:	2a38      	cmp	r2, #56	@ 0x38
 8001ffc:	dc10      	bgt.n	8002020 <__aeabi_dsub+0x4c4>
 8001ffe:	2a1f      	cmp	r2, #31
 8002000:	dc7f      	bgt.n	8002102 <__aeabi_dsub+0x5a6>
 8002002:	2120      	movs	r1, #32
 8002004:	0025      	movs	r5, r4
 8002006:	1a89      	subs	r1, r1, r2
 8002008:	0007      	movs	r7, r0
 800200a:	4088      	lsls	r0, r1
 800200c:	408d      	lsls	r5, r1
 800200e:	40d7      	lsrs	r7, r2
 8002010:	40d4      	lsrs	r4, r2
 8002012:	1e41      	subs	r1, r0, #1
 8002014:	4188      	sbcs	r0, r1
 8002016:	9b02      	ldr	r3, [sp, #8]
 8002018:	433d      	orrs	r5, r7
 800201a:	1b1b      	subs	r3, r3, r4
 800201c:	4305      	orrs	r5, r0
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	4662      	mov	r2, ip
 8002022:	1b55      	subs	r5, r2, r5
 8002024:	45ac      	cmp	ip, r5
 8002026:	4192      	sbcs	r2, r2
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	4252      	negs	r2, r2
 800202c:	464f      	mov	r7, r9
 800202e:	1a9c      	subs	r4, r3, r2
 8002030:	e5f6      	b.n	8001c20 <__aeabi_dsub+0xc4>
 8002032:	2d00      	cmp	r5, #0
 8002034:	d000      	beq.n	8002038 <__aeabi_dsub+0x4dc>
 8002036:	e0b7      	b.n	80021a8 <__aeabi_dsub+0x64c>
 8002038:	2a00      	cmp	r2, #0
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x4e2>
 800203c:	e0f0      	b.n	8002220 <__aeabi_dsub+0x6c4>
 800203e:	2601      	movs	r6, #1
 8002040:	400e      	ands	r6, r1
 8002042:	4663      	mov	r3, ip
 8002044:	9802      	ldr	r0, [sp, #8]
 8002046:	08d9      	lsrs	r1, r3, #3
 8002048:	0742      	lsls	r2, r0, #29
 800204a:	430a      	orrs	r2, r1
 800204c:	08c4      	lsrs	r4, r0, #3
 800204e:	e696      	b.n	8001d7e <__aeabi_dsub+0x222>
 8002050:	4c85      	ldr	r4, [pc, #532]	@ (8002268 <__aeabi_dsub+0x70c>)
 8002052:	1aff      	subs	r7, r7, r3
 8002054:	4014      	ands	r4, r2
 8002056:	0762      	lsls	r2, r4, #29
 8002058:	08e4      	lsrs	r4, r4, #3
 800205a:	e760      	b.n	8001f1e <__aeabi_dsub+0x3c2>
 800205c:	4981      	ldr	r1, [pc, #516]	@ (8002264 <__aeabi_dsub+0x708>)
 800205e:	428a      	cmp	r2, r1
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x508>
 8002062:	e0c9      	b.n	80021f8 <__aeabi_dsub+0x69c>
 8002064:	4663      	mov	r3, ip
 8002066:	18c1      	adds	r1, r0, r3
 8002068:	4281      	cmp	r1, r0
 800206a:	4180      	sbcs	r0, r0
 800206c:	9b02      	ldr	r3, [sp, #8]
 800206e:	4240      	negs	r0, r0
 8002070:	18e3      	adds	r3, r4, r3
 8002072:	181b      	adds	r3, r3, r0
 8002074:	07dd      	lsls	r5, r3, #31
 8002076:	085c      	lsrs	r4, r3, #1
 8002078:	2307      	movs	r3, #7
 800207a:	0849      	lsrs	r1, r1, #1
 800207c:	430d      	orrs	r5, r1
 800207e:	0017      	movs	r7, r2
 8002080:	402b      	ands	r3, r5
 8002082:	e710      	b.n	8001ea6 <__aeabi_dsub+0x34a>
 8002084:	4663      	mov	r3, ip
 8002086:	1a1d      	subs	r5, r3, r0
 8002088:	45ac      	cmp	ip, r5
 800208a:	4192      	sbcs	r2, r2
 800208c:	2601      	movs	r6, #1
 800208e:	9b02      	ldr	r3, [sp, #8]
 8002090:	4252      	negs	r2, r2
 8002092:	1b1c      	subs	r4, r3, r4
 8002094:	4688      	mov	r8, r1
 8002096:	1aa4      	subs	r4, r4, r2
 8002098:	400e      	ands	r6, r1
 800209a:	e5c6      	b.n	8001c2a <__aeabi_dsub+0xce>
 800209c:	4663      	mov	r3, ip
 800209e:	18c5      	adds	r5, r0, r3
 80020a0:	9b02      	ldr	r3, [sp, #8]
 80020a2:	4285      	cmp	r5, r0
 80020a4:	4180      	sbcs	r0, r0
 80020a6:	469c      	mov	ip, r3
 80020a8:	4240      	negs	r0, r0
 80020aa:	4464      	add	r4, ip
 80020ac:	1824      	adds	r4, r4, r0
 80020ae:	2701      	movs	r7, #1
 80020b0:	0223      	lsls	r3, r4, #8
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dsub+0x55a>
 80020b4:	e6f5      	b.n	8001ea2 <__aeabi_dsub+0x346>
 80020b6:	2702      	movs	r7, #2
 80020b8:	e641      	b.n	8001d3e <__aeabi_dsub+0x1e2>
 80020ba:	4663      	mov	r3, ip
 80020bc:	1ac5      	subs	r5, r0, r3
 80020be:	42a8      	cmp	r0, r5
 80020c0:	4180      	sbcs	r0, r0
 80020c2:	9b02      	ldr	r3, [sp, #8]
 80020c4:	4240      	negs	r0, r0
 80020c6:	1ae4      	subs	r4, r4, r3
 80020c8:	2701      	movs	r7, #1
 80020ca:	1a24      	subs	r4, r4, r0
 80020cc:	e5a8      	b.n	8001c20 <__aeabi_dsub+0xc4>
 80020ce:	9d02      	ldr	r5, [sp, #8]
 80020d0:	4652      	mov	r2, sl
 80020d2:	002b      	movs	r3, r5
 80020d4:	3a20      	subs	r2, #32
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	4653      	mov	r3, sl
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d006      	beq.n	80020ee <__aeabi_dsub+0x592>
 80020e0:	2240      	movs	r2, #64	@ 0x40
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	002b      	movs	r3, r5
 80020e6:	4093      	lsls	r3, r2
 80020e8:	4662      	mov	r2, ip
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4693      	mov	fp, r2
 80020ee:	465d      	mov	r5, fp
 80020f0:	1e6b      	subs	r3, r5, #1
 80020f2:	419d      	sbcs	r5, r3
 80020f4:	430d      	orrs	r5, r1
 80020f6:	e615      	b.n	8001d24 <__aeabi_dsub+0x1c8>
 80020f8:	0762      	lsls	r2, r4, #29
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	4302      	orrs	r2, r0
 80020fe:	08e4      	lsrs	r4, r4, #3
 8002100:	e70d      	b.n	8001f1e <__aeabi_dsub+0x3c2>
 8002102:	0011      	movs	r1, r2
 8002104:	0027      	movs	r7, r4
 8002106:	3920      	subs	r1, #32
 8002108:	40cf      	lsrs	r7, r1
 800210a:	2a20      	cmp	r2, #32
 800210c:	d005      	beq.n	800211a <__aeabi_dsub+0x5be>
 800210e:	2140      	movs	r1, #64	@ 0x40
 8002110:	1a8a      	subs	r2, r1, r2
 8002112:	4094      	lsls	r4, r2
 8002114:	0025      	movs	r5, r4
 8002116:	4305      	orrs	r5, r0
 8002118:	9503      	str	r5, [sp, #12]
 800211a:	9d03      	ldr	r5, [sp, #12]
 800211c:	1e6a      	subs	r2, r5, #1
 800211e:	4195      	sbcs	r5, r2
 8002120:	433d      	orrs	r5, r7
 8002122:	e77d      	b.n	8002020 <__aeabi_dsub+0x4c4>
 8002124:	2a00      	cmp	r2, #0
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x5ce>
 8002128:	e744      	b.n	8001fb4 <__aeabi_dsub+0x458>
 800212a:	2601      	movs	r6, #1
 800212c:	400e      	ands	r6, r1
 800212e:	4663      	mov	r3, ip
 8002130:	08d9      	lsrs	r1, r3, #3
 8002132:	9b02      	ldr	r3, [sp, #8]
 8002134:	075a      	lsls	r2, r3, #29
 8002136:	430a      	orrs	r2, r1
 8002138:	08dc      	lsrs	r4, r3, #3
 800213a:	e6f0      	b.n	8001f1e <__aeabi_dsub+0x3c2>
 800213c:	2a00      	cmp	r2, #0
 800213e:	d028      	beq.n	8002192 <__aeabi_dsub+0x636>
 8002140:	4662      	mov	r2, ip
 8002142:	9f02      	ldr	r7, [sp, #8]
 8002144:	08c0      	lsrs	r0, r0, #3
 8002146:	433a      	orrs	r2, r7
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x5f0>
 800214a:	e6dc      	b.n	8001f06 <__aeabi_dsub+0x3aa>
 800214c:	0762      	lsls	r2, r4, #29
 800214e:	4310      	orrs	r0, r2
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	08e4      	lsrs	r4, r4, #3
 8002154:	0312      	lsls	r2, r2, #12
 8002156:	4214      	tst	r4, r2
 8002158:	d009      	beq.n	800216e <__aeabi_dsub+0x612>
 800215a:	08fd      	lsrs	r5, r7, #3
 800215c:	4215      	tst	r5, r2
 800215e:	d106      	bne.n	800216e <__aeabi_dsub+0x612>
 8002160:	4663      	mov	r3, ip
 8002162:	2601      	movs	r6, #1
 8002164:	002c      	movs	r4, r5
 8002166:	08d8      	lsrs	r0, r3, #3
 8002168:	077b      	lsls	r3, r7, #29
 800216a:	4318      	orrs	r0, r3
 800216c:	400e      	ands	r6, r1
 800216e:	0f42      	lsrs	r2, r0, #29
 8002170:	00c0      	lsls	r0, r0, #3
 8002172:	08c0      	lsrs	r0, r0, #3
 8002174:	0752      	lsls	r2, r2, #29
 8002176:	4302      	orrs	r2, r0
 8002178:	e601      	b.n	8001d7e <__aeabi_dsub+0x222>
 800217a:	4663      	mov	r3, ip
 800217c:	1a1d      	subs	r5, r3, r0
 800217e:	45ac      	cmp	ip, r5
 8002180:	4192      	sbcs	r2, r2
 8002182:	9b02      	ldr	r3, [sp, #8]
 8002184:	4252      	negs	r2, r2
 8002186:	1b1c      	subs	r4, r3, r4
 8002188:	000e      	movs	r6, r1
 800218a:	4688      	mov	r8, r1
 800218c:	2701      	movs	r7, #1
 800218e:	1aa4      	subs	r4, r4, r2
 8002190:	e546      	b.n	8001c20 <__aeabi_dsub+0xc4>
 8002192:	4663      	mov	r3, ip
 8002194:	08d9      	lsrs	r1, r3, #3
 8002196:	9b02      	ldr	r3, [sp, #8]
 8002198:	075a      	lsls	r2, r3, #29
 800219a:	430a      	orrs	r2, r1
 800219c:	08dc      	lsrs	r4, r3, #3
 800219e:	e5ee      	b.n	8001d7e <__aeabi_dsub+0x222>
 80021a0:	4663      	mov	r3, ip
 80021a2:	9c02      	ldr	r4, [sp, #8]
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	e6c7      	b.n	8001f38 <__aeabi_dsub+0x3dc>
 80021a8:	08c0      	lsrs	r0, r0, #3
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x654>
 80021ae:	e6aa      	b.n	8001f06 <__aeabi_dsub+0x3aa>
 80021b0:	0762      	lsls	r2, r4, #29
 80021b2:	4310      	orrs	r0, r2
 80021b4:	2280      	movs	r2, #128	@ 0x80
 80021b6:	08e4      	lsrs	r4, r4, #3
 80021b8:	0312      	lsls	r2, r2, #12
 80021ba:	4214      	tst	r4, r2
 80021bc:	d0d7      	beq.n	800216e <__aeabi_dsub+0x612>
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08fd      	lsrs	r5, r7, #3
 80021c2:	4215      	tst	r5, r2
 80021c4:	d1d3      	bne.n	800216e <__aeabi_dsub+0x612>
 80021c6:	4663      	mov	r3, ip
 80021c8:	2601      	movs	r6, #1
 80021ca:	08d8      	lsrs	r0, r3, #3
 80021cc:	077b      	lsls	r3, r7, #29
 80021ce:	002c      	movs	r4, r5
 80021d0:	4318      	orrs	r0, r3
 80021d2:	400e      	ands	r6, r1
 80021d4:	e7cb      	b.n	800216e <__aeabi_dsub+0x612>
 80021d6:	000a      	movs	r2, r1
 80021d8:	0027      	movs	r7, r4
 80021da:	3a20      	subs	r2, #32
 80021dc:	40d7      	lsrs	r7, r2
 80021de:	2920      	cmp	r1, #32
 80021e0:	d005      	beq.n	80021ee <__aeabi_dsub+0x692>
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	1a52      	subs	r2, r2, r1
 80021e6:	4094      	lsls	r4, r2
 80021e8:	0025      	movs	r5, r4
 80021ea:	4305      	orrs	r5, r0
 80021ec:	9503      	str	r5, [sp, #12]
 80021ee:	9d03      	ldr	r5, [sp, #12]
 80021f0:	1e6a      	subs	r2, r5, #1
 80021f2:	4195      	sbcs	r5, r2
 80021f4:	432f      	orrs	r7, r5
 80021f6:	e610      	b.n	8001e1a <__aeabi_dsub+0x2be>
 80021f8:	0014      	movs	r4, r2
 80021fa:	2500      	movs	r5, #0
 80021fc:	2200      	movs	r2, #0
 80021fe:	e556      	b.n	8001cae <__aeabi_dsub+0x152>
 8002200:	9b02      	ldr	r3, [sp, #8]
 8002202:	4460      	add	r0, ip
 8002204:	4699      	mov	r9, r3
 8002206:	4560      	cmp	r0, ip
 8002208:	4192      	sbcs	r2, r2
 800220a:	444c      	add	r4, r9
 800220c:	4252      	negs	r2, r2
 800220e:	0005      	movs	r5, r0
 8002210:	18a4      	adds	r4, r4, r2
 8002212:	e74c      	b.n	80020ae <__aeabi_dsub+0x552>
 8002214:	001a      	movs	r2, r3
 8002216:	001c      	movs	r4, r3
 8002218:	432a      	orrs	r2, r5
 800221a:	d000      	beq.n	800221e <__aeabi_dsub+0x6c2>
 800221c:	e6b3      	b.n	8001f86 <__aeabi_dsub+0x42a>
 800221e:	e6c9      	b.n	8001fb4 <__aeabi_dsub+0x458>
 8002220:	2480      	movs	r4, #128	@ 0x80
 8002222:	2600      	movs	r6, #0
 8002224:	0324      	lsls	r4, r4, #12
 8002226:	e5ae      	b.n	8001d86 <__aeabi_dsub+0x22a>
 8002228:	2120      	movs	r1, #32
 800222a:	2500      	movs	r5, #0
 800222c:	1a09      	subs	r1, r1, r0
 800222e:	e517      	b.n	8001c60 <__aeabi_dsub+0x104>
 8002230:	2200      	movs	r2, #0
 8002232:	2500      	movs	r5, #0
 8002234:	4c0b      	ldr	r4, [pc, #44]	@ (8002264 <__aeabi_dsub+0x708>)
 8002236:	e53a      	b.n	8001cae <__aeabi_dsub+0x152>
 8002238:	2d00      	cmp	r5, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x6e2>
 800223c:	e5f6      	b.n	8001e2c <__aeabi_dsub+0x2d0>
 800223e:	464b      	mov	r3, r9
 8002240:	1bda      	subs	r2, r3, r7
 8002242:	4692      	mov	sl, r2
 8002244:	2f00      	cmp	r7, #0
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x6ee>
 8002248:	e66f      	b.n	8001f2a <__aeabi_dsub+0x3ce>
 800224a:	2a38      	cmp	r2, #56	@ 0x38
 800224c:	dc05      	bgt.n	800225a <__aeabi_dsub+0x6fe>
 800224e:	2680      	movs	r6, #128	@ 0x80
 8002250:	0436      	lsls	r6, r6, #16
 8002252:	4334      	orrs	r4, r6
 8002254:	4688      	mov	r8, r1
 8002256:	000e      	movs	r6, r1
 8002258:	e6d1      	b.n	8001ffe <__aeabi_dsub+0x4a2>
 800225a:	4688      	mov	r8, r1
 800225c:	000e      	movs	r6, r1
 800225e:	2501      	movs	r5, #1
 8002260:	e6de      	b.n	8002020 <__aeabi_dsub+0x4c4>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff
 8002268:	ff7fffff 	.word	0xff7fffff
 800226c:	000007fe 	.word	0x000007fe
 8002270:	2d00      	cmp	r5, #0
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x71a>
 8002274:	e668      	b.n	8001f48 <__aeabi_dsub+0x3ec>
 8002276:	464b      	mov	r3, r9
 8002278:	1bd9      	subs	r1, r3, r7
 800227a:	2f00      	cmp	r7, #0
 800227c:	d101      	bne.n	8002282 <__aeabi_dsub+0x726>
 800227e:	468a      	mov	sl, r1
 8002280:	e5a7      	b.n	8001dd2 <__aeabi_dsub+0x276>
 8002282:	2701      	movs	r7, #1
 8002284:	2938      	cmp	r1, #56	@ 0x38
 8002286:	dd00      	ble.n	800228a <__aeabi_dsub+0x72e>
 8002288:	e5c7      	b.n	8001e1a <__aeabi_dsub+0x2be>
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	0412      	lsls	r2, r2, #16
 800228e:	4314      	orrs	r4, r2
 8002290:	e5af      	b.n	8001df2 <__aeabi_dsub+0x296>
 8002292:	46c0      	nop			@ (mov r8, r8)

08002294 <__aeabi_dcmpun>:
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	46c6      	mov	lr, r8
 8002298:	031e      	lsls	r6, r3, #12
 800229a:	0b36      	lsrs	r6, r6, #12
 800229c:	46b0      	mov	r8, r6
 800229e:	4e0d      	ldr	r6, [pc, #52]	@ (80022d4 <__aeabi_dcmpun+0x40>)
 80022a0:	030c      	lsls	r4, r1, #12
 80022a2:	004d      	lsls	r5, r1, #1
 80022a4:	005f      	lsls	r7, r3, #1
 80022a6:	b500      	push	{lr}
 80022a8:	0b24      	lsrs	r4, r4, #12
 80022aa:	0d6d      	lsrs	r5, r5, #21
 80022ac:	0d7f      	lsrs	r7, r7, #21
 80022ae:	42b5      	cmp	r5, r6
 80022b0:	d00b      	beq.n	80022ca <__aeabi_dcmpun+0x36>
 80022b2:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <__aeabi_dcmpun+0x40>)
 80022b4:	2000      	movs	r0, #0
 80022b6:	428f      	cmp	r7, r1
 80022b8:	d104      	bne.n	80022c4 <__aeabi_dcmpun+0x30>
 80022ba:	4646      	mov	r6, r8
 80022bc:	4316      	orrs	r6, r2
 80022be:	0030      	movs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bc80      	pop	{r7}
 80022c6:	46b8      	mov	r8, r7
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	4304      	orrs	r4, r0
 80022cc:	2001      	movs	r0, #1
 80022ce:	2c00      	cmp	r4, #0
 80022d0:	d1f8      	bne.n	80022c4 <__aeabi_dcmpun+0x30>
 80022d2:	e7ee      	b.n	80022b2 <__aeabi_dcmpun+0x1e>
 80022d4:	000007ff 	.word	0x000007ff

080022d8 <__aeabi_d2iz>:
 80022d8:	000b      	movs	r3, r1
 80022da:	0002      	movs	r2, r0
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4d16      	ldr	r5, [pc, #88]	@ (8002338 <__aeabi_d2iz+0x60>)
 80022e0:	030c      	lsls	r4, r1, #12
 80022e2:	b082      	sub	sp, #8
 80022e4:	0049      	lsls	r1, r1, #1
 80022e6:	2000      	movs	r0, #0
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	0b24      	lsrs	r4, r4, #12
 80022ee:	0d49      	lsrs	r1, r1, #21
 80022f0:	0fde      	lsrs	r6, r3, #31
 80022f2:	42a9      	cmp	r1, r5
 80022f4:	dd04      	ble.n	8002300 <__aeabi_d2iz+0x28>
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <__aeabi_d2iz+0x64>)
 80022f8:	4281      	cmp	r1, r0
 80022fa:	dd03      	ble.n	8002304 <__aeabi_d2iz+0x2c>
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <__aeabi_d2iz+0x68>)
 80022fe:	18f0      	adds	r0, r6, r3
 8002300:	b002      	add	sp, #8
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	2080      	movs	r0, #128	@ 0x80
 8002306:	0340      	lsls	r0, r0, #13
 8002308:	4320      	orrs	r0, r4
 800230a:	4c0e      	ldr	r4, [pc, #56]	@ (8002344 <__aeabi_d2iz+0x6c>)
 800230c:	1a64      	subs	r4, r4, r1
 800230e:	2c1f      	cmp	r4, #31
 8002310:	dd08      	ble.n	8002324 <__aeabi_d2iz+0x4c>
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <__aeabi_d2iz+0x70>)
 8002314:	1a5b      	subs	r3, r3, r1
 8002316:	40d8      	lsrs	r0, r3
 8002318:	0003      	movs	r3, r0
 800231a:	4258      	negs	r0, r3
 800231c:	2e00      	cmp	r6, #0
 800231e:	d1ef      	bne.n	8002300 <__aeabi_d2iz+0x28>
 8002320:	0018      	movs	r0, r3
 8002322:	e7ed      	b.n	8002300 <__aeabi_d2iz+0x28>
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <__aeabi_d2iz+0x74>)
 8002326:	9a00      	ldr	r2, [sp, #0]
 8002328:	469c      	mov	ip, r3
 800232a:	0003      	movs	r3, r0
 800232c:	4461      	add	r1, ip
 800232e:	408b      	lsls	r3, r1
 8002330:	40e2      	lsrs	r2, r4
 8002332:	4313      	orrs	r3, r2
 8002334:	e7f1      	b.n	800231a <__aeabi_d2iz+0x42>
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	000003fe 	.word	0x000003fe
 800233c:	0000041d 	.word	0x0000041d
 8002340:	7fffffff 	.word	0x7fffffff
 8002344:	00000433 	.word	0x00000433
 8002348:	00000413 	.word	0x00000413
 800234c:	fffffbed 	.word	0xfffffbed

08002350 <__aeabi_i2d>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2800      	cmp	r0, #0
 8002354:	d016      	beq.n	8002384 <__aeabi_i2d+0x34>
 8002356:	17c3      	asrs	r3, r0, #31
 8002358:	18c5      	adds	r5, r0, r3
 800235a:	405d      	eors	r5, r3
 800235c:	0fc4      	lsrs	r4, r0, #31
 800235e:	0028      	movs	r0, r5
 8002360:	f000 f848 	bl	80023f4 <__clzsi2>
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <__aeabi_i2d+0x58>)
 8002366:	1a1b      	subs	r3, r3, r0
 8002368:	055b      	lsls	r3, r3, #21
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	280a      	cmp	r0, #10
 800236e:	dc14      	bgt.n	800239a <__aeabi_i2d+0x4a>
 8002370:	0002      	movs	r2, r0
 8002372:	002e      	movs	r6, r5
 8002374:	3215      	adds	r2, #21
 8002376:	4096      	lsls	r6, r2
 8002378:	220b      	movs	r2, #11
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	40d5      	lsrs	r5, r2
 800237e:	032d      	lsls	r5, r5, #12
 8002380:	0b2d      	lsrs	r5, r5, #12
 8002382:	e003      	b.n	800238c <__aeabi_i2d+0x3c>
 8002384:	2400      	movs	r4, #0
 8002386:	2300      	movs	r3, #0
 8002388:	2500      	movs	r5, #0
 800238a:	2600      	movs	r6, #0
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	432b      	orrs	r3, r5
 8002390:	07e4      	lsls	r4, r4, #31
 8002392:	4323      	orrs	r3, r4
 8002394:	0030      	movs	r0, r6
 8002396:	0019      	movs	r1, r3
 8002398:	bd70      	pop	{r4, r5, r6, pc}
 800239a:	380b      	subs	r0, #11
 800239c:	4085      	lsls	r5, r0
 800239e:	032d      	lsls	r5, r5, #12
 80023a0:	2600      	movs	r6, #0
 80023a2:	0b2d      	lsrs	r5, r5, #12
 80023a4:	e7f2      	b.n	800238c <__aeabi_i2d+0x3c>
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	0000041e 	.word	0x0000041e

080023ac <__aeabi_ui2d>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	1e04      	subs	r4, r0, #0
 80023b0:	d010      	beq.n	80023d4 <__aeabi_ui2d+0x28>
 80023b2:	f000 f81f 	bl	80023f4 <__clzsi2>
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <__aeabi_ui2d+0x44>)
 80023b8:	1a1b      	subs	r3, r3, r0
 80023ba:	055b      	lsls	r3, r3, #21
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	280a      	cmp	r0, #10
 80023c0:	dc0f      	bgt.n	80023e2 <__aeabi_ui2d+0x36>
 80023c2:	220b      	movs	r2, #11
 80023c4:	0021      	movs	r1, r4
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d1      	lsrs	r1, r2
 80023ca:	3015      	adds	r0, #21
 80023cc:	030a      	lsls	r2, r1, #12
 80023ce:	4084      	lsls	r4, r0
 80023d0:	0b12      	lsrs	r2, r2, #12
 80023d2:	e001      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2200      	movs	r2, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	4313      	orrs	r3, r2
 80023dc:	0020      	movs	r0, r4
 80023de:	0019      	movs	r1, r3
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	0022      	movs	r2, r4
 80023e4:	380b      	subs	r0, #11
 80023e6:	4082      	lsls	r2, r0
 80023e8:	0312      	lsls	r2, r2, #12
 80023ea:	2400      	movs	r4, #0
 80023ec:	0b12      	lsrs	r2, r2, #12
 80023ee:	e7f3      	b.n	80023d8 <__aeabi_ui2d+0x2c>
 80023f0:	0000041e 	.word	0x0000041e

080023f4 <__clzsi2>:
 80023f4:	211c      	movs	r1, #28
 80023f6:	2301      	movs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d301      	bcc.n	8002402 <__clzsi2+0xe>
 80023fe:	0c00      	lsrs	r0, r0, #16
 8002400:	3910      	subs	r1, #16
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	4298      	cmp	r0, r3
 8002406:	d301      	bcc.n	800240c <__clzsi2+0x18>
 8002408:	0a00      	lsrs	r0, r0, #8
 800240a:	3908      	subs	r1, #8
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	4298      	cmp	r0, r3
 8002410:	d301      	bcc.n	8002416 <__clzsi2+0x22>
 8002412:	0900      	lsrs	r0, r0, #4
 8002414:	3904      	subs	r1, #4
 8002416:	a202      	add	r2, pc, #8	@ (adr r2, 8002420 <__clzsi2+0x2c>)
 8002418:	5c10      	ldrb	r0, [r2, r0]
 800241a:	1840      	adds	r0, r0, r1
 800241c:	4770      	bx	lr
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	02020304 	.word	0x02020304
 8002424:	01010101 	.word	0x01010101
	...

08002430 <__clzdi2>:
 8002430:	b510      	push	{r4, lr}
 8002432:	2900      	cmp	r1, #0
 8002434:	d103      	bne.n	800243e <__clzdi2+0xe>
 8002436:	f7ff ffdd 	bl	80023f4 <__clzsi2>
 800243a:	3020      	adds	r0, #32
 800243c:	e002      	b.n	8002444 <__clzdi2+0x14>
 800243e:	0008      	movs	r0, r1
 8002440:	f7ff ffd8 	bl	80023f4 <__clzsi2>
 8002444:	bd10      	pop	{r4, pc}
 8002446:	46c0      	nop			@ (mov r8, r8)

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244c:	f000 fdb8 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002450:	f000 f818 	bl	8002484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002454:	f000 f994 	bl	8002780 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002458:	f000 f872 	bl	8002540 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800245c:	f000 f95c 	bl	8002718 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8002460:	f000 f930 	bl	80026c4 <MX_TIM17_Init>
  MX_TIM3_Init();
 8002464:	f000 f8ac 	bl	80025c0 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR. This Timer will blink the LED Motor ON twice per sec
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <main+0x38>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22fa      	movs	r2, #250	@ 0xfa
 800246e:	0052      	lsls	r2, r2, #1
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34

	 ModeSelect();
 8002472:	f000 fa4d 	bl	8002910 <ModeSelect>

	 led_bar();
 8002476:	f000 fa01 	bl	800287c <led_bar>
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);  //PWM frequency set to 2Hz. 1000 value means 50% of ARR. This Timer will blink the LED Motor ON twice per sec
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	e7f4      	b.n	8002468 <main+0x20>
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	2000026c 	.word	0x2000026c

08002484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b093      	sub	sp, #76	@ 0x4c
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	2410      	movs	r4, #16
 800248c:	193b      	adds	r3, r7, r4
 800248e:	0018      	movs	r0, r3
 8002490:	2338      	movs	r3, #56	@ 0x38
 8002492:	001a      	movs	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f004 fa97 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249a:	003b      	movs	r3, r7
 800249c:	0018      	movs	r0, r3
 800249e:	2310      	movs	r3, #16
 80024a0:	001a      	movs	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f004 fa90 	bl	80069c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 f9db 	bl	8003868 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	2202      	movs	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	2280      	movs	r2, #128	@ 0x80
 80024bc:	0052      	lsls	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024c0:	0021      	movs	r1, r4
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2202      	movs	r2, #2
 80024d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2202      	movs	r2, #2
 80024d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2208      	movs	r2, #8
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2280      	movs	r2, #128	@ 0x80
 80024ea:	0292      	lsls	r2, r2, #10
 80024ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	0492      	lsls	r2, r2, #18
 80024f4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	0592      	lsls	r2, r2, #22
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	0018      	movs	r0, r3
 8002502:	f001 f9fd 	bl	8003900 <HAL_RCC_OscConfig>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800250a:	f000 fb0a 	bl	8002b22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250e:	003b      	movs	r3, r7
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002514:	003b      	movs	r3, r7
 8002516:	2202      	movs	r2, #2
 8002518:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251a:	003b      	movs	r3, r7
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002520:	003b      	movs	r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002526:	003b      	movs	r3, r7
 8002528:	2102      	movs	r1, #2
 800252a:	0018      	movs	r0, r3
 800252c:	f001 fd02 	bl	8003f34 <HAL_RCC_ClockConfig>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002534:	f000 faf5 	bl	8002b22 <Error_Handler>
  }
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b013      	add	sp, #76	@ 0x4c
 800253e:	bd90      	pop	{r4, r7, pc}

08002540 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <MX_I2C2_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800254c:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <MX_I2C2_Init+0x7c>)
 800254e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002558:	2201      	movs	r2, #1
 800255a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002562:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <MX_I2C2_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800257c:	0018      	movs	r0, r3
 800257e:	f001 f845 	bl	800360c <HAL_I2C_Init>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002586:	f000 facc 	bl	8002b22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800258c:	2100      	movs	r1, #0
 800258e:	0018      	movs	r0, r3
 8002590:	f001 f8d2 	bl	8003738 <HAL_I2CEx_ConfigAnalogFilter>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d001      	beq.n	800259c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002598:	f000 fac3 	bl	8002b22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <MX_I2C2_Init+0x74>)
 800259e:	2100      	movs	r1, #0
 80025a0:	0018      	movs	r0, r3
 80025a2:	f001 f915 	bl	80037d0 <HAL_I2CEx_ConfigDigitalFilter>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 faba 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000218 	.word	0x20000218
 80025b8:	40005800 	.word	0x40005800
 80025bc:	10707dbc 	.word	0x10707dbc

080025c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	@ 0x38
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	2328      	movs	r3, #40	@ 0x28
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	0018      	movs	r0, r3
 80025cc:	2310      	movs	r3, #16
 80025ce:	001a      	movs	r2, r3
 80025d0:	2100      	movs	r1, #0
 80025d2:	f004 f9f9 	bl	80069c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d6:	231c      	movs	r3, #28
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	0018      	movs	r0, r3
 80025dc:	230c      	movs	r3, #12
 80025de:	001a      	movs	r2, r3
 80025e0:	2100      	movs	r1, #0
 80025e2:	f004 f9f1 	bl	80069c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e6:	003b      	movs	r3, r7
 80025e8:	0018      	movs	r0, r3
 80025ea:	231c      	movs	r3, #28
 80025ec:	001a      	movs	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f004 f9ea 	bl	80069c8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025f4:	4b2f      	ldr	r3, [pc, #188]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 80025f6:	4a30      	ldr	r2, [pc, #192]	@ (80026b8 <MX_TIM3_Init+0xf8>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 80025fc:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <MX_TIM3_Init+0xfc>)
 80025fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002606:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <MX_TIM3_Init+0x100>)
 800260a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260c:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002612:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002618:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 800261a:	0018      	movs	r0, r3
 800261c:	f001 fe34 	bl	8004288 <HAL_TIM_Base_Init>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002624:	f000 fa7d 	bl	8002b22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002628:	2128      	movs	r1, #40	@ 0x28
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2280      	movs	r2, #128	@ 0x80
 800262e:	0152      	lsls	r2, r2, #5
 8002630:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002632:	187a      	adds	r2, r7, r1
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002636:	0011      	movs	r1, r2
 8002638:	0018      	movs	r0, r3
 800263a:	f002 fa73 	bl	8004b24 <HAL_TIM_ConfigClockSource>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002642:	f000 fa6e 	bl	8002b22 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002648:	0018      	movs	r0, r3
 800264a:	f001 fe75 	bl	8004338 <HAL_TIM_PWM_Init>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002652:	f000 fa66 	bl	8002b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	211c      	movs	r1, #28
 8002658:	187b      	adds	r3, r7, r1
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002664:	187a      	adds	r2, r7, r1
 8002666:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002668:	0011      	movs	r1, r2
 800266a:	0018      	movs	r0, r3
 800266c:	f002 ff22 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002674:	f000 fa55 	bl	8002b22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002678:	003b      	movs	r3, r7
 800267a:	2260      	movs	r2, #96	@ 0x60
 800267c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800267e:	003b      	movs	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002684:	003b      	movs	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268a:	003b      	movs	r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002690:	0039      	movs	r1, r7
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 8002694:	2200      	movs	r2, #0
 8002696:	0018      	movs	r0, r3
 8002698:	f002 f944 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80026a0:	f000 fa3f 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <MX_TIM3_Init+0xf4>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 faee 	bl	8002c88 <HAL_TIM_MspPostInit>

}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b00e      	add	sp, #56	@ 0x38
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000026c 	.word	0x2000026c
 80026b8:	40000400 	.word	0x40000400
 80026bc:	00000f9f 	.word	0x00000f9f
 80026c0:	000003e7 	.word	0x000003e7

080026c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026ca:	4a10      	ldr	r2, [pc, #64]	@ (800270c <MX_TIM17_Init+0x48>)
 80026cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <MX_TIM17_Init+0x4c>)
 80026d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000-1;
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <MX_TIM17_Init+0x50>)
 80026de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80026f2:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <MX_TIM17_Init+0x44>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f001 fdc7 	bl	8004288 <HAL_TIM_Base_Init>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80026fe:	f000 fa10 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200002b8 	.word	0x200002b8
 800270c:	40014800 	.word	0x40014800
 8002710:	00001f3f 	.word	0x00001f3f
 8002714:	0000270f 	.word	0x0000270f

08002718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800271c:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 800271e:	4a17      	ldr	r2, [pc, #92]	@ (800277c <MX_USART2_UART_Init+0x64>)
 8002720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002724:	22e1      	movs	r2, #225	@ 0xe1
 8002726:	0252      	lsls	r2, r2, #9
 8002728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002754:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <MX_USART2_UART_Init+0x60>)
 8002762:	0018      	movs	r0, r3
 8002764:	f002 ff26 	bl	80055b4 <HAL_UART_Init>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800276c:	f000 f9d9 	bl	8002b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	20000304 	.word	0x20000304
 800277c:	40004400 	.word	0x40004400

08002780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b089      	sub	sp, #36	@ 0x24
 8002784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002786:	240c      	movs	r4, #12
 8002788:	193b      	adds	r3, r7, r4
 800278a:	0018      	movs	r0, r3
 800278c:	2314      	movs	r3, #20
 800278e:	001a      	movs	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f004 f919 	bl	80069c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <MX_GPIO_Init+0xf0>)
 8002798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800279a:	4b35      	ldr	r3, [pc, #212]	@ (8002870 <MX_GPIO_Init+0xf0>)
 800279c:	2104      	movs	r1, #4
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027a2:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027cc:	2102      	movs	r1, #2
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d2:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <MX_GPIO_Init+0xf0>)
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_5_Pin|led_7_Pin|led_1_Pin|led_2_Pin
 80027de:	4925      	ldr	r1, [pc, #148]	@ (8002874 <MX_GPIO_Init+0xf4>)
 80027e0:	23a0      	movs	r3, #160	@ 0xa0
 80027e2:	05db      	lsls	r3, r3, #23
 80027e4:	2200      	movs	r2, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 fef3 	bl	80035d2 <HAL_GPIO_WritePin>
                          |led_3_Pin|led_4_Pin|led_9_Pin|led_6_Pin
                          |led_10_Pin|led_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ALARM_Pin|MTR_RELAY_Pin, GPIO_PIN_RESET);
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <MX_GPIO_Init+0xf8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	210c      	movs	r1, #12
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 feed 	bl	80035d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_5_Pin led_7_Pin led_1_Pin led_2_Pin
                           led_3_Pin led_4_Pin led_9_Pin led_6_Pin
                           led_10_Pin led_8_Pin */
  GPIO_InitStruct.Pin = led_5_Pin|led_7_Pin|led_1_Pin|led_2_Pin
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <MX_GPIO_Init+0xf4>)
 80027fc:	601a      	str	r2, [r3, #0]
                          |led_3_Pin|led_4_Pin|led_9_Pin|led_6_Pin
                          |led_10_Pin|led_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	2201      	movs	r2, #1
 8002802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	193b      	adds	r3, r7, r4
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	193a      	adds	r2, r7, r4
 8002812:	23a0      	movs	r3, #160	@ 0xa0
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	0011      	movs	r1, r2
 8002818:	0018      	movs	r0, r3
 800281a:	f000 fd59 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_INPUT_Pin B_INPUT_Pin A_INPUT_Pin FLT_SENSE_Pin */
  GPIO_InitStruct.Pin = TRIGGER_INPUT_Pin|B_INPUT_Pin|A_INPUT_Pin|FLT_SENSE_Pin;
 800281e:	0021      	movs	r1, r4
 8002820:	187b      	adds	r3, r7, r1
 8002822:	22e1      	movs	r2, #225	@ 0xe1
 8002824:	0052      	lsls	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002828:	000c      	movs	r4, r1
 800282a:	193b      	adds	r3, r7, r4
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	193b      	adds	r3, r7, r4
 8002838:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <MX_GPIO_Init+0xf8>)
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f000 fd47 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALARM_Pin MTR_RELAY_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin|MTR_RELAY_Pin;
 8002842:	0021      	movs	r1, r4
 8002844:	187b      	adds	r3, r7, r1
 8002846:	220c      	movs	r2, #12
 8002848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2201      	movs	r2, #1
 800284e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	187b      	adds	r3, r7, r1
 800285e:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <MX_GPIO_Init+0xf8>)
 8002860:	0019      	movs	r1, r3
 8002862:	0010      	movs	r0, r2
 8002864:	f000 fd34 	bl	80032d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002868:	46c0      	nop			@ (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b009      	add	sp, #36	@ 0x24
 800286e:	bd90      	pop	{r4, r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	000087f3 	.word	0x000087f3
 8002878:	50000400 	.word	0x50000400

0800287c <led_bar>:

}


void led_bar()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af02      	add	r7, sp, #8


	ledLevel = map(Distance, 55, 335, 0, 10);
 8002882:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <led_bar+0x84>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	0018      	movs	r0, r3
 8002888:	2350      	movs	r3, #80	@ 0x50
 800288a:	33ff      	adds	r3, #255	@ 0xff
 800288c:	001a      	movs	r2, r3
 800288e:	230a      	movs	r3, #10
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	2137      	movs	r1, #55	@ 0x37
 8002896:	f000 f927 	bl	8002ae8 <map>
 800289a:	0003      	movs	r3, r0
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <led_bar+0x88>)
 80028a0:	801a      	strh	r2, [r3, #0]


	  // loop over the LED array:
	  for (thisled = 0; thisled < 10; thisled++) {
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <led_bar+0x8c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e022      	b.n	80028f0 <led_bar+0x74>
	    // if the array element's index is less than ledLevel,
	    // turn the pin for this element on:
	    if (thisled < ledLevel) {
 80028aa:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <led_bar+0x88>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	001a      	movs	r2, r3
 80028b0:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <led_bar+0x8c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dd0b      	ble.n	80028d0 <led_bar+0x54>

	    	HAL_GPIO_WritePin(GPIOA,(uint16_t)led[thisled], GPIO_PIN_RESET);
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <led_bar+0x8c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <led_bar+0x90>)
 80028be:	0052      	lsls	r2, r2, #1
 80028c0:	5ad1      	ldrh	r1, [r2, r3]
 80028c2:	23a0      	movs	r3, #160	@ 0xa0
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	2200      	movs	r2, #0
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 fe82 	bl	80035d2 <HAL_GPIO_WritePin>
 80028ce:	e00a      	b.n	80028e6 <led_bar+0x6a>

	    }
	    // turn off all pins higher than the ledLevel:
	    else {

	    	HAL_GPIO_WritePin(GPIOA,(uint16_t)led[thisled], GPIO_PIN_SET);
 80028d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <led_bar+0x8c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <led_bar+0x90>)
 80028d6:	0052      	lsls	r2, r2, #1
 80028d8:	5ad1      	ldrh	r1, [r2, r3]
 80028da:	23a0      	movs	r3, #160	@ 0xa0
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	2201      	movs	r2, #1
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fe76 	bl	80035d2 <HAL_GPIO_WritePin>
	  for (thisled = 0; thisled < 10; thisled++) {
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <led_bar+0x8c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <led_bar+0x8c>)
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <led_bar+0x8c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	ddd8      	ble.n	80028aa <led_bar+0x2e>

	    }

	  }

}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000208 	.word	0x20000208
 8002904:	2000020a 	.word	0x2000020a
 8002908:	2000020c 	.word	0x2000020c
 800290c:	20000000 	.word	0x20000000

08002910 <ModeSelect>:


void ModeSelect()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
		a = HAL_GPIO_ReadPin(GPIOB, A_INPUT_Pin);		// Reads Input for Auto/Manual
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002916:	2180      	movs	r1, #128	@ 0x80
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fe3d 	bl	8003598 <HAL_GPIO_ReadPin>
 800291e:	0003      	movs	r3, r0
 8002920:	001a      	movs	r2, r3
 8002922:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <ModeSelect+0x1ac>)
 8002924:	701a      	strb	r2, [r3, #0]
		b = HAL_GPIO_ReadPin(GPIOB, B_INPUT_Pin);		// Reads Input for Auto/Manual
 8002926:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002928:	2140      	movs	r1, #64	@ 0x40
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fe34 	bl	8003598 <HAL_GPIO_ReadPin>
 8002930:	0003      	movs	r3, r0
 8002932:	001a      	movs	r2, r3
 8002934:	4b62      	ldr	r3, [pc, #392]	@ (8002ac0 <ModeSelect+0x1b0>)
 8002936:	701a      	strb	r2, [r3, #0]

		newTrigState = HAL_GPIO_ReadPin(GPIOB, TRIGGER_INPUT_Pin);		// Reads Input from the Trigger Pin
 8002938:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <ModeSelect+0x1a8>)
 800293a:	2102      	movs	r1, #2
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fe2b 	bl	8003598 <HAL_GPIO_ReadPin>
 8002942:	0003      	movs	r3, r0
 8002944:	001a      	movs	r2, r3
 8002946:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac4 <ModeSelect+0x1b4>)
 8002948:	701a      	strb	r2, [r3, #0]

		float_sensor = HAL_GPIO_ReadPin(GPIOB, FLT_SENSE_Pin);		//Reads Input from the Float Sensor
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f000 fe20 	bl	8003598 <HAL_GPIO_ReadPin>
 8002958:	0003      	movs	r3, r0
 800295a:	001a      	movs	r2, r3
 800295c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <ModeSelect+0x1b8>)
 800295e:	701a      	strb	r2, [r3, #0]
		//sprintf(buff, "%d \n\r",float_sensor);
		//HAL_UART_Transmit(&huart2, (uint8_t*)buff, sizeof(buff), 200);
       // HAL_Delay(200);


		 if((a==1) && (b==0)){						// The switch is in Auto Mode. ie the switch position is at =
 8002960:	4b56      	ldr	r3, [pc, #344]	@ (8002abc <ModeSelect+0x1ac>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d155      	bne.n	8002a14 <ModeSelect+0x104>
 8002968:	4b55      	ldr	r3, [pc, #340]	@ (8002ac0 <ModeSelect+0x1b0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d151      	bne.n	8002a14 <ModeSelect+0x104>

					  // newTrigState = HAL_GPIO_ReadPin(GPIOA, TRIGGER_INPUT_Pin);

							if(newTrigState == 0){
 8002970:	4b54      	ldr	r3, [pc, #336]	@ (8002ac4 <ModeSelect+0x1b4>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d118      	bne.n	80029aa <ModeSelect+0x9a>

							//	if (MotorState == 0 && ((Distance >= Threshold_min) || (Distance <= Threshold_min)  || float_sensor!=0)){					//Water is less than Threshold level, then turn ON the Motor
								if (MotorState == 0 && float_sensor!=0){					//Water is less than Threshold level, then turn ON the Motor
 8002978:	4b54      	ldr	r3, [pc, #336]	@ (8002acc <ModeSelect+0x1bc>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <ModeSelect+0x72>
 8002980:	e096      	b.n	8002ab0 <ModeSelect+0x1a0>
 8002982:	4b51      	ldr	r3, [pc, #324]	@ (8002ac8 <ModeSelect+0x1b8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d100      	bne.n	800298c <ModeSelect+0x7c>
 800298a:	e091      	b.n	8002ab0 <ModeSelect+0x1a0>
									HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800298c:	4b50      	ldr	r3, [pc, #320]	@ (8002ad0 <ModeSelect+0x1c0>)
 800298e:	2100      	movs	r1, #0
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fd31 	bl	80043f8 <HAL_TIM_PWM_Start>
									HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 8002996:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002998:	2201      	movs	r2, #1
 800299a:	2108      	movs	r1, #8
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fe18 	bl	80035d2 <HAL_GPIO_WritePin>
									MotorState = 1;
 80029a2:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <ModeSelect+0x1bc>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
							if(newTrigState == 0){
 80029a8:	e082      	b.n	8002ab0 <ModeSelect+0x1a0>
								}

							//} else if(MotorState == 1 && ((Distance <= Threshold_max) || float_sensor==0)){		//Water has reached the Threshold Level, turn OFF the Motor
							  } else if(MotorState == 1 && float_sensor==0){		//Water has reached the Threshold Level, turn OFF the Motor
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <ModeSelect+0x1bc>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d118      	bne.n	80029e4 <ModeSelect+0xd4>
 80029b2:	4b45      	ldr	r3, [pc, #276]	@ (8002ac8 <ModeSelect+0x1b8>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d114      	bne.n	80029e4 <ModeSelect+0xd4>

								HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80029ba:	4b45      	ldr	r3, [pc, #276]	@ (8002ad0 <ModeSelect+0x1c0>)
 80029bc:	2100      	movs	r1, #0
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 fdf8 	bl	80045b4 <HAL_TIM_PWM_Stop>
							    HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 80029c4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <ModeSelect+0x1a8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	2108      	movs	r1, #8
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fe01 	bl	80035d2 <HAL_GPIO_WritePin>
							    HAL_GPIO_WritePin(GPIOB,ALARM_Pin,GPIO_PIN_SET);
 80029d0:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <ModeSelect+0x1a8>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	2104      	movs	r1, #4
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fdfb 	bl	80035d2 <HAL_GPIO_WritePin>
							    MotorState = 0;
 80029dc:	4b3b      	ldr	r3, [pc, #236]	@ (8002acc <ModeSelect+0x1bc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
							if(newTrigState == 0){
 80029e2:	e065      	b.n	8002ab0 <ModeSelect+0x1a0>
							  }	else if((MotorState == 0 && newTrigState == 1) || float_sensor==0){				//Water has reached the Threshold Level, turn OFF the Motor
 80029e4:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <ModeSelect+0x1bc>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <ModeSelect+0xe4>
 80029ec:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <ModeSelect+0x1b4>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d003      	beq.n	80029fc <ModeSelect+0xec>
 80029f4:	4b34      	ldr	r3, [pc, #208]	@ (8002ac8 <ModeSelect+0x1b8>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d159      	bne.n	8002ab0 <ModeSelect+0x1a0>

								HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80029fc:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <ModeSelect+0x1c0>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	0018      	movs	r0, r3
 8002a02:	f001 fdd7 	bl	80045b4 <HAL_TIM_PWM_Stop>
							    HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002a06:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fde0 	bl	80035d2 <HAL_GPIO_WritePin>
							if(newTrigState == 0){
 8002a12:	e04d      	b.n	8002ab0 <ModeSelect+0x1a0>
							   // HAL_GPIO_WritePin(GPIOB,ALARM_Pin,GPIO_PIN_RESET);
							  }

				   } else if((a==0) && (b==1)){						// The switch is in Manual Mode. When switch symbol is - then we are in manual mode, when switch symbol is = then we are in auto-mode
 8002a14:	4b29      	ldr	r3, [pc, #164]	@ (8002abc <ModeSelect+0x1ac>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d134      	bne.n	8002a86 <ModeSelect+0x176>
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <ModeSelect+0x1b0>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d130      	bne.n	8002a86 <ModeSelect+0x176>

					   if(newTrigState==0 && prevTrigBtnState==1){    //If the state has changed, increment the counter
 8002a24:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <ModeSelect+0x1b4>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d127      	bne.n	8002a7c <ModeSelect+0x16c>
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <ModeSelect+0x1c4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d123      	bne.n	8002a7c <ModeSelect+0x16c>

						   if(MotorState == 0){        //If the current state of Motor is LOW, then the button went from off to on
 8002a34:	4b25      	ldr	r3, [pc, #148]	@ (8002acc <ModeSelect+0x1bc>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10e      	bne.n	8002a5a <ModeSelect+0x14a>

							HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);			//  Motor_On Blinky Status
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <ModeSelect+0x1c0>)
 8002a3e:	2100      	movs	r1, #0
 8002a40:	0018      	movs	r0, r3
 8002a42:	f001 fcd9 	bl	80043f8 <HAL_TIM_PWM_Start>
							HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_SET);
 8002a46:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2108      	movs	r1, #8
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fdc0 	bl	80035d2 <HAL_GPIO_WritePin>
							MotorState=1;
 8002a52:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <ModeSelect+0x1bc>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e00d      	b.n	8002a76 <ModeSelect+0x166>

							}else{

							HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad0 <ModeSelect+0x1c0>)
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f001 fda8 	bl	80045b4 <HAL_TIM_PWM_Stop>
							HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	2108      	movs	r1, #8
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 fdb1 	bl	80035d2 <HAL_GPIO_WritePin>
							MotorState=0;
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <ModeSelect+0x1bc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
							}
						   HAL_Delay(5);
 8002a76:	2005      	movs	r0, #5
 8002a78:	f000 fb28 	bl	80030cc <HAL_Delay>

				    }
					   	   prevTrigBtnState = newTrigState;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <ModeSelect+0x1b4>)
 8002a7e:	781a      	ldrb	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <ModeSelect+0x1c4>)
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e015      	b.n	8002ab2 <ModeSelect+0x1a2>

				   }else {// The switch is in Off/Center Mode
					   MotorState =0;
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <ModeSelect+0x1bc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
					   HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <ModeSelect+0x1c0>)
 8002a8e:	2100      	movs	r1, #0
 8002a90:	0018      	movs	r0, r3
 8002a92:	f001 fd8f 	bl	80045b4 <HAL_TIM_PWM_Stop>
					   HAL_GPIO_WritePin(GPIOB,MTR_RELAY_Pin,GPIO_PIN_RESET);
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fd98 	bl	80035d2 <HAL_GPIO_WritePin>
					   HAL_GPIO_WritePin(GPIOB,ALARM_Pin,GPIO_PIN_RESET);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <ModeSelect+0x1a8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 fd92 	bl	80035d2 <HAL_GPIO_WritePin>
		           }

}
 8002aae:	e000      	b.n	8002ab2 <ModeSelect+0x1a2>
							if(newTrigState == 0){
 8002ab0:	46c0      	nop			@ (mov r8, r8)
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	50000400 	.word	0x50000400
 8002abc:	20000210 	.word	0x20000210
 8002ac0:	20000211 	.word	0x20000211
 8002ac4:	20000212 	.word	0x20000212
 8002ac8:	20000213 	.word	0x20000213
 8002acc:	20000214 	.word	0x20000214
 8002ad0:	2000026c 	.word	0x2000026c
 8002ad4:	20000014 	.word	0x20000014

08002ad8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)

{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

    // AutonomousLowPowerRangingTest();				//This function or API triggers after every 30s. Update Event handler.

  }

}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <map>:


uint32_t  map(uint32_t  x, uint32_t  in_min, uint32_t  in_max, uint32_t  out_min, uint32_t  out_max) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	1a8a      	subs	r2, r1, r2
 8002b02:	435a      	muls	r2, r3
 8002b04:	0010      	movs	r0, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	f7fd fb15 	bl	800013c <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	001a      	movs	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	18d3      	adds	r3, r2, r3
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b26:	b672      	cpsid	i
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	e7fd      	b.n	8002b2a <Error_Handler+0x8>
	...

08002b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	0549      	lsls	r1, r1, #21
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <HAL_MspInit+0x44>)
 8002b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	4013      	ands	r3, r2
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b08b      	sub	sp, #44	@ 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	2414      	movs	r4, #20
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	0018      	movs	r0, r3
 8002b86:	2314      	movs	r3, #20
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f003 ff1c 	bl	80069c8 <memset>
  if(hi2c->Instance==I2C2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_I2C_MspInit+0x90>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d131      	bne.n	8002bfe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	22c0      	movs	r2, #192	@ 0xc0
 8002bb6:	0152      	lsls	r2, r2, #5
 8002bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bba:	0021      	movs	r1, r4
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2212      	movs	r2, #18
 8002bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	187a      	adds	r2, r7, r1
 8002bd6:	23a0      	movs	r3, #160	@ 0xa0
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fb77 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	03c9      	lsls	r1, r1, #15
 8002bec:	430a      	orrs	r2, r1
 8002bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_I2C_MspInit+0x94>)
 8002bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	03db      	lsls	r3, r3, #15
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b00b      	add	sp, #44	@ 0x2c
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	40005800 	.word	0x40005800
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_TIM_Base_MspInit+0x6c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c22:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c28:	2102      	movs	r1, #2
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c3a:	e01a      	b.n	8002c72 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_TIM_Base_MspInit+0x74>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c4c:	2180      	movs	r1, #128	@ 0x80
 8002c4e:	02c9      	lsls	r1, r1, #11
 8002c50:	430a      	orrs	r2, r1
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c54:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <HAL_TIM_Base_MspInit+0x70>)
 8002c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	02db      	lsls	r3, r3, #11
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2016      	movs	r0, #22
 8002c68:	f000 fb00 	bl	800326c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c6c:	2016      	movs	r0, #22
 8002c6e:	f000 fb12 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b004      	add	sp, #16
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40014800 	.word	0x40014800

08002c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	240c      	movs	r4, #12
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	0018      	movs	r0, r3
 8002c96:	2314      	movs	r3, #20
 8002c98:	001a      	movs	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f003 fe94 	bl	80069c8 <memset>
  if(htim->Instance==TIM3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <HAL_TIM_MspPostInit+0x70>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d121      	bne.n	8002cee <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <HAL_TIM_MspPostInit+0x74>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HAL_TIM_MspPostInit+0x74>)
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_TIM_MspPostInit+0x74>)
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MTR_LED_STATS_Pin;
 8002cc2:	0021      	movs	r1, r4
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2202      	movs	r2, #2
 8002cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2201      	movs	r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MTR_LED_STATS_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	4a06      	ldr	r2, [pc, #24]	@ (8002d00 <HAL_TIM_MspPostInit+0x78>)
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	0010      	movs	r0, r2
 8002cea:	f000 faf1 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b009      	add	sp, #36	@ 0x24
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	50000400 	.word	0x50000400

08002d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b08b      	sub	sp, #44	@ 0x2c
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	2414      	movs	r4, #20
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	0018      	movs	r0, r3
 8002d12:	2314      	movs	r3, #20
 8002d14:	001a      	movs	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f003 fe56 	bl	80069c8 <memset>
  if(huart->Instance==USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_UART_MspInit+0x8c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d130      	bne.n	8002d88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	0289      	lsls	r1, r1, #10
 8002d30:	430a      	orrs	r2, r1
 8002d32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d34:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	029b      	lsls	r3, r3, #10
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_UART_MspInit+0x90>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2202      	movs	r2, #2
 8002d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2201      	movs	r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	187a      	adds	r2, r7, r1
 8002d7c:	23a0      	movs	r3, #160	@ 0xa0
 8002d7e:	05db      	lsls	r3, r3, #23
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 faa4 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b00b      	add	sp, #44	@ 0x2c
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	40004400 	.word	0x40004400
 8002d94:	40021000 	.word	0x40021000

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	e7fd      	b.n	8002d9c <NMI_Handler+0x4>

08002da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	e7fd      	b.n	8002da4 <HardFault_Handler+0x4>

08002da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 f968 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <TIM17_IRQHandler+0x14>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f001 fc74 	bl	80046c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002dd8:	46c0      	nop			@ (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	200002b8 	.word	0x200002b8

08002de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  return 1;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_kill>:

int _kill(int pid, int sig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dfa:	f003 fe3f 	bl	8006a7c <__errno>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	2216      	movs	r2, #22
 8002e02:	601a      	str	r2, [r3, #0]
  return -1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	425b      	negs	r3, r3
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_exit>:

void _exit (int status)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e18:	2301      	movs	r3, #1
 8002e1a:	425a      	negs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7ff ffe5 	bl	8002df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	e7fd      	b.n	8002e26 <_exit+0x16>

08002e2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e00a      	b.n	8002e52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e3c:	e000      	b.n	8002e40 <_read+0x16>
 8002e3e:	bf00      	nop
 8002e40:	0001      	movs	r1, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	60ba      	str	r2, [r7, #8]
 8002e48:	b2ca      	uxtb	r2, r1
 8002e4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	dbf0      	blt.n	8002e3c <_read+0x12>
  }

  return len;
 8002e5a:	687b      	ldr	r3, [r7, #4]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e009      	b.n	8002e8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	60ba      	str	r2, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	e000      	b.n	8002e84 <_write+0x20>
 8002e82:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbf1      	blt.n	8002e76 <_write+0x12>
  }
  return len;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_close>:

int _close(int file)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	0192      	lsls	r2, r2, #6
 8002ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_isatty>:

int _isatty(int file)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed4:	2301      	movs	r3, #1
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002efc:	4a14      	ldr	r2, [pc, #80]	@ (8002f50 <_sbrk+0x5c>)
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <_sbrk+0x60>)
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <_sbrk+0x64>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	@ (8002f5c <_sbrk+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d207      	bcs.n	8002f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f24:	f003 fdaa 	bl	8006a7c <__errno>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	e009      	b.n	8002f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f34:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	18d2      	adds	r2, r2, r3
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <_sbrk+0x64>)
 8002f44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b006      	add	sp, #24
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20002000 	.word	0x20002000
 8002f54:	00000400 	.word	0x00000400
 8002f58:	20000398 	.word	0x20000398
 8002f5c:	200004f0 	.word	0x200004f0

08002f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f6c:	480d      	ldr	r0, [pc, #52]	@ (8002fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f70:	f7ff fff6 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	@ (8002fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <LoopForever+0xe>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb8 <LoopForever+0x16>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f9a:	f003 fd75 	bl	8006a88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f9e:	f7ff fa53 	bl	8002448 <main>

08002fa2 <LoopForever>:

LoopForever:
  b LoopForever
 8002fa2:	e7fe      	b.n	8002fa2 <LoopForever>
  ldr   r0, =_estack
 8002fa4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002fb0:	08008e08 	.word	0x08008e08
  ldr r2, =_sbss
 8002fb4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002fb8:	200004ec 	.word	0x200004ec

08002fbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC1_IRQHandler>
	...

08002fc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_Init+0x3c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_Init+0x3c>)
 8002fd2:	2180      	movs	r1, #128	@ 0x80
 8002fd4:	0049      	lsls	r1, r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fda:	2003      	movs	r0, #3
 8002fdc:	f000 f810 	bl	8003000 <HAL_InitTick>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e001      	b.n	8002ff0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fec:	f7ff fda0 	bl	8002b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff0:	1dfb      	adds	r3, r7, #7
 8002ff2:	781b      	ldrb	r3, [r3, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40022000 	.word	0x40022000

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003008:	230f      	movs	r3, #15
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003010:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <HAL_InitTick+0x88>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d02b      	beq.n	8003070 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003018:	4b1c      	ldr	r3, [pc, #112]	@ (800308c <HAL_InitTick+0x8c>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <HAL_InitTick+0x88>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	0019      	movs	r1, r3
 8003022:	23fa      	movs	r3, #250	@ 0xfa
 8003024:	0098      	lsls	r0, r3, #2
 8003026:	f7fd f889 	bl	800013c <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	0019      	movs	r1, r3
 800302e:	0020      	movs	r0, r4
 8003030:	f7fd f884 	bl	800013c <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	0018      	movs	r0, r3
 8003038:	f000 f93d 	bl	80032b6 <HAL_SYSTICK_Config>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d112      	bne.n	8003066 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d80a      	bhi.n	800305c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	2301      	movs	r3, #1
 800304a:	425b      	negs	r3, r3
 800304c:	2200      	movs	r2, #0
 800304e:	0018      	movs	r0, r3
 8003050:	f000 f90c 	bl	800326c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <HAL_InitTick+0x90>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e00d      	b.n	8003078 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003066:	230f      	movs	r3, #15
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e003      	b.n	8003078 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003078:	230f      	movs	r3, #15
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b005      	add	sp, #20
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	20000020 	.word	0x20000020
 800308c:	20000018 	.word	0x20000018
 8003090:	2000001c 	.word	0x2000001c

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_IncTick+0x1c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000020 	.word	0x20000020
 80030b4:	2000039c 	.word	0x2000039c

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b02      	ldr	r3, [pc, #8]	@ (80030c8 <HAL_GetTick+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	2000039c 	.word	0x2000039c

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	001a      	movs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	f7ff ffe0 	bl	80030b8 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	20000020 	.word	0x20000020

08003114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	0002      	movs	r2, r0
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b7f      	cmp	r3, #127	@ 0x7f
 8003126:	d809      	bhi.n	800313c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	001a      	movs	r2, r3
 800312e:	231f      	movs	r3, #31
 8003130:	401a      	ands	r2, r3
 8003132:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <__NVIC_EnableIRQ+0x30>)
 8003134:	2101      	movs	r1, #1
 8003136:	4091      	lsls	r1, r2
 8003138:	000a      	movs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	0002      	movs	r2, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b7f      	cmp	r3, #127	@ 0x7f
 800315c:	d828      	bhi.n	80031b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <__NVIC_SetPriority+0xd4>)
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b25b      	sxtb	r3, r3
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	33c0      	adds	r3, #192	@ 0xc0
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	589b      	ldr	r3, [r3, r2]
 800316e:	1dfa      	adds	r2, r7, #7
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	0011      	movs	r1, r2
 8003174:	2203      	movs	r2, #3
 8003176:	400a      	ands	r2, r1
 8003178:	00d2      	lsls	r2, r2, #3
 800317a:	21ff      	movs	r1, #255	@ 0xff
 800317c:	4091      	lsls	r1, r2
 800317e:	000a      	movs	r2, r1
 8003180:	43d2      	mvns	r2, r2
 8003182:	401a      	ands	r2, r3
 8003184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	22ff      	movs	r2, #255	@ 0xff
 800318c:	401a      	ands	r2, r3
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	0018      	movs	r0, r3
 8003194:	2303      	movs	r3, #3
 8003196:	4003      	ands	r3, r0
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800319c:	481f      	ldr	r0, [pc, #124]	@ (800321c <__NVIC_SetPriority+0xd4>)
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	430a      	orrs	r2, r1
 80031a8:	33c0      	adds	r3, #192	@ 0xc0
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031ae:	e031      	b.n	8003214 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <__NVIC_SetPriority+0xd8>)
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	0019      	movs	r1, r3
 80031b8:	230f      	movs	r3, #15
 80031ba:	400b      	ands	r3, r1
 80031bc:	3b08      	subs	r3, #8
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3306      	adds	r3, #6
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	3304      	adds	r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1dfa      	adds	r2, r7, #7
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	0011      	movs	r1, r2
 80031d0:	2203      	movs	r2, #3
 80031d2:	400a      	ands	r2, r1
 80031d4:	00d2      	lsls	r2, r2, #3
 80031d6:	21ff      	movs	r1, #255	@ 0xff
 80031d8:	4091      	lsls	r1, r2
 80031da:	000a      	movs	r2, r1
 80031dc:	43d2      	mvns	r2, r2
 80031de:	401a      	ands	r2, r3
 80031e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	401a      	ands	r2, r3
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	2303      	movs	r3, #3
 80031f2:	4003      	ands	r3, r0
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f8:	4809      	ldr	r0, [pc, #36]	@ (8003220 <__NVIC_SetPriority+0xd8>)
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	001c      	movs	r4, r3
 8003200:	230f      	movs	r3, #15
 8003202:	4023      	ands	r3, r4
 8003204:	3b08      	subs	r3, #8
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	430a      	orrs	r2, r1
 800320a:	3306      	adds	r3, #6
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	18c3      	adds	r3, r0, r3
 8003210:	3304      	adds	r3, #4
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b003      	add	sp, #12
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	045b      	lsls	r3, r3, #17
 8003234:	429a      	cmp	r2, r3
 8003236:	d301      	bcc.n	800323c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003238:	2301      	movs	r3, #1
 800323a:	e010      	b.n	800325e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323c:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <SysTick_Config+0x44>)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	3a01      	subs	r2, #1
 8003242:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003244:	2301      	movs	r3, #1
 8003246:	425b      	negs	r3, r3
 8003248:	2103      	movs	r1, #3
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff ff7c 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <SysTick_Config+0x44>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <SysTick_Config+0x44>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	210f      	movs	r1, #15
 8003278:	187b      	adds	r3, r7, r1
 800327a:	1c02      	adds	r2, r0, #0
 800327c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	187b      	adds	r3, r7, r1
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b25b      	sxtb	r3, r3
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b004      	add	sp, #16
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	0002      	movs	r2, r0
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ff33 	bl	8003114 <__NVIC_EnableIRQ>
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff ffaf 	bl	8003224 <SysTick_Config>
 80032c6:	0003      	movs	r3, r0
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032de:	e147      	b.n	8003570 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4091      	lsls	r1, r2
 80032ea:	000a      	movs	r2, r1
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d100      	bne.n	80032f8 <HAL_GPIO_Init+0x28>
 80032f6:	e138      	b.n	800356a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2203      	movs	r2, #3
 80032fe:	4013      	ands	r3, r2
 8003300:	2b01      	cmp	r3, #1
 8003302:	d005      	beq.n	8003310 <HAL_GPIO_Init+0x40>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2203      	movs	r2, #3
 800330a:	4013      	ands	r3, r2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d130      	bne.n	8003372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	409a      	lsls	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	43da      	mvns	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	409a      	lsls	r2, r3
 8003332:	0013      	movs	r3, r2
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003346:	2201      	movs	r2, #1
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
 800334c:	0013      	movs	r3, r2
 800334e:	43da      	mvns	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	2201      	movs	r2, #1
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
 8003364:	0013      	movs	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2203      	movs	r2, #3
 8003378:	4013      	ands	r3, r2
 800337a:	2b03      	cmp	r3, #3
 800337c:	d017      	beq.n	80033ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	409a      	lsls	r2, r3
 800338c:	0013      	movs	r3, r2
 800338e:	43da      	mvns	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d123      	bne.n	8003402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	58d3      	ldr	r3, [r2, r3]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2207      	movs	r2, #7
 80033cc:	4013      	ands	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	409a      	lsls	r2, r3
 80033d4:	0013      	movs	r3, r2
 80033d6:	43da      	mvns	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2107      	movs	r1, #7
 80033e6:	400b      	ands	r3, r1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	409a      	lsls	r2, r3
 80033ec:	0013      	movs	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	6939      	ldr	r1, [r7, #16]
 8003400:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	409a      	lsls	r2, r3
 8003410:	0013      	movs	r3, r2
 8003412:	43da      	mvns	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2203      	movs	r2, #3
 8003420:	401a      	ands	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	0013      	movs	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	23c0      	movs	r3, #192	@ 0xc0
 800343c:	029b      	lsls	r3, r3, #10
 800343e:	4013      	ands	r3, r2
 8003440:	d100      	bne.n	8003444 <HAL_GPIO_Init+0x174>
 8003442:	e092      	b.n	800356a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003444:	4a50      	ldr	r2, [pc, #320]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3318      	adds	r3, #24
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	589b      	ldr	r3, [r3, r2]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2203      	movs	r2, #3
 8003456:	4013      	ands	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	220f      	movs	r2, #15
 800345c:	409a      	lsls	r2, r3
 800345e:	0013      	movs	r3, r2
 8003460:	43da      	mvns	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	23a0      	movs	r3, #160	@ 0xa0
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	429a      	cmp	r2, r3
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x1ca>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a45      	ldr	r2, [pc, #276]	@ (800358c <HAL_GPIO_Init+0x2bc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x1c6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a44      	ldr	r2, [pc, #272]	@ (8003590 <HAL_GPIO_Init+0x2c0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x1c2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a43      	ldr	r2, [pc, #268]	@ (8003594 <HAL_GPIO_Init+0x2c4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x1be>
 800348a:	2303      	movs	r3, #3
 800348c:	e006      	b.n	800349c <HAL_GPIO_Init+0x1cc>
 800348e:	2305      	movs	r3, #5
 8003490:	e004      	b.n	800349c <HAL_GPIO_Init+0x1cc>
 8003492:	2302      	movs	r3, #2
 8003494:	e002      	b.n	800349c <HAL_GPIO_Init+0x1cc>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_GPIO_Init+0x1cc>
 800349a:	2300      	movs	r3, #0
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	2103      	movs	r1, #3
 80034a0:	400a      	ands	r2, r1
 80034a2:	00d2      	lsls	r2, r2, #3
 80034a4:	4093      	lsls	r3, r2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80034ac:	4936      	ldr	r1, [pc, #216]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3318      	adds	r3, #24
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ba:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	035b      	lsls	r3, r3, #13
 80034d2:	4013      	ands	r3, r2
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034de:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	039b      	lsls	r3, r3, #14
 80034fc:	4013      	ands	r3, r2
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003508:	4b1f      	ldr	r3, [pc, #124]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800350e:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 8003510:	2384      	movs	r3, #132	@ 0x84
 8003512:	58d3      	ldr	r3, [r2, r3]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43da      	mvns	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	029b      	lsls	r3, r3, #10
 8003528:	4013      	ands	r3, r2
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003534:	4914      	ldr	r1, [pc, #80]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 8003536:	2284      	movs	r2, #132	@ 0x84
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800353c:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	58d3      	ldr	r3, [r2, r3]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43da      	mvns	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	025b      	lsls	r3, r3, #9
 8003556:	4013      	ands	r3, r2
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003562:	4909      	ldr	r1, [pc, #36]	@ (8003588 <HAL_GPIO_Init+0x2b8>)
 8003564:	2280      	movs	r2, #128	@ 0x80
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	40da      	lsrs	r2, r3
 8003578:	1e13      	subs	r3, r2, #0
 800357a:	d000      	beq.n	800357e <HAL_GPIO_Init+0x2ae>
 800357c:	e6b0      	b.n	80032e0 <HAL_GPIO_Init+0x10>
  }
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021800 	.word	0x40021800
 800358c:	50000400 	.word	0x50000400
 8003590:	50000800 	.word	0x50000800
 8003594:	50000c00 	.word	0x50000c00

08003598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	000a      	movs	r2, r1
 80035a2:	1cbb      	adds	r3, r7, #2
 80035a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	1cba      	adds	r2, r7, #2
 80035ac:	8812      	ldrh	r2, [r2, #0]
 80035ae:	4013      	ands	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80035b2:	230f      	movs	r3, #15
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e003      	b.n	80035c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035bc:	230f      	movs	r3, #15
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80035c4:	230f      	movs	r3, #15
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	781b      	ldrb	r3, [r3, #0]
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	0008      	movs	r0, r1
 80035dc:	0011      	movs	r1, r2
 80035de:	1cbb      	adds	r3, r7, #2
 80035e0:	1c02      	adds	r2, r0, #0
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	1c7b      	adds	r3, r7, #1
 80035e6:	1c0a      	adds	r2, r1, #0
 80035e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ea:	1c7b      	adds	r3, r7, #1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f2:	1cbb      	adds	r3, r7, #2
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fa:	e003      	b.n	8003604 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fc:	1cbb      	adds	r3, r7, #2
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e082      	b.n	8003724 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2241      	movs	r2, #65	@ 0x41
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff fa9f 	bl	8002b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2241      	movs	r2, #65	@ 0x41
 800363e:	2124      	movs	r1, #36	@ 0x24
 8003640:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	438a      	bics	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4934      	ldr	r1, [pc, #208]	@ (800372c <HAL_I2C_Init+0x120>)
 800365c:	400a      	ands	r2, r1
 800365e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4931      	ldr	r1, [pc, #196]	@ (8003730 <HAL_I2C_Init+0x124>)
 800366c:	400a      	ands	r2, r1
 800366e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d108      	bne.n	800368a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2180      	movs	r1, #128	@ 0x80
 8003682:	0209      	lsls	r1, r1, #8
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e007      	b.n	800369a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2184      	movs	r1, #132	@ 0x84
 8003694:	0209      	lsls	r1, r1, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d104      	bne.n	80036ac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	491f      	ldr	r1, [pc, #124]	@ (8003734 <HAL_I2C_Init+0x128>)
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	491a      	ldr	r1, [pc, #104]	@ (8003730 <HAL_I2C_Init+0x124>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69d9      	ldr	r1, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	2120      	movs	r1, #32
 8003712:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2242      	movs	r2, #66	@ 0x42
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f0ffffff 	.word	0xf0ffffff
 8003730:	ffff7fff 	.word	0xffff7fff
 8003734:	02008000 	.word	0x02008000

08003738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2241      	movs	r2, #65	@ 0x41
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d138      	bne.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2240      	movs	r2, #64	@ 0x40
 8003752:	5c9b      	ldrb	r3, [r3, r2]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003758:	2302      	movs	r3, #2
 800375a:	e032      	b.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2240      	movs	r2, #64	@ 0x40
 8003760:	2101      	movs	r1, #1
 8003762:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2241      	movs	r2, #65	@ 0x41
 8003768:	2124      	movs	r1, #36	@ 0x24
 800376a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4911      	ldr	r1, [pc, #68]	@ (80037cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2241      	movs	r2, #65	@ 0x41
 80037b0:	2120      	movs	r1, #32
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	ffffefff 	.word	0xffffefff

080037d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2241      	movs	r2, #65	@ 0x41
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d139      	bne.n	800385a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2240      	movs	r2, #64	@ 0x40
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e033      	b.n	800385c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	2101      	movs	r1, #1
 80037fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2241      	movs	r2, #65	@ 0x41
 8003800:	2124      	movs	r1, #36	@ 0x24
 8003802:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	438a      	bics	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003820:	4013      	ands	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2101      	movs	r1, #1
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2241      	movs	r2, #65	@ 0x41
 800384a:	2120      	movs	r1, #32
 800384c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2240      	movs	r2, #64	@ 0x40
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}
 8003864:	fffff0ff 	.word	0xfffff0ff

08003868 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d11f      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	0013      	movs	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	189b      	adds	r3, r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4912      	ldr	r1, [pc, #72]	@ (80038e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800389a:	0018      	movs	r0, r3
 800389c:	f7fc fc4e 	bl	800013c <__udivsi3>
 80038a0:	0003      	movs	r3, r0
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a6:	e008      	b.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e001      	b.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e009      	b.n	80038ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	401a      	ands	r2, r3
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d0ed      	beq.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b004      	add	sp, #16
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	40007000 	.word	0x40007000
 80038dc:	fffff9ff 	.word	0xfffff9ff
 80038e0:	20000018 	.word	0x20000018
 80038e4:	000f4240 	.word	0x000f4240

080038e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	23e0      	movs	r3, #224	@ 0xe0
 80038f2:	01db      	lsls	r3, r3, #7
 80038f4:	4013      	ands	r3, r2
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000

08003900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e2fe      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	4013      	ands	r3, r2
 800391a:	d100      	bne.n	800391e <HAL_RCC_OscConfig+0x1e>
 800391c:	e07c      	b.n	8003a18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	4bc3      	ldr	r3, [pc, #780]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2238      	movs	r2, #56	@ 0x38
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003928:	4bc0      	ldr	r3, [pc, #768]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2203      	movs	r2, #3
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b10      	cmp	r3, #16
 8003936:	d102      	bne.n	800393e <HAL_RCC_OscConfig+0x3e>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d002      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4bb9      	ldr	r3, [pc, #740]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	029b      	lsls	r3, r3, #10
 800394c:	4013      	ands	r3, r2
 800394e:	d062      	beq.n	8003a16 <HAL_RCC_OscConfig+0x116>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d15e      	bne.n	8003a16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e2d9      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	025b      	lsls	r3, r3, #9
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x78>
 8003968:	4bb0      	ldr	r3, [pc, #704]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4baf      	ldr	r3, [pc, #700]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	0249      	lsls	r1, r1, #9
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e020      	b.n	80039ba <HAL_RCC_OscConfig+0xba>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	23a0      	movs	r3, #160	@ 0xa0
 800397e:	02db      	lsls	r3, r3, #11
 8003980:	429a      	cmp	r2, r3
 8003982:	d10e      	bne.n	80039a2 <HAL_RCC_OscConfig+0xa2>
 8003984:	4ba9      	ldr	r3, [pc, #676]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4ba8      	ldr	r3, [pc, #672]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	02c9      	lsls	r1, r1, #11
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	4ba6      	ldr	r3, [pc, #664]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4ba5      	ldr	r3, [pc, #660]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	0249      	lsls	r1, r1, #9
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e00b      	b.n	80039ba <HAL_RCC_OscConfig+0xba>
 80039a2:	4ba2      	ldr	r3, [pc, #648]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 80039a8:	49a1      	ldr	r1, [pc, #644]	@ (8003c30 <HAL_RCC_OscConfig+0x330>)
 80039aa:	400a      	ands	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4b9f      	ldr	r3, [pc, #636]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b9e      	ldr	r3, [pc, #632]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 80039b4:	499f      	ldr	r1, [pc, #636]	@ (8003c34 <HAL_RCC_OscConfig+0x334>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d014      	beq.n	80039ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7ff fb79 	bl	80030b8 <HAL_GetTick>
 80039c6:	0003      	movs	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff fb74 	bl	80030b8 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e298      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039de:	4b93      	ldr	r3, [pc, #588]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	4013      	ands	r3, r2
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xcc>
 80039ea:	e015      	b.n	8003a18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7ff fb64 	bl	80030b8 <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f6:	f7ff fb5f 	bl	80030b8 <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b64      	cmp	r3, #100	@ 0x64
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e283      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a08:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	029b      	lsls	r3, r3, #10
 8003a10:	4013      	ands	r3, r2
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0xf6>
 8003a14:	e000      	b.n	8003a18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d100      	bne.n	8003a24 <HAL_RCC_OscConfig+0x124>
 8003a22:	e099      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a24:	4b81      	ldr	r3, [pc, #516]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2238      	movs	r2, #56	@ 0x38
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2203      	movs	r2, #3
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0x144>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d002      	beq.n	8003a4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d135      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a4a:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	2380      	movs	r3, #128	@ 0x80
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x162>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e256      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b72      	ldr	r3, [pc, #456]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a74      	ldr	r2, [pc, #464]	@ (8003c38 <HAL_RCC_OscConfig+0x338>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	4b6e      	ldr	r3, [pc, #440]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d112      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6e      	ldr	r2, [pc, #440]	@ (8003c3c <HAL_RCC_OscConfig+0x33c>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	4b67      	ldr	r3, [pc, #412]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a92:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	2207      	movs	r2, #7
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	4a68      	ldr	r2, [pc, #416]	@ (8003c40 <HAL_RCC_OscConfig+0x340>)
 8003a9e:	40da      	lsrs	r2, r3
 8003aa0:	4b68      	ldr	r3, [pc, #416]	@ (8003c44 <HAL_RCC_OscConfig+0x344>)
 8003aa2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa4:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <HAL_RCC_OscConfig+0x348>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff faa9 	bl	8003000 <HAL_InitTick>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d051      	beq.n	8003b56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e22c      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d030      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003abe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c3c <HAL_RCC_OscConfig+0x33c>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	4b57      	ldr	r3, [pc, #348]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ad2:	4b56      	ldr	r3, [pc, #344]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b55      	ldr	r3, [pc, #340]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	0049      	lsls	r1, r1, #1
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7ff faea 	bl	80030b8 <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aea:	f7ff fae5 	bl	80030b8 <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e209      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b48      	ldr	r3, [pc, #288]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c38 <HAL_RCC_OscConfig+0x338>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b42      	ldr	r3, [pc, #264]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b26:	4949      	ldr	r1, [pc, #292]	@ (8003c4c <HAL_RCC_OscConfig+0x34c>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7ff fac4 	bl	80030b8 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7ff fabf 	bl	80030b8 <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1e3      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b48:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4013      	ands	r3, r2
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x236>
 8003b54:	e000      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d047      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b62:	4b32      	ldr	r3, [pc, #200]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2238      	movs	r2, #56	@ 0x38
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b18      	cmp	r3, #24
 8003b6c:	d10a      	bne.n	8003b84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	2202      	movs	r2, #2
 8003b74:	4013      	ands	r3, r2
 8003b76:	d03c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d138      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e1c5      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b8c:	4b27      	ldr	r3, [pc, #156]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b90:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7ff fa8e 	bl	80030b8 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7ff fa89 	bl	80030b8 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1ad      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2a2>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7ff fa74 	bl	80030b8 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7ff fa6f 	bl	80030b8 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e193      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be8:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d1f1      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2fe>
 8003bfc:	e0c6      	b.n	8003d8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c06:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2238      	movs	r2, #56	@ 0x38
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d11e      	bne.n	8003c50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_RCC_OscConfig+0x32c>)
 8003c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c16:	2202      	movs	r2, #2
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <HAL_RCC_OscConfig+0x31e>
 8003c1c:	e0b6      	b.n	8003d8c <HAL_RCC_OscConfig+0x48c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d000      	beq.n	8003c28 <HAL_RCC_OscConfig+0x328>
 8003c26:	e0b1      	b.n	8003d8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e171      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	fffeffff 	.word	0xfffeffff
 8003c34:	fffbffff 	.word	0xfffbffff
 8003c38:	ffff80ff 	.word	0xffff80ff
 8003c3c:	ffffc7ff 	.word	0xffffc7ff
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	20000018 	.word	0x20000018
 8003c48:	2000001c 	.word	0x2000001c
 8003c4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c50:	4bb1      	ldr	r3, [pc, #708]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	055b      	lsls	r3, r3, #21
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x360>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x362>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	4bac      	ldr	r3, [pc, #688]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c6a:	4bab      	ldr	r3, [pc, #684]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003c6c:	2180      	movs	r1, #128	@ 0x80
 8003c6e:	0549      	lsls	r1, r1, #21
 8003c70:	430a      	orrs	r2, r1
 8003c72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c74:	4ba8      	ldr	r3, [pc, #672]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c78:	2380      	movs	r3, #128	@ 0x80
 8003c7a:	055b      	lsls	r3, r3, #21
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	4ba4      	ldr	r3, [pc, #656]	@ (8003f1c <HAL_RCC_OscConfig+0x61c>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	@ 0x80
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4ba1      	ldr	r3, [pc, #644]	@ (8003f1c <HAL_RCC_OscConfig+0x61c>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4ba0      	ldr	r3, [pc, #640]	@ (8003f1c <HAL_RCC_OscConfig+0x61c>)
 8003c9c:	2180      	movs	r1, #128	@ 0x80
 8003c9e:	0049      	lsls	r1, r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ca4:	f7ff fa08 	bl	80030b8 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7ff fa03 	bl	80030b8 <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e127      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc0:	4b96      	ldr	r3, [pc, #600]	@ (8003f1c <HAL_RCC_OscConfig+0x61c>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3e2>
 8003cd4:	4b90      	ldr	r3, [pc, #576]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCC_OscConfig+0x41c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x404>
 8003cea:	4b8b      	ldr	r3, [pc, #556]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cee:	4b8a      	ldr	r3, [pc, #552]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf6:	4b88      	ldr	r3, [pc, #544]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cfa:	4b87      	ldr	r3, [pc, #540]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d02:	e00b      	b.n	8003d1c <HAL_RCC_OscConfig+0x41c>
 8003d04:	4b84      	ldr	r3, [pc, #528]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d08:	4b83      	ldr	r3, [pc, #524]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	438a      	bics	r2, r1
 8003d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d10:	4b81      	ldr	r3, [pc, #516]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d14:	4b80      	ldr	r3, [pc, #512]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d16:	2104      	movs	r1, #4
 8003d18:	438a      	bics	r2, r1
 8003d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7ff f9c8 	bl	80030b8 <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7ff f9c3 	bl	80030b8 <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	4a79      	ldr	r2, [pc, #484]	@ (8003f20 <HAL_RCC_OscConfig+0x620>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0e6      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4b75      	ldr	r3, [pc, #468]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	2202      	movs	r2, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x42e>
 8003d4c:	e013      	b.n	8003d76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7ff f9b3 	bl	80030b8 <HAL_GetTick>
 8003d52:	0003      	movs	r3, r0
 8003d54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d56:	e009      	b.n	8003d6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7ff f9ae 	bl	80030b8 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a6f      	ldr	r2, [pc, #444]	@ (8003f20 <HAL_RCC_OscConfig+0x620>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0d1      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d76:	231f      	movs	r3, #31
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b65      	ldr	r3, [pc, #404]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d84:	4b64      	ldr	r3, [pc, #400]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d86:	4967      	ldr	r1, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x624>)
 8003d88:	400a      	ands	r2, r1
 8003d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x496>
 8003d94:	e0bb      	b.n	8003f0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d96:	4b60      	ldr	r3, [pc, #384]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2238      	movs	r2, #56	@ 0x38
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d100      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4a4>
 8003da2:	e07b      	b.n	8003e9c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d156      	bne.n	8003e5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b5a      	ldr	r3, [pc, #360]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003db2:	495d      	ldr	r1, [pc, #372]	@ (8003f28 <HAL_RCC_OscConfig+0x628>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7ff f97e 	bl	80030b8 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7ff f979 	bl	80030b8 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e09d      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	4b50      	ldr	r3, [pc, #320]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	049b      	lsls	r3, r3, #18
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a51      	ldr	r2, [pc, #324]	@ (8003f2c <HAL_RCC_OscConfig+0x62c>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	4b42      	ldr	r3, [pc, #264]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b3f      	ldr	r3, [pc, #252]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	0449      	lsls	r1, r1, #17
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e22:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	4b3c      	ldr	r3, [pc, #240]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e28:	2180      	movs	r1, #128	@ 0x80
 8003e2a:	0549      	lsls	r1, r1, #21
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7ff f942 	bl	80030b8 <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7ff f93d 	bl	80030b8 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e061      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4c:	4b32      	ldr	r3, [pc, #200]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	049b      	lsls	r3, r3, #18
 8003e54:	4013      	ands	r3, r2
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x53a>
 8003e58:	e059      	b.n	8003f0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e60:	4931      	ldr	r1, [pc, #196]	@ (8003f28 <HAL_RCC_OscConfig+0x628>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7ff f927 	bl	80030b8 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7ff f922 	bl	80030b8 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e046      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e82:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	049b      	lsls	r3, r3, #18
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003e8e:	4b22      	ldr	r3, [pc, #136]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003e94:	4926      	ldr	r1, [pc, #152]	@ (8003f30 <HAL_RCC_OscConfig+0x630>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e033      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_RCC_OscConfig+0x618>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d126      	bne.n	8003f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2270      	movs	r2, #112	@ 0x70
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	23fe      	movs	r3, #254	@ 0xfe
 8003ece:	01db      	lsls	r3, r3, #7
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d116      	bne.n	8003f0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	23f8      	movs	r3, #248	@ 0xf8
 8003ee0:	039b      	lsls	r3, r3, #14
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d10e      	bne.n	8003f0a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	23e0      	movs	r3, #224	@ 0xe0
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	0f5b      	lsrs	r3, r3, #29
 8003f00:	075a      	lsls	r2, r3, #29
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b008      	add	sp, #32
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	00001388 	.word	0x00001388
 8003f24:	efffffff 	.word	0xefffffff
 8003f28:	feffffff 	.word	0xfeffffff
 8003f2c:	11c1808c 	.word	0x11c1808c
 8003f30:	eefefffc 	.word	0xeefefffc

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0e9      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	4013      	ands	r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d91e      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b73      	ldr	r3, [pc, #460]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	4b70      	ldr	r3, [pc, #448]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f68:	f7ff f8a6 	bl	80030b8 <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f70:	e009      	b.n	8003f86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f72:	f7ff f8a1 	bl	80030b8 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0ca      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f86:	4b67      	ldr	r3, [pc, #412]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1ee      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d015      	beq.n	8003fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d006      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fa8:	4b60      	ldr	r3, [pc, #384]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b5f      	ldr	r3, [pc, #380]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fae:	21e0      	movs	r1, #224	@ 0xe0
 8003fb0:	01c9      	lsls	r1, r1, #7
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	4a5d      	ldr	r2, [pc, #372]	@ (8004130 <HAL_RCC_ClockConfig+0x1fc>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d057      	beq.n	8004084 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fdc:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d12b      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e097      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	049b      	lsls	r3, r3, #18
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d11f      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e08b      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400c:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4013      	ands	r3, r2
 8004016:	d113      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e07f      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d106      	bne.n	8004032 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004024:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e074      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e06d      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004040:	4b3a      	ldr	r3, [pc, #232]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
 8004046:	4393      	bics	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7ff f830 	bl	80030b8 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405c:	e009      	b.n	8004072 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7ff f82b 	bl	80030b8 <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e054      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2238      	movs	r2, #56	@ 0x38
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	429a      	cmp	r2, r3
 8004082:	d1ec      	bne.n	800405e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2207      	movs	r2, #7
 800408a:	4013      	ands	r3, r2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d21e      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2207      	movs	r2, #7
 8004098:	4393      	bics	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040a4:	f7ff f808 	bl	80030b8 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ac:	e009      	b.n	80040c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7ff f803 	bl	80030b8 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e02c      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2207      	movs	r2, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1ee      	bne.n	80040ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	4013      	ands	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a15      	ldr	r2, [pc, #84]	@ (8004134 <HAL_RCC_ClockConfig+0x200>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040ee:	f000 f829 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80040f2:	0001      	movs	r1, r0
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	220f      	movs	r2, #15
 80040fc:	401a      	ands	r2, r3
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <HAL_RCC_ClockConfig+0x204>)
 8004100:	0092      	lsls	r2, r2, #2
 8004102:	58d3      	ldr	r3, [r2, r3]
 8004104:	221f      	movs	r2, #31
 8004106:	4013      	ands	r3, r2
 8004108:	000a      	movs	r2, r1
 800410a:	40da      	lsrs	r2, r3
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCC_ClockConfig+0x208>)
 800410e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_ClockConfig+0x20c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0018      	movs	r0, r3
 8004116:	f7fe ff73 	bl	8003000 <HAL_InitTick>
 800411a:	0003      	movs	r3, r0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40022000 	.word	0x40022000
 8004128:	00001388 	.word	0x00001388
 800412c:	40021000 	.word	0x40021000
 8004130:	fffff0ff 	.word	0xfffff0ff
 8004134:	ffff8fff 	.word	0xffff8fff
 8004138:	080089b8 	.word	0x080089b8
 800413c:	20000018 	.word	0x20000018
 8004140:	2000001c 	.word	0x2000001c

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800414a:	4b3c      	ldr	r3, [pc, #240]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2238      	movs	r2, #56	@ 0x38
 8004150:	4013      	ands	r3, r2
 8004152:	d10f      	bne.n	8004174 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0adb      	lsrs	r3, r3, #11
 800415a:	2207      	movs	r2, #7
 800415c:	4013      	ands	r3, r2
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	0013      	movs	r3, r2
 8004164:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	4835      	ldr	r0, [pc, #212]	@ (8004240 <HAL_RCC_GetSysClockFreq+0xfc>)
 800416a:	f7fb ffe7 	bl	800013c <__udivsi3>
 800416e:	0003      	movs	r3, r0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	e05d      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2238      	movs	r2, #56	@ 0x38
 800417a:	4013      	ands	r3, r2
 800417c:	2b08      	cmp	r3, #8
 800417e:	d102      	bne.n	8004186 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004180:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x100>)
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e054      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004186:	4b2d      	ldr	r3, [pc, #180]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2238      	movs	r2, #56	@ 0x38
 800418c:	4013      	ands	r3, r2
 800418e:	2b10      	cmp	r3, #16
 8004190:	d138      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004192:	4b2a      	ldr	r3, [pc, #168]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2203      	movs	r2, #3
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800419c:	4b27      	ldr	r3, [pc, #156]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	2207      	movs	r2, #7
 80041a4:	4013      	ands	r3, r2
 80041a6:	3301      	adds	r3, #1
 80041a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d10d      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4824      	ldr	r0, [pc, #144]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x100>)
 80041b4:	f7fb ffc2 	bl	800013c <__udivsi3>
 80041b8:	0003      	movs	r3, r0
 80041ba:	0019      	movs	r1, r3
 80041bc:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	227f      	movs	r2, #127	@ 0x7f
 80041c4:	4013      	ands	r3, r2
 80041c6:	434b      	muls	r3, r1
 80041c8:	617b      	str	r3, [r7, #20]
        break;
 80041ca:	e00d      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	481c      	ldr	r0, [pc, #112]	@ (8004240 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041d0:	f7fb ffb4 	bl	800013c <__udivsi3>
 80041d4:	0003      	movs	r3, r0
 80041d6:	0019      	movs	r1, r3
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	227f      	movs	r2, #127	@ 0x7f
 80041e0:	4013      	ands	r3, r2
 80041e2:	434b      	muls	r3, r1
 80041e4:	617b      	str	r3, [r7, #20]
        break;
 80041e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0f5b      	lsrs	r3, r3, #29
 80041ee:	2207      	movs	r2, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	6978      	ldr	r0, [r7, #20]
 80041fa:	f7fb ff9f 	bl	800013c <__udivsi3>
 80041fe:	0003      	movs	r3, r0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e015      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004204:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2238      	movs	r2, #56	@ 0x38
 800420a:	4013      	ands	r3, r2
 800420c:	2b20      	cmp	r3, #32
 800420e:	d103      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e00b      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004218:	4b08      	ldr	r3, [pc, #32]	@ (800423c <HAL_RCC_GetSysClockFreq+0xf8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2238      	movs	r2, #56	@ 0x38
 800421e:	4013      	ands	r3, r2
 8004220:	2b18      	cmp	r3, #24
 8004222:	d103      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004224:	23fa      	movs	r3, #250	@ 0xfa
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	e001      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004230:	693b      	ldr	r3, [r7, #16]
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b006      	add	sp, #24
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	40021000 	.word	0x40021000
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800424c:	4b02      	ldr	r3, [pc, #8]	@ (8004258 <HAL_RCC_GetHCLKFreq+0x10>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	20000018 	.word	0x20000018

0800425c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004260:	f7ff fff2 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004264:	0004      	movs	r4, r0
 8004266:	f7ff fb3f 	bl	80038e8 <LL_RCC_GetAPB1Prescaler>
 800426a:	0003      	movs	r3, r0
 800426c:	0b1a      	lsrs	r2, r3, #12
 800426e:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	58d3      	ldr	r3, [r2, r3]
 8004274:	221f      	movs	r2, #31
 8004276:	4013      	ands	r3, r2
 8004278:	40dc      	lsrs	r4, r3
 800427a:	0023      	movs	r3, r4
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	bdb0      	pop	{r4, r5, r7, pc}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	080089f8 	.word	0x080089f8

08004288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e04a      	b.n	8004330 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	223d      	movs	r2, #61	@ 0x3d
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	223c      	movs	r2, #60	@ 0x3c
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fe fcad 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	223d      	movs	r2, #61	@ 0x3d
 80042ba:	2102      	movs	r1, #2
 80042bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	0019      	movs	r1, r3
 80042c8:	0010      	movs	r0, r2
 80042ca:	f000 fd21 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2248      	movs	r2, #72	@ 0x48
 80042d2:	2101      	movs	r1, #1
 80042d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	223e      	movs	r2, #62	@ 0x3e
 80042da:	2101      	movs	r1, #1
 80042dc:	5499      	strb	r1, [r3, r2]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	223f      	movs	r2, #63	@ 0x3f
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2240      	movs	r2, #64	@ 0x40
 80042ea:	2101      	movs	r1, #1
 80042ec:	5499      	strb	r1, [r3, r2]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2241      	movs	r2, #65	@ 0x41
 80042f2:	2101      	movs	r1, #1
 80042f4:	5499      	strb	r1, [r3, r2]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2242      	movs	r2, #66	@ 0x42
 80042fa:	2101      	movs	r1, #1
 80042fc:	5499      	strb	r1, [r3, r2]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2243      	movs	r2, #67	@ 0x43
 8004302:	2101      	movs	r1, #1
 8004304:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2244      	movs	r2, #68	@ 0x44
 800430a:	2101      	movs	r1, #1
 800430c:	5499      	strb	r1, [r3, r2]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2245      	movs	r2, #69	@ 0x45
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2246      	movs	r2, #70	@ 0x46
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2247      	movs	r2, #71	@ 0x47
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	223d      	movs	r2, #61	@ 0x3d
 800432a:	2101      	movs	r1, #1
 800432c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e04a      	b.n	80043e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	223d      	movs	r2, #61	@ 0x3d
 800434e:	5c9b      	ldrb	r3, [r3, r2]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223c      	movs	r2, #60	@ 0x3c
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 f841 	bl	80043e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	223d      	movs	r2, #61	@ 0x3d
 800436a:	2102      	movs	r1, #2
 800436c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	0019      	movs	r1, r3
 8004378:	0010      	movs	r0, r2
 800437a:	f000 fcc9 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2248      	movs	r2, #72	@ 0x48
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223e      	movs	r2, #62	@ 0x3e
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223f      	movs	r2, #63	@ 0x3f
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2240      	movs	r2, #64	@ 0x40
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2241      	movs	r2, #65	@ 0x41
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2242      	movs	r2, #66	@ 0x42
 80043aa:	2101      	movs	r1, #1
 80043ac:	5499      	strb	r1, [r3, r2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2243      	movs	r2, #67	@ 0x43
 80043b2:	2101      	movs	r1, #1
 80043b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2244      	movs	r2, #68	@ 0x44
 80043ba:	2101      	movs	r1, #1
 80043bc:	5499      	strb	r1, [r3, r2]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2245      	movs	r2, #69	@ 0x45
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2246      	movs	r2, #70	@ 0x46
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2247      	movs	r2, #71	@ 0x47
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	223d      	movs	r2, #61	@ 0x3d
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <HAL_TIM_PWM_Start+0x22>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223e      	movs	r2, #62	@ 0x3e
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	1e5a      	subs	r2, r3, #1
 8004414:	4193      	sbcs	r3, r2
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e037      	b.n	800448a <HAL_TIM_PWM_Start+0x92>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d108      	bne.n	8004432 <HAL_TIM_PWM_Start+0x3a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	223f      	movs	r2, #63	@ 0x3f
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	4193      	sbcs	r3, r2
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e02b      	b.n	800448a <HAL_TIM_PWM_Start+0x92>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d108      	bne.n	800444a <HAL_TIM_PWM_Start+0x52>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2240      	movs	r2, #64	@ 0x40
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	4193      	sbcs	r3, r2
 8004446:	b2db      	uxtb	r3, r3
 8004448:	e01f      	b.n	800448a <HAL_TIM_PWM_Start+0x92>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d108      	bne.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2241      	movs	r2, #65	@ 0x41
 8004454:	5c9b      	ldrb	r3, [r3, r2]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	4193      	sbcs	r3, r2
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e013      	b.n	800448a <HAL_TIM_PWM_Start+0x92>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b10      	cmp	r3, #16
 8004466:	d108      	bne.n	800447a <HAL_TIM_PWM_Start+0x82>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2242      	movs	r2, #66	@ 0x42
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	4193      	sbcs	r3, r2
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e007      	b.n	800448a <HAL_TIM_PWM_Start+0x92>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2243      	movs	r2, #67	@ 0x43
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	4193      	sbcs	r3, r2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e081      	b.n	8004596 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	223e      	movs	r2, #62	@ 0x3e
 800449c:	2102      	movs	r1, #2
 800449e:	5499      	strb	r1, [r3, r2]
 80044a0:	e023      	b.n	80044ea <HAL_TIM_PWM_Start+0xf2>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Start+0xba>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	223f      	movs	r2, #63	@ 0x3f
 80044ac:	2102      	movs	r1, #2
 80044ae:	5499      	strb	r1, [r3, r2]
 80044b0:	e01b      	b.n	80044ea <HAL_TIM_PWM_Start+0xf2>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Start+0xca>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2240      	movs	r2, #64	@ 0x40
 80044bc:	2102      	movs	r1, #2
 80044be:	5499      	strb	r1, [r3, r2]
 80044c0:	e013      	b.n	80044ea <HAL_TIM_PWM_Start+0xf2>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0xda>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2241      	movs	r2, #65	@ 0x41
 80044cc:	2102      	movs	r1, #2
 80044ce:	5499      	strb	r1, [r3, r2]
 80044d0:	e00b      	b.n	80044ea <HAL_TIM_PWM_Start+0xf2>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0xea>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2242      	movs	r2, #66	@ 0x42
 80044dc:	2102      	movs	r1, #2
 80044de:	5499      	strb	r1, [r3, r2]
 80044e0:	e003      	b.n	80044ea <HAL_TIM_PWM_Start+0xf2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2243      	movs	r2, #67	@ 0x43
 80044e6:	2102      	movs	r1, #2
 80044e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 ffba 	bl	800546c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_TIM_PWM_Start+0x1a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_TIM_PWM_Start+0x11e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a27      	ldr	r2, [pc, #156]	@ (80045a4 <HAL_TIM_PWM_Start+0x1ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_TIM_PWM_Start+0x11e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a25      	ldr	r2, [pc, #148]	@ (80045a8 <HAL_TIM_PWM_Start+0x1b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_Start+0x122>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_TIM_PWM_Start+0x124>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2180      	movs	r1, #128	@ 0x80
 800452c:	0209      	lsls	r1, r1, #8
 800452e:	430a      	orrs	r2, r1
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_TIM_PWM_Start+0x1a8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00a      	beq.n	8004552 <HAL_TIM_PWM_Start+0x15a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	429a      	cmp	r2, r3
 8004546:	d004      	beq.n	8004552 <HAL_TIM_PWM_Start+0x15a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIM_PWM_Start+0x1b4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d116      	bne.n	8004580 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIM_PWM_Start+0x1b8>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d016      	beq.n	8004592 <HAL_TIM_PWM_Start+0x19a>
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	025b      	lsls	r3, r3, #9
 800456a:	429a      	cmp	r2, r3
 800456c:	d011      	beq.n	8004592 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2101      	movs	r1, #1
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	e008      	b.n	8004592 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2101      	movs	r1, #1
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e000      	b.n	8004594 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800
 80045ac:	40000400 	.word	0x40000400
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	2200      	movs	r2, #0
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 ff50 	bl	800546c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <HAL_TIM_PWM_Stop+0xf4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_TIM_PWM_Stop+0x36>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a34      	ldr	r2, [pc, #208]	@ (80046ac <HAL_TIM_PWM_Stop+0xf8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIM_PWM_Stop+0x36>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a32      	ldr	r2, [pc, #200]	@ (80046b0 <HAL_TIM_PWM_Stop+0xfc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Stop+0x3a>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_TIM_PWM_Stop+0x3c>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a2e      	ldr	r2, [pc, #184]	@ (80046b4 <HAL_TIM_PWM_Stop+0x100>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	d10d      	bne.n	800461c <HAL_TIM_PWM_Stop+0x68>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a2c      	ldr	r2, [pc, #176]	@ (80046b8 <HAL_TIM_PWM_Stop+0x104>)
 8004608:	4013      	ands	r3, r2
 800460a:	d107      	bne.n	800461c <HAL_TIM_PWM_Stop+0x68>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4929      	ldr	r1, [pc, #164]	@ (80046bc <HAL_TIM_PWM_Stop+0x108>)
 8004618:	400a      	ands	r2, r1
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <HAL_TIM_PWM_Stop+0x100>)
 8004624:	4013      	ands	r3, r2
 8004626:	d10d      	bne.n	8004644 <HAL_TIM_PWM_Stop+0x90>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_TIM_PWM_Stop+0x104>)
 8004630:	4013      	ands	r3, r2
 8004632:	d107      	bne.n	8004644 <HAL_TIM_PWM_Stop+0x90>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	438a      	bics	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_TIM_PWM_Stop+0xa0>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223e      	movs	r2, #62	@ 0x3e
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
 8004652:	e023      	b.n	800469c <HAL_TIM_PWM_Stop+0xe8>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d104      	bne.n	8004664 <HAL_TIM_PWM_Stop+0xb0>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	223f      	movs	r2, #63	@ 0x3f
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
 8004662:	e01b      	b.n	800469c <HAL_TIM_PWM_Stop+0xe8>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b08      	cmp	r3, #8
 8004668:	d104      	bne.n	8004674 <HAL_TIM_PWM_Stop+0xc0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2240      	movs	r2, #64	@ 0x40
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]
 8004672:	e013      	b.n	800469c <HAL_TIM_PWM_Stop+0xe8>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d104      	bne.n	8004684 <HAL_TIM_PWM_Stop+0xd0>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2241      	movs	r2, #65	@ 0x41
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]
 8004682:	e00b      	b.n	800469c <HAL_TIM_PWM_Stop+0xe8>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b10      	cmp	r3, #16
 8004688:	d104      	bne.n	8004694 <HAL_TIM_PWM_Stop+0xe0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2242      	movs	r2, #66	@ 0x42
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]
 8004692:	e003      	b.n	800469c <HAL_TIM_PWM_Stop+0xe8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2243      	movs	r2, #67	@ 0x43
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	00001111 	.word	0x00001111
 80046b8:	00000444 	.word	0x00000444
 80046bc:	ffff7fff 	.word	0xffff7fff

080046c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2202      	movs	r2, #2
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d124      	bne.n	8004720 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	4013      	ands	r3, r2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d11d      	bne.n	8004720 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2203      	movs	r2, #3
 80046ea:	4252      	negs	r2, r2
 80046ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2203      	movs	r2, #3
 80046fc:	4013      	ands	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 faec 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004708:	e007      	b.n	800471a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fadf 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 faeb 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2204      	movs	r2, #4
 8004728:	4013      	ands	r3, r2
 800472a:	2b04      	cmp	r3, #4
 800472c:	d125      	bne.n	800477a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2204      	movs	r2, #4
 8004736:	4013      	ands	r3, r2
 8004738:	2b04      	cmp	r3, #4
 800473a:	d11e      	bne.n	800477a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2205      	movs	r2, #5
 8004742:	4252      	negs	r2, r2
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	23c0      	movs	r3, #192	@ 0xc0
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4013      	ands	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 fabf 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004762:	e007      	b.n	8004774 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fab2 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 fabe 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2208      	movs	r2, #8
 8004782:	4013      	ands	r3, r2
 8004784:	2b08      	cmp	r3, #8
 8004786:	d124      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2208      	movs	r2, #8
 8004790:	4013      	ands	r3, r2
 8004792:	2b08      	cmp	r3, #8
 8004794:	d11d      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2209      	movs	r2, #9
 800479c:	4252      	negs	r2, r2
 800479e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2204      	movs	r2, #4
 80047a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2203      	movs	r2, #3
 80047ae:	4013      	ands	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fa93 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 80047ba:	e007      	b.n	80047cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 fa86 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fa92 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2210      	movs	r2, #16
 80047da:	4013      	ands	r3, r2
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d125      	bne.n	800482c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2210      	movs	r2, #16
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	d11e      	bne.n	800482c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2211      	movs	r2, #17
 80047f4:	4252      	negs	r2, r2
 80047f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2208      	movs	r2, #8
 80047fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	23c0      	movs	r3, #192	@ 0xc0
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4013      	ands	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fa66 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004814:	e007      	b.n	8004826 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 fa59 	bl	8004cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fa65 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2201      	movs	r2, #1
 8004834:	4013      	ands	r3, r2
 8004836:	2b01      	cmp	r3, #1
 8004838:	d10f      	bne.n	800485a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	4013      	ands	r3, r2
 8004844:	2b01      	cmp	r3, #1
 8004846:	d108      	bne.n	800485a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	4252      	negs	r2, r2
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0018      	movs	r0, r3
 8004856:	f7fe f93f 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2280      	movs	r2, #128	@ 0x80
 8004862:	4013      	ands	r3, r2
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	d10f      	bne.n	8004888 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	4013      	ands	r3, r2
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d108      	bne.n	8004888 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2281      	movs	r2, #129	@ 0x81
 800487c:	4252      	negs	r2, r2
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fe86 	bl	8005594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	401a      	ands	r2, r3
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	429a      	cmp	r2, r3
 800489a:	d10e      	bne.n	80048ba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d107      	bne.n	80048ba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <HAL_TIM_IRQHandler+0x260>)
 80048b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fe75 	bl	80055a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2240      	movs	r2, #64	@ 0x40
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b40      	cmp	r3, #64	@ 0x40
 80048c6:	d10f      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2240      	movs	r2, #64	@ 0x40
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b40      	cmp	r3, #64	@ 0x40
 80048d4:	d108      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2241      	movs	r2, #65	@ 0x41
 80048dc:	4252      	negs	r2, r2
 80048de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fa0c 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2220      	movs	r2, #32
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d10f      	bne.n	8004916 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	4013      	ands	r3, r2
 8004900:	2b20      	cmp	r3, #32
 8004902:	d108      	bne.n	8004916 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	4252      	negs	r2, r2
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 fe37 	bl	8005584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	fffffeff 	.word	0xfffffeff

08004924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2317      	movs	r3, #23
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	223c      	movs	r2, #60	@ 0x3c
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004942:	2302      	movs	r3, #2
 8004944:	e0e5      	b.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	223c      	movs	r2, #60	@ 0x3c
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b14      	cmp	r3, #20
 8004952:	d900      	bls.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004954:	e0d1      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	009a      	lsls	r2, r3, #2
 800495a:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0011      	movs	r1, r2
 800496a:	0018      	movs	r0, r3
 800496c:	f000 fa46 	bl	8004dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2108      	movs	r1, #8
 800497c:	430a      	orrs	r2, r1
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2104      	movs	r1, #4
 800498c:	438a      	bics	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	619a      	str	r2, [r3, #24]
      break;
 80049a2:	e0af      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	0011      	movs	r1, r2
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 faa5 	bl	8004efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2180      	movs	r1, #128	@ 0x80
 80049be:	0109      	lsls	r1, r1, #4
 80049c0:	430a      	orrs	r2, r1
 80049c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4954      	ldr	r1, [pc, #336]	@ (8004b20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
      break;
 80049e8:	e08c      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fb00 	bl	8004ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2108      	movs	r1, #8
 8004a04:	430a      	orrs	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2104      	movs	r1, #4
 8004a14:	438a      	bics	r2, r1
 8004a16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69d9      	ldr	r1, [r3, #28]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	61da      	str	r2, [r3, #28]
      break;
 8004a2a:	e06b      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	0011      	movs	r1, r2
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fb61 	bl	80050fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2180      	movs	r1, #128	@ 0x80
 8004a46:	0109      	lsls	r1, r1, #4
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4932      	ldr	r1, [pc, #200]	@ (8004b20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69d9      	ldr	r1, [r3, #28]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	61da      	str	r2, [r3, #28]
      break;
 8004a70:	e048      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fba2 	bl	80051c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2108      	movs	r1, #8
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2104      	movs	r1, #4
 8004a9c:	438a      	bics	r2, r1
 8004a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ab2:	e027      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	0011      	movs	r1, r2
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 fbdb 	bl	8005278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2180      	movs	r1, #128	@ 0x80
 8004ace:	0109      	lsls	r1, r1, #4
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4910      	ldr	r1, [pc, #64]	@ (8004b20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004af8:	e004      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004afa:	2317      	movs	r3, #23
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
      break;
 8004b02:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	223c      	movs	r2, #60	@ 0x3c
 8004b08:	2100      	movs	r1, #0
 8004b0a:	5499      	strb	r1, [r3, r2]

  return status;
 8004b0c:	2317      	movs	r3, #23
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	781b      	ldrb	r3, [r3, #0]
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b006      	add	sp, #24
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	08008a18 	.word	0x08008a18
 8004b20:	fffffbff 	.word	0xfffffbff

08004b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	230f      	movs	r3, #15
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	223c      	movs	r2, #60	@ 0x3c
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x20>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0bc      	b.n	8004cbe <HAL_TIM_ConfigClockSource+0x19a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	223c      	movs	r2, #60	@ 0x3c
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223d      	movs	r2, #61	@ 0x3d
 8004b50:	2102      	movs	r1, #2
 8004b52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004cc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a59      	ldr	r2, [pc, #356]	@ (8004ccc <HAL_TIM_ConfigClockSource+0x1a8>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2280      	movs	r2, #128	@ 0x80
 8004b7a:	0192      	lsls	r2, r2, #6
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d040      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xde>
 8004b80:	2280      	movs	r2, #128	@ 0x80
 8004b82:	0192      	lsls	r2, r2, #6
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d900      	bls.n	8004b8a <HAL_TIM_ConfigClockSource+0x66>
 8004b88:	e088      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	0152      	lsls	r2, r2, #5
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d100      	bne.n	8004b94 <HAL_TIM_ConfigClockSource+0x70>
 8004b92:	e088      	b.n	8004ca6 <HAL_TIM_ConfigClockSource+0x182>
 8004b94:	2280      	movs	r2, #128	@ 0x80
 8004b96:	0152      	lsls	r2, r2, #5
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d900      	bls.n	8004b9e <HAL_TIM_ConfigClockSource+0x7a>
 8004b9c:	e07e      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004b9e:	2b70      	cmp	r3, #112	@ 0x70
 8004ba0:	d018      	beq.n	8004bd4 <HAL_TIM_ConfigClockSource+0xb0>
 8004ba2:	d900      	bls.n	8004ba6 <HAL_TIM_ConfigClockSource+0x82>
 8004ba4:	e07a      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004ba6:	2b60      	cmp	r3, #96	@ 0x60
 8004ba8:	d04f      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x126>
 8004baa:	d900      	bls.n	8004bae <HAL_TIM_ConfigClockSource+0x8a>
 8004bac:	e076      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004bae:	2b50      	cmp	r3, #80	@ 0x50
 8004bb0:	d03b      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x106>
 8004bb2:	d900      	bls.n	8004bb6 <HAL_TIM_ConfigClockSource+0x92>
 8004bb4:	e072      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d057      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x146>
 8004bba:	d900      	bls.n	8004bbe <HAL_TIM_ConfigClockSource+0x9a>
 8004bbc:	e06e      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004bbe:	2b30      	cmp	r3, #48	@ 0x30
 8004bc0:	d063      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x166>
 8004bc2:	d86b      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d060      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x166>
 8004bc8:	d868      	bhi.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d05d      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x166>
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d05b      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x166>
 8004bd2:	e063      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	f000 fc22 	bl	800542c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2277      	movs	r2, #119	@ 0x77
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	609a      	str	r2, [r3, #8]
      break;
 8004c00:	e052      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c12:	f000 fc0b 	bl	800542c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	01c9      	lsls	r1, r1, #7
 8004c24:	430a      	orrs	r2, r1
 8004c26:	609a      	str	r2, [r3, #8]
      break;
 8004c28:	e03e      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	001a      	movs	r2, r3
 8004c38:	f000 fb7c 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2150      	movs	r1, #80	@ 0x50
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fbd6 	bl	80053f4 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e02e      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	001a      	movs	r2, r3
 8004c58:	f000 fb9a 	bl	8005390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2160      	movs	r1, #96	@ 0x60
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fbc6 	bl	80053f4 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e01e      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	001a      	movs	r2, r3
 8004c78:	f000 fb5c 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2140      	movs	r1, #64	@ 0x40
 8004c82:	0018      	movs	r0, r3
 8004c84:	f000 fbb6 	bl	80053f4 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e00e      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0019      	movs	r1, r3
 8004c94:	0010      	movs	r0, r2
 8004c96:	f000 fbad 	bl	80053f4 <TIM_ITRx_SetConfig>
      break;
 8004c9a:	e005      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	230f      	movs	r3, #15
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
      break;
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ca6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	223d      	movs	r2, #61	@ 0x3d
 8004cac:	2101      	movs	r1, #1
 8004cae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	223c      	movs	r2, #60	@ 0x3c
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	5499      	strb	r1, [r3, r2]

  return status;
 8004cb8:	230f      	movs	r3, #15
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	781b      	ldrb	r3, [r3, #0]
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b004      	add	sp, #16
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	ffceff88 	.word	0xffceff88
 8004ccc:	ffff00ff 	.word	0xffff00ff

08004cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b002      	add	sp, #8
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a30      	ldr	r2, [pc, #192]	@ (8004de4 <TIM_Base_SetConfig+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d008      	beq.n	8004d3a <TIM_Base_SetConfig+0x2a>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	2380      	movs	r3, #128	@ 0x80
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0x2a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	@ (8004de8 <TIM_Base_SetConfig+0xd8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2270      	movs	r2, #112	@ 0x70
 8004d3e:	4393      	bics	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a25      	ldr	r2, [pc, #148]	@ (8004de4 <TIM_Base_SetConfig+0xd4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d014      	beq.n	8004d7e <TIM_Base_SetConfig+0x6e>
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	05db      	lsls	r3, r3, #23
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d00f      	beq.n	8004d7e <TIM_Base_SetConfig+0x6e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a21      	ldr	r2, [pc, #132]	@ (8004de8 <TIM_Base_SetConfig+0xd8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_Base_SetConfig+0x6e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a20      	ldr	r2, [pc, #128]	@ (8004dec <TIM_Base_SetConfig+0xdc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_Base_SetConfig+0x6e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	@ (8004df0 <TIM_Base_SetConfig+0xe0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_Base_SetConfig+0x6e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <TIM_Base_SetConfig+0xe4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <TIM_Base_SetConfig+0xe8>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2280      	movs	r2, #128	@ 0x80
 8004d94:	4393      	bics	r3, r2
 8004d96:	001a      	movs	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	@ (8004de4 <TIM_Base_SetConfig+0xd4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0xbe>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004df0 <TIM_Base_SetConfig+0xe0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0xbe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <TIM_Base_SetConfig+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d103      	bne.n	8004dd6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	615a      	str	r2, [r3, #20]
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40002000 	.word	0x40002000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800
 8004df8:	fffffcff 	.word	0xfffffcff

08004dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	001a      	movs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <TIM_OC1_SetConfig+0xe8>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2203      	movs	r2, #3
 8004e32:	4393      	bics	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4393      	bics	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <TIM_OC1_SetConfig+0xec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_OC1_SetConfig+0x6e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <TIM_OC1_SetConfig+0xf0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC1_SetConfig+0x6e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <TIM_OC1_SetConfig+0xf4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	4393      	bics	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	4393      	bics	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a18      	ldr	r2, [pc, #96]	@ (8004ee8 <TIM_OC1_SetConfig+0xec>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_OC1_SetConfig+0xa0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	@ (8004eec <TIM_OC1_SetConfig+0xf0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC1_SetConfig+0xa0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <TIM_OC1_SetConfig+0xf4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ef4 <TIM_OC1_SetConfig+0xf8>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	@ (8004ef8 <TIM_OC1_SetConfig+0xfc>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b006      	add	sp, #24
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	fffeff8f 	.word	0xfffeff8f
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800
 8004ef4:	fffffeff 	.word	0xfffffeff
 8004ef8:	fffffdff 	.word	0xfffffdff

08004efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	001a      	movs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <TIM_OC2_SetConfig+0xe0>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <TIM_OC2_SetConfig+0xe4>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2220      	movs	r2, #32
 8004f46:	4393      	bics	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <TIM_OC2_SetConfig+0xe8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2280      	movs	r2, #128	@ 0x80
 8004f62:	4393      	bics	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2240      	movs	r2, #64	@ 0x40
 8004f76:	4393      	bics	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <TIM_OC2_SetConfig+0xe8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_OC2_SetConfig+0x96>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <TIM_OC2_SetConfig+0xec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC2_SetConfig+0x96>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <TIM_OC2_SetConfig+0xf0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d113      	bne.n	8004fba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <TIM_OC2_SetConfig+0xf4>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <TIM_OC2_SetConfig+0xf8>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b006      	add	sp, #24
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	feff8fff 	.word	0xfeff8fff
 8004fe0:	fffffcff 	.word	0xfffffcff
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800
 8004ff0:	fffffbff 	.word	0xfffffbff
 8004ff4:	fffff7ff 	.word	0xfffff7ff

08004ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4a33      	ldr	r2, [pc, #204]	@ (80050d4 <TIM_OC3_SetConfig+0xdc>)
 8005008:	401a      	ands	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <TIM_OC3_SetConfig+0xe0>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2203      	movs	r2, #3
 800502c:	4393      	bics	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <TIM_OC3_SetConfig+0xe4>)
 800503e:	4013      	ands	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <TIM_OC3_SetConfig+0xe8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10d      	bne.n	8005072 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4a22      	ldr	r2, [pc, #136]	@ (80050e4 <TIM_OC3_SetConfig+0xec>)
 800505a:	4013      	ands	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <TIM_OC3_SetConfig+0xf0>)
 800506e:	4013      	ands	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1a      	ldr	r2, [pc, #104]	@ (80050e0 <TIM_OC3_SetConfig+0xe8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d007      	beq.n	800508a <TIM_OC3_SetConfig+0x92>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <TIM_OC3_SetConfig+0xf4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_OC3_SetConfig+0x92>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <TIM_OC3_SetConfig+0xf8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d113      	bne.n	80050b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <TIM_OC3_SetConfig+0xfc>)
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <TIM_OC3_SetConfig+0x100>)
 8005096:	4013      	ands	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	46c0      	nop			@ (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b006      	add	sp, #24
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	fffffeff 	.word	0xfffffeff
 80050d8:	fffeff8f 	.word	0xfffeff8f
 80050dc:	fffffdff 	.word	0xfffffdff
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	fffff7ff 	.word	0xfffff7ff
 80050e8:	fffffbff 	.word	0xfffffbff
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	ffffefff 	.word	0xffffefff
 80050f8:	ffffdfff 	.word	0xffffdfff

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <TIM_OC4_SetConfig+0xa8>)
 800510c:	401a      	ands	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <TIM_OC4_SetConfig+0xac>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a1f      	ldr	r2, [pc, #124]	@ (80051ac <TIM_OC4_SetConfig+0xb0>)
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4a1b      	ldr	r2, [pc, #108]	@ (80051b0 <TIM_OC4_SetConfig+0xb4>)
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <TIM_OC4_SetConfig+0xb8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_OC4_SetConfig+0x70>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <TIM_OC4_SetConfig+0xbc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC4_SetConfig+0x70>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a15      	ldr	r2, [pc, #84]	@ (80051bc <TIM_OC4_SetConfig+0xc0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d109      	bne.n	8005180 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4a14      	ldr	r2, [pc, #80]	@ (80051c0 <TIM_OC4_SetConfig+0xc4>)
 8005170:	4013      	ands	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b006      	add	sp, #24
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	ffffefff 	.word	0xffffefff
 80051a8:	feff8fff 	.word	0xfeff8fff
 80051ac:	fffffcff 	.word	0xfffffcff
 80051b0:	ffffdfff 	.word	0xffffdfff
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800
 80051c0:	ffffbfff 	.word	0xffffbfff

080051c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <TIM_OC5_SetConfig+0x9c>)
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <TIM_OC5_SetConfig+0xa0>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <TIM_OC5_SetConfig+0xa4>)
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a15      	ldr	r2, [pc, #84]	@ (800526c <TIM_OC5_SetConfig+0xa8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_OC5_SetConfig+0x66>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a14      	ldr	r2, [pc, #80]	@ (8005270 <TIM_OC5_SetConfig+0xac>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC5_SetConfig+0x66>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a13      	ldr	r2, [pc, #76]	@ (8005274 <TIM_OC5_SetConfig+0xb0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d109      	bne.n	800523e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4a0c      	ldr	r2, [pc, #48]	@ (8005260 <TIM_OC5_SetConfig+0x9c>)
 800522e:	4013      	ands	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	46c0      	nop			@ (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b006      	add	sp, #24
 800525e:	bd80      	pop	{r7, pc}
 8005260:	fffeffff 	.word	0xfffeffff
 8005264:	fffeff8f 	.word	0xfffeff8f
 8005268:	fffdffff 	.word	0xfffdffff
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a24      	ldr	r2, [pc, #144]	@ (8005318 <TIM_OC6_SetConfig+0xa0>)
 8005288:	401a      	ands	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a1e      	ldr	r2, [pc, #120]	@ (800531c <TIM_OC6_SetConfig+0xa4>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005320 <TIM_OC6_SetConfig+0xa8>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC6_SetConfig+0xac>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_OC6_SetConfig+0x68>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC6_SetConfig+0xb0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC6_SetConfig+0x68>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a14      	ldr	r2, [pc, #80]	@ (800532c <TIM_OC6_SetConfig+0xb4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4a13      	ldr	r2, [pc, #76]	@ (8005330 <TIM_OC6_SetConfig+0xb8>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b006      	add	sp, #24
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	ffefffff 	.word	0xffefffff
 800531c:	feff8fff 	.word	0xfeff8fff
 8005320:	ffdfffff 	.word	0xffdfffff
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800
 8005330:	fffbffff 	.word	0xfffbffff

08005334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	2201      	movs	r2, #1
 800534c:	4393      	bics	r3, r2
 800534e:	001a      	movs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	22f0      	movs	r2, #240	@ 0xf0
 800535e:	4393      	bics	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	220a      	movs	r2, #10
 8005370:	4393      	bics	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	621a      	str	r2, [r3, #32]
}
 8005388:	46c0      	nop			@ (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b006      	add	sp, #24
 800538e:	bd80      	pop	{r7, pc}

08005390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	2210      	movs	r2, #16
 80053a2:	4393      	bics	r3, r2
 80053a4:	001a      	movs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <TIM_TI2_ConfigInputStage+0x60>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	031b      	lsls	r3, r3, #12
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	22a0      	movs	r2, #160	@ 0xa0
 80053cc:	4393      	bics	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b006      	add	sp, #24
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	ffff0fff 	.word	0xffff0fff

080053f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a08      	ldr	r2, [pc, #32]	@ (8005428 <TIM_ITRx_SetConfig+0x34>)
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	2207      	movs	r2, #7
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b004      	add	sp, #16
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	ffcfff8f 	.word	0xffcfff8f

0800542c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <TIM_ETR_SetConfig+0x3c>)
 8005444:	4013      	ands	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	609a      	str	r2, [r3, #8]
}
 8005460:	46c0      	nop			@ (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b006      	add	sp, #24
 8005466:	bd80      	pop	{r7, pc}
 8005468:	ffff00ff 	.word	0xffff00ff

0800546c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	221f      	movs	r2, #31
 800547c:	4013      	ands	r3, r2
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	0013      	movs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	43d2      	mvns	r2, r2
 800548e:	401a      	ands	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	211f      	movs	r1, #31
 800549c:	400b      	ands	r3, r1
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4099      	lsls	r1, r3
 80054a2:	000b      	movs	r3, r1
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b006      	add	sp, #24
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	223c      	movs	r2, #60	@ 0x3c
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e050      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	223c      	movs	r2, #60	@ 0x3c
 80054d0:	2101      	movs	r1, #1
 80054d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	223d      	movs	r2, #61	@ 0x3d
 80054d8:	2102      	movs	r1, #2
 80054da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a21      	ldr	r2, [pc, #132]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a20      	ldr	r2, [pc, #128]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2270      	movs	r2, #112	@ 0x70
 800550c:	4393      	bics	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00a      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	05db      	lsls	r3, r3, #23
 8005534:	429a      	cmp	r2, r3
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2280      	movs	r2, #128	@ 0x80
 8005546:	4393      	bics	r3, r2
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223d      	movs	r2, #61	@ 0x3d
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	223c      	movs	r2, #60	@ 0x3c
 8005568:	2100      	movs	r1, #0
 800556a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b004      	add	sp, #16
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	40012c00 	.word	0x40012c00
 800557c:	ff0fffff 	.word	0xff0fffff
 8005580:	40000400 	.word	0x40000400

08005584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e046      	b.n	8005654 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2288      	movs	r2, #136	@ 0x88
 80055ca:	589b      	ldr	r3, [r3, r2]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2284      	movs	r2, #132	@ 0x84
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f7fd fb92 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2288      	movs	r2, #136	@ 0x88
 80055e4:	2124      	movs	r1, #36	@ 0x24
 80055e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 f830 	bl	8005660 <UART_SetConfig>
 8005600:	0003      	movs	r3, r0
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e024      	b.n	8005654 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	0018      	movs	r0, r3
 8005616:	f000 fa9b 	bl	8005b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	490d      	ldr	r1, [pc, #52]	@ (800565c <HAL_UART_Init+0xa8>)
 8005626:	400a      	ands	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	212a      	movs	r1, #42	@ 0x2a
 8005636:	438a      	bics	r2, r1
 8005638:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2101      	movs	r1, #1
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 fb33 	bl	8005cb8 <UART_CheckIdleState>
 8005652:	0003      	movs	r3, r0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}
 800565c:	ffffb7ff 	.word	0xffffb7ff

08005660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b090      	sub	sp, #64	@ 0x40
 8005664:	af00      	add	r7, sp, #0
 8005666:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005668:	231a      	movs	r3, #26
 800566a:	2220      	movs	r2, #32
 800566c:	189b      	adds	r3, r3, r2
 800566e:	19db      	adds	r3, r3, r7
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4313      	orrs	r3, r2
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4ac4      	ldr	r2, [pc, #784]	@ (80059a4 <UART_SetConfig+0x344>)
 8005694:	4013      	ands	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569e:	430b      	orrs	r3, r1
 80056a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4abf      	ldr	r2, [pc, #764]	@ (80059a8 <UART_SetConfig+0x348>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	68d9      	ldr	r1, [r3, #12]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	0003      	movs	r3, r0
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4ab9      	ldr	r2, [pc, #740]	@ (80059ac <UART_SetConfig+0x34c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056d2:	4313      	orrs	r3, r2
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4ab4      	ldr	r2, [pc, #720]	@ (80059b0 <UART_SetConfig+0x350>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	220f      	movs	r2, #15
 80056f4:	4393      	bics	r3, r2
 80056f6:	0018      	movs	r0, r3
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	0003      	movs	r3, r0
 8005702:	430b      	orrs	r3, r1
 8005704:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4aaa      	ldr	r2, [pc, #680]	@ (80059b4 <UART_SetConfig+0x354>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d131      	bne.n	8005774 <UART_SetConfig+0x114>
 8005710:	4ba9      	ldr	r3, [pc, #676]	@ (80059b8 <UART_SetConfig+0x358>)
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	2203      	movs	r2, #3
 8005716:	4013      	ands	r3, r2
 8005718:	2b03      	cmp	r3, #3
 800571a:	d01d      	beq.n	8005758 <UART_SetConfig+0xf8>
 800571c:	d823      	bhi.n	8005766 <UART_SetConfig+0x106>
 800571e:	2b02      	cmp	r3, #2
 8005720:	d00c      	beq.n	800573c <UART_SetConfig+0xdc>
 8005722:	d820      	bhi.n	8005766 <UART_SetConfig+0x106>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <UART_SetConfig+0xce>
 8005728:	2b01      	cmp	r3, #1
 800572a:	d00e      	beq.n	800574a <UART_SetConfig+0xea>
 800572c:	e01b      	b.n	8005766 <UART_SetConfig+0x106>
 800572e:	231b      	movs	r3, #27
 8005730:	2220      	movs	r2, #32
 8005732:	189b      	adds	r3, r3, r2
 8005734:	19db      	adds	r3, r3, r7
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e071      	b.n	8005820 <UART_SetConfig+0x1c0>
 800573c:	231b      	movs	r3, #27
 800573e:	2220      	movs	r2, #32
 8005740:	189b      	adds	r3, r3, r2
 8005742:	19db      	adds	r3, r3, r7
 8005744:	2202      	movs	r2, #2
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e06a      	b.n	8005820 <UART_SetConfig+0x1c0>
 800574a:	231b      	movs	r3, #27
 800574c:	2220      	movs	r2, #32
 800574e:	189b      	adds	r3, r3, r2
 8005750:	19db      	adds	r3, r3, r7
 8005752:	2204      	movs	r2, #4
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e063      	b.n	8005820 <UART_SetConfig+0x1c0>
 8005758:	231b      	movs	r3, #27
 800575a:	2220      	movs	r2, #32
 800575c:	189b      	adds	r3, r3, r2
 800575e:	19db      	adds	r3, r3, r7
 8005760:	2208      	movs	r2, #8
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e05c      	b.n	8005820 <UART_SetConfig+0x1c0>
 8005766:	231b      	movs	r3, #27
 8005768:	2220      	movs	r2, #32
 800576a:	189b      	adds	r3, r3, r2
 800576c:	19db      	adds	r3, r3, r7
 800576e:	2210      	movs	r2, #16
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e055      	b.n	8005820 <UART_SetConfig+0x1c0>
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a90      	ldr	r2, [pc, #576]	@ (80059bc <UART_SetConfig+0x35c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d106      	bne.n	800578c <UART_SetConfig+0x12c>
 800577e:	231b      	movs	r3, #27
 8005780:	2220      	movs	r2, #32
 8005782:	189b      	adds	r3, r3, r2
 8005784:	19db      	adds	r3, r3, r7
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e049      	b.n	8005820 <UART_SetConfig+0x1c0>
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a86      	ldr	r2, [pc, #536]	@ (80059ac <UART_SetConfig+0x34c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d13e      	bne.n	8005814 <UART_SetConfig+0x1b4>
 8005796:	4b88      	ldr	r3, [pc, #544]	@ (80059b8 <UART_SetConfig+0x358>)
 8005798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800579a:	23c0      	movs	r3, #192	@ 0xc0
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	4013      	ands	r3, r2
 80057a0:	22c0      	movs	r2, #192	@ 0xc0
 80057a2:	0112      	lsls	r2, r2, #4
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d027      	beq.n	80057f8 <UART_SetConfig+0x198>
 80057a8:	22c0      	movs	r2, #192	@ 0xc0
 80057aa:	0112      	lsls	r2, r2, #4
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d82a      	bhi.n	8005806 <UART_SetConfig+0x1a6>
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	0112      	lsls	r2, r2, #4
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d011      	beq.n	80057dc <UART_SetConfig+0x17c>
 80057b8:	2280      	movs	r2, #128	@ 0x80
 80057ba:	0112      	lsls	r2, r2, #4
 80057bc:	4293      	cmp	r3, r2
 80057be:	d822      	bhi.n	8005806 <UART_SetConfig+0x1a6>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <UART_SetConfig+0x16e>
 80057c4:	2280      	movs	r2, #128	@ 0x80
 80057c6:	00d2      	lsls	r2, r2, #3
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <UART_SetConfig+0x18a>
 80057cc:	e01b      	b.n	8005806 <UART_SetConfig+0x1a6>
 80057ce:	231b      	movs	r3, #27
 80057d0:	2220      	movs	r2, #32
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	19db      	adds	r3, r3, r7
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e021      	b.n	8005820 <UART_SetConfig+0x1c0>
 80057dc:	231b      	movs	r3, #27
 80057de:	2220      	movs	r2, #32
 80057e0:	189b      	adds	r3, r3, r2
 80057e2:	19db      	adds	r3, r3, r7
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e01a      	b.n	8005820 <UART_SetConfig+0x1c0>
 80057ea:	231b      	movs	r3, #27
 80057ec:	2220      	movs	r2, #32
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	19db      	adds	r3, r3, r7
 80057f2:	2204      	movs	r2, #4
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e013      	b.n	8005820 <UART_SetConfig+0x1c0>
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2208      	movs	r2, #8
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e00c      	b.n	8005820 <UART_SetConfig+0x1c0>
 8005806:	231b      	movs	r3, #27
 8005808:	2220      	movs	r2, #32
 800580a:	189b      	adds	r3, r3, r2
 800580c:	19db      	adds	r3, r3, r7
 800580e:	2210      	movs	r2, #16
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e005      	b.n	8005820 <UART_SetConfig+0x1c0>
 8005814:	231b      	movs	r3, #27
 8005816:	2220      	movs	r2, #32
 8005818:	189b      	adds	r3, r3, r2
 800581a:	19db      	adds	r3, r3, r7
 800581c:	2210      	movs	r2, #16
 800581e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a61      	ldr	r2, [pc, #388]	@ (80059ac <UART_SetConfig+0x34c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d000      	beq.n	800582c <UART_SetConfig+0x1cc>
 800582a:	e092      	b.n	8005952 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800582c:	231b      	movs	r3, #27
 800582e:	2220      	movs	r2, #32
 8005830:	189b      	adds	r3, r3, r2
 8005832:	19db      	adds	r3, r3, r7
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d015      	beq.n	8005866 <UART_SetConfig+0x206>
 800583a:	dc18      	bgt.n	800586e <UART_SetConfig+0x20e>
 800583c:	2b04      	cmp	r3, #4
 800583e:	d00d      	beq.n	800585c <UART_SetConfig+0x1fc>
 8005840:	dc15      	bgt.n	800586e <UART_SetConfig+0x20e>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <UART_SetConfig+0x1ec>
 8005846:	2b02      	cmp	r3, #2
 8005848:	d005      	beq.n	8005856 <UART_SetConfig+0x1f6>
 800584a:	e010      	b.n	800586e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584c:	f7fe fd06 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 8005850:	0003      	movs	r3, r0
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005854:	e014      	b.n	8005880 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005856:	4b5a      	ldr	r3, [pc, #360]	@ (80059c0 <UART_SetConfig+0x360>)
 8005858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800585a:	e011      	b.n	8005880 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585c:	f7fe fc72 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005860:	0003      	movs	r3, r0
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005872:	231a      	movs	r3, #26
 8005874:	2220      	movs	r2, #32
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
        break;
 800587e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005882:	2b00      	cmp	r3, #0
 8005884:	d100      	bne.n	8005888 <UART_SetConfig+0x228>
 8005886:	e147      	b.n	8005b18 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800588c:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <UART_SetConfig+0x364>)
 800588e:	0052      	lsls	r2, r2, #1
 8005890:	5ad3      	ldrh	r3, [r2, r3]
 8005892:	0019      	movs	r1, r3
 8005894:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005896:	f7fa fc51 	bl	800013c <__udivsi3>
 800589a:	0003      	movs	r3, r0
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	0013      	movs	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d305      	bcc.n	80058ba <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d906      	bls.n	80058c8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80058ba:	231a      	movs	r3, #26
 80058bc:	2220      	movs	r2, #32
 80058be:	189b      	adds	r3, r3, r2
 80058c0:	19db      	adds	r3, r3, r7
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e127      	b.n	8005b18 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <UART_SetConfig+0x364>)
 80058d6:	0052      	lsls	r2, r2, #1
 80058d8:	5ad3      	ldrh	r3, [r2, r3]
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	69b8      	ldr	r0, [r7, #24]
 80058e6:	69f9      	ldr	r1, [r7, #28]
 80058e8:	f7fa fddc 	bl	80004a4 <__aeabi_uldivmod>
 80058ec:	0002      	movs	r2, r0
 80058ee:	000b      	movs	r3, r1
 80058f0:	0e11      	lsrs	r1, r2, #24
 80058f2:	021d      	lsls	r5, r3, #8
 80058f4:	430d      	orrs	r5, r1
 80058f6:	0214      	lsls	r4, r2, #8
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	1900      	adds	r0, r0, r4
 800590a:	4169      	adcs	r1, r5
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f7fa fdc3 	bl	80004a4 <__aeabi_uldivmod>
 800591e:	0002      	movs	r2, r0
 8005920:	000b      	movs	r3, r1
 8005922:	0013      	movs	r3, r2
 8005924:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005928:	23c0      	movs	r3, #192	@ 0xc0
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d309      	bcc.n	8005944 <UART_SetConfig+0x2e4>
 8005930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005932:	2380      	movs	r3, #128	@ 0x80
 8005934:	035b      	lsls	r3, r3, #13
 8005936:	429a      	cmp	r2, r3
 8005938:	d204      	bcs.n	8005944 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e0e9      	b.n	8005b18 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005944:	231a      	movs	r3, #26
 8005946:	2220      	movs	r2, #32
 8005948:	189b      	adds	r3, r3, r2
 800594a:	19db      	adds	r3, r3, r7
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e0e2      	b.n	8005b18 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	429a      	cmp	r2, r3
 800595c:	d000      	beq.n	8005960 <UART_SetConfig+0x300>
 800595e:	e083      	b.n	8005a68 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005960:	231b      	movs	r3, #27
 8005962:	2220      	movs	r2, #32
 8005964:	189b      	adds	r3, r3, r2
 8005966:	19db      	adds	r3, r3, r7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d015      	beq.n	800599a <UART_SetConfig+0x33a>
 800596e:	dc2b      	bgt.n	80059c8 <UART_SetConfig+0x368>
 8005970:	2b04      	cmp	r3, #4
 8005972:	d00d      	beq.n	8005990 <UART_SetConfig+0x330>
 8005974:	dc28      	bgt.n	80059c8 <UART_SetConfig+0x368>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <UART_SetConfig+0x320>
 800597a:	2b02      	cmp	r3, #2
 800597c:	d005      	beq.n	800598a <UART_SetConfig+0x32a>
 800597e:	e023      	b.n	80059c8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005980:	f7fe fc6c 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 8005984:	0003      	movs	r3, r0
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005988:	e027      	b.n	80059da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <UART_SetConfig+0x360>)
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800598e:	e024      	b.n	80059da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005990:	f7fe fbd8 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005994:	0003      	movs	r3, r0
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005998:	e01f      	b.n	80059da <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059a0:	e01b      	b.n	80059da <UART_SetConfig+0x37a>
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	cfff69f3 	.word	0xcfff69f3
 80059a8:	ffffcfff 	.word	0xffffcfff
 80059ac:	40008000 	.word	0x40008000
 80059b0:	11fff4ff 	.word	0x11fff4ff
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40004400 	.word	0x40004400
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	08008a6c 	.word	0x08008a6c
      default:
        pclk = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80059cc:	231a      	movs	r3, #26
 80059ce:	2220      	movs	r2, #32
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
        break;
 80059d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d100      	bne.n	80059e2 <UART_SetConfig+0x382>
 80059e0:	e09a      	b.n	8005b18 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059e6:	4b58      	ldr	r3, [pc, #352]	@ (8005b48 <UART_SetConfig+0x4e8>)
 80059e8:	0052      	lsls	r2, r2, #1
 80059ea:	5ad3      	ldrh	r3, [r2, r3]
 80059ec:	0019      	movs	r1, r3
 80059ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80059f0:	f7fa fba4 	bl	800013c <__udivsi3>
 80059f4:	0003      	movs	r3, r0
 80059f6:	005a      	lsls	r2, r3, #1
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	18d2      	adds	r2, r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	0019      	movs	r1, r3
 8005a06:	0010      	movs	r0, r2
 8005a08:	f7fa fb98 	bl	800013c <__udivsi3>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	2b0f      	cmp	r3, #15
 8005a14:	d921      	bls.n	8005a5a <UART_SetConfig+0x3fa>
 8005a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	025b      	lsls	r3, r3, #9
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d21c      	bcs.n	8005a5a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	200e      	movs	r0, #14
 8005a26:	2420      	movs	r4, #32
 8005a28:	1903      	adds	r3, r0, r4
 8005a2a:	19db      	adds	r3, r3, r7
 8005a2c:	210f      	movs	r1, #15
 8005a2e:	438a      	bics	r2, r1
 8005a30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2207      	movs	r2, #7
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	b299      	uxth	r1, r3
 8005a3e:	1903      	adds	r3, r0, r4
 8005a40:	19db      	adds	r3, r3, r7
 8005a42:	1902      	adds	r2, r0, r4
 8005a44:	19d2      	adds	r2, r2, r7
 8005a46:	8812      	ldrh	r2, [r2, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1902      	adds	r2, r0, r4
 8005a52:	19d2      	adds	r2, r2, r7
 8005a54:	8812      	ldrh	r2, [r2, #0]
 8005a56:	60da      	str	r2, [r3, #12]
 8005a58:	e05e      	b.n	8005b18 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5a:	231a      	movs	r3, #26
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	19db      	adds	r3, r3, r7
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e057      	b.n	8005b18 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a68:	231b      	movs	r3, #27
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d015      	beq.n	8005aa2 <UART_SetConfig+0x442>
 8005a76:	dc18      	bgt.n	8005aaa <UART_SetConfig+0x44a>
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d00d      	beq.n	8005a98 <UART_SetConfig+0x438>
 8005a7c:	dc15      	bgt.n	8005aaa <UART_SetConfig+0x44a>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <UART_SetConfig+0x428>
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d005      	beq.n	8005a92 <UART_SetConfig+0x432>
 8005a86:	e010      	b.n	8005aaa <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe fbe8 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a90:	e014      	b.n	8005abc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a92:	4b2e      	ldr	r3, [pc, #184]	@ (8005b4c <UART_SetConfig+0x4ec>)
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a96:	e011      	b.n	8005abc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a98:	f7fe fb54 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005a9c:	0003      	movs	r3, r0
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005aa0:	e00c      	b.n	8005abc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005aa8:	e008      	b.n	8005abc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005aae:	231a      	movs	r3, #26
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	19db      	adds	r3, r3, r7
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	701a      	strb	r2, [r3, #0]
        break;
 8005aba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02a      	beq.n	8005b18 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ac6:	4b20      	ldr	r3, [pc, #128]	@ (8005b48 <UART_SetConfig+0x4e8>)
 8005ac8:	0052      	lsls	r2, r2, #1
 8005aca:	5ad3      	ldrh	r3, [r2, r3]
 8005acc:	0019      	movs	r1, r3
 8005ace:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ad0:	f7fa fb34 	bl	800013c <__udivsi3>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	18d2      	adds	r2, r2, r3
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	f7fa fb28 	bl	800013c <__udivsi3>
 8005aec:	0003      	movs	r3, r0
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d90a      	bls.n	8005b0c <UART_SetConfig+0x4ac>
 8005af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af8:	2380      	movs	r3, #128	@ 0x80
 8005afa:	025b      	lsls	r3, r3, #9
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d205      	bcs.n	8005b0c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	e005      	b.n	8005b18 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0c:	231a      	movs	r3, #26
 8005b0e:	2220      	movs	r2, #32
 8005b10:	189b      	adds	r3, r3, r2
 8005b12:	19db      	adds	r3, r3, r7
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	226a      	movs	r2, #106	@ 0x6a
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	2268      	movs	r2, #104	@ 0x68
 8005b24:	2101      	movs	r1, #1
 8005b26:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	2200      	movs	r2, #0
 8005b32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b34:	231a      	movs	r3, #26
 8005b36:	2220      	movs	r2, #32
 8005b38:	189b      	adds	r3, r3, r2
 8005b3a:	19db      	adds	r3, r3, r7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
}
 8005b3e:	0018      	movs	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b010      	add	sp, #64	@ 0x40
 8005b44:	bdb0      	pop	{r4, r5, r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	08008a6c 	.word	0x08008a6c
 8005b4c:	00f42400 	.word	0x00f42400

08005b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a4a      	ldr	r2, [pc, #296]	@ (8005c94 <UART_AdvFeatureConfig+0x144>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	2202      	movs	r2, #2
 8005b80:	4013      	ands	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4a43      	ldr	r2, [pc, #268]	@ (8005c98 <UART_AdvFeatureConfig+0x148>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	0019      	movs	r1, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a3b      	ldr	r2, [pc, #236]	@ (8005c9c <UART_AdvFeatureConfig+0x14c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <UART_AdvFeatureConfig+0x150>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	2210      	movs	r2, #16
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <UART_AdvFeatureConfig+0x154>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	2220      	movs	r2, #32
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4a25      	ldr	r2, [pc, #148]	@ (8005ca8 <UART_AdvFeatureConfig+0x158>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	2240      	movs	r2, #64	@ 0x40
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d01d      	beq.n	8005c6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <UART_AdvFeatureConfig+0x15c>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	0019      	movs	r1, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4a:	2380      	movs	r3, #128	@ 0x80
 8005c4c:	035b      	lsls	r3, r3, #13
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d10b      	bne.n	8005c6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <UART_AdvFeatureConfig+0x160>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	2280      	movs	r2, #128	@ 0x80
 8005c70:	4013      	ands	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb4 <UART_AdvFeatureConfig+0x164>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	0019      	movs	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	605a      	str	r2, [r3, #4]
  }
}
 8005c8c:	46c0      	nop			@ (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b002      	add	sp, #8
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	fffdffff 	.word	0xfffdffff
 8005c98:	fffeffff 	.word	0xfffeffff
 8005c9c:	fffbffff 	.word	0xfffbffff
 8005ca0:	ffff7fff 	.word	0xffff7fff
 8005ca4:	ffffefff 	.word	0xffffefff
 8005ca8:	ffffdfff 	.word	0xffffdfff
 8005cac:	ffefffff 	.word	0xffefffff
 8005cb0:	ff9fffff 	.word	0xff9fffff
 8005cb4:	fff7ffff 	.word	0xfff7ffff

08005cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2290      	movs	r2, #144	@ 0x90
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cc8:	f7fd f9f6 	bl	80030b8 <HAL_GetTick>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2208      	movs	r2, #8
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d10c      	bne.n	8005cf8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2280      	movs	r2, #128	@ 0x80
 8005ce2:	0391      	lsls	r1, r2, #14
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d50 <UART_CheckIdleState+0x98>)
 8005ce8:	9200      	str	r2, [sp, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f000 f832 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d001      	beq.n	8005cf8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e026      	b.n	8005d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d10c      	bne.n	8005d20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2280      	movs	r2, #128	@ 0x80
 8005d0a:	03d1      	lsls	r1, r2, #15
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4a10      	ldr	r2, [pc, #64]	@ (8005d50 <UART_CheckIdleState+0x98>)
 8005d10:	9200      	str	r2, [sp, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f000 f81e 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005d18:	1e03      	subs	r3, r0, #0
 8005d1a:	d001      	beq.n	8005d20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e012      	b.n	8005d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2288      	movs	r2, #136	@ 0x88
 8005d24:	2120      	movs	r1, #32
 8005d26:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	228c      	movs	r2, #140	@ 0x8c
 8005d2c:	2120      	movs	r1, #32
 8005d2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2284      	movs	r2, #132	@ 0x84
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b004      	add	sp, #16
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	01ffffff 	.word	0x01ffffff

08005d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b094      	sub	sp, #80	@ 0x50
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	1dfb      	adds	r3, r7, #7
 8005d62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d64:	e0a7      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d68:	3301      	adds	r3, #1
 8005d6a:	d100      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d6c:	e0a3      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fd f9a3 	bl	80030b8 <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d13f      	bne.n	8005e04 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d84:	f3ef 8310 	mrs	r3, PRIMASK
 8005d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d8e:	2301      	movs	r3, #1
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	494e      	ldr	r1, [pc, #312]	@ (8005ee0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005da6:	400a      	ands	r2, r1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dac:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	f383 8810 	msr	PRIMASK, r3
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dba:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	438a      	bics	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de2:	f383 8810 	msr	PRIMASK, r3
}
 8005de6:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2288      	movs	r2, #136	@ 0x88
 8005dec:	2120      	movs	r1, #32
 8005dee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	228c      	movs	r2, #140	@ 0x8c
 8005df4:	2120      	movs	r1, #32
 8005df6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2284      	movs	r2, #132	@ 0x84
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e069      	b.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d052      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	2380      	movs	r3, #128	@ 0x80
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	2380      	movs	r3, #128	@ 0x80
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d148      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2280      	movs	r2, #128	@ 0x80
 8005e2a:	0112      	lsls	r2, r2, #4
 8005e2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e32:	613b      	str	r3, [r7, #16]
  return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e38:	2301      	movs	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4924      	ldr	r1, [pc, #144]	@ (8005ee0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e50:	400a      	ands	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f383 8810 	msr	PRIMASK, r3
}
 8005e5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e66:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			@ (mov r8, r8)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	438a      	bics	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2288      	movs	r2, #136	@ 0x88
 8005e96:	2120      	movs	r1, #32
 8005e98:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	228c      	movs	r2, #140	@ 0x8c
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2290      	movs	r2, #144	@ 0x90
 8005ea6:	2120      	movs	r1, #32
 8005ea8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2284      	movs	r2, #132	@ 0x84
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e010      	b.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	425a      	negs	r2, r3
 8005ec6:	4153      	adcs	r3, r2
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	001a      	movs	r2, r3
 8005ecc:	1dfb      	adds	r3, r7, #7
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d100      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x182>
 8005ed4:	e747      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b014      	add	sp, #80	@ 0x50
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	fffffe5f 	.word	0xfffffe5f

08005ee4 <__cvt>:
 8005ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee6:	001f      	movs	r7, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	0016      	movs	r6, r2
 8005eec:	b08b      	sub	sp, #44	@ 0x2c
 8005eee:	429f      	cmp	r7, r3
 8005ef0:	da04      	bge.n	8005efc <__cvt+0x18>
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	0609      	lsls	r1, r1, #24
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	001f      	movs	r7, r3
 8005efa:	232d      	movs	r3, #45	@ 0x2d
 8005efc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005efe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005f00:	7013      	strb	r3, [r2, #0]
 8005f02:	2320      	movs	r3, #32
 8005f04:	2203      	movs	r2, #3
 8005f06:	439d      	bics	r5, r3
 8005f08:	2d46      	cmp	r5, #70	@ 0x46
 8005f0a:	d007      	beq.n	8005f1c <__cvt+0x38>
 8005f0c:	002b      	movs	r3, r5
 8005f0e:	3b45      	subs	r3, #69	@ 0x45
 8005f10:	4259      	negs	r1, r3
 8005f12:	414b      	adcs	r3, r1
 8005f14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005f16:	3a01      	subs	r2, #1
 8005f18:	18cb      	adds	r3, r1, r3
 8005f1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f1c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	ab08      	add	r3, sp, #32
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f26:	9200      	str	r2, [sp, #0]
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f2c:	0032      	movs	r2, r6
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	003b      	movs	r3, r7
 8005f32:	f000 fe69 	bl	8006c08 <_dtoa_r>
 8005f36:	0004      	movs	r4, r0
 8005f38:	2d47      	cmp	r5, #71	@ 0x47
 8005f3a:	d11b      	bne.n	8005f74 <__cvt+0x90>
 8005f3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005f3e:	07db      	lsls	r3, r3, #31
 8005f40:	d511      	bpl.n	8005f66 <__cvt+0x82>
 8005f42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f44:	18c3      	adds	r3, r0, r3
 8005f46:	9307      	str	r3, [sp, #28]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	0030      	movs	r0, r6
 8005f4e:	0039      	movs	r1, r7
 8005f50:	f7fa fa7a 	bl	8000448 <__aeabi_dcmpeq>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d001      	beq.n	8005f5c <__cvt+0x78>
 8005f58:	9b07      	ldr	r3, [sp, #28]
 8005f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5c:	2230      	movs	r2, #48	@ 0x30
 8005f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f60:	9907      	ldr	r1, [sp, #28]
 8005f62:	428b      	cmp	r3, r1
 8005f64:	d320      	bcc.n	8005fa8 <__cvt+0xc4>
 8005f66:	0020      	movs	r0, r4
 8005f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f6a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005f6c:	1b1b      	subs	r3, r3, r4
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	b00b      	add	sp, #44	@ 0x2c
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f76:	18c3      	adds	r3, r0, r3
 8005f78:	9307      	str	r3, [sp, #28]
 8005f7a:	2d46      	cmp	r5, #70	@ 0x46
 8005f7c:	d1e4      	bne.n	8005f48 <__cvt+0x64>
 8005f7e:	7803      	ldrb	r3, [r0, #0]
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d10c      	bne.n	8005f9e <__cvt+0xba>
 8005f84:	2200      	movs	r2, #0
 8005f86:	2300      	movs	r3, #0
 8005f88:	0030      	movs	r0, r6
 8005f8a:	0039      	movs	r1, r7
 8005f8c:	f7fa fa5c 	bl	8000448 <__aeabi_dcmpeq>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d104      	bne.n	8005f9e <__cvt+0xba>
 8005f94:	2301      	movs	r3, #1
 8005f96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fa0:	9a07      	ldr	r2, [sp, #28]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	18d3      	adds	r3, r2, r3
 8005fa6:	e7ce      	b.n	8005f46 <__cvt+0x62>
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e7d6      	b.n	8005f5e <__cvt+0x7a>

08005fb0 <__exponent>:
 8005fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb2:	232b      	movs	r3, #43	@ 0x2b
 8005fb4:	0005      	movs	r5, r0
 8005fb6:	000c      	movs	r4, r1
 8005fb8:	b085      	sub	sp, #20
 8005fba:	7002      	strb	r2, [r0, #0]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	da01      	bge.n	8005fc4 <__exponent+0x14>
 8005fc0:	424c      	negs	r4, r1
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	706b      	strb	r3, [r5, #1]
 8005fc6:	2c09      	cmp	r4, #9
 8005fc8:	dd2c      	ble.n	8006024 <__exponent+0x74>
 8005fca:	ab02      	add	r3, sp, #8
 8005fcc:	1dde      	adds	r6, r3, #7
 8005fce:	0020      	movs	r0, r4
 8005fd0:	210a      	movs	r1, #10
 8005fd2:	f7fa fa23 	bl	800041c <__aeabi_idivmod>
 8005fd6:	0037      	movs	r7, r6
 8005fd8:	3130      	adds	r1, #48	@ 0x30
 8005fda:	3e01      	subs	r6, #1
 8005fdc:	0020      	movs	r0, r4
 8005fde:	7031      	strb	r1, [r6, #0]
 8005fe0:	210a      	movs	r1, #10
 8005fe2:	9401      	str	r4, [sp, #4]
 8005fe4:	f7fa f934 	bl	8000250 <__divsi3>
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	0004      	movs	r4, r0
 8005fec:	2b63      	cmp	r3, #99	@ 0x63
 8005fee:	dcee      	bgt.n	8005fce <__exponent+0x1e>
 8005ff0:	1eba      	subs	r2, r7, #2
 8005ff2:	1ca8      	adds	r0, r5, #2
 8005ff4:	0001      	movs	r1, r0
 8005ff6:	0013      	movs	r3, r2
 8005ff8:	3430      	adds	r4, #48	@ 0x30
 8005ffa:	7014      	strb	r4, [r2, #0]
 8005ffc:	ac02      	add	r4, sp, #8
 8005ffe:	3407      	adds	r4, #7
 8006000:	429c      	cmp	r4, r3
 8006002:	d80a      	bhi.n	800601a <__exponent+0x6a>
 8006004:	2300      	movs	r3, #0
 8006006:	42a2      	cmp	r2, r4
 8006008:	d803      	bhi.n	8006012 <__exponent+0x62>
 800600a:	3309      	adds	r3, #9
 800600c:	aa02      	add	r2, sp, #8
 800600e:	189b      	adds	r3, r3, r2
 8006010:	1bdb      	subs	r3, r3, r7
 8006012:	18c0      	adds	r0, r0, r3
 8006014:	1b40      	subs	r0, r0, r5
 8006016:	b005      	add	sp, #20
 8006018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601a:	781c      	ldrb	r4, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	700c      	strb	r4, [r1, #0]
 8006020:	3101      	adds	r1, #1
 8006022:	e7eb      	b.n	8005ffc <__exponent+0x4c>
 8006024:	2330      	movs	r3, #48	@ 0x30
 8006026:	18e4      	adds	r4, r4, r3
 8006028:	70ab      	strb	r3, [r5, #2]
 800602a:	1d28      	adds	r0, r5, #4
 800602c:	70ec      	strb	r4, [r5, #3]
 800602e:	e7f1      	b.n	8006014 <__exponent+0x64>

08006030 <_printf_float>:
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	b097      	sub	sp, #92	@ 0x5c
 8006034:	000d      	movs	r5, r1
 8006036:	920a      	str	r2, [sp, #40]	@ 0x28
 8006038:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800603a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800603c:	9009      	str	r0, [sp, #36]	@ 0x24
 800603e:	f000 fccb 	bl	80069d8 <_localeconv_r>
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	0018      	movs	r0, r3
 8006046:	930d      	str	r3, [sp, #52]	@ 0x34
 8006048:	f7fa f85c 	bl	8000104 <strlen>
 800604c:	2300      	movs	r3, #0
 800604e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006050:	9314      	str	r3, [sp, #80]	@ 0x50
 8006052:	7e2b      	ldrb	r3, [r5, #24]
 8006054:	2207      	movs	r2, #7
 8006056:	930c      	str	r3, [sp, #48]	@ 0x30
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	930e      	str	r3, [sp, #56]	@ 0x38
 800605c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	05c9      	lsls	r1, r1, #23
 8006062:	d545      	bpl.n	80060f0 <_printf_float+0xc0>
 8006064:	189b      	adds	r3, r3, r2
 8006066:	4393      	bics	r3, r2
 8006068:	001a      	movs	r2, r3
 800606a:	3208      	adds	r2, #8
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	681e      	ldr	r6, [r3, #0]
 8006072:	685f      	ldr	r7, [r3, #4]
 8006074:	007b      	lsls	r3, r7, #1
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	9311      	str	r3, [sp, #68]	@ 0x44
 800607a:	9610      	str	r6, [sp, #64]	@ 0x40
 800607c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800607e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006080:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006082:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006084:	4ba7      	ldr	r3, [pc, #668]	@ (8006324 <_printf_float+0x2f4>)
 8006086:	4252      	negs	r2, r2
 8006088:	f7fc f904 	bl	8002294 <__aeabi_dcmpun>
 800608c:	2800      	cmp	r0, #0
 800608e:	d131      	bne.n	80060f4 <_printf_float+0xc4>
 8006090:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006092:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006094:	2201      	movs	r2, #1
 8006096:	4ba3      	ldr	r3, [pc, #652]	@ (8006324 <_printf_float+0x2f4>)
 8006098:	4252      	negs	r2, r2
 800609a:	f7fa f9e5 	bl	8000468 <__aeabi_dcmple>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d128      	bne.n	80060f4 <_printf_float+0xc4>
 80060a2:	2200      	movs	r2, #0
 80060a4:	2300      	movs	r3, #0
 80060a6:	0030      	movs	r0, r6
 80060a8:	0039      	movs	r1, r7
 80060aa:	f7fa f9d3 	bl	8000454 <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d003      	beq.n	80060ba <_printf_float+0x8a>
 80060b2:	002b      	movs	r3, r5
 80060b4:	222d      	movs	r2, #45	@ 0x2d
 80060b6:	3343      	adds	r3, #67	@ 0x43
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060bc:	4f9a      	ldr	r7, [pc, #616]	@ (8006328 <_printf_float+0x2f8>)
 80060be:	2b47      	cmp	r3, #71	@ 0x47
 80060c0:	d900      	bls.n	80060c4 <_printf_float+0x94>
 80060c2:	4f9a      	ldr	r7, [pc, #616]	@ (800632c <_printf_float+0x2fc>)
 80060c4:	2303      	movs	r3, #3
 80060c6:	2400      	movs	r4, #0
 80060c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060ca:	612b      	str	r3, [r5, #16]
 80060cc:	3301      	adds	r3, #1
 80060ce:	439a      	bics	r2, r3
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060d4:	0029      	movs	r1, r5
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060dc:	aa15      	add	r2, sp, #84	@ 0x54
 80060de:	f000 f9e5 	bl	80064ac <_printf_common>
 80060e2:	3001      	adds	r0, #1
 80060e4:	d000      	beq.n	80060e8 <_printf_float+0xb8>
 80060e6:	e09f      	b.n	8006228 <_printf_float+0x1f8>
 80060e8:	2001      	movs	r0, #1
 80060ea:	4240      	negs	r0, r0
 80060ec:	b017      	add	sp, #92	@ 0x5c
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	3307      	adds	r3, #7
 80060f2:	e7b8      	b.n	8006066 <_printf_float+0x36>
 80060f4:	0032      	movs	r2, r6
 80060f6:	003b      	movs	r3, r7
 80060f8:	0030      	movs	r0, r6
 80060fa:	0039      	movs	r1, r7
 80060fc:	f7fc f8ca 	bl	8002294 <__aeabi_dcmpun>
 8006100:	2800      	cmp	r0, #0
 8006102:	d00b      	beq.n	800611c <_printf_float+0xec>
 8006104:	2f00      	cmp	r7, #0
 8006106:	da03      	bge.n	8006110 <_printf_float+0xe0>
 8006108:	002b      	movs	r3, r5
 800610a:	222d      	movs	r2, #45	@ 0x2d
 800610c:	3343      	adds	r3, #67	@ 0x43
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006112:	4f87      	ldr	r7, [pc, #540]	@ (8006330 <_printf_float+0x300>)
 8006114:	2b47      	cmp	r3, #71	@ 0x47
 8006116:	d9d5      	bls.n	80060c4 <_printf_float+0x94>
 8006118:	4f86      	ldr	r7, [pc, #536]	@ (8006334 <_printf_float+0x304>)
 800611a:	e7d3      	b.n	80060c4 <_printf_float+0x94>
 800611c:	2220      	movs	r2, #32
 800611e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006120:	686b      	ldr	r3, [r5, #4]
 8006122:	4394      	bics	r4, r2
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	d146      	bne.n	80061b6 <_printf_float+0x186>
 8006128:	3307      	adds	r3, #7
 800612a:	606b      	str	r3, [r5, #4]
 800612c:	2380      	movs	r3, #128	@ 0x80
 800612e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4313      	orrs	r3, r2
 8006134:	2200      	movs	r2, #0
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	aa14      	add	r2, sp, #80	@ 0x50
 800613c:	9205      	str	r2, [sp, #20]
 800613e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006140:	a90a      	add	r1, sp, #40	@ 0x28
 8006142:	9204      	str	r2, [sp, #16]
 8006144:	aa13      	add	r2, sp, #76	@ 0x4c
 8006146:	9203      	str	r2, [sp, #12]
 8006148:	2223      	movs	r2, #35	@ 0x23
 800614a:	1852      	adds	r2, r2, r1
 800614c:	9202      	str	r2, [sp, #8]
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	686b      	ldr	r3, [r5, #4]
 8006152:	0032      	movs	r2, r6
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006158:	003b      	movs	r3, r7
 800615a:	f7ff fec3 	bl	8005ee4 <__cvt>
 800615e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006160:	0007      	movs	r7, r0
 8006162:	2c47      	cmp	r4, #71	@ 0x47
 8006164:	d12d      	bne.n	80061c2 <_printf_float+0x192>
 8006166:	1cd3      	adds	r3, r2, #3
 8006168:	db02      	blt.n	8006170 <_printf_float+0x140>
 800616a:	686b      	ldr	r3, [r5, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	dd48      	ble.n	8006202 <_printf_float+0x1d2>
 8006170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006172:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006174:	3b02      	subs	r3, #2
 8006176:	b2db      	uxtb	r3, r3
 8006178:	930c      	str	r3, [sp, #48]	@ 0x30
 800617a:	0028      	movs	r0, r5
 800617c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800617e:	3901      	subs	r1, #1
 8006180:	3050      	adds	r0, #80	@ 0x50
 8006182:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006184:	f7ff ff14 	bl	8005fb0 <__exponent>
 8006188:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800618a:	0004      	movs	r4, r0
 800618c:	1813      	adds	r3, r2, r0
 800618e:	612b      	str	r3, [r5, #16]
 8006190:	2a01      	cmp	r2, #1
 8006192:	dc02      	bgt.n	800619a <_printf_float+0x16a>
 8006194:	682a      	ldr	r2, [r5, #0]
 8006196:	07d2      	lsls	r2, r2, #31
 8006198:	d501      	bpl.n	800619e <_printf_float+0x16e>
 800619a:	3301      	adds	r3, #1
 800619c:	612b      	str	r3, [r5, #16]
 800619e:	2323      	movs	r3, #35	@ 0x23
 80061a0:	aa0a      	add	r2, sp, #40	@ 0x28
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d100      	bne.n	80061ac <_printf_float+0x17c>
 80061aa:	e792      	b.n	80060d2 <_printf_float+0xa2>
 80061ac:	002b      	movs	r3, r5
 80061ae:	222d      	movs	r2, #45	@ 0x2d
 80061b0:	3343      	adds	r3, #67	@ 0x43
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e78d      	b.n	80060d2 <_printf_float+0xa2>
 80061b6:	2c47      	cmp	r4, #71	@ 0x47
 80061b8:	d1b8      	bne.n	800612c <_printf_float+0xfc>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1b6      	bne.n	800612c <_printf_float+0xfc>
 80061be:	3301      	adds	r3, #1
 80061c0:	e7b3      	b.n	800612a <_printf_float+0xfa>
 80061c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061c4:	0011      	movs	r1, r2
 80061c6:	2b65      	cmp	r3, #101	@ 0x65
 80061c8:	d9d7      	bls.n	800617a <_printf_float+0x14a>
 80061ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061cc:	2b66      	cmp	r3, #102	@ 0x66
 80061ce:	d11a      	bne.n	8006206 <_printf_float+0x1d6>
 80061d0:	686b      	ldr	r3, [r5, #4]
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	dd09      	ble.n	80061ea <_printf_float+0x1ba>
 80061d6:	612a      	str	r2, [r5, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <_printf_float+0x1b2>
 80061dc:	6829      	ldr	r1, [r5, #0]
 80061de:	07c9      	lsls	r1, r1, #31
 80061e0:	d50b      	bpl.n	80061fa <_printf_float+0x1ca>
 80061e2:	3301      	adds	r3, #1
 80061e4:	189b      	adds	r3, r3, r2
 80061e6:	612b      	str	r3, [r5, #16]
 80061e8:	e007      	b.n	80061fa <_printf_float+0x1ca>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <_printf_float+0x1c6>
 80061ee:	2201      	movs	r2, #1
 80061f0:	6829      	ldr	r1, [r5, #0]
 80061f2:	4211      	tst	r1, r2
 80061f4:	d000      	beq.n	80061f8 <_printf_float+0x1c8>
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	612a      	str	r2, [r5, #16]
 80061fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061fc:	2400      	movs	r4, #0
 80061fe:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006200:	e7cd      	b.n	800619e <_printf_float+0x16e>
 8006202:	2367      	movs	r3, #103	@ 0x67
 8006204:	930c      	str	r3, [sp, #48]	@ 0x30
 8006206:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006208:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800620a:	4299      	cmp	r1, r3
 800620c:	db06      	blt.n	800621c <_printf_float+0x1ec>
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	6129      	str	r1, [r5, #16]
 8006212:	07db      	lsls	r3, r3, #31
 8006214:	d5f1      	bpl.n	80061fa <_printf_float+0x1ca>
 8006216:	3101      	adds	r1, #1
 8006218:	6129      	str	r1, [r5, #16]
 800621a:	e7ee      	b.n	80061fa <_printf_float+0x1ca>
 800621c:	2201      	movs	r2, #1
 800621e:	2900      	cmp	r1, #0
 8006220:	dce0      	bgt.n	80061e4 <_printf_float+0x1b4>
 8006222:	1892      	adds	r2, r2, r2
 8006224:	1a52      	subs	r2, r2, r1
 8006226:	e7dd      	b.n	80061e4 <_printf_float+0x1b4>
 8006228:	682a      	ldr	r2, [r5, #0]
 800622a:	0553      	lsls	r3, r2, #21
 800622c:	d408      	bmi.n	8006240 <_printf_float+0x210>
 800622e:	692b      	ldr	r3, [r5, #16]
 8006230:	003a      	movs	r2, r7
 8006232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006234:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006236:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006238:	47a0      	blx	r4
 800623a:	3001      	adds	r0, #1
 800623c:	d129      	bne.n	8006292 <_printf_float+0x262>
 800623e:	e753      	b.n	80060e8 <_printf_float+0xb8>
 8006240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006242:	2b65      	cmp	r3, #101	@ 0x65
 8006244:	d800      	bhi.n	8006248 <_printf_float+0x218>
 8006246:	e0da      	b.n	80063fe <_printf_float+0x3ce>
 8006248:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800624a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	f7fa f8fa 	bl	8000448 <__aeabi_dcmpeq>
 8006254:	2800      	cmp	r0, #0
 8006256:	d033      	beq.n	80062c0 <_printf_float+0x290>
 8006258:	2301      	movs	r3, #1
 800625a:	4a37      	ldr	r2, [pc, #220]	@ (8006338 <_printf_float+0x308>)
 800625c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800625e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006260:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006262:	47a0      	blx	r4
 8006264:	3001      	adds	r0, #1
 8006266:	d100      	bne.n	800626a <_printf_float+0x23a>
 8006268:	e73e      	b.n	80060e8 <_printf_float+0xb8>
 800626a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800626c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800626e:	42b3      	cmp	r3, r6
 8006270:	db02      	blt.n	8006278 <_printf_float+0x248>
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	07db      	lsls	r3, r3, #31
 8006276:	d50c      	bpl.n	8006292 <_printf_float+0x262>
 8006278:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800627a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800627c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800627e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006280:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006282:	47a0      	blx	r4
 8006284:	2400      	movs	r4, #0
 8006286:	3001      	adds	r0, #1
 8006288:	d100      	bne.n	800628c <_printf_float+0x25c>
 800628a:	e72d      	b.n	80060e8 <_printf_float+0xb8>
 800628c:	1e73      	subs	r3, r6, #1
 800628e:	42a3      	cmp	r3, r4
 8006290:	dc0a      	bgt.n	80062a8 <_printf_float+0x278>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	079b      	lsls	r3, r3, #30
 8006296:	d500      	bpl.n	800629a <_printf_float+0x26a>
 8006298:	e105      	b.n	80064a6 <_printf_float+0x476>
 800629a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800629c:	68e8      	ldr	r0, [r5, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	db00      	blt.n	80062a4 <_printf_float+0x274>
 80062a2:	e723      	b.n	80060ec <_printf_float+0xbc>
 80062a4:	0018      	movs	r0, r3
 80062a6:	e721      	b.n	80060ec <_printf_float+0xbc>
 80062a8:	002a      	movs	r2, r5
 80062aa:	2301      	movs	r3, #1
 80062ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80062b2:	321a      	adds	r2, #26
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d100      	bne.n	80062bc <_printf_float+0x28c>
 80062ba:	e715      	b.n	80060e8 <_printf_float+0xb8>
 80062bc:	3401      	adds	r4, #1
 80062be:	e7e5      	b.n	800628c <_printf_float+0x25c>
 80062c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dc3a      	bgt.n	800633c <_printf_float+0x30c>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006338 <_printf_float+0x308>)
 80062ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062d0:	47a0      	blx	r4
 80062d2:	3001      	adds	r0, #1
 80062d4:	d100      	bne.n	80062d8 <_printf_float+0x2a8>
 80062d6:	e707      	b.n	80060e8 <_printf_float+0xb8>
 80062d8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80062da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062dc:	4333      	orrs	r3, r6
 80062de:	d102      	bne.n	80062e6 <_printf_float+0x2b6>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d5d5      	bpl.n	8006292 <_printf_float+0x262>
 80062e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062f0:	47a0      	blx	r4
 80062f2:	2300      	movs	r3, #0
 80062f4:	3001      	adds	r0, #1
 80062f6:	d100      	bne.n	80062fa <_printf_float+0x2ca>
 80062f8:	e6f6      	b.n	80060e8 <_printf_float+0xb8>
 80062fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80062fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006300:	425b      	negs	r3, r3
 8006302:	4293      	cmp	r3, r2
 8006304:	dc01      	bgt.n	800630a <_printf_float+0x2da>
 8006306:	0033      	movs	r3, r6
 8006308:	e792      	b.n	8006230 <_printf_float+0x200>
 800630a:	002a      	movs	r2, r5
 800630c:	2301      	movs	r3, #1
 800630e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006310:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006312:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006314:	321a      	adds	r2, #26
 8006316:	47a0      	blx	r4
 8006318:	3001      	adds	r0, #1
 800631a:	d100      	bne.n	800631e <_printf_float+0x2ee>
 800631c:	e6e4      	b.n	80060e8 <_printf_float+0xb8>
 800631e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006320:	3301      	adds	r3, #1
 8006322:	e7ea      	b.n	80062fa <_printf_float+0x2ca>
 8006324:	7fefffff 	.word	0x7fefffff
 8006328:	08008a84 	.word	0x08008a84
 800632c:	08008a88 	.word	0x08008a88
 8006330:	08008a8c 	.word	0x08008a8c
 8006334:	08008a90 	.word	0x08008a90
 8006338:	08008a94 	.word	0x08008a94
 800633c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800633e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006340:	930c      	str	r3, [sp, #48]	@ 0x30
 8006342:	429e      	cmp	r6, r3
 8006344:	dd00      	ble.n	8006348 <_printf_float+0x318>
 8006346:	001e      	movs	r6, r3
 8006348:	2e00      	cmp	r6, #0
 800634a:	dc31      	bgt.n	80063b0 <_printf_float+0x380>
 800634c:	43f3      	mvns	r3, r6
 800634e:	2400      	movs	r4, #0
 8006350:	17db      	asrs	r3, r3, #31
 8006352:	4033      	ands	r3, r6
 8006354:	930e      	str	r3, [sp, #56]	@ 0x38
 8006356:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635a:	1af3      	subs	r3, r6, r3
 800635c:	42a3      	cmp	r3, r4
 800635e:	dc30      	bgt.n	80063c2 <_printf_float+0x392>
 8006360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006362:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006364:	429a      	cmp	r2, r3
 8006366:	dc38      	bgt.n	80063da <_printf_float+0x3aa>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	07db      	lsls	r3, r3, #31
 800636c:	d435      	bmi.n	80063da <_printf_float+0x3aa>
 800636e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006372:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006374:	1b9b      	subs	r3, r3, r6
 8006376:	1b14      	subs	r4, r2, r4
 8006378:	429c      	cmp	r4, r3
 800637a:	dd00      	ble.n	800637e <_printf_float+0x34e>
 800637c:	001c      	movs	r4, r3
 800637e:	2c00      	cmp	r4, #0
 8006380:	dc34      	bgt.n	80063ec <_printf_float+0x3bc>
 8006382:	43e3      	mvns	r3, r4
 8006384:	2600      	movs	r6, #0
 8006386:	17db      	asrs	r3, r3, #31
 8006388:	401c      	ands	r4, r3
 800638a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800638c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	1b1b      	subs	r3, r3, r4
 8006392:	42b3      	cmp	r3, r6
 8006394:	dc00      	bgt.n	8006398 <_printf_float+0x368>
 8006396:	e77c      	b.n	8006292 <_printf_float+0x262>
 8006398:	002a      	movs	r2, r5
 800639a:	2301      	movs	r3, #1
 800639c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800639e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80063a2:	321a      	adds	r2, #26
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	d100      	bne.n	80063ac <_printf_float+0x37c>
 80063aa:	e69d      	b.n	80060e8 <_printf_float+0xb8>
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7ec      	b.n	800638a <_printf_float+0x35a>
 80063b0:	0033      	movs	r3, r6
 80063b2:	003a      	movs	r2, r7
 80063b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80063ba:	47a0      	blx	r4
 80063bc:	3001      	adds	r0, #1
 80063be:	d1c5      	bne.n	800634c <_printf_float+0x31c>
 80063c0:	e692      	b.n	80060e8 <_printf_float+0xb8>
 80063c2:	002a      	movs	r2, r5
 80063c4:	2301      	movs	r3, #1
 80063c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063ca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063cc:	321a      	adds	r2, #26
 80063ce:	47b0      	blx	r6
 80063d0:	3001      	adds	r0, #1
 80063d2:	d100      	bne.n	80063d6 <_printf_float+0x3a6>
 80063d4:	e688      	b.n	80060e8 <_printf_float+0xb8>
 80063d6:	3401      	adds	r4, #1
 80063d8:	e7bd      	b.n	8006356 <_printf_float+0x326>
 80063da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80063e4:	47a0      	blx	r4
 80063e6:	3001      	adds	r0, #1
 80063e8:	d1c1      	bne.n	800636e <_printf_float+0x33e>
 80063ea:	e67d      	b.n	80060e8 <_printf_float+0xb8>
 80063ec:	19ba      	adds	r2, r7, r6
 80063ee:	0023      	movs	r3, r4
 80063f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063f6:	47b0      	blx	r6
 80063f8:	3001      	adds	r0, #1
 80063fa:	d1c2      	bne.n	8006382 <_printf_float+0x352>
 80063fc:	e674      	b.n	80060e8 <_printf_float+0xb8>
 80063fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006400:	930c      	str	r3, [sp, #48]	@ 0x30
 8006402:	2b01      	cmp	r3, #1
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x3dc>
 8006406:	2301      	movs	r3, #1
 8006408:	421a      	tst	r2, r3
 800640a:	d039      	beq.n	8006480 <_printf_float+0x450>
 800640c:	2301      	movs	r3, #1
 800640e:	003a      	movs	r2, r7
 8006410:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006414:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006416:	47b0      	blx	r6
 8006418:	3001      	adds	r0, #1
 800641a:	d100      	bne.n	800641e <_printf_float+0x3ee>
 800641c:	e664      	b.n	80060e8 <_printf_float+0xb8>
 800641e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006424:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006426:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006428:	47b0      	blx	r6
 800642a:	3001      	adds	r0, #1
 800642c:	d100      	bne.n	8006430 <_printf_float+0x400>
 800642e:	e65b      	b.n	80060e8 <_printf_float+0xb8>
 8006430:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006432:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006436:	2200      	movs	r2, #0
 8006438:	3b01      	subs	r3, #1
 800643a:	930c      	str	r3, [sp, #48]	@ 0x30
 800643c:	2300      	movs	r3, #0
 800643e:	f7fa f803 	bl	8000448 <__aeabi_dcmpeq>
 8006442:	2800      	cmp	r0, #0
 8006444:	d11a      	bne.n	800647c <_printf_float+0x44c>
 8006446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006448:	1c7a      	adds	r2, r7, #1
 800644a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800644c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800644e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006450:	47b0      	blx	r6
 8006452:	3001      	adds	r0, #1
 8006454:	d10e      	bne.n	8006474 <_printf_float+0x444>
 8006456:	e647      	b.n	80060e8 <_printf_float+0xb8>
 8006458:	002a      	movs	r2, r5
 800645a:	2301      	movs	r3, #1
 800645c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800645e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006460:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006462:	321a      	adds	r2, #26
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	d100      	bne.n	800646c <_printf_float+0x43c>
 800646a:	e63d      	b.n	80060e8 <_printf_float+0xb8>
 800646c:	3601      	adds	r6, #1
 800646e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006470:	429e      	cmp	r6, r3
 8006472:	dbf1      	blt.n	8006458 <_printf_float+0x428>
 8006474:	002a      	movs	r2, r5
 8006476:	0023      	movs	r3, r4
 8006478:	3250      	adds	r2, #80	@ 0x50
 800647a:	e6da      	b.n	8006232 <_printf_float+0x202>
 800647c:	2600      	movs	r6, #0
 800647e:	e7f6      	b.n	800646e <_printf_float+0x43e>
 8006480:	003a      	movs	r2, r7
 8006482:	e7e2      	b.n	800644a <_printf_float+0x41a>
 8006484:	002a      	movs	r2, r5
 8006486:	2301      	movs	r3, #1
 8006488:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800648a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800648c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800648e:	3219      	adds	r2, #25
 8006490:	47b0      	blx	r6
 8006492:	3001      	adds	r0, #1
 8006494:	d100      	bne.n	8006498 <_printf_float+0x468>
 8006496:	e627      	b.n	80060e8 <_printf_float+0xb8>
 8006498:	3401      	adds	r4, #1
 800649a:	68eb      	ldr	r3, [r5, #12]
 800649c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	dcef      	bgt.n	8006484 <_printf_float+0x454>
 80064a4:	e6f9      	b.n	800629a <_printf_float+0x26a>
 80064a6:	2400      	movs	r4, #0
 80064a8:	e7f7      	b.n	800649a <_printf_float+0x46a>
 80064aa:	46c0      	nop			@ (mov r8, r8)

080064ac <_printf_common>:
 80064ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ae:	0016      	movs	r6, r2
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	688a      	ldr	r2, [r1, #8]
 80064b4:	690b      	ldr	r3, [r1, #16]
 80064b6:	000c      	movs	r4, r1
 80064b8:	9000      	str	r0, [sp, #0]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	da00      	bge.n	80064c0 <_printf_common+0x14>
 80064be:	0013      	movs	r3, r2
 80064c0:	0022      	movs	r2, r4
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	3243      	adds	r2, #67	@ 0x43
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d001      	beq.n	80064d0 <_printf_common+0x24>
 80064cc:	3301      	adds	r3, #1
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	069b      	lsls	r3, r3, #26
 80064d4:	d502      	bpl.n	80064dc <_printf_common+0x30>
 80064d6:	6833      	ldr	r3, [r6, #0]
 80064d8:	3302      	adds	r3, #2
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	2306      	movs	r3, #6
 80064e0:	0015      	movs	r5, r2
 80064e2:	401d      	ands	r5, r3
 80064e4:	421a      	tst	r2, r3
 80064e6:	d027      	beq.n	8006538 <_printf_common+0x8c>
 80064e8:	0023      	movs	r3, r4
 80064ea:	3343      	adds	r3, #67	@ 0x43
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	1e5a      	subs	r2, r3, #1
 80064f0:	4193      	sbcs	r3, r2
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	0692      	lsls	r2, r2, #26
 80064f6:	d430      	bmi.n	800655a <_printf_common+0xae>
 80064f8:	0022      	movs	r2, r4
 80064fa:	9901      	ldr	r1, [sp, #4]
 80064fc:	9800      	ldr	r0, [sp, #0]
 80064fe:	9d08      	ldr	r5, [sp, #32]
 8006500:	3243      	adds	r2, #67	@ 0x43
 8006502:	47a8      	blx	r5
 8006504:	3001      	adds	r0, #1
 8006506:	d025      	beq.n	8006554 <_printf_common+0xa8>
 8006508:	2206      	movs	r2, #6
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	2500      	movs	r5, #0
 800650e:	4013      	ands	r3, r2
 8006510:	2b04      	cmp	r3, #4
 8006512:	d105      	bne.n	8006520 <_printf_common+0x74>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	68e5      	ldr	r5, [r4, #12]
 8006518:	1aed      	subs	r5, r5, r3
 800651a:	43eb      	mvns	r3, r5
 800651c:	17db      	asrs	r3, r3, #31
 800651e:	401d      	ands	r5, r3
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	6922      	ldr	r2, [r4, #16]
 8006524:	4293      	cmp	r3, r2
 8006526:	dd01      	ble.n	800652c <_printf_common+0x80>
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	18ed      	adds	r5, r5, r3
 800652c:	2600      	movs	r6, #0
 800652e:	42b5      	cmp	r5, r6
 8006530:	d120      	bne.n	8006574 <_printf_common+0xc8>
 8006532:	2000      	movs	r0, #0
 8006534:	e010      	b.n	8006558 <_printf_common+0xac>
 8006536:	3501      	adds	r5, #1
 8006538:	68e3      	ldr	r3, [r4, #12]
 800653a:	6832      	ldr	r2, [r6, #0]
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	42ab      	cmp	r3, r5
 8006540:	ddd2      	ble.n	80064e8 <_printf_common+0x3c>
 8006542:	0022      	movs	r2, r4
 8006544:	2301      	movs	r3, #1
 8006546:	9901      	ldr	r1, [sp, #4]
 8006548:	9800      	ldr	r0, [sp, #0]
 800654a:	9f08      	ldr	r7, [sp, #32]
 800654c:	3219      	adds	r2, #25
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	d1f0      	bne.n	8006536 <_printf_common+0x8a>
 8006554:	2001      	movs	r0, #1
 8006556:	4240      	negs	r0, r0
 8006558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800655a:	2030      	movs	r0, #48	@ 0x30
 800655c:	18e1      	adds	r1, r4, r3
 800655e:	3143      	adds	r1, #67	@ 0x43
 8006560:	7008      	strb	r0, [r1, #0]
 8006562:	0021      	movs	r1, r4
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	3145      	adds	r1, #69	@ 0x45
 8006568:	7809      	ldrb	r1, [r1, #0]
 800656a:	18a2      	adds	r2, r4, r2
 800656c:	3243      	adds	r2, #67	@ 0x43
 800656e:	3302      	adds	r3, #2
 8006570:	7011      	strb	r1, [r2, #0]
 8006572:	e7c1      	b.n	80064f8 <_printf_common+0x4c>
 8006574:	0022      	movs	r2, r4
 8006576:	2301      	movs	r3, #1
 8006578:	9901      	ldr	r1, [sp, #4]
 800657a:	9800      	ldr	r0, [sp, #0]
 800657c:	9f08      	ldr	r7, [sp, #32]
 800657e:	321a      	adds	r2, #26
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	d0e6      	beq.n	8006554 <_printf_common+0xa8>
 8006586:	3601      	adds	r6, #1
 8006588:	e7d1      	b.n	800652e <_printf_common+0x82>
	...

0800658c <_printf_i>:
 800658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658e:	b08b      	sub	sp, #44	@ 0x2c
 8006590:	9206      	str	r2, [sp, #24]
 8006592:	000a      	movs	r2, r1
 8006594:	3243      	adds	r2, #67	@ 0x43
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	9005      	str	r0, [sp, #20]
 800659a:	9203      	str	r2, [sp, #12]
 800659c:	7e0a      	ldrb	r2, [r1, #24]
 800659e:	000c      	movs	r4, r1
 80065a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065a2:	2a78      	cmp	r2, #120	@ 0x78
 80065a4:	d809      	bhi.n	80065ba <_printf_i+0x2e>
 80065a6:	2a62      	cmp	r2, #98	@ 0x62
 80065a8:	d80b      	bhi.n	80065c2 <_printf_i+0x36>
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d100      	bne.n	80065b0 <_printf_i+0x24>
 80065ae:	e0bc      	b.n	800672a <_printf_i+0x19e>
 80065b0:	497b      	ldr	r1, [pc, #492]	@ (80067a0 <_printf_i+0x214>)
 80065b2:	9104      	str	r1, [sp, #16]
 80065b4:	2a58      	cmp	r2, #88	@ 0x58
 80065b6:	d100      	bne.n	80065ba <_printf_i+0x2e>
 80065b8:	e090      	b.n	80066dc <_printf_i+0x150>
 80065ba:	0025      	movs	r5, r4
 80065bc:	3542      	adds	r5, #66	@ 0x42
 80065be:	702a      	strb	r2, [r5, #0]
 80065c0:	e022      	b.n	8006608 <_printf_i+0x7c>
 80065c2:	0010      	movs	r0, r2
 80065c4:	3863      	subs	r0, #99	@ 0x63
 80065c6:	2815      	cmp	r0, #21
 80065c8:	d8f7      	bhi.n	80065ba <_printf_i+0x2e>
 80065ca:	f7f9 fdad 	bl	8000128 <__gnu_thumb1_case_shi>
 80065ce:	0016      	.short	0x0016
 80065d0:	fff6001f 	.word	0xfff6001f
 80065d4:	fff6fff6 	.word	0xfff6fff6
 80065d8:	001ffff6 	.word	0x001ffff6
 80065dc:	fff6fff6 	.word	0xfff6fff6
 80065e0:	fff6fff6 	.word	0xfff6fff6
 80065e4:	003600a1 	.word	0x003600a1
 80065e8:	fff60080 	.word	0xfff60080
 80065ec:	00b2fff6 	.word	0x00b2fff6
 80065f0:	0036fff6 	.word	0x0036fff6
 80065f4:	fff6fff6 	.word	0xfff6fff6
 80065f8:	0084      	.short	0x0084
 80065fa:	0025      	movs	r5, r4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	3542      	adds	r5, #66	@ 0x42
 8006600:	1d11      	adds	r1, r2, #4
 8006602:	6019      	str	r1, [r3, #0]
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	702b      	strb	r3, [r5, #0]
 8006608:	2301      	movs	r3, #1
 800660a:	e0a0      	b.n	800674e <_printf_i+0x1c2>
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	6809      	ldr	r1, [r1, #0]
 8006610:	1d02      	adds	r2, r0, #4
 8006612:	060d      	lsls	r5, r1, #24
 8006614:	d50b      	bpl.n	800662e <_printf_i+0xa2>
 8006616:	6806      	ldr	r6, [r0, #0]
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	2e00      	cmp	r6, #0
 800661c:	da03      	bge.n	8006626 <_printf_i+0x9a>
 800661e:	232d      	movs	r3, #45	@ 0x2d
 8006620:	9a03      	ldr	r2, [sp, #12]
 8006622:	4276      	negs	r6, r6
 8006624:	7013      	strb	r3, [r2, #0]
 8006626:	4b5e      	ldr	r3, [pc, #376]	@ (80067a0 <_printf_i+0x214>)
 8006628:	270a      	movs	r7, #10
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	e018      	b.n	8006660 <_printf_i+0xd4>
 800662e:	6806      	ldr	r6, [r0, #0]
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	0649      	lsls	r1, r1, #25
 8006634:	d5f1      	bpl.n	800661a <_printf_i+0x8e>
 8006636:	b236      	sxth	r6, r6
 8006638:	e7ef      	b.n	800661a <_printf_i+0x8e>
 800663a:	6808      	ldr	r0, [r1, #0]
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	c940      	ldmia	r1!, {r6}
 8006640:	0605      	lsls	r5, r0, #24
 8006642:	d402      	bmi.n	800664a <_printf_i+0xbe>
 8006644:	0640      	lsls	r0, r0, #25
 8006646:	d500      	bpl.n	800664a <_printf_i+0xbe>
 8006648:	b2b6      	uxth	r6, r6
 800664a:	6019      	str	r1, [r3, #0]
 800664c:	4b54      	ldr	r3, [pc, #336]	@ (80067a0 <_printf_i+0x214>)
 800664e:	270a      	movs	r7, #10
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	2a6f      	cmp	r2, #111	@ 0x6f
 8006654:	d100      	bne.n	8006658 <_printf_i+0xcc>
 8006656:	3f02      	subs	r7, #2
 8006658:	0023      	movs	r3, r4
 800665a:	2200      	movs	r2, #0
 800665c:	3343      	adds	r3, #67	@ 0x43
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	60a3      	str	r3, [r4, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	db03      	blt.n	8006670 <_printf_i+0xe4>
 8006668:	2104      	movs	r1, #4
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	438a      	bics	r2, r1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	2e00      	cmp	r6, #0
 8006672:	d102      	bne.n	800667a <_printf_i+0xee>
 8006674:	9d03      	ldr	r5, [sp, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <_printf_i+0x108>
 800667a:	9d03      	ldr	r5, [sp, #12]
 800667c:	0030      	movs	r0, r6
 800667e:	0039      	movs	r1, r7
 8006680:	f7f9 fde2 	bl	8000248 <__aeabi_uidivmod>
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	3d01      	subs	r5, #1
 8006688:	5c5b      	ldrb	r3, [r3, r1]
 800668a:	702b      	strb	r3, [r5, #0]
 800668c:	0033      	movs	r3, r6
 800668e:	0006      	movs	r6, r0
 8006690:	429f      	cmp	r7, r3
 8006692:	d9f3      	bls.n	800667c <_printf_i+0xf0>
 8006694:	2f08      	cmp	r7, #8
 8006696:	d109      	bne.n	80066ac <_printf_i+0x120>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07db      	lsls	r3, r3, #31
 800669c:	d506      	bpl.n	80066ac <_printf_i+0x120>
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	dc02      	bgt.n	80066ac <_printf_i+0x120>
 80066a6:	2330      	movs	r3, #48	@ 0x30
 80066a8:	3d01      	subs	r5, #1
 80066aa:	702b      	strb	r3, [r5, #0]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	1b5b      	subs	r3, r3, r5
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	0021      	movs	r1, r4
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	9805      	ldr	r0, [sp, #20]
 80066ba:	9b06      	ldr	r3, [sp, #24]
 80066bc:	aa09      	add	r2, sp, #36	@ 0x24
 80066be:	f7ff fef5 	bl	80064ac <_printf_common>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d148      	bne.n	8006758 <_printf_i+0x1cc>
 80066c6:	2001      	movs	r0, #1
 80066c8:	4240      	negs	r0, r0
 80066ca:	b00b      	add	sp, #44	@ 0x2c
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	2220      	movs	r2, #32
 80066d0:	6809      	ldr	r1, [r1, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	6022      	str	r2, [r4, #0]
 80066d6:	2278      	movs	r2, #120	@ 0x78
 80066d8:	4932      	ldr	r1, [pc, #200]	@ (80067a4 <_printf_i+0x218>)
 80066da:	9104      	str	r1, [sp, #16]
 80066dc:	0021      	movs	r1, r4
 80066de:	3145      	adds	r1, #69	@ 0x45
 80066e0:	700a      	strb	r2, [r1, #0]
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	c940      	ldmia	r1!, {r6}
 80066e8:	0610      	lsls	r0, r2, #24
 80066ea:	d402      	bmi.n	80066f2 <_printf_i+0x166>
 80066ec:	0650      	lsls	r0, r2, #25
 80066ee:	d500      	bpl.n	80066f2 <_printf_i+0x166>
 80066f0:	b2b6      	uxth	r6, r6
 80066f2:	6019      	str	r1, [r3, #0]
 80066f4:	07d3      	lsls	r3, r2, #31
 80066f6:	d502      	bpl.n	80066fe <_printf_i+0x172>
 80066f8:	2320      	movs	r3, #32
 80066fa:	4313      	orrs	r3, r2
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	2e00      	cmp	r6, #0
 8006700:	d001      	beq.n	8006706 <_printf_i+0x17a>
 8006702:	2710      	movs	r7, #16
 8006704:	e7a8      	b.n	8006658 <_printf_i+0xcc>
 8006706:	2220      	movs	r2, #32
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	4393      	bics	r3, r2
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	e7f8      	b.n	8006702 <_printf_i+0x176>
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	680d      	ldr	r5, [r1, #0]
 8006714:	1d10      	adds	r0, r2, #4
 8006716:	6949      	ldr	r1, [r1, #20]
 8006718:	6018      	str	r0, [r3, #0]
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	062e      	lsls	r6, r5, #24
 800671e:	d501      	bpl.n	8006724 <_printf_i+0x198>
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	e002      	b.n	800672a <_printf_i+0x19e>
 8006724:	066d      	lsls	r5, r5, #25
 8006726:	d5fb      	bpl.n	8006720 <_printf_i+0x194>
 8006728:	8019      	strh	r1, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	9d03      	ldr	r5, [sp, #12]
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	e7bf      	b.n	80066b2 <_printf_i+0x126>
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	1d11      	adds	r1, r2, #4
 8006736:	6019      	str	r1, [r3, #0]
 8006738:	6815      	ldr	r5, [r2, #0]
 800673a:	2100      	movs	r1, #0
 800673c:	0028      	movs	r0, r5
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	f000 f9c9 	bl	8006ad6 <memchr>
 8006744:	2800      	cmp	r0, #0
 8006746:	d001      	beq.n	800674c <_printf_i+0x1c0>
 8006748:	1b40      	subs	r0, r0, r5
 800674a:	6060      	str	r0, [r4, #4]
 800674c:	6863      	ldr	r3, [r4, #4]
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	2300      	movs	r3, #0
 8006752:	9a03      	ldr	r2, [sp, #12]
 8006754:	7013      	strb	r3, [r2, #0]
 8006756:	e7ac      	b.n	80066b2 <_printf_i+0x126>
 8006758:	002a      	movs	r2, r5
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	9906      	ldr	r1, [sp, #24]
 800675e:	9805      	ldr	r0, [sp, #20]
 8006760:	9d07      	ldr	r5, [sp, #28]
 8006762:	47a8      	blx	r5
 8006764:	3001      	adds	r0, #1
 8006766:	d0ae      	beq.n	80066c6 <_printf_i+0x13a>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	d415      	bmi.n	800679a <_printf_i+0x20e>
 800676e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006770:	68e0      	ldr	r0, [r4, #12]
 8006772:	4298      	cmp	r0, r3
 8006774:	daa9      	bge.n	80066ca <_printf_i+0x13e>
 8006776:	0018      	movs	r0, r3
 8006778:	e7a7      	b.n	80066ca <_printf_i+0x13e>
 800677a:	0022      	movs	r2, r4
 800677c:	2301      	movs	r3, #1
 800677e:	9906      	ldr	r1, [sp, #24]
 8006780:	9805      	ldr	r0, [sp, #20]
 8006782:	9e07      	ldr	r6, [sp, #28]
 8006784:	3219      	adds	r2, #25
 8006786:	47b0      	blx	r6
 8006788:	3001      	adds	r0, #1
 800678a:	d09c      	beq.n	80066c6 <_printf_i+0x13a>
 800678c:	3501      	adds	r5, #1
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	42ab      	cmp	r3, r5
 8006796:	dcf0      	bgt.n	800677a <_printf_i+0x1ee>
 8006798:	e7e9      	b.n	800676e <_printf_i+0x1e2>
 800679a:	2500      	movs	r5, #0
 800679c:	e7f7      	b.n	800678e <_printf_i+0x202>
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	08008a96 	.word	0x08008a96
 80067a4:	08008aa7 	.word	0x08008aa7

080067a8 <std>:
 80067a8:	2300      	movs	r3, #0
 80067aa:	b510      	push	{r4, lr}
 80067ac:	0004      	movs	r4, r0
 80067ae:	6003      	str	r3, [r0, #0]
 80067b0:	6043      	str	r3, [r0, #4]
 80067b2:	6083      	str	r3, [r0, #8]
 80067b4:	8181      	strh	r1, [r0, #12]
 80067b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067b8:	81c2      	strh	r2, [r0, #14]
 80067ba:	6103      	str	r3, [r0, #16]
 80067bc:	6143      	str	r3, [r0, #20]
 80067be:	6183      	str	r3, [r0, #24]
 80067c0:	0019      	movs	r1, r3
 80067c2:	2208      	movs	r2, #8
 80067c4:	305c      	adds	r0, #92	@ 0x5c
 80067c6:	f000 f8ff 	bl	80069c8 <memset>
 80067ca:	4b0b      	ldr	r3, [pc, #44]	@ (80067f8 <std+0x50>)
 80067cc:	6224      	str	r4, [r4, #32]
 80067ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80067d0:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <std+0x54>)
 80067d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <std+0x58>)
 80067d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <std+0x5c>)
 80067da:	6323      	str	r3, [r4, #48]	@ 0x30
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <std+0x60>)
 80067de:	429c      	cmp	r4, r3
 80067e0:	d005      	beq.n	80067ee <std+0x46>
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <std+0x64>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	d002      	beq.n	80067ee <std+0x46>
 80067e8:	4b09      	ldr	r3, [pc, #36]	@ (8006810 <std+0x68>)
 80067ea:	429c      	cmp	r4, r3
 80067ec:	d103      	bne.n	80067f6 <std+0x4e>
 80067ee:	0020      	movs	r0, r4
 80067f0:	3058      	adds	r0, #88	@ 0x58
 80067f2:	f000 f96d 	bl	8006ad0 <__retarget_lock_init_recursive>
 80067f6:	bd10      	pop	{r4, pc}
 80067f8:	08006931 	.word	0x08006931
 80067fc:	08006959 	.word	0x08006959
 8006800:	08006991 	.word	0x08006991
 8006804:	080069bd 	.word	0x080069bd
 8006808:	200003a0 	.word	0x200003a0
 800680c:	20000408 	.word	0x20000408
 8006810:	20000470 	.word	0x20000470

08006814 <stdio_exit_handler>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4a03      	ldr	r2, [pc, #12]	@ (8006824 <stdio_exit_handler+0x10>)
 8006818:	4903      	ldr	r1, [pc, #12]	@ (8006828 <stdio_exit_handler+0x14>)
 800681a:	4804      	ldr	r0, [pc, #16]	@ (800682c <stdio_exit_handler+0x18>)
 800681c:	f000 f86c 	bl	80068f8 <_fwalk_sglue>
 8006820:	bd10      	pop	{r4, pc}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	20000024 	.word	0x20000024
 8006828:	08008251 	.word	0x08008251
 800682c:	20000034 	.word	0x20000034

08006830 <cleanup_stdio>:
 8006830:	6841      	ldr	r1, [r0, #4]
 8006832:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <cleanup_stdio+0x30>)
 8006834:	b510      	push	{r4, lr}
 8006836:	0004      	movs	r4, r0
 8006838:	4299      	cmp	r1, r3
 800683a:	d001      	beq.n	8006840 <cleanup_stdio+0x10>
 800683c:	f001 fd08 	bl	8008250 <_fflush_r>
 8006840:	68a1      	ldr	r1, [r4, #8]
 8006842:	4b08      	ldr	r3, [pc, #32]	@ (8006864 <cleanup_stdio+0x34>)
 8006844:	4299      	cmp	r1, r3
 8006846:	d002      	beq.n	800684e <cleanup_stdio+0x1e>
 8006848:	0020      	movs	r0, r4
 800684a:	f001 fd01 	bl	8008250 <_fflush_r>
 800684e:	68e1      	ldr	r1, [r4, #12]
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <cleanup_stdio+0x38>)
 8006852:	4299      	cmp	r1, r3
 8006854:	d002      	beq.n	800685c <cleanup_stdio+0x2c>
 8006856:	0020      	movs	r0, r4
 8006858:	f001 fcfa 	bl	8008250 <_fflush_r>
 800685c:	bd10      	pop	{r4, pc}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	200003a0 	.word	0x200003a0
 8006864:	20000408 	.word	0x20000408
 8006868:	20000470 	.word	0x20000470

0800686c <global_stdio_init.part.0>:
 800686c:	b510      	push	{r4, lr}
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <global_stdio_init.part.0+0x28>)
 8006870:	4a09      	ldr	r2, [pc, #36]	@ (8006898 <global_stdio_init.part.0+0x2c>)
 8006872:	2104      	movs	r1, #4
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	4809      	ldr	r0, [pc, #36]	@ (800689c <global_stdio_init.part.0+0x30>)
 8006878:	2200      	movs	r2, #0
 800687a:	f7ff ff95 	bl	80067a8 <std>
 800687e:	2201      	movs	r2, #1
 8006880:	2109      	movs	r1, #9
 8006882:	4807      	ldr	r0, [pc, #28]	@ (80068a0 <global_stdio_init.part.0+0x34>)
 8006884:	f7ff ff90 	bl	80067a8 <std>
 8006888:	2202      	movs	r2, #2
 800688a:	2112      	movs	r1, #18
 800688c:	4805      	ldr	r0, [pc, #20]	@ (80068a4 <global_stdio_init.part.0+0x38>)
 800688e:	f7ff ff8b 	bl	80067a8 <std>
 8006892:	bd10      	pop	{r4, pc}
 8006894:	200004d8 	.word	0x200004d8
 8006898:	08006815 	.word	0x08006815
 800689c:	200003a0 	.word	0x200003a0
 80068a0:	20000408 	.word	0x20000408
 80068a4:	20000470 	.word	0x20000470

080068a8 <__sfp_lock_acquire>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	4802      	ldr	r0, [pc, #8]	@ (80068b4 <__sfp_lock_acquire+0xc>)
 80068ac:	f000 f911 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	200004e1 	.word	0x200004e1

080068b8 <__sfp_lock_release>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4802      	ldr	r0, [pc, #8]	@ (80068c4 <__sfp_lock_release+0xc>)
 80068bc:	f000 f90a 	bl	8006ad4 <__retarget_lock_release_recursive>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	46c0      	nop			@ (mov r8, r8)
 80068c4:	200004e1 	.word	0x200004e1

080068c8 <__sinit>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	0004      	movs	r4, r0
 80068cc:	f7ff ffec 	bl	80068a8 <__sfp_lock_acquire>
 80068d0:	6a23      	ldr	r3, [r4, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <__sinit+0x14>
 80068d6:	f7ff ffef 	bl	80068b8 <__sfp_lock_release>
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <__sinit+0x28>)
 80068de:	6223      	str	r3, [r4, #32]
 80068e0:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <__sinit+0x2c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f6      	bne.n	80068d6 <__sinit+0xe>
 80068e8:	f7ff ffc0 	bl	800686c <global_stdio_init.part.0>
 80068ec:	e7f3      	b.n	80068d6 <__sinit+0xe>
 80068ee:	46c0      	nop			@ (mov r8, r8)
 80068f0:	08006831 	.word	0x08006831
 80068f4:	200004d8 	.word	0x200004d8

080068f8 <_fwalk_sglue>:
 80068f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068fa:	0014      	movs	r4, r2
 80068fc:	2600      	movs	r6, #0
 80068fe:	9000      	str	r0, [sp, #0]
 8006900:	9101      	str	r1, [sp, #4]
 8006902:	68a5      	ldr	r5, [r4, #8]
 8006904:	6867      	ldr	r7, [r4, #4]
 8006906:	3f01      	subs	r7, #1
 8006908:	d504      	bpl.n	8006914 <_fwalk_sglue+0x1c>
 800690a:	6824      	ldr	r4, [r4, #0]
 800690c:	2c00      	cmp	r4, #0
 800690e:	d1f8      	bne.n	8006902 <_fwalk_sglue+0xa>
 8006910:	0030      	movs	r0, r6
 8006912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006914:	89ab      	ldrh	r3, [r5, #12]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d908      	bls.n	800692c <_fwalk_sglue+0x34>
 800691a:	220e      	movs	r2, #14
 800691c:	5eab      	ldrsh	r3, [r5, r2]
 800691e:	3301      	adds	r3, #1
 8006920:	d004      	beq.n	800692c <_fwalk_sglue+0x34>
 8006922:	0029      	movs	r1, r5
 8006924:	9800      	ldr	r0, [sp, #0]
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	4798      	blx	r3
 800692a:	4306      	orrs	r6, r0
 800692c:	3568      	adds	r5, #104	@ 0x68
 800692e:	e7ea      	b.n	8006906 <_fwalk_sglue+0xe>

08006930 <__sread>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	000c      	movs	r4, r1
 8006934:	250e      	movs	r5, #14
 8006936:	5f49      	ldrsh	r1, [r1, r5]
 8006938:	f000 f878 	bl	8006a2c <_read_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	db03      	blt.n	8006948 <__sread+0x18>
 8006940:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006942:	181b      	adds	r3, r3, r0
 8006944:	6563      	str	r3, [r4, #84]	@ 0x54
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	4a02      	ldr	r2, [pc, #8]	@ (8006954 <__sread+0x24>)
 800694c:	4013      	ands	r3, r2
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	e7f9      	b.n	8006946 <__sread+0x16>
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	ffffefff 	.word	0xffffefff

08006958 <__swrite>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	001f      	movs	r7, r3
 800695c:	898b      	ldrh	r3, [r1, #12]
 800695e:	0005      	movs	r5, r0
 8006960:	000c      	movs	r4, r1
 8006962:	0016      	movs	r6, r2
 8006964:	05db      	lsls	r3, r3, #23
 8006966:	d505      	bpl.n	8006974 <__swrite+0x1c>
 8006968:	230e      	movs	r3, #14
 800696a:	5ec9      	ldrsh	r1, [r1, r3]
 800696c:	2200      	movs	r2, #0
 800696e:	2302      	movs	r3, #2
 8006970:	f000 f848 	bl	8006a04 <_lseek_r>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	4a05      	ldr	r2, [pc, #20]	@ (800698c <__swrite+0x34>)
 8006978:	0028      	movs	r0, r5
 800697a:	4013      	ands	r3, r2
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	0032      	movs	r2, r6
 8006980:	230e      	movs	r3, #14
 8006982:	5ee1      	ldrsh	r1, [r4, r3]
 8006984:	003b      	movs	r3, r7
 8006986:	f000 f865 	bl	8006a54 <_write_r>
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	ffffefff 	.word	0xffffefff

08006990 <__sseek>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	000c      	movs	r4, r1
 8006994:	250e      	movs	r5, #14
 8006996:	5f49      	ldrsh	r1, [r1, r5]
 8006998:	f000 f834 	bl	8006a04 <_lseek_r>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	1c42      	adds	r2, r0, #1
 80069a0:	d103      	bne.n	80069aa <__sseek+0x1a>
 80069a2:	4a05      	ldr	r2, [pc, #20]	@ (80069b8 <__sseek+0x28>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	2280      	movs	r2, #128	@ 0x80
 80069ac:	0152      	lsls	r2, r2, #5
 80069ae:	4313      	orrs	r3, r2
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80069b4:	e7f8      	b.n	80069a8 <__sseek+0x18>
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	ffffefff 	.word	0xffffefff

080069bc <__sclose>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	230e      	movs	r3, #14
 80069c0:	5ec9      	ldrsh	r1, [r1, r3]
 80069c2:	f000 f80d 	bl	80069e0 <_close_r>
 80069c6:	bd10      	pop	{r4, pc}

080069c8 <memset>:
 80069c8:	0003      	movs	r3, r0
 80069ca:	1882      	adds	r2, r0, r2
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	7019      	strb	r1, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <_localeconv_r>:
 80069d8:	4800      	ldr	r0, [pc, #0]	@ (80069dc <_localeconv_r+0x4>)
 80069da:	4770      	bx	lr
 80069dc:	20000170 	.word	0x20000170

080069e0 <_close_r>:
 80069e0:	2300      	movs	r3, #0
 80069e2:	b570      	push	{r4, r5, r6, lr}
 80069e4:	4d06      	ldr	r5, [pc, #24]	@ (8006a00 <_close_r+0x20>)
 80069e6:	0004      	movs	r4, r0
 80069e8:	0008      	movs	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fc fa56 	bl	8002e9c <_close>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d103      	bne.n	80069fc <_close_r+0x1c>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d000      	beq.n	80069fc <_close_r+0x1c>
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	200004dc 	.word	0x200004dc

08006a04 <_lseek_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	0004      	movs	r4, r0
 8006a08:	0008      	movs	r0, r1
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	001a      	movs	r2, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4d05      	ldr	r5, [pc, #20]	@ (8006a28 <_lseek_r+0x24>)
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	f7fc fa63 	bl	8002ede <_lseek>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d103      	bne.n	8006a24 <_lseek_r+0x20>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d000      	beq.n	8006a24 <_lseek_r+0x20>
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	bd70      	pop	{r4, r5, r6, pc}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	200004dc 	.word	0x200004dc

08006a2c <_read_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	0004      	movs	r4, r0
 8006a30:	0008      	movs	r0, r1
 8006a32:	0011      	movs	r1, r2
 8006a34:	001a      	movs	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	4d05      	ldr	r5, [pc, #20]	@ (8006a50 <_read_r+0x24>)
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	f7fc f9f5 	bl	8002e2a <_read>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d103      	bne.n	8006a4c <_read_r+0x20>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d000      	beq.n	8006a4c <_read_r+0x20>
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	46c0      	nop			@ (mov r8, r8)
 8006a50:	200004dc 	.word	0x200004dc

08006a54 <_write_r>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	0004      	movs	r4, r0
 8006a58:	0008      	movs	r0, r1
 8006a5a:	0011      	movs	r1, r2
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4d05      	ldr	r5, [pc, #20]	@ (8006a78 <_write_r+0x24>)
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fc f9fe 	bl	8002e64 <_write>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_write_r+0x20>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d000      	beq.n	8006a74 <_write_r+0x20>
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	200004dc 	.word	0x200004dc

08006a7c <__errno>:
 8006a7c:	4b01      	ldr	r3, [pc, #4]	@ (8006a84 <__errno+0x8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	4770      	bx	lr
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	20000030 	.word	0x20000030

08006a88 <__libc_init_array>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac0 <__libc_init_array+0x38>)
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac4 <__libc_init_array+0x3c>)
 8006a90:	1b64      	subs	r4, r4, r5
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	d109      	bne.n	8006aac <__libc_init_array+0x24>
 8006a98:	2600      	movs	r6, #0
 8006a9a:	f001 ff5f 	bl	800895c <_init>
 8006a9e:	4c0a      	ldr	r4, [pc, #40]	@ (8006ac8 <__libc_init_array+0x40>)
 8006aa0:	4d0a      	ldr	r5, [pc, #40]	@ (8006acc <__libc_init_array+0x44>)
 8006aa2:	1b64      	subs	r4, r4, r5
 8006aa4:	10a4      	asrs	r4, r4, #2
 8006aa6:	42a6      	cmp	r6, r4
 8006aa8:	d105      	bne.n	8006ab6 <__libc_init_array+0x2e>
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	00b3      	lsls	r3, r6, #2
 8006aae:	58eb      	ldr	r3, [r5, r3]
 8006ab0:	4798      	blx	r3
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7ee      	b.n	8006a94 <__libc_init_array+0xc>
 8006ab6:	00b3      	lsls	r3, r6, #2
 8006ab8:	58eb      	ldr	r3, [r5, r3]
 8006aba:	4798      	blx	r3
 8006abc:	3601      	adds	r6, #1
 8006abe:	e7f2      	b.n	8006aa6 <__libc_init_array+0x1e>
 8006ac0:	08008e00 	.word	0x08008e00
 8006ac4:	08008e00 	.word	0x08008e00
 8006ac8:	08008e04 	.word	0x08008e04
 8006acc:	08008e00 	.word	0x08008e00

08006ad0 <__retarget_lock_init_recursive>:
 8006ad0:	4770      	bx	lr

08006ad2 <__retarget_lock_acquire_recursive>:
 8006ad2:	4770      	bx	lr

08006ad4 <__retarget_lock_release_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <memchr>:
 8006ad6:	b2c9      	uxtb	r1, r1
 8006ad8:	1882      	adds	r2, r0, r2
 8006ada:	4290      	cmp	r0, r2
 8006adc:	d101      	bne.n	8006ae2 <memchr+0xc>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4770      	bx	lr
 8006ae2:	7803      	ldrb	r3, [r0, #0]
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d0fb      	beq.n	8006ae0 <memchr+0xa>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	e7f6      	b.n	8006ada <memchr+0x4>

08006aec <quorem>:
 8006aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aee:	6902      	ldr	r2, [r0, #16]
 8006af0:	690f      	ldr	r7, [r1, #16]
 8006af2:	b087      	sub	sp, #28
 8006af4:	0006      	movs	r6, r0
 8006af6:	000b      	movs	r3, r1
 8006af8:	2000      	movs	r0, #0
 8006afa:	9102      	str	r1, [sp, #8]
 8006afc:	42ba      	cmp	r2, r7
 8006afe:	db6d      	blt.n	8006bdc <quorem+0xf0>
 8006b00:	3f01      	subs	r7, #1
 8006b02:	00bc      	lsls	r4, r7, #2
 8006b04:	3314      	adds	r3, #20
 8006b06:	9305      	str	r3, [sp, #20]
 8006b08:	191b      	adds	r3, r3, r4
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	0033      	movs	r3, r6
 8006b0e:	3314      	adds	r3, #20
 8006b10:	191c      	adds	r4, r3, r4
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	9804      	ldr	r0, [sp, #16]
 8006b1c:	681d      	ldr	r5, [r3, #0]
 8006b1e:	3501      	adds	r5, #1
 8006b20:	0029      	movs	r1, r5
 8006b22:	f7f9 fb0b 	bl	800013c <__udivsi3>
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	9000      	str	r0, [sp, #0]
 8006b2a:	42ab      	cmp	r3, r5
 8006b2c:	d32b      	bcc.n	8006b86 <quorem+0x9a>
 8006b2e:	9b05      	ldr	r3, [sp, #20]
 8006b30:	9d01      	ldr	r5, [sp, #4]
 8006b32:	469c      	mov	ip, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	9305      	str	r3, [sp, #20]
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	4662      	mov	r2, ip
 8006b3c:	ca08      	ldmia	r2!, {r3}
 8006b3e:	6828      	ldr	r0, [r5, #0]
 8006b40:	4694      	mov	ip, r2
 8006b42:	9a00      	ldr	r2, [sp, #0]
 8006b44:	b299      	uxth	r1, r3
 8006b46:	4351      	muls	r1, r2
 8006b48:	9a05      	ldr	r2, [sp, #20]
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	1889      	adds	r1, r1, r2
 8006b4e:	9a00      	ldr	r2, [sp, #0]
 8006b50:	4353      	muls	r3, r2
 8006b52:	0c0a      	lsrs	r2, r1, #16
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	0c1a      	lsrs	r2, r3, #16
 8006b58:	b289      	uxth	r1, r1
 8006b5a:	9205      	str	r2, [sp, #20]
 8006b5c:	b282      	uxth	r2, r0
 8006b5e:	1a52      	subs	r2, r2, r1
 8006b60:	9904      	ldr	r1, [sp, #16]
 8006b62:	0c00      	lsrs	r0, r0, #16
 8006b64:	1852      	adds	r2, r2, r1
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	1411      	asrs	r1, r2, #16
 8006b6a:	1ac3      	subs	r3, r0, r3
 8006b6c:	185b      	adds	r3, r3, r1
 8006b6e:	1419      	asrs	r1, r3, #16
 8006b70:	b292      	uxth	r2, r2
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	431a      	orrs	r2, r3
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	9104      	str	r1, [sp, #16]
 8006b7a:	c504      	stmia	r5!, {r2}
 8006b7c:	4563      	cmp	r3, ip
 8006b7e:	d2dc      	bcs.n	8006b3a <quorem+0x4e>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d030      	beq.n	8006be8 <quorem+0xfc>
 8006b86:	0030      	movs	r0, r6
 8006b88:	9902      	ldr	r1, [sp, #8]
 8006b8a:	f001 f9c5 	bl	8007f18 <__mcmp>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	db23      	blt.n	8006bda <quorem+0xee>
 8006b92:	0034      	movs	r4, r6
 8006b94:	2500      	movs	r5, #0
 8006b96:	9902      	ldr	r1, [sp, #8]
 8006b98:	3414      	adds	r4, #20
 8006b9a:	3114      	adds	r1, #20
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	c901      	ldmia	r1!, {r0}
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	466b      	mov	r3, sp
 8006ba4:	891b      	ldrh	r3, [r3, #8]
 8006ba6:	b282      	uxth	r2, r0
 8006ba8:	1a9a      	subs	r2, r3, r2
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	1952      	adds	r2, r2, r5
 8006bae:	0c00      	lsrs	r0, r0, #16
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	1a1b      	subs	r3, r3, r0
 8006bb4:	1410      	asrs	r0, r2, #16
 8006bb6:	181b      	adds	r3, r3, r0
 8006bb8:	141d      	asrs	r5, r3, #16
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	c404      	stmia	r4!, {r2}
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	d2e9      	bcs.n	8006b9c <quorem+0xb0>
 8006bc8:	9a01      	ldr	r2, [sp, #4]
 8006bca:	00bb      	lsls	r3, r7, #2
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	d013      	beq.n	8006bfc <quorem+0x110>
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	9800      	ldr	r0, [sp, #0]
 8006bdc:	b007      	add	sp, #28
 8006bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <quorem+0x104>
 8006be6:	3f01      	subs	r7, #1
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	3c04      	subs	r4, #4
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d3f7      	bcc.n	8006be0 <quorem+0xf4>
 8006bf0:	6137      	str	r7, [r6, #16]
 8006bf2:	e7c8      	b.n	8006b86 <quorem+0x9a>
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d104      	bne.n	8006c04 <quorem+0x118>
 8006bfa:	3f01      	subs	r7, #1
 8006bfc:	9a01      	ldr	r2, [sp, #4]
 8006bfe:	3b04      	subs	r3, #4
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3f7      	bcc.n	8006bf4 <quorem+0x108>
 8006c04:	6137      	str	r7, [r6, #16]
 8006c06:	e7e5      	b.n	8006bd4 <quorem+0xe8>

08006c08 <_dtoa_r>:
 8006c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0a:	0014      	movs	r4, r2
 8006c0c:	001d      	movs	r5, r3
 8006c0e:	69c6      	ldr	r6, [r0, #28]
 8006c10:	b09d      	sub	sp, #116	@ 0x74
 8006c12:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c14:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006c16:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006c18:	9003      	str	r0, [sp, #12]
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d10f      	bne.n	8006c3e <_dtoa_r+0x36>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f000 fe30 	bl	8007884 <malloc>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	1e02      	subs	r2, r0, #0
 8006c28:	61d8      	str	r0, [r3, #28]
 8006c2a:	d104      	bne.n	8006c36 <_dtoa_r+0x2e>
 8006c2c:	21ef      	movs	r1, #239	@ 0xef
 8006c2e:	4bc7      	ldr	r3, [pc, #796]	@ (8006f4c <_dtoa_r+0x344>)
 8006c30:	48c7      	ldr	r0, [pc, #796]	@ (8006f50 <_dtoa_r+0x348>)
 8006c32:	f001 fb55 	bl	80082e0 <__assert_func>
 8006c36:	6046      	str	r6, [r0, #4]
 8006c38:	6086      	str	r6, [r0, #8]
 8006c3a:	6006      	str	r6, [r0, #0]
 8006c3c:	60c6      	str	r6, [r0, #12]
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	2900      	cmp	r1, #0
 8006c46:	d00b      	beq.n	8006c60 <_dtoa_r+0x58>
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4093      	lsls	r3, r2
 8006c4e:	604a      	str	r2, [r1, #4]
 8006c50:	608b      	str	r3, [r1, #8]
 8006c52:	9803      	ldr	r0, [sp, #12]
 8006c54:	f000 ff16 	bl	8007a84 <_Bfree>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	da1e      	bge.n	8006ca2 <_dtoa_r+0x9a>
 8006c64:	2301      	movs	r3, #1
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	006b      	lsls	r3, r5, #1
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006c70:	4bb8      	ldr	r3, [pc, #736]	@ (8006f54 <_dtoa_r+0x34c>)
 8006c72:	4ab8      	ldr	r2, [pc, #736]	@ (8006f54 <_dtoa_r+0x34c>)
 8006c74:	403b      	ands	r3, r7
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d116      	bne.n	8006ca8 <_dtoa_r+0xa0>
 8006c7a:	4bb7      	ldr	r3, [pc, #732]	@ (8006f58 <_dtoa_r+0x350>)
 8006c7c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	033b      	lsls	r3, r7, #12
 8006c82:	0b1b      	lsrs	r3, r3, #12
 8006c84:	4323      	orrs	r3, r4
 8006c86:	d101      	bne.n	8006c8c <_dtoa_r+0x84>
 8006c88:	f000 fd83 	bl	8007792 <_dtoa_r+0xb8a>
 8006c8c:	4bb3      	ldr	r3, [pc, #716]	@ (8006f5c <_dtoa_r+0x354>)
 8006c8e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006c90:	9308      	str	r3, [sp, #32]
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	d002      	beq.n	8006c9c <_dtoa_r+0x94>
 8006c96:	4bb2      	ldr	r3, [pc, #712]	@ (8006f60 <_dtoa_r+0x358>)
 8006c98:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	9808      	ldr	r0, [sp, #32]
 8006c9e:	b01d      	add	sp, #116	@ 0x74
 8006ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	e7e2      	b.n	8006c6e <_dtoa_r+0x66>
 8006ca8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cac:	9212      	str	r2, [sp, #72]	@ 0x48
 8006cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006cb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7f9 fbc6 	bl	8000448 <__aeabi_dcmpeq>
 8006cbc:	1e06      	subs	r6, r0, #0
 8006cbe:	d00b      	beq.n	8006cd8 <_dtoa_r+0xd0>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <_dtoa_r+0xca>
 8006ccc:	4ba5      	ldr	r3, [pc, #660]	@ (8006f64 <_dtoa_r+0x35c>)
 8006cce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4ba5      	ldr	r3, [pc, #660]	@ (8006f68 <_dtoa_r+0x360>)
 8006cd4:	9308      	str	r3, [sp, #32]
 8006cd6:	e7e1      	b.n	8006c9c <_dtoa_r+0x94>
 8006cd8:	ab1a      	add	r3, sp, #104	@ 0x68
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	9803      	ldr	r0, [sp, #12]
 8006ce2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ce6:	f001 f9cd 	bl	8008084 <__d2b>
 8006cea:	007a      	lsls	r2, r7, #1
 8006cec:	9005      	str	r0, [sp, #20]
 8006cee:	0d52      	lsrs	r2, r2, #21
 8006cf0:	d100      	bne.n	8006cf4 <_dtoa_r+0xec>
 8006cf2:	e07b      	b.n	8006dec <_dtoa_r+0x1e4>
 8006cf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cf6:	9618      	str	r6, [sp, #96]	@ 0x60
 8006cf8:	0319      	lsls	r1, r3, #12
 8006cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8006f6c <_dtoa_r+0x364>)
 8006cfc:	0b09      	lsrs	r1, r1, #12
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	499b      	ldr	r1, [pc, #620]	@ (8006f70 <_dtoa_r+0x368>)
 8006d02:	1857      	adds	r7, r2, r1
 8006d04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d08:	0019      	movs	r1, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b99      	ldr	r3, [pc, #612]	@ (8006f74 <_dtoa_r+0x36c>)
 8006d0e:	f7fa ff25 	bl	8001b5c <__aeabi_dsub>
 8006d12:	4a99      	ldr	r2, [pc, #612]	@ (8006f78 <_dtoa_r+0x370>)
 8006d14:	4b99      	ldr	r3, [pc, #612]	@ (8006f7c <_dtoa_r+0x374>)
 8006d16:	f7fa fc59 	bl	80015cc <__aeabi_dmul>
 8006d1a:	4a99      	ldr	r2, [pc, #612]	@ (8006f80 <_dtoa_r+0x378>)
 8006d1c:	4b99      	ldr	r3, [pc, #612]	@ (8006f84 <_dtoa_r+0x37c>)
 8006d1e:	f7f9 fcad 	bl	800067c <__aeabi_dadd>
 8006d22:	0004      	movs	r4, r0
 8006d24:	0038      	movs	r0, r7
 8006d26:	000d      	movs	r5, r1
 8006d28:	f7fb fb12 	bl	8002350 <__aeabi_i2d>
 8006d2c:	4a96      	ldr	r2, [pc, #600]	@ (8006f88 <_dtoa_r+0x380>)
 8006d2e:	4b97      	ldr	r3, [pc, #604]	@ (8006f8c <_dtoa_r+0x384>)
 8006d30:	f7fa fc4c 	bl	80015cc <__aeabi_dmul>
 8006d34:	0002      	movs	r2, r0
 8006d36:	000b      	movs	r3, r1
 8006d38:	0020      	movs	r0, r4
 8006d3a:	0029      	movs	r1, r5
 8006d3c:	f7f9 fc9e 	bl	800067c <__aeabi_dadd>
 8006d40:	0004      	movs	r4, r0
 8006d42:	000d      	movs	r5, r1
 8006d44:	f7fb fac8 	bl	80022d8 <__aeabi_d2iz>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	9004      	str	r0, [sp, #16]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	0020      	movs	r0, r4
 8006d50:	0029      	movs	r1, r5
 8006d52:	f7f9 fb7f 	bl	8000454 <__aeabi_dcmplt>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d00b      	beq.n	8006d72 <_dtoa_r+0x16a>
 8006d5a:	9804      	ldr	r0, [sp, #16]
 8006d5c:	f7fb faf8 	bl	8002350 <__aeabi_i2d>
 8006d60:	002b      	movs	r3, r5
 8006d62:	0022      	movs	r2, r4
 8006d64:	f7f9 fb70 	bl	8000448 <__aeabi_dcmpeq>
 8006d68:	4243      	negs	r3, r0
 8006d6a:	4158      	adcs	r0, r3
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	1a1b      	subs	r3, r3, r0
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	2301      	movs	r3, #1
 8006d74:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	2b16      	cmp	r3, #22
 8006d7a:	d810      	bhi.n	8006d9e <_dtoa_r+0x196>
 8006d7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d80:	9a04      	ldr	r2, [sp, #16]
 8006d82:	4b83      	ldr	r3, [pc, #524]	@ (8006f90 <_dtoa_r+0x388>)
 8006d84:	00d2      	lsls	r2, r2, #3
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f7f9 fb62 	bl	8000454 <__aeabi_dcmplt>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d047      	beq.n	8006e24 <_dtoa_r+0x21c>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d9e:	2200      	movs	r2, #0
 8006da0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006da2:	9206      	str	r2, [sp, #24]
 8006da4:	1bdb      	subs	r3, r3, r7
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	d53e      	bpl.n	8006e28 <_dtoa_r+0x220>
 8006daa:	2201      	movs	r2, #1
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	9306      	str	r3, [sp, #24]
 8006db0:	2300      	movs	r3, #0
 8006db2:	930d      	str	r3, [sp, #52]	@ 0x34
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	db38      	blt.n	8006e2c <_dtoa_r+0x224>
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dbe:	4694      	mov	ip, r2
 8006dc0:	4463      	add	r3, ip
 8006dc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8006dc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006dca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dcc:	2401      	movs	r4, #1
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d867      	bhi.n	8006ea2 <_dtoa_r+0x29a>
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	dd02      	ble.n	8006ddc <_dtoa_r+0x1d4>
 8006dd6:	2400      	movs	r4, #0
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	9322      	str	r3, [sp, #136]	@ 0x88
 8006ddc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dde:	1e98      	subs	r0, r3, #2
 8006de0:	2803      	cmp	r0, #3
 8006de2:	d867      	bhi.n	8006eb4 <_dtoa_r+0x2ac>
 8006de4:	f7f9 f996 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006de8:	5b383a2b 	.word	0x5b383a2b
 8006dec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006dee:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006df0:	18f6      	adds	r6, r6, r3
 8006df2:	4b68      	ldr	r3, [pc, #416]	@ (8006f94 <_dtoa_r+0x38c>)
 8006df4:	18f2      	adds	r2, r6, r3
 8006df6:	2a20      	cmp	r2, #32
 8006df8:	dd0f      	ble.n	8006e1a <_dtoa_r+0x212>
 8006dfa:	2340      	movs	r3, #64	@ 0x40
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	409f      	lsls	r7, r3
 8006e00:	4b65      	ldr	r3, [pc, #404]	@ (8006f98 <_dtoa_r+0x390>)
 8006e02:	0038      	movs	r0, r7
 8006e04:	18f3      	adds	r3, r6, r3
 8006e06:	40dc      	lsrs	r4, r3
 8006e08:	4320      	orrs	r0, r4
 8006e0a:	f7fb facf 	bl	80023ac <__aeabi_ui2d>
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4b62      	ldr	r3, [pc, #392]	@ (8006f9c <_dtoa_r+0x394>)
 8006e12:	1e77      	subs	r7, r6, #1
 8006e14:	18cb      	adds	r3, r1, r3
 8006e16:	9218      	str	r2, [sp, #96]	@ 0x60
 8006e18:	e776      	b.n	8006d08 <_dtoa_r+0x100>
 8006e1a:	2320      	movs	r3, #32
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	4098      	lsls	r0, r3
 8006e22:	e7f2      	b.n	8006e0a <_dtoa_r+0x202>
 8006e24:	9015      	str	r0, [sp, #84]	@ 0x54
 8006e26:	e7ba      	b.n	8006d9e <_dtoa_r+0x196>
 8006e28:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e2a:	e7c3      	b.n	8006db4 <_dtoa_r+0x1ac>
 8006e2c:	9b06      	ldr	r3, [sp, #24]
 8006e2e:	9a04      	ldr	r2, [sp, #16]
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	9306      	str	r3, [sp, #24]
 8006e34:	4253      	negs	r3, r2
 8006e36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9314      	str	r3, [sp, #80]	@ 0x50
 8006e3c:	e7c5      	b.n	8006dca <_dtoa_r+0x1c2>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e44:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dc13      	bgt.n	8006e74 <_dtoa_r+0x26c>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	001a      	movs	r2, r3
 8006e50:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e54:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006e56:	e00d      	b.n	8006e74 <_dtoa_r+0x26c>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7f1      	b.n	8006e40 <_dtoa_r+0x238>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e60:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e62:	4694      	mov	ip, r2
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	4463      	add	r3, ip
 8006e68:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc00      	bgt.n	8006e74 <_dtoa_r+0x26c>
 8006e72:	2301      	movs	r3, #1
 8006e74:	9a03      	ldr	r2, [sp, #12]
 8006e76:	2100      	movs	r1, #0
 8006e78:	69d0      	ldr	r0, [r2, #28]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	0015      	movs	r5, r2
 8006e7e:	3514      	adds	r5, #20
 8006e80:	429d      	cmp	r5, r3
 8006e82:	d91b      	bls.n	8006ebc <_dtoa_r+0x2b4>
 8006e84:	6041      	str	r1, [r0, #4]
 8006e86:	9803      	ldr	r0, [sp, #12]
 8006e88:	f000 fdb8 	bl	80079fc <_Balloc>
 8006e8c:	9008      	str	r0, [sp, #32]
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d117      	bne.n	8006ec2 <_dtoa_r+0x2ba>
 8006e92:	21b0      	movs	r1, #176	@ 0xb0
 8006e94:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <_dtoa_r+0x398>)
 8006e96:	482e      	ldr	r0, [pc, #184]	@ (8006f50 <_dtoa_r+0x348>)
 8006e98:	9a08      	ldr	r2, [sp, #32]
 8006e9a:	31ff      	adds	r1, #255	@ 0xff
 8006e9c:	e6c9      	b.n	8006c32 <_dtoa_r+0x2a>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e7dd      	b.n	8006e5e <_dtoa_r+0x256>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9410      	str	r4, [sp, #64]	@ 0x40
 8006ea6:	9322      	str	r3, [sp, #136]	@ 0x88
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	930e      	str	r3, [sp, #56]	@ 0x38
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	2200      	movs	r2, #0
 8006eb0:	3313      	adds	r3, #19
 8006eb2:	e7cf      	b.n	8006e54 <_dtoa_r+0x24c>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eb8:	3b02      	subs	r3, #2
 8006eba:	e7f6      	b.n	8006eaa <_dtoa_r+0x2a2>
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	0052      	lsls	r2, r2, #1
 8006ec0:	e7dc      	b.n	8006e7c <_dtoa_r+0x274>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	2b0e      	cmp	r3, #14
 8006ece:	d900      	bls.n	8006ed2 <_dtoa_r+0x2ca>
 8006ed0:	e0d9      	b.n	8007086 <_dtoa_r+0x47e>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d100      	bne.n	8006ed8 <_dtoa_r+0x2d0>
 8006ed6:	e0d6      	b.n	8007086 <_dtoa_r+0x47e>
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	dd64      	ble.n	8006fa8 <_dtoa_r+0x3a0>
 8006ede:	210f      	movs	r1, #15
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8006f90 <_dtoa_r+0x388>)
 8006ee4:	400a      	ands	r2, r1
 8006ee6:	00d2      	lsls	r2, r2, #3
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	681e      	ldr	r6, [r3, #0]
 8006eec:	685f      	ldr	r7, [r3, #4]
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	2402      	movs	r4, #2
 8006ef2:	111d      	asrs	r5, r3, #4
 8006ef4:	05db      	lsls	r3, r3, #23
 8006ef6:	d50a      	bpl.n	8006f0e <_dtoa_r+0x306>
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa4 <_dtoa_r+0x39c>)
 8006efa:	400d      	ands	r5, r1
 8006efc:	6a1a      	ldr	r2, [r3, #32]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f04:	f7f9 ff1e 	bl	8000d44 <__aeabi_ddiv>
 8006f08:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f0c:	3401      	adds	r4, #1
 8006f0e:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <_dtoa_r+0x39c>)
 8006f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	d108      	bne.n	8006f28 <_dtoa_r+0x320>
 8006f16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1a:	0032      	movs	r2, r6
 8006f1c:	003b      	movs	r3, r7
 8006f1e:	f7f9 ff11 	bl	8000d44 <__aeabi_ddiv>
 8006f22:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f26:	e05a      	b.n	8006fde <_dtoa_r+0x3d6>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	421d      	tst	r5, r3
 8006f2c:	d009      	beq.n	8006f42 <_dtoa_r+0x33a>
 8006f2e:	18e4      	adds	r4, r4, r3
 8006f30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f32:	0030      	movs	r0, r6
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	0039      	movs	r1, r7
 8006f3a:	f7fa fb47 	bl	80015cc <__aeabi_dmul>
 8006f3e:	0006      	movs	r6, r0
 8006f40:	000f      	movs	r7, r1
 8006f42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f44:	106d      	asrs	r5, r5, #1
 8006f46:	3308      	adds	r3, #8
 8006f48:	e7e2      	b.n	8006f10 <_dtoa_r+0x308>
 8006f4a:	46c0      	nop			@ (mov r8, r8)
 8006f4c:	08008ac5 	.word	0x08008ac5
 8006f50:	08008adc 	.word	0x08008adc
 8006f54:	7ff00000 	.word	0x7ff00000
 8006f58:	0000270f 	.word	0x0000270f
 8006f5c:	08008ac1 	.word	0x08008ac1
 8006f60:	08008ac4 	.word	0x08008ac4
 8006f64:	08008a95 	.word	0x08008a95
 8006f68:	08008a94 	.word	0x08008a94
 8006f6c:	3ff00000 	.word	0x3ff00000
 8006f70:	fffffc01 	.word	0xfffffc01
 8006f74:	3ff80000 	.word	0x3ff80000
 8006f78:	636f4361 	.word	0x636f4361
 8006f7c:	3fd287a7 	.word	0x3fd287a7
 8006f80:	8b60c8b3 	.word	0x8b60c8b3
 8006f84:	3fc68a28 	.word	0x3fc68a28
 8006f88:	509f79fb 	.word	0x509f79fb
 8006f8c:	3fd34413 	.word	0x3fd34413
 8006f90:	08008bd8 	.word	0x08008bd8
 8006f94:	00000432 	.word	0x00000432
 8006f98:	00000412 	.word	0x00000412
 8006f9c:	fe100000 	.word	0xfe100000
 8006fa0:	08008b34 	.word	0x08008b34
 8006fa4:	08008bb0 	.word	0x08008bb0
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	2402      	movs	r4, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <_dtoa_r+0x3d6>
 8006fb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006fb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006fb4:	220f      	movs	r2, #15
 8006fb6:	425d      	negs	r5, r3
 8006fb8:	402a      	ands	r2, r5
 8006fba:	4bd7      	ldr	r3, [pc, #860]	@ (8007318 <_dtoa_r+0x710>)
 8006fbc:	00d2      	lsls	r2, r2, #3
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f7fa fb02 	bl	80015cc <__aeabi_dmul>
 8006fc8:	2701      	movs	r7, #1
 8006fca:	2300      	movs	r3, #0
 8006fcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fce:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fd0:	4ed2      	ldr	r6, [pc, #840]	@ (800731c <_dtoa_r+0x714>)
 8006fd2:	112d      	asrs	r5, r5, #4
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	d000      	beq.n	8006fda <_dtoa_r+0x3d2>
 8006fd8:	e0ba      	b.n	8007150 <_dtoa_r+0x548>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1a1      	bne.n	8006f22 <_dtoa_r+0x31a>
 8006fde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fe0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006fe2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d100      	bne.n	8006fea <_dtoa_r+0x3e2>
 8006fe8:	e0bd      	b.n	8007166 <_dtoa_r+0x55e>
 8006fea:	2200      	movs	r2, #0
 8006fec:	0030      	movs	r0, r6
 8006fee:	0039      	movs	r1, r7
 8006ff0:	4bcb      	ldr	r3, [pc, #812]	@ (8007320 <_dtoa_r+0x718>)
 8006ff2:	f7f9 fa2f 	bl	8000454 <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d100      	bne.n	8006ffc <_dtoa_r+0x3f4>
 8006ffa:	e0b4      	b.n	8007166 <_dtoa_r+0x55e>
 8006ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d100      	bne.n	8007004 <_dtoa_r+0x3fc>
 8007002:	e0b0      	b.n	8007166 <_dtoa_r+0x55e>
 8007004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd39      	ble.n	800707e <_dtoa_r+0x476>
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	2200      	movs	r2, #0
 800700e:	3b01      	subs	r3, #1
 8007010:	930c      	str	r3, [sp, #48]	@ 0x30
 8007012:	0030      	movs	r0, r6
 8007014:	4bc3      	ldr	r3, [pc, #780]	@ (8007324 <_dtoa_r+0x71c>)
 8007016:	0039      	movs	r1, r7
 8007018:	f7fa fad8 	bl	80015cc <__aeabi_dmul>
 800701c:	900a      	str	r0, [sp, #40]	@ 0x28
 800701e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007022:	3401      	adds	r4, #1
 8007024:	0020      	movs	r0, r4
 8007026:	9311      	str	r3, [sp, #68]	@ 0x44
 8007028:	f7fb f992 	bl	8002350 <__aeabi_i2d>
 800702c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800702e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007030:	f7fa facc 	bl	80015cc <__aeabi_dmul>
 8007034:	4bbc      	ldr	r3, [pc, #752]	@ (8007328 <_dtoa_r+0x720>)
 8007036:	2200      	movs	r2, #0
 8007038:	f7f9 fb20 	bl	800067c <__aeabi_dadd>
 800703c:	4bbb      	ldr	r3, [pc, #748]	@ (800732c <_dtoa_r+0x724>)
 800703e:	0006      	movs	r6, r0
 8007040:	18cf      	adds	r7, r1, r3
 8007042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007044:	2b00      	cmp	r3, #0
 8007046:	d000      	beq.n	800704a <_dtoa_r+0x442>
 8007048:	e091      	b.n	800716e <_dtoa_r+0x566>
 800704a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800704c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800704e:	2200      	movs	r2, #0
 8007050:	4bb7      	ldr	r3, [pc, #732]	@ (8007330 <_dtoa_r+0x728>)
 8007052:	f7fa fd83 	bl	8001b5c <__aeabi_dsub>
 8007056:	0032      	movs	r2, r6
 8007058:	003b      	movs	r3, r7
 800705a:	0004      	movs	r4, r0
 800705c:	000d      	movs	r5, r1
 800705e:	f7f9 fa0d 	bl	800047c <__aeabi_dcmpgt>
 8007062:	2800      	cmp	r0, #0
 8007064:	d000      	beq.n	8007068 <_dtoa_r+0x460>
 8007066:	e29d      	b.n	80075a4 <_dtoa_r+0x99c>
 8007068:	2180      	movs	r1, #128	@ 0x80
 800706a:	0609      	lsls	r1, r1, #24
 800706c:	187b      	adds	r3, r7, r1
 800706e:	0032      	movs	r2, r6
 8007070:	0020      	movs	r0, r4
 8007072:	0029      	movs	r1, r5
 8007074:	f7f9 f9ee 	bl	8000454 <__aeabi_dcmplt>
 8007078:	2800      	cmp	r0, #0
 800707a:	d000      	beq.n	800707e <_dtoa_r+0x476>
 800707c:	e130      	b.n	80072e0 <_dtoa_r+0x6d8>
 800707e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007080:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007082:	930a      	str	r3, [sp, #40]	@ 0x28
 8007084:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007086:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007088:	2b00      	cmp	r3, #0
 800708a:	da00      	bge.n	800708e <_dtoa_r+0x486>
 800708c:	e177      	b.n	800737e <_dtoa_r+0x776>
 800708e:	9a04      	ldr	r2, [sp, #16]
 8007090:	2a0e      	cmp	r2, #14
 8007092:	dd00      	ble.n	8007096 <_dtoa_r+0x48e>
 8007094:	e173      	b.n	800737e <_dtoa_r+0x776>
 8007096:	4ba0      	ldr	r3, [pc, #640]	@ (8007318 <_dtoa_r+0x710>)
 8007098:	00d2      	lsls	r2, r2, #3
 800709a:	189b      	adds	r3, r3, r2
 800709c:	685c      	ldr	r4, [r3, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	9306      	str	r3, [sp, #24]
 80070a2:	9407      	str	r4, [sp, #28]
 80070a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da03      	bge.n	80070b2 <_dtoa_r+0x4aa>
 80070aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dc00      	bgt.n	80070b2 <_dtoa_r+0x4aa>
 80070b0:	e106      	b.n	80072c0 <_dtoa_r+0x6b8>
 80070b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b8:	9d08      	ldr	r5, [sp, #32]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	195b      	adds	r3, r3, r5
 80070be:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c0:	9a06      	ldr	r2, [sp, #24]
 80070c2:	9b07      	ldr	r3, [sp, #28]
 80070c4:	0030      	movs	r0, r6
 80070c6:	0039      	movs	r1, r7
 80070c8:	f7f9 fe3c 	bl	8000d44 <__aeabi_ddiv>
 80070cc:	f7fb f904 	bl	80022d8 <__aeabi_d2iz>
 80070d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80070d2:	f7fb f93d 	bl	8002350 <__aeabi_i2d>
 80070d6:	9a06      	ldr	r2, [sp, #24]
 80070d8:	9b07      	ldr	r3, [sp, #28]
 80070da:	f7fa fa77 	bl	80015cc <__aeabi_dmul>
 80070de:	0002      	movs	r2, r0
 80070e0:	000b      	movs	r3, r1
 80070e2:	0030      	movs	r0, r6
 80070e4:	0039      	movs	r1, r7
 80070e6:	f7fa fd39 	bl	8001b5c <__aeabi_dsub>
 80070ea:	002b      	movs	r3, r5
 80070ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070ee:	3501      	adds	r5, #1
 80070f0:	3230      	adds	r2, #48	@ 0x30
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f6:	002c      	movs	r4, r5
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d000      	beq.n	80070fe <_dtoa_r+0x4f6>
 80070fc:	e131      	b.n	8007362 <_dtoa_r+0x75a>
 80070fe:	0002      	movs	r2, r0
 8007100:	000b      	movs	r3, r1
 8007102:	f7f9 fabb 	bl	800067c <__aeabi_dadd>
 8007106:	9a06      	ldr	r2, [sp, #24]
 8007108:	9b07      	ldr	r3, [sp, #28]
 800710a:	0006      	movs	r6, r0
 800710c:	000f      	movs	r7, r1
 800710e:	f7f9 f9b5 	bl	800047c <__aeabi_dcmpgt>
 8007112:	2800      	cmp	r0, #0
 8007114:	d000      	beq.n	8007118 <_dtoa_r+0x510>
 8007116:	e10f      	b.n	8007338 <_dtoa_r+0x730>
 8007118:	9a06      	ldr	r2, [sp, #24]
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	0030      	movs	r0, r6
 800711e:	0039      	movs	r1, r7
 8007120:	f7f9 f992 	bl	8000448 <__aeabi_dcmpeq>
 8007124:	2800      	cmp	r0, #0
 8007126:	d003      	beq.n	8007130 <_dtoa_r+0x528>
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	07dd      	lsls	r5, r3, #31
 800712c:	d500      	bpl.n	8007130 <_dtoa_r+0x528>
 800712e:	e103      	b.n	8007338 <_dtoa_r+0x730>
 8007130:	9905      	ldr	r1, [sp, #20]
 8007132:	9803      	ldr	r0, [sp, #12]
 8007134:	f000 fca6 	bl	8007a84 <_Bfree>
 8007138:	2300      	movs	r3, #0
 800713a:	7023      	strb	r3, [r4, #0]
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007140:	3301      	adds	r3, #1
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007146:	2b00      	cmp	r3, #0
 8007148:	d100      	bne.n	800714c <_dtoa_r+0x544>
 800714a:	e5a7      	b.n	8006c9c <_dtoa_r+0x94>
 800714c:	601c      	str	r4, [r3, #0]
 800714e:	e5a5      	b.n	8006c9c <_dtoa_r+0x94>
 8007150:	423d      	tst	r5, r7
 8007152:	d005      	beq.n	8007160 <_dtoa_r+0x558>
 8007154:	6832      	ldr	r2, [r6, #0]
 8007156:	6873      	ldr	r3, [r6, #4]
 8007158:	f7fa fa38 	bl	80015cc <__aeabi_dmul>
 800715c:	003b      	movs	r3, r7
 800715e:	3401      	adds	r4, #1
 8007160:	106d      	asrs	r5, r5, #1
 8007162:	3608      	adds	r6, #8
 8007164:	e736      	b.n	8006fd4 <_dtoa_r+0x3cc>
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	930c      	str	r3, [sp, #48]	@ 0x30
 800716a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716c:	e75a      	b.n	8007024 <_dtoa_r+0x41c>
 800716e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007170:	4b69      	ldr	r3, [pc, #420]	@ (8007318 <_dtoa_r+0x710>)
 8007172:	3a01      	subs	r2, #1
 8007174:	00d2      	lsls	r2, r2, #3
 8007176:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007178:	189b      	adds	r3, r3, r2
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2900      	cmp	r1, #0
 8007180:	d04c      	beq.n	800721c <_dtoa_r+0x614>
 8007182:	2000      	movs	r0, #0
 8007184:	496b      	ldr	r1, [pc, #428]	@ (8007334 <_dtoa_r+0x72c>)
 8007186:	f7f9 fddd 	bl	8000d44 <__aeabi_ddiv>
 800718a:	0032      	movs	r2, r6
 800718c:	003b      	movs	r3, r7
 800718e:	f7fa fce5 	bl	8001b5c <__aeabi_dsub>
 8007192:	9a08      	ldr	r2, [sp, #32]
 8007194:	0006      	movs	r6, r0
 8007196:	4694      	mov	ip, r2
 8007198:	000f      	movs	r7, r1
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	9316      	str	r3, [sp, #88]	@ 0x58
 800719e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071a0:	4463      	add	r3, ip
 80071a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80071a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071a8:	f7fb f896 	bl	80022d8 <__aeabi_d2iz>
 80071ac:	0005      	movs	r5, r0
 80071ae:	f7fb f8cf 	bl	8002350 <__aeabi_i2d>
 80071b2:	0002      	movs	r2, r0
 80071b4:	000b      	movs	r3, r1
 80071b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071ba:	f7fa fccf 	bl	8001b5c <__aeabi_dsub>
 80071be:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071c0:	3530      	adds	r5, #48	@ 0x30
 80071c2:	1c5c      	adds	r4, r3, #1
 80071c4:	701d      	strb	r5, [r3, #0]
 80071c6:	0032      	movs	r2, r6
 80071c8:	003b      	movs	r3, r7
 80071ca:	900a      	str	r0, [sp, #40]	@ 0x28
 80071cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071ce:	f7f9 f941 	bl	8000454 <__aeabi_dcmplt>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d16a      	bne.n	80072ac <_dtoa_r+0x6a4>
 80071d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071da:	2000      	movs	r0, #0
 80071dc:	4950      	ldr	r1, [pc, #320]	@ (8007320 <_dtoa_r+0x718>)
 80071de:	f7fa fcbd 	bl	8001b5c <__aeabi_dsub>
 80071e2:	0032      	movs	r2, r6
 80071e4:	003b      	movs	r3, r7
 80071e6:	f7f9 f935 	bl	8000454 <__aeabi_dcmplt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d000      	beq.n	80071f0 <_dtoa_r+0x5e8>
 80071ee:	e0a5      	b.n	800733c <_dtoa_r+0x734>
 80071f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	d100      	bne.n	80071f8 <_dtoa_r+0x5f0>
 80071f6:	e742      	b.n	800707e <_dtoa_r+0x476>
 80071f8:	2200      	movs	r2, #0
 80071fa:	0030      	movs	r0, r6
 80071fc:	0039      	movs	r1, r7
 80071fe:	4b49      	ldr	r3, [pc, #292]	@ (8007324 <_dtoa_r+0x71c>)
 8007200:	f7fa f9e4 	bl	80015cc <__aeabi_dmul>
 8007204:	2200      	movs	r2, #0
 8007206:	0006      	movs	r6, r0
 8007208:	000f      	movs	r7, r1
 800720a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800720c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800720e:	4b45      	ldr	r3, [pc, #276]	@ (8007324 <_dtoa_r+0x71c>)
 8007210:	f7fa f9dc 	bl	80015cc <__aeabi_dmul>
 8007214:	9416      	str	r4, [sp, #88]	@ 0x58
 8007216:	900a      	str	r0, [sp, #40]	@ 0x28
 8007218:	910b      	str	r1, [sp, #44]	@ 0x2c
 800721a:	e7c3      	b.n	80071a4 <_dtoa_r+0x59c>
 800721c:	0030      	movs	r0, r6
 800721e:	0039      	movs	r1, r7
 8007220:	f7fa f9d4 	bl	80015cc <__aeabi_dmul>
 8007224:	9d08      	ldr	r5, [sp, #32]
 8007226:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007228:	002b      	movs	r3, r5
 800722a:	4694      	mov	ip, r2
 800722c:	9016      	str	r0, [sp, #88]	@ 0x58
 800722e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007230:	4463      	add	r3, ip
 8007232:	9319      	str	r3, [sp, #100]	@ 0x64
 8007234:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007236:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007238:	f7fb f84e 	bl	80022d8 <__aeabi_d2iz>
 800723c:	0004      	movs	r4, r0
 800723e:	f7fb f887 	bl	8002350 <__aeabi_i2d>
 8007242:	000b      	movs	r3, r1
 8007244:	0002      	movs	r2, r0
 8007246:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800724a:	f7fa fc87 	bl	8001b5c <__aeabi_dsub>
 800724e:	3430      	adds	r4, #48	@ 0x30
 8007250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007252:	702c      	strb	r4, [r5, #0]
 8007254:	3501      	adds	r5, #1
 8007256:	0006      	movs	r6, r0
 8007258:	000f      	movs	r7, r1
 800725a:	42ab      	cmp	r3, r5
 800725c:	d129      	bne.n	80072b2 <_dtoa_r+0x6aa>
 800725e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007260:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007266:	469c      	mov	ip, r3
 8007268:	2200      	movs	r2, #0
 800726a:	4b32      	ldr	r3, [pc, #200]	@ (8007334 <_dtoa_r+0x72c>)
 800726c:	4464      	add	r4, ip
 800726e:	f7f9 fa05 	bl	800067c <__aeabi_dadd>
 8007272:	0002      	movs	r2, r0
 8007274:	000b      	movs	r3, r1
 8007276:	0030      	movs	r0, r6
 8007278:	0039      	movs	r1, r7
 800727a:	f7f9 f8ff 	bl	800047c <__aeabi_dcmpgt>
 800727e:	2800      	cmp	r0, #0
 8007280:	d15c      	bne.n	800733c <_dtoa_r+0x734>
 8007282:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007284:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007286:	2000      	movs	r0, #0
 8007288:	492a      	ldr	r1, [pc, #168]	@ (8007334 <_dtoa_r+0x72c>)
 800728a:	f7fa fc67 	bl	8001b5c <__aeabi_dsub>
 800728e:	0002      	movs	r2, r0
 8007290:	000b      	movs	r3, r1
 8007292:	0030      	movs	r0, r6
 8007294:	0039      	movs	r1, r7
 8007296:	f7f9 f8dd 	bl	8000454 <__aeabi_dcmplt>
 800729a:	2800      	cmp	r0, #0
 800729c:	d100      	bne.n	80072a0 <_dtoa_r+0x698>
 800729e:	e6ee      	b.n	800707e <_dtoa_r+0x476>
 80072a0:	0023      	movs	r3, r4
 80072a2:	3c01      	subs	r4, #1
 80072a4:	7822      	ldrb	r2, [r4, #0]
 80072a6:	2a30      	cmp	r2, #48	@ 0x30
 80072a8:	d0fa      	beq.n	80072a0 <_dtoa_r+0x698>
 80072aa:	001c      	movs	r4, r3
 80072ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	e73e      	b.n	8007130 <_dtoa_r+0x528>
 80072b2:	2200      	movs	r2, #0
 80072b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007324 <_dtoa_r+0x71c>)
 80072b6:	f7fa f989 	bl	80015cc <__aeabi_dmul>
 80072ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80072bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072be:	e7b9      	b.n	8007234 <_dtoa_r+0x62c>
 80072c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <_dtoa_r+0x6d8>
 80072c6:	9806      	ldr	r0, [sp, #24]
 80072c8:	9907      	ldr	r1, [sp, #28]
 80072ca:	2200      	movs	r2, #0
 80072cc:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <_dtoa_r+0x728>)
 80072ce:	f7fa f97d 	bl	80015cc <__aeabi_dmul>
 80072d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072d6:	f7f9 f8db 	bl	8000490 <__aeabi_dcmpge>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d100      	bne.n	80072e0 <_dtoa_r+0x6d8>
 80072de:	e164      	b.n	80075aa <_dtoa_r+0x9a2>
 80072e0:	2600      	movs	r6, #0
 80072e2:	0037      	movs	r7, r6
 80072e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072e6:	9c08      	ldr	r4, [sp, #32]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80072ec:	2300      	movs	r3, #0
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	0031      	movs	r1, r6
 80072f2:	9803      	ldr	r0, [sp, #12]
 80072f4:	f000 fbc6 	bl	8007a84 <_Bfree>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	d0d7      	beq.n	80072ac <_dtoa_r+0x6a4>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <_dtoa_r+0x706>
 8007302:	42bb      	cmp	r3, r7
 8007304:	d003      	beq.n	800730e <_dtoa_r+0x706>
 8007306:	0019      	movs	r1, r3
 8007308:	9803      	ldr	r0, [sp, #12]
 800730a:	f000 fbbb 	bl	8007a84 <_Bfree>
 800730e:	0039      	movs	r1, r7
 8007310:	9803      	ldr	r0, [sp, #12]
 8007312:	f000 fbb7 	bl	8007a84 <_Bfree>
 8007316:	e7c9      	b.n	80072ac <_dtoa_r+0x6a4>
 8007318:	08008bd8 	.word	0x08008bd8
 800731c:	08008bb0 	.word	0x08008bb0
 8007320:	3ff00000 	.word	0x3ff00000
 8007324:	40240000 	.word	0x40240000
 8007328:	401c0000 	.word	0x401c0000
 800732c:	fcc00000 	.word	0xfcc00000
 8007330:	40140000 	.word	0x40140000
 8007334:	3fe00000 	.word	0x3fe00000
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	930c      	str	r3, [sp, #48]	@ 0x30
 800733c:	0023      	movs	r3, r4
 800733e:	001c      	movs	r4, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	2a39      	cmp	r2, #57	@ 0x39
 8007346:	d108      	bne.n	800735a <_dtoa_r+0x752>
 8007348:	9a08      	ldr	r2, [sp, #32]
 800734a:	429a      	cmp	r2, r3
 800734c:	d1f7      	bne.n	800733e <_dtoa_r+0x736>
 800734e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007350:	9908      	ldr	r1, [sp, #32]
 8007352:	3201      	adds	r2, #1
 8007354:	920c      	str	r2, [sp, #48]	@ 0x30
 8007356:	2230      	movs	r2, #48	@ 0x30
 8007358:	700a      	strb	r2, [r1, #0]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	3201      	adds	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e7a4      	b.n	80072ac <_dtoa_r+0x6a4>
 8007362:	2200      	movs	r2, #0
 8007364:	4bc6      	ldr	r3, [pc, #792]	@ (8007680 <_dtoa_r+0xa78>)
 8007366:	f7fa f931 	bl	80015cc <__aeabi_dmul>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	0006      	movs	r6, r0
 8007370:	000f      	movs	r7, r1
 8007372:	f7f9 f869 	bl	8000448 <__aeabi_dcmpeq>
 8007376:	2800      	cmp	r0, #0
 8007378:	d100      	bne.n	800737c <_dtoa_r+0x774>
 800737a:	e6a1      	b.n	80070c0 <_dtoa_r+0x4b8>
 800737c:	e6d8      	b.n	8007130 <_dtoa_r+0x528>
 800737e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007380:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007382:	9c06      	ldr	r4, [sp, #24]
 8007384:	2f00      	cmp	r7, #0
 8007386:	d014      	beq.n	80073b2 <_dtoa_r+0x7aa>
 8007388:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800738a:	2a01      	cmp	r2, #1
 800738c:	dd00      	ble.n	8007390 <_dtoa_r+0x788>
 800738e:	e0c8      	b.n	8007522 <_dtoa_r+0x91a>
 8007390:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007392:	2a00      	cmp	r2, #0
 8007394:	d100      	bne.n	8007398 <_dtoa_r+0x790>
 8007396:	e0be      	b.n	8007516 <_dtoa_r+0x90e>
 8007398:	4aba      	ldr	r2, [pc, #744]	@ (8007684 <_dtoa_r+0xa7c>)
 800739a:	189b      	adds	r3, r3, r2
 800739c:	9a06      	ldr	r2, [sp, #24]
 800739e:	2101      	movs	r1, #1
 80073a0:	18d2      	adds	r2, r2, r3
 80073a2:	9206      	str	r2, [sp, #24]
 80073a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073a6:	9803      	ldr	r0, [sp, #12]
 80073a8:	18d3      	adds	r3, r2, r3
 80073aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80073ac:	f000 fc22 	bl	8007bf4 <__i2b>
 80073b0:	0007      	movs	r7, r0
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d00e      	beq.n	80073d4 <_dtoa_r+0x7cc>
 80073b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dd0b      	ble.n	80073d4 <_dtoa_r+0x7cc>
 80073bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073be:	0023      	movs	r3, r4
 80073c0:	4294      	cmp	r4, r2
 80073c2:	dd00      	ble.n	80073c6 <_dtoa_r+0x7be>
 80073c4:	0013      	movs	r3, r2
 80073c6:	9a06      	ldr	r2, [sp, #24]
 80073c8:	1ae4      	subs	r4, r4, r3
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	9206      	str	r2, [sp, #24]
 80073ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80073d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01f      	beq.n	800741a <_dtoa_r+0x812>
 80073da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d100      	bne.n	80073e2 <_dtoa_r+0x7da>
 80073e0:	e0b5      	b.n	800754e <_dtoa_r+0x946>
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	d010      	beq.n	8007408 <_dtoa_r+0x800>
 80073e6:	0039      	movs	r1, r7
 80073e8:	002a      	movs	r2, r5
 80073ea:	9803      	ldr	r0, [sp, #12]
 80073ec:	f000 fccc 	bl	8007d88 <__pow5mult>
 80073f0:	9a05      	ldr	r2, [sp, #20]
 80073f2:	0001      	movs	r1, r0
 80073f4:	0007      	movs	r7, r0
 80073f6:	9803      	ldr	r0, [sp, #12]
 80073f8:	f000 fc14 	bl	8007c24 <__multiply>
 80073fc:	0006      	movs	r6, r0
 80073fe:	9905      	ldr	r1, [sp, #20]
 8007400:	9803      	ldr	r0, [sp, #12]
 8007402:	f000 fb3f 	bl	8007a84 <_Bfree>
 8007406:	9605      	str	r6, [sp, #20]
 8007408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740a:	1b5a      	subs	r2, r3, r5
 800740c:	42ab      	cmp	r3, r5
 800740e:	d004      	beq.n	800741a <_dtoa_r+0x812>
 8007410:	9905      	ldr	r1, [sp, #20]
 8007412:	9803      	ldr	r0, [sp, #12]
 8007414:	f000 fcb8 	bl	8007d88 <__pow5mult>
 8007418:	9005      	str	r0, [sp, #20]
 800741a:	2101      	movs	r1, #1
 800741c:	9803      	ldr	r0, [sp, #12]
 800741e:	f000 fbe9 	bl	8007bf4 <__i2b>
 8007422:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007424:	0006      	movs	r6, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d100      	bne.n	800742c <_dtoa_r+0x824>
 800742a:	e1bc      	b.n	80077a6 <_dtoa_r+0xb9e>
 800742c:	001a      	movs	r2, r3
 800742e:	0001      	movs	r1, r0
 8007430:	9803      	ldr	r0, [sp, #12]
 8007432:	f000 fca9 	bl	8007d88 <__pow5mult>
 8007436:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007438:	0006      	movs	r6, r0
 800743a:	2500      	movs	r5, #0
 800743c:	2b01      	cmp	r3, #1
 800743e:	dc16      	bgt.n	800746e <_dtoa_r+0x866>
 8007440:	2500      	movs	r5, #0
 8007442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007444:	42ab      	cmp	r3, r5
 8007446:	d10e      	bne.n	8007466 <_dtoa_r+0x85e>
 8007448:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800744a:	031b      	lsls	r3, r3, #12
 800744c:	42ab      	cmp	r3, r5
 800744e:	d10a      	bne.n	8007466 <_dtoa_r+0x85e>
 8007450:	4b8d      	ldr	r3, [pc, #564]	@ (8007688 <_dtoa_r+0xa80>)
 8007452:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007454:	4213      	tst	r3, r2
 8007456:	d006      	beq.n	8007466 <_dtoa_r+0x85e>
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	3501      	adds	r5, #1
 800745c:	3301      	adds	r3, #1
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007462:	3301      	adds	r3, #1
 8007464:	930d      	str	r3, [sp, #52]	@ 0x34
 8007466:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007468:	2001      	movs	r0, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d008      	beq.n	8007480 <_dtoa_r+0x878>
 800746e:	6933      	ldr	r3, [r6, #16]
 8007470:	3303      	adds	r3, #3
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	18f3      	adds	r3, r6, r3
 8007476:	6858      	ldr	r0, [r3, #4]
 8007478:	f000 fb6c 	bl	8007b54 <__hi0bits>
 800747c:	2320      	movs	r3, #32
 800747e:	1a18      	subs	r0, r3, r0
 8007480:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007482:	1818      	adds	r0, r3, r0
 8007484:	0002      	movs	r2, r0
 8007486:	231f      	movs	r3, #31
 8007488:	401a      	ands	r2, r3
 800748a:	4218      	tst	r0, r3
 800748c:	d065      	beq.n	800755a <_dtoa_r+0x952>
 800748e:	3301      	adds	r3, #1
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	2b04      	cmp	r3, #4
 8007494:	dd5d      	ble.n	8007552 <_dtoa_r+0x94a>
 8007496:	231c      	movs	r3, #28
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	9a06      	ldr	r2, [sp, #24]
 800749c:	18e4      	adds	r4, r4, r3
 800749e:	18d2      	adds	r2, r2, r3
 80074a0:	9206      	str	r2, [sp, #24]
 80074a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80074a8:	9b06      	ldr	r3, [sp, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd05      	ble.n	80074ba <_dtoa_r+0x8b2>
 80074ae:	001a      	movs	r2, r3
 80074b0:	9905      	ldr	r1, [sp, #20]
 80074b2:	9803      	ldr	r0, [sp, #12]
 80074b4:	f000 fcc4 	bl	8007e40 <__lshift>
 80074b8:	9005      	str	r0, [sp, #20]
 80074ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd05      	ble.n	80074cc <_dtoa_r+0x8c4>
 80074c0:	0031      	movs	r1, r6
 80074c2:	001a      	movs	r2, r3
 80074c4:	9803      	ldr	r0, [sp, #12]
 80074c6:	f000 fcbb 	bl	8007e40 <__lshift>
 80074ca:	0006      	movs	r6, r0
 80074cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d045      	beq.n	800755e <_dtoa_r+0x956>
 80074d2:	0031      	movs	r1, r6
 80074d4:	9805      	ldr	r0, [sp, #20]
 80074d6:	f000 fd1f 	bl	8007f18 <__mcmp>
 80074da:	2800      	cmp	r0, #0
 80074dc:	da3f      	bge.n	800755e <_dtoa_r+0x956>
 80074de:	9b04      	ldr	r3, [sp, #16]
 80074e0:	220a      	movs	r2, #10
 80074e2:	3b01      	subs	r3, #1
 80074e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80074e6:	9905      	ldr	r1, [sp, #20]
 80074e8:	2300      	movs	r3, #0
 80074ea:	9803      	ldr	r0, [sp, #12]
 80074ec:	f000 faee 	bl	8007acc <__multadd>
 80074f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074f2:	9005      	str	r0, [sp, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d100      	bne.n	80074fa <_dtoa_r+0x8f2>
 80074f8:	e15c      	b.n	80077b4 <_dtoa_r+0xbac>
 80074fa:	2300      	movs	r3, #0
 80074fc:	0039      	movs	r1, r7
 80074fe:	220a      	movs	r2, #10
 8007500:	9803      	ldr	r0, [sp, #12]
 8007502:	f000 fae3 	bl	8007acc <__multadd>
 8007506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007508:	0007      	movs	r7, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	dc55      	bgt.n	80075ba <_dtoa_r+0x9b2>
 800750e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007510:	2b02      	cmp	r3, #2
 8007512:	dc2d      	bgt.n	8007570 <_dtoa_r+0x968>
 8007514:	e051      	b.n	80075ba <_dtoa_r+0x9b2>
 8007516:	2336      	movs	r3, #54	@ 0x36
 8007518:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800751a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800751c:	9c06      	ldr	r4, [sp, #24]
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	e73c      	b.n	800739c <_dtoa_r+0x794>
 8007522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007524:	1e5d      	subs	r5, r3, #1
 8007526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007528:	42ab      	cmp	r3, r5
 800752a:	db08      	blt.n	800753e <_dtoa_r+0x936>
 800752c:	1b5d      	subs	r5, r3, r5
 800752e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007530:	9c06      	ldr	r4, [sp, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	db00      	blt.n	8007538 <_dtoa_r+0x930>
 8007536:	e731      	b.n	800739c <_dtoa_r+0x794>
 8007538:	1ae4      	subs	r4, r4, r3
 800753a:	2300      	movs	r3, #0
 800753c:	e72e      	b.n	800739c <_dtoa_r+0x794>
 800753e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007540:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007542:	1aeb      	subs	r3, r5, r3
 8007544:	18d3      	adds	r3, r2, r3
 8007546:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007548:	9314      	str	r3, [sp, #80]	@ 0x50
 800754a:	2500      	movs	r5, #0
 800754c:	e7ef      	b.n	800752e <_dtoa_r+0x926>
 800754e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007550:	e75e      	b.n	8007410 <_dtoa_r+0x808>
 8007552:	2b04      	cmp	r3, #4
 8007554:	d0a8      	beq.n	80074a8 <_dtoa_r+0x8a0>
 8007556:	331c      	adds	r3, #28
 8007558:	e79f      	b.n	800749a <_dtoa_r+0x892>
 800755a:	0013      	movs	r3, r2
 800755c:	e7fb      	b.n	8007556 <_dtoa_r+0x94e>
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	930c      	str	r3, [sp, #48]	@ 0x30
 8007562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007564:	930e      	str	r3, [sp, #56]	@ 0x38
 8007566:	2b00      	cmp	r3, #0
 8007568:	dc23      	bgt.n	80075b2 <_dtoa_r+0x9aa>
 800756a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800756c:	2b02      	cmp	r3, #2
 800756e:	dd20      	ble.n	80075b2 <_dtoa_r+0x9aa>
 8007570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007572:	2b00      	cmp	r3, #0
 8007574:	d000      	beq.n	8007578 <_dtoa_r+0x970>
 8007576:	e6b5      	b.n	80072e4 <_dtoa_r+0x6dc>
 8007578:	0031      	movs	r1, r6
 800757a:	2205      	movs	r2, #5
 800757c:	9803      	ldr	r0, [sp, #12]
 800757e:	f000 faa5 	bl	8007acc <__multadd>
 8007582:	0006      	movs	r6, r0
 8007584:	0001      	movs	r1, r0
 8007586:	9805      	ldr	r0, [sp, #20]
 8007588:	f000 fcc6 	bl	8007f18 <__mcmp>
 800758c:	2800      	cmp	r0, #0
 800758e:	dc00      	bgt.n	8007592 <_dtoa_r+0x98a>
 8007590:	e6a8      	b.n	80072e4 <_dtoa_r+0x6dc>
 8007592:	9b08      	ldr	r3, [sp, #32]
 8007594:	9a08      	ldr	r2, [sp, #32]
 8007596:	1c5c      	adds	r4, r3, #1
 8007598:	2331      	movs	r3, #49	@ 0x31
 800759a:	7013      	strb	r3, [r2, #0]
 800759c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800759e:	3301      	adds	r3, #1
 80075a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80075a2:	e6a3      	b.n	80072ec <_dtoa_r+0x6e4>
 80075a4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80075a6:	0037      	movs	r7, r6
 80075a8:	e7f3      	b.n	8007592 <_dtoa_r+0x98a>
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80075ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80075b0:	e7f9      	b.n	80075a6 <_dtoa_r+0x99e>
 80075b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d100      	bne.n	80075ba <_dtoa_r+0x9b2>
 80075b8:	e100      	b.n	80077bc <_dtoa_r+0xbb4>
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	dd05      	ble.n	80075ca <_dtoa_r+0x9c2>
 80075be:	0039      	movs	r1, r7
 80075c0:	0022      	movs	r2, r4
 80075c2:	9803      	ldr	r0, [sp, #12]
 80075c4:	f000 fc3c 	bl	8007e40 <__lshift>
 80075c8:	0007      	movs	r7, r0
 80075ca:	0038      	movs	r0, r7
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	d018      	beq.n	8007602 <_dtoa_r+0x9fa>
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	9803      	ldr	r0, [sp, #12]
 80075d4:	f000 fa12 	bl	80079fc <_Balloc>
 80075d8:	1e04      	subs	r4, r0, #0
 80075da:	d105      	bne.n	80075e8 <_dtoa_r+0x9e0>
 80075dc:	0022      	movs	r2, r4
 80075de:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <_dtoa_r+0xa84>)
 80075e0:	482b      	ldr	r0, [pc, #172]	@ (8007690 <_dtoa_r+0xa88>)
 80075e2:	492c      	ldr	r1, [pc, #176]	@ (8007694 <_dtoa_r+0xa8c>)
 80075e4:	f7ff fb25 	bl	8006c32 <_dtoa_r+0x2a>
 80075e8:	0039      	movs	r1, r7
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	310c      	adds	r1, #12
 80075ee:	3202      	adds	r2, #2
 80075f0:	0092      	lsls	r2, r2, #2
 80075f2:	300c      	adds	r0, #12
 80075f4:	f000 fe6a 	bl	80082cc <memcpy>
 80075f8:	2201      	movs	r2, #1
 80075fa:	0021      	movs	r1, r4
 80075fc:	9803      	ldr	r0, [sp, #12]
 80075fe:	f000 fc1f 	bl	8007e40 <__lshift>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007606:	9306      	str	r3, [sp, #24]
 8007608:	3b01      	subs	r3, #1
 800760a:	189b      	adds	r3, r3, r2
 800760c:	2201      	movs	r2, #1
 800760e:	9704      	str	r7, [sp, #16]
 8007610:	0007      	movs	r7, r0
 8007612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	4013      	ands	r3, r2
 8007618:	930e      	str	r3, [sp, #56]	@ 0x38
 800761a:	0031      	movs	r1, r6
 800761c:	9805      	ldr	r0, [sp, #20]
 800761e:	f7ff fa65 	bl	8006aec <quorem>
 8007622:	9904      	ldr	r1, [sp, #16]
 8007624:	0005      	movs	r5, r0
 8007626:	900a      	str	r0, [sp, #40]	@ 0x28
 8007628:	9805      	ldr	r0, [sp, #20]
 800762a:	f000 fc75 	bl	8007f18 <__mcmp>
 800762e:	003a      	movs	r2, r7
 8007630:	900d      	str	r0, [sp, #52]	@ 0x34
 8007632:	0031      	movs	r1, r6
 8007634:	9803      	ldr	r0, [sp, #12]
 8007636:	f000 fc8b 	bl	8007f50 <__mdiff>
 800763a:	2201      	movs	r2, #1
 800763c:	68c3      	ldr	r3, [r0, #12]
 800763e:	0004      	movs	r4, r0
 8007640:	3530      	adds	r5, #48	@ 0x30
 8007642:	9209      	str	r2, [sp, #36]	@ 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <_dtoa_r+0xa4a>
 8007648:	0001      	movs	r1, r0
 800764a:	9805      	ldr	r0, [sp, #20]
 800764c:	f000 fc64 	bl	8007f18 <__mcmp>
 8007650:	9009      	str	r0, [sp, #36]	@ 0x24
 8007652:	0021      	movs	r1, r4
 8007654:	9803      	ldr	r0, [sp, #12]
 8007656:	f000 fa15 	bl	8007a84 <_Bfree>
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800765e:	1c5c      	adds	r4, r3, #1
 8007660:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007662:	4313      	orrs	r3, r2
 8007664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007666:	4313      	orrs	r3, r2
 8007668:	d116      	bne.n	8007698 <_dtoa_r+0xa90>
 800766a:	2d39      	cmp	r5, #57	@ 0x39
 800766c:	d02f      	beq.n	80076ce <_dtoa_r+0xac6>
 800766e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd01      	ble.n	8007678 <_dtoa_r+0xa70>
 8007674:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007676:	3531      	adds	r5, #49	@ 0x31
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	701d      	strb	r5, [r3, #0]
 800767c:	e638      	b.n	80072f0 <_dtoa_r+0x6e8>
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	40240000 	.word	0x40240000
 8007684:	00000433 	.word	0x00000433
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	08008b34 	.word	0x08008b34
 8007690:	08008adc 	.word	0x08008adc
 8007694:	000002ef 	.word	0x000002ef
 8007698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	db04      	blt.n	80076a8 <_dtoa_r+0xaa0>
 800769e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076a0:	4313      	orrs	r3, r2
 80076a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d11e      	bne.n	80076e6 <_dtoa_r+0xade>
 80076a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dde4      	ble.n	8007678 <_dtoa_r+0xa70>
 80076ae:	9905      	ldr	r1, [sp, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	9803      	ldr	r0, [sp, #12]
 80076b4:	f000 fbc4 	bl	8007e40 <__lshift>
 80076b8:	0031      	movs	r1, r6
 80076ba:	9005      	str	r0, [sp, #20]
 80076bc:	f000 fc2c 	bl	8007f18 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dc02      	bgt.n	80076ca <_dtoa_r+0xac2>
 80076c4:	d1d8      	bne.n	8007678 <_dtoa_r+0xa70>
 80076c6:	07eb      	lsls	r3, r5, #31
 80076c8:	d5d6      	bpl.n	8007678 <_dtoa_r+0xa70>
 80076ca:	2d39      	cmp	r5, #57	@ 0x39
 80076cc:	d1d2      	bne.n	8007674 <_dtoa_r+0xa6c>
 80076ce:	2339      	movs	r3, #57	@ 0x39
 80076d0:	9a06      	ldr	r2, [sp, #24]
 80076d2:	7013      	strb	r3, [r2, #0]
 80076d4:	0023      	movs	r3, r4
 80076d6:	001c      	movs	r4, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	2a39      	cmp	r2, #57	@ 0x39
 80076de:	d04f      	beq.n	8007780 <_dtoa_r+0xb78>
 80076e0:	3201      	adds	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e604      	b.n	80072f0 <_dtoa_r+0x6e8>
 80076e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dd03      	ble.n	80076f4 <_dtoa_r+0xaec>
 80076ec:	2d39      	cmp	r5, #57	@ 0x39
 80076ee:	d0ee      	beq.n	80076ce <_dtoa_r+0xac6>
 80076f0:	3501      	adds	r5, #1
 80076f2:	e7c1      	b.n	8007678 <_dtoa_r+0xa70>
 80076f4:	9b06      	ldr	r3, [sp, #24]
 80076f6:	9a06      	ldr	r2, [sp, #24]
 80076f8:	701d      	strb	r5, [r3, #0]
 80076fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d02a      	beq.n	8007756 <_dtoa_r+0xb4e>
 8007700:	2300      	movs	r3, #0
 8007702:	220a      	movs	r2, #10
 8007704:	9905      	ldr	r1, [sp, #20]
 8007706:	9803      	ldr	r0, [sp, #12]
 8007708:	f000 f9e0 	bl	8007acc <__multadd>
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	9005      	str	r0, [sp, #20]
 8007710:	42bb      	cmp	r3, r7
 8007712:	d109      	bne.n	8007728 <_dtoa_r+0xb20>
 8007714:	2300      	movs	r3, #0
 8007716:	220a      	movs	r2, #10
 8007718:	9904      	ldr	r1, [sp, #16]
 800771a:	9803      	ldr	r0, [sp, #12]
 800771c:	f000 f9d6 	bl	8007acc <__multadd>
 8007720:	9004      	str	r0, [sp, #16]
 8007722:	0007      	movs	r7, r0
 8007724:	9406      	str	r4, [sp, #24]
 8007726:	e778      	b.n	800761a <_dtoa_r+0xa12>
 8007728:	9904      	ldr	r1, [sp, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	220a      	movs	r2, #10
 800772e:	9803      	ldr	r0, [sp, #12]
 8007730:	f000 f9cc 	bl	8007acc <__multadd>
 8007734:	2300      	movs	r3, #0
 8007736:	9004      	str	r0, [sp, #16]
 8007738:	220a      	movs	r2, #10
 800773a:	0039      	movs	r1, r7
 800773c:	9803      	ldr	r0, [sp, #12]
 800773e:	f000 f9c5 	bl	8007acc <__multadd>
 8007742:	e7ee      	b.n	8007722 <_dtoa_r+0xb1a>
 8007744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007746:	2401      	movs	r4, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	dd00      	ble.n	800774e <_dtoa_r+0xb46>
 800774c:	001c      	movs	r4, r3
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	191c      	adds	r4, r3, r4
 8007752:	2300      	movs	r3, #0
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	2201      	movs	r2, #1
 800775a:	9803      	ldr	r0, [sp, #12]
 800775c:	f000 fb70 	bl	8007e40 <__lshift>
 8007760:	0031      	movs	r1, r6
 8007762:	9005      	str	r0, [sp, #20]
 8007764:	f000 fbd8 	bl	8007f18 <__mcmp>
 8007768:	2800      	cmp	r0, #0
 800776a:	dcb3      	bgt.n	80076d4 <_dtoa_r+0xacc>
 800776c:	d101      	bne.n	8007772 <_dtoa_r+0xb6a>
 800776e:	07ed      	lsls	r5, r5, #31
 8007770:	d4b0      	bmi.n	80076d4 <_dtoa_r+0xacc>
 8007772:	0023      	movs	r3, r4
 8007774:	001c      	movs	r4, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	2a30      	cmp	r2, #48	@ 0x30
 800777c:	d0fa      	beq.n	8007774 <_dtoa_r+0xb6c>
 800777e:	e5b7      	b.n	80072f0 <_dtoa_r+0x6e8>
 8007780:	9a08      	ldr	r2, [sp, #32]
 8007782:	429a      	cmp	r2, r3
 8007784:	d1a7      	bne.n	80076d6 <_dtoa_r+0xace>
 8007786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007788:	3301      	adds	r3, #1
 800778a:	930c      	str	r3, [sp, #48]	@ 0x30
 800778c:	2331      	movs	r3, #49	@ 0x31
 800778e:	7013      	strb	r3, [r2, #0]
 8007790:	e5ae      	b.n	80072f0 <_dtoa_r+0x6e8>
 8007792:	4b15      	ldr	r3, [pc, #84]	@ (80077e8 <_dtoa_r+0xbe0>)
 8007794:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <_dtoa_r+0xbe4>)
 800779a:	2a00      	cmp	r2, #0
 800779c:	d001      	beq.n	80077a2 <_dtoa_r+0xb9a>
 800779e:	f7ff fa7b 	bl	8006c98 <_dtoa_r+0x90>
 80077a2:	f7ff fa7b 	bl	8006c9c <_dtoa_r+0x94>
 80077a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	dc00      	bgt.n	80077ae <_dtoa_r+0xba6>
 80077ac:	e648      	b.n	8007440 <_dtoa_r+0x838>
 80077ae:	2001      	movs	r0, #1
 80077b0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80077b2:	e665      	b.n	8007480 <_dtoa_r+0x878>
 80077b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dc00      	bgt.n	80077bc <_dtoa_r+0xbb4>
 80077ba:	e6d6      	b.n	800756a <_dtoa_r+0x962>
 80077bc:	2400      	movs	r4, #0
 80077be:	0031      	movs	r1, r6
 80077c0:	9805      	ldr	r0, [sp, #20]
 80077c2:	f7ff f993 	bl	8006aec <quorem>
 80077c6:	9b08      	ldr	r3, [sp, #32]
 80077c8:	3030      	adds	r0, #48	@ 0x30
 80077ca:	5518      	strb	r0, [r3, r4]
 80077cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ce:	3401      	adds	r4, #1
 80077d0:	0005      	movs	r5, r0
 80077d2:	429c      	cmp	r4, r3
 80077d4:	dab6      	bge.n	8007744 <_dtoa_r+0xb3c>
 80077d6:	2300      	movs	r3, #0
 80077d8:	220a      	movs	r2, #10
 80077da:	9905      	ldr	r1, [sp, #20]
 80077dc:	9803      	ldr	r0, [sp, #12]
 80077de:	f000 f975 	bl	8007acc <__multadd>
 80077e2:	9005      	str	r0, [sp, #20]
 80077e4:	e7eb      	b.n	80077be <_dtoa_r+0xbb6>
 80077e6:	46c0      	nop			@ (mov r8, r8)
 80077e8:	08008ab8 	.word	0x08008ab8
 80077ec:	08008ac0 	.word	0x08008ac0

080077f0 <_free_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	0005      	movs	r5, r0
 80077f4:	1e0c      	subs	r4, r1, #0
 80077f6:	d010      	beq.n	800781a <_free_r+0x2a>
 80077f8:	3c04      	subs	r4, #4
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	da00      	bge.n	8007802 <_free_r+0x12>
 8007800:	18e4      	adds	r4, r4, r3
 8007802:	0028      	movs	r0, r5
 8007804:	f000 f8ea 	bl	80079dc <__malloc_lock>
 8007808:	4a1d      	ldr	r2, [pc, #116]	@ (8007880 <_free_r+0x90>)
 800780a:	6813      	ldr	r3, [r2, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <_free_r+0x2c>
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	6014      	str	r4, [r2, #0]
 8007814:	0028      	movs	r0, r5
 8007816:	f000 f8e9 	bl	80079ec <__malloc_unlock>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	42a3      	cmp	r3, r4
 800781e:	d908      	bls.n	8007832 <_free_r+0x42>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	1821      	adds	r1, r4, r0
 8007824:	428b      	cmp	r3, r1
 8007826:	d1f3      	bne.n	8007810 <_free_r+0x20>
 8007828:	6819      	ldr	r1, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	1809      	adds	r1, r1, r0
 800782e:	6021      	str	r1, [r4, #0]
 8007830:	e7ee      	b.n	8007810 <_free_r+0x20>
 8007832:	001a      	movs	r2, r3
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <_free_r+0x4e>
 800783a:	42a3      	cmp	r3, r4
 800783c:	d9f9      	bls.n	8007832 <_free_r+0x42>
 800783e:	6811      	ldr	r1, [r2, #0]
 8007840:	1850      	adds	r0, r2, r1
 8007842:	42a0      	cmp	r0, r4
 8007844:	d10b      	bne.n	800785e <_free_r+0x6e>
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	1809      	adds	r1, r1, r0
 800784a:	1850      	adds	r0, r2, r1
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	4283      	cmp	r3, r0
 8007850:	d1e0      	bne.n	8007814 <_free_r+0x24>
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	1841      	adds	r1, r0, r1
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	6053      	str	r3, [r2, #4]
 800785c:	e7da      	b.n	8007814 <_free_r+0x24>
 800785e:	42a0      	cmp	r0, r4
 8007860:	d902      	bls.n	8007868 <_free_r+0x78>
 8007862:	230c      	movs	r3, #12
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	e7d5      	b.n	8007814 <_free_r+0x24>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	1821      	adds	r1, r4, r0
 800786c:	428b      	cmp	r3, r1
 800786e:	d103      	bne.n	8007878 <_free_r+0x88>
 8007870:	6819      	ldr	r1, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	1809      	adds	r1, r1, r0
 8007876:	6021      	str	r1, [r4, #0]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6054      	str	r4, [r2, #4]
 800787c:	e7ca      	b.n	8007814 <_free_r+0x24>
 800787e:	46c0      	nop			@ (mov r8, r8)
 8007880:	200004e8 	.word	0x200004e8

08007884 <malloc>:
 8007884:	b510      	push	{r4, lr}
 8007886:	4b03      	ldr	r3, [pc, #12]	@ (8007894 <malloc+0x10>)
 8007888:	0001      	movs	r1, r0
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	f000 f826 	bl	80078dc <_malloc_r>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	20000030 	.word	0x20000030

08007898 <sbrk_aligned>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4e0f      	ldr	r6, [pc, #60]	@ (80078d8 <sbrk_aligned+0x40>)
 800789c:	000d      	movs	r5, r1
 800789e:	6831      	ldr	r1, [r6, #0]
 80078a0:	0004      	movs	r4, r0
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d102      	bne.n	80078ac <sbrk_aligned+0x14>
 80078a6:	f000 fcff 	bl	80082a8 <_sbrk_r>
 80078aa:	6030      	str	r0, [r6, #0]
 80078ac:	0029      	movs	r1, r5
 80078ae:	0020      	movs	r0, r4
 80078b0:	f000 fcfa 	bl	80082a8 <_sbrk_r>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d103      	bne.n	80078c0 <sbrk_aligned+0x28>
 80078b8:	2501      	movs	r5, #1
 80078ba:	426d      	negs	r5, r5
 80078bc:	0028      	movs	r0, r5
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	2303      	movs	r3, #3
 80078c2:	1cc5      	adds	r5, r0, #3
 80078c4:	439d      	bics	r5, r3
 80078c6:	42a8      	cmp	r0, r5
 80078c8:	d0f8      	beq.n	80078bc <sbrk_aligned+0x24>
 80078ca:	1a29      	subs	r1, r5, r0
 80078cc:	0020      	movs	r0, r4
 80078ce:	f000 fceb 	bl	80082a8 <_sbrk_r>
 80078d2:	3001      	adds	r0, #1
 80078d4:	d1f2      	bne.n	80078bc <sbrk_aligned+0x24>
 80078d6:	e7ef      	b.n	80078b8 <sbrk_aligned+0x20>
 80078d8:	200004e4 	.word	0x200004e4

080078dc <_malloc_r>:
 80078dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078de:	2203      	movs	r2, #3
 80078e0:	1ccb      	adds	r3, r1, #3
 80078e2:	4393      	bics	r3, r2
 80078e4:	3308      	adds	r3, #8
 80078e6:	0005      	movs	r5, r0
 80078e8:	001f      	movs	r7, r3
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	d234      	bcs.n	8007958 <_malloc_r+0x7c>
 80078ee:	270c      	movs	r7, #12
 80078f0:	42b9      	cmp	r1, r7
 80078f2:	d833      	bhi.n	800795c <_malloc_r+0x80>
 80078f4:	0028      	movs	r0, r5
 80078f6:	f000 f871 	bl	80079dc <__malloc_lock>
 80078fa:	4e37      	ldr	r6, [pc, #220]	@ (80079d8 <_malloc_r+0xfc>)
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	001c      	movs	r4, r3
 8007900:	2c00      	cmp	r4, #0
 8007902:	d12f      	bne.n	8007964 <_malloc_r+0x88>
 8007904:	0039      	movs	r1, r7
 8007906:	0028      	movs	r0, r5
 8007908:	f7ff ffc6 	bl	8007898 <sbrk_aligned>
 800790c:	0004      	movs	r4, r0
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d15f      	bne.n	80079d2 <_malloc_r+0xf6>
 8007912:	6834      	ldr	r4, [r6, #0]
 8007914:	9400      	str	r4, [sp, #0]
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d14a      	bne.n	80079b2 <_malloc_r+0xd6>
 800791c:	2c00      	cmp	r4, #0
 800791e:	d052      	beq.n	80079c6 <_malloc_r+0xea>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	0028      	movs	r0, r5
 8007924:	18e3      	adds	r3, r4, r3
 8007926:	9900      	ldr	r1, [sp, #0]
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	f000 fcbd 	bl	80082a8 <_sbrk_r>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	4283      	cmp	r3, r0
 8007932:	d148      	bne.n	80079c6 <_malloc_r+0xea>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	0028      	movs	r0, r5
 8007938:	1aff      	subs	r7, r7, r3
 800793a:	0039      	movs	r1, r7
 800793c:	f7ff ffac 	bl	8007898 <sbrk_aligned>
 8007940:	3001      	adds	r0, #1
 8007942:	d040      	beq.n	80079c6 <_malloc_r+0xea>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	19db      	adds	r3, r3, r7
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	6833      	ldr	r3, [r6, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	2a00      	cmp	r2, #0
 8007950:	d133      	bne.n	80079ba <_malloc_r+0xde>
 8007952:	9b00      	ldr	r3, [sp, #0]
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	e019      	b.n	800798c <_malloc_r+0xb0>
 8007958:	2b00      	cmp	r3, #0
 800795a:	dac9      	bge.n	80078f0 <_malloc_r+0x14>
 800795c:	230c      	movs	r3, #12
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	2000      	movs	r0, #0
 8007962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1bc9      	subs	r1, r1, r7
 8007968:	d420      	bmi.n	80079ac <_malloc_r+0xd0>
 800796a:	290b      	cmp	r1, #11
 800796c:	d90a      	bls.n	8007984 <_malloc_r+0xa8>
 800796e:	19e2      	adds	r2, r4, r7
 8007970:	6027      	str	r7, [r4, #0]
 8007972:	42a3      	cmp	r3, r4
 8007974:	d104      	bne.n	8007980 <_malloc_r+0xa4>
 8007976:	6032      	str	r2, [r6, #0]
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	6011      	str	r1, [r2, #0]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	e005      	b.n	800798c <_malloc_r+0xb0>
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e7f9      	b.n	8007978 <_malloc_r+0x9c>
 8007984:	6862      	ldr	r2, [r4, #4]
 8007986:	42a3      	cmp	r3, r4
 8007988:	d10e      	bne.n	80079a8 <_malloc_r+0xcc>
 800798a:	6032      	str	r2, [r6, #0]
 800798c:	0028      	movs	r0, r5
 800798e:	f000 f82d 	bl	80079ec <__malloc_unlock>
 8007992:	0020      	movs	r0, r4
 8007994:	2207      	movs	r2, #7
 8007996:	300b      	adds	r0, #11
 8007998:	1d23      	adds	r3, r4, #4
 800799a:	4390      	bics	r0, r2
 800799c:	1ac2      	subs	r2, r0, r3
 800799e:	4298      	cmp	r0, r3
 80079a0:	d0df      	beq.n	8007962 <_malloc_r+0x86>
 80079a2:	1a1b      	subs	r3, r3, r0
 80079a4:	50a3      	str	r3, [r4, r2]
 80079a6:	e7dc      	b.n	8007962 <_malloc_r+0x86>
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	e7ef      	b.n	800798c <_malloc_r+0xb0>
 80079ac:	0023      	movs	r3, r4
 80079ae:	6864      	ldr	r4, [r4, #4]
 80079b0:	e7a6      	b.n	8007900 <_malloc_r+0x24>
 80079b2:	9c00      	ldr	r4, [sp, #0]
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	e7ad      	b.n	8007916 <_malloc_r+0x3a>
 80079ba:	001a      	movs	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	42a3      	cmp	r3, r4
 80079c0:	d1fb      	bne.n	80079ba <_malloc_r+0xde>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e7da      	b.n	800797c <_malloc_r+0xa0>
 80079c6:	230c      	movs	r3, #12
 80079c8:	0028      	movs	r0, r5
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f000 f80e 	bl	80079ec <__malloc_unlock>
 80079d0:	e7c6      	b.n	8007960 <_malloc_r+0x84>
 80079d2:	6007      	str	r7, [r0, #0]
 80079d4:	e7da      	b.n	800798c <_malloc_r+0xb0>
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	200004e8 	.word	0x200004e8

080079dc <__malloc_lock>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4802      	ldr	r0, [pc, #8]	@ (80079e8 <__malloc_lock+0xc>)
 80079e0:	f7ff f877 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	200004e0 	.word	0x200004e0

080079ec <__malloc_unlock>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4802      	ldr	r0, [pc, #8]	@ (80079f8 <__malloc_unlock+0xc>)
 80079f0:	f7ff f870 	bl	8006ad4 <__retarget_lock_release_recursive>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	200004e0 	.word	0x200004e0

080079fc <_Balloc>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	69c5      	ldr	r5, [r0, #28]
 8007a00:	0006      	movs	r6, r0
 8007a02:	000c      	movs	r4, r1
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	d10e      	bne.n	8007a26 <_Balloc+0x2a>
 8007a08:	2010      	movs	r0, #16
 8007a0a:	f7ff ff3b 	bl	8007884 <malloc>
 8007a0e:	1e02      	subs	r2, r0, #0
 8007a10:	61f0      	str	r0, [r6, #28]
 8007a12:	d104      	bne.n	8007a1e <_Balloc+0x22>
 8007a14:	216b      	movs	r1, #107	@ 0x6b
 8007a16:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <_Balloc+0x80>)
 8007a18:	4819      	ldr	r0, [pc, #100]	@ (8007a80 <_Balloc+0x84>)
 8007a1a:	f000 fc61 	bl	80082e0 <__assert_func>
 8007a1e:	6045      	str	r5, [r0, #4]
 8007a20:	6085      	str	r5, [r0, #8]
 8007a22:	6005      	str	r5, [r0, #0]
 8007a24:	60c5      	str	r5, [r0, #12]
 8007a26:	69f5      	ldr	r5, [r6, #28]
 8007a28:	68eb      	ldr	r3, [r5, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d013      	beq.n	8007a56 <_Balloc+0x5a>
 8007a2e:	69f3      	ldr	r3, [r6, #28]
 8007a30:	00a2      	lsls	r2, r4, #2
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d118      	bne.n	8007a6e <_Balloc+0x72>
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	000d      	movs	r5, r1
 8007a40:	40a5      	lsls	r5, r4
 8007a42:	1d6a      	adds	r2, r5, #5
 8007a44:	0030      	movs	r0, r6
 8007a46:	0092      	lsls	r2, r2, #2
 8007a48:	f000 fc68 	bl	800831c <_calloc_r>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d00c      	beq.n	8007a6a <_Balloc+0x6e>
 8007a50:	6044      	str	r4, [r0, #4]
 8007a52:	6085      	str	r5, [r0, #8]
 8007a54:	e00d      	b.n	8007a72 <_Balloc+0x76>
 8007a56:	2221      	movs	r2, #33	@ 0x21
 8007a58:	2104      	movs	r1, #4
 8007a5a:	0030      	movs	r0, r6
 8007a5c:	f000 fc5e 	bl	800831c <_calloc_r>
 8007a60:	69f3      	ldr	r3, [r6, #28]
 8007a62:	60e8      	str	r0, [r5, #12]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e1      	bne.n	8007a2e <_Balloc+0x32>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	6802      	ldr	r2, [r0, #0]
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	6103      	str	r3, [r0, #16]
 8007a76:	60c3      	str	r3, [r0, #12]
 8007a78:	e7f8      	b.n	8007a6c <_Balloc+0x70>
 8007a7a:	46c0      	nop			@ (mov r8, r8)
 8007a7c:	08008ac5 	.word	0x08008ac5
 8007a80:	08008b45 	.word	0x08008b45

08007a84 <_Bfree>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	69c6      	ldr	r6, [r0, #28]
 8007a88:	0005      	movs	r5, r0
 8007a8a:	000c      	movs	r4, r1
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	d10e      	bne.n	8007aae <_Bfree+0x2a>
 8007a90:	2010      	movs	r0, #16
 8007a92:	f7ff fef7 	bl	8007884 <malloc>
 8007a96:	1e02      	subs	r2, r0, #0
 8007a98:	61e8      	str	r0, [r5, #28]
 8007a9a:	d104      	bne.n	8007aa6 <_Bfree+0x22>
 8007a9c:	218f      	movs	r1, #143	@ 0x8f
 8007a9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <_Bfree+0x40>)
 8007aa0:	4809      	ldr	r0, [pc, #36]	@ (8007ac8 <_Bfree+0x44>)
 8007aa2:	f000 fc1d 	bl	80082e0 <__assert_func>
 8007aa6:	6046      	str	r6, [r0, #4]
 8007aa8:	6086      	str	r6, [r0, #8]
 8007aaa:	6006      	str	r6, [r0, #0]
 8007aac:	60c6      	str	r6, [r0, #12]
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	d007      	beq.n	8007ac2 <_Bfree+0x3e>
 8007ab2:	69eb      	ldr	r3, [r5, #28]
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	6022      	str	r2, [r4, #0]
 8007ac0:	601c      	str	r4, [r3, #0]
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	08008ac5 	.word	0x08008ac5
 8007ac8:	08008b45 	.word	0x08008b45

08007acc <__multadd>:
 8007acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ace:	000f      	movs	r7, r1
 8007ad0:	9001      	str	r0, [sp, #4]
 8007ad2:	000c      	movs	r4, r1
 8007ad4:	001e      	movs	r6, r3
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	690d      	ldr	r5, [r1, #16]
 8007ada:	3714      	adds	r7, #20
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3001      	adds	r0, #1
 8007ae0:	b299      	uxth	r1, r3
 8007ae2:	4351      	muls	r1, r2
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	4353      	muls	r3, r2
 8007ae8:	1989      	adds	r1, r1, r6
 8007aea:	0c0e      	lsrs	r6, r1, #16
 8007aec:	199b      	adds	r3, r3, r6
 8007aee:	0c1e      	lsrs	r6, r3, #16
 8007af0:	b289      	uxth	r1, r1
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	185b      	adds	r3, r3, r1
 8007af6:	c708      	stmia	r7!, {r3}
 8007af8:	4285      	cmp	r5, r0
 8007afa:	dcef      	bgt.n	8007adc <__multadd+0x10>
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	d022      	beq.n	8007b46 <__multadd+0x7a>
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	dc19      	bgt.n	8007b3a <__multadd+0x6e>
 8007b06:	6861      	ldr	r1, [r4, #4]
 8007b08:	9801      	ldr	r0, [sp, #4]
 8007b0a:	3101      	adds	r1, #1
 8007b0c:	f7ff ff76 	bl	80079fc <_Balloc>
 8007b10:	1e07      	subs	r7, r0, #0
 8007b12:	d105      	bne.n	8007b20 <__multadd+0x54>
 8007b14:	003a      	movs	r2, r7
 8007b16:	21ba      	movs	r1, #186	@ 0xba
 8007b18:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <__multadd+0x80>)
 8007b1a:	480d      	ldr	r0, [pc, #52]	@ (8007b50 <__multadd+0x84>)
 8007b1c:	f000 fbe0 	bl	80082e0 <__assert_func>
 8007b20:	0021      	movs	r1, r4
 8007b22:	6922      	ldr	r2, [r4, #16]
 8007b24:	310c      	adds	r1, #12
 8007b26:	3202      	adds	r2, #2
 8007b28:	0092      	lsls	r2, r2, #2
 8007b2a:	300c      	adds	r0, #12
 8007b2c:	f000 fbce 	bl	80082cc <memcpy>
 8007b30:	0021      	movs	r1, r4
 8007b32:	9801      	ldr	r0, [sp, #4]
 8007b34:	f7ff ffa6 	bl	8007a84 <_Bfree>
 8007b38:	003c      	movs	r4, r7
 8007b3a:	1d2b      	adds	r3, r5, #4
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	18e3      	adds	r3, r4, r3
 8007b40:	3501      	adds	r5, #1
 8007b42:	605e      	str	r6, [r3, #4]
 8007b44:	6125      	str	r5, [r4, #16]
 8007b46:	0020      	movs	r0, r4
 8007b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b4a:	46c0      	nop			@ (mov r8, r8)
 8007b4c:	08008b34 	.word	0x08008b34
 8007b50:	08008b45 	.word	0x08008b45

08007b54 <__hi0bits>:
 8007b54:	2280      	movs	r2, #128	@ 0x80
 8007b56:	0003      	movs	r3, r0
 8007b58:	0252      	lsls	r2, r2, #9
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d201      	bcs.n	8007b64 <__hi0bits+0x10>
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	3010      	adds	r0, #16
 8007b64:	2280      	movs	r2, #128	@ 0x80
 8007b66:	0452      	lsls	r2, r2, #17
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d201      	bcs.n	8007b70 <__hi0bits+0x1c>
 8007b6c:	3008      	adds	r0, #8
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	2280      	movs	r2, #128	@ 0x80
 8007b72:	0552      	lsls	r2, r2, #21
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d201      	bcs.n	8007b7c <__hi0bits+0x28>
 8007b78:	3004      	adds	r0, #4
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	2280      	movs	r2, #128	@ 0x80
 8007b7e:	05d2      	lsls	r2, r2, #23
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d201      	bcs.n	8007b88 <__hi0bits+0x34>
 8007b84:	3002      	adds	r0, #2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db03      	blt.n	8007b94 <__hi0bits+0x40>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	4213      	tst	r3, r2
 8007b90:	d100      	bne.n	8007b94 <__hi0bits+0x40>
 8007b92:	2020      	movs	r0, #32
 8007b94:	4770      	bx	lr

08007b96 <__lo0bits>:
 8007b96:	6803      	ldr	r3, [r0, #0]
 8007b98:	0001      	movs	r1, r0
 8007b9a:	2207      	movs	r2, #7
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	4010      	ands	r0, r2
 8007ba0:	4213      	tst	r3, r2
 8007ba2:	d00d      	beq.n	8007bc0 <__lo0bits+0x2a>
 8007ba4:	3a06      	subs	r2, #6
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	4213      	tst	r3, r2
 8007baa:	d105      	bne.n	8007bb8 <__lo0bits+0x22>
 8007bac:	3002      	adds	r0, #2
 8007bae:	4203      	tst	r3, r0
 8007bb0:	d003      	beq.n	8007bba <__lo0bits+0x24>
 8007bb2:	40d3      	lsrs	r3, r2
 8007bb4:	0010      	movs	r0, r2
 8007bb6:	600b      	str	r3, [r1, #0]
 8007bb8:	4770      	bx	lr
 8007bba:	089b      	lsrs	r3, r3, #2
 8007bbc:	600b      	str	r3, [r1, #0]
 8007bbe:	e7fb      	b.n	8007bb8 <__lo0bits+0x22>
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d101      	bne.n	8007bca <__lo0bits+0x34>
 8007bc6:	2010      	movs	r0, #16
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	d101      	bne.n	8007bd4 <__lo0bits+0x3e>
 8007bd0:	3008      	adds	r0, #8
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	071a      	lsls	r2, r3, #28
 8007bd6:	d101      	bne.n	8007bdc <__lo0bits+0x46>
 8007bd8:	3004      	adds	r0, #4
 8007bda:	091b      	lsrs	r3, r3, #4
 8007bdc:	079a      	lsls	r2, r3, #30
 8007bde:	d101      	bne.n	8007be4 <__lo0bits+0x4e>
 8007be0:	3002      	adds	r0, #2
 8007be2:	089b      	lsrs	r3, r3, #2
 8007be4:	07da      	lsls	r2, r3, #31
 8007be6:	d4e9      	bmi.n	8007bbc <__lo0bits+0x26>
 8007be8:	3001      	adds	r0, #1
 8007bea:	085b      	lsrs	r3, r3, #1
 8007bec:	d1e6      	bne.n	8007bbc <__lo0bits+0x26>
 8007bee:	2020      	movs	r0, #32
 8007bf0:	e7e2      	b.n	8007bb8 <__lo0bits+0x22>
	...

08007bf4 <__i2b>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	000c      	movs	r4, r1
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	f7ff feff 	bl	80079fc <_Balloc>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d107      	bne.n	8007c12 <__i2b+0x1e>
 8007c02:	2146      	movs	r1, #70	@ 0x46
 8007c04:	4c05      	ldr	r4, [pc, #20]	@ (8007c1c <__i2b+0x28>)
 8007c06:	0002      	movs	r2, r0
 8007c08:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <__i2b+0x2c>)
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	31ff      	adds	r1, #255	@ 0xff
 8007c0e:	f000 fb67 	bl	80082e0 <__assert_func>
 8007c12:	2301      	movs	r3, #1
 8007c14:	6144      	str	r4, [r0, #20]
 8007c16:	6103      	str	r3, [r0, #16]
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	08008b45 	.word	0x08008b45
 8007c20:	08008b34 	.word	0x08008b34

08007c24 <__multiply>:
 8007c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c26:	0014      	movs	r4, r2
 8007c28:	690a      	ldr	r2, [r1, #16]
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	000d      	movs	r5, r1
 8007c2e:	b08b      	sub	sp, #44	@ 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	db02      	blt.n	8007c3a <__multiply+0x16>
 8007c34:	0023      	movs	r3, r4
 8007c36:	000c      	movs	r4, r1
 8007c38:	001d      	movs	r5, r3
 8007c3a:	6927      	ldr	r7, [r4, #16]
 8007c3c:	692e      	ldr	r6, [r5, #16]
 8007c3e:	6861      	ldr	r1, [r4, #4]
 8007c40:	19bb      	adds	r3, r7, r6
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	68a3      	ldr	r3, [r4, #8]
 8007c46:	19ba      	adds	r2, r7, r6
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	da00      	bge.n	8007c4e <__multiply+0x2a>
 8007c4c:	3101      	adds	r1, #1
 8007c4e:	f7ff fed5 	bl	80079fc <_Balloc>
 8007c52:	9002      	str	r0, [sp, #8]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d106      	bne.n	8007c66 <__multiply+0x42>
 8007c58:	21b1      	movs	r1, #177	@ 0xb1
 8007c5a:	4b49      	ldr	r3, [pc, #292]	@ (8007d80 <__multiply+0x15c>)
 8007c5c:	4849      	ldr	r0, [pc, #292]	@ (8007d84 <__multiply+0x160>)
 8007c5e:	9a02      	ldr	r2, [sp, #8]
 8007c60:	0049      	lsls	r1, r1, #1
 8007c62:	f000 fb3d 	bl	80082e0 <__assert_func>
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	469c      	mov	ip, r3
 8007c6e:	19bb      	adds	r3, r7, r6
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4463      	add	r3, ip
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	4663      	mov	r3, ip
 8007c78:	9904      	ldr	r1, [sp, #16]
 8007c7a:	428b      	cmp	r3, r1
 8007c7c:	d32a      	bcc.n	8007cd4 <__multiply+0xb0>
 8007c7e:	0023      	movs	r3, r4
 8007c80:	00bf      	lsls	r7, r7, #2
 8007c82:	3314      	adds	r3, #20
 8007c84:	3514      	adds	r5, #20
 8007c86:	9308      	str	r3, [sp, #32]
 8007c88:	00b6      	lsls	r6, r6, #2
 8007c8a:	19db      	adds	r3, r3, r7
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	19ab      	adds	r3, r5, r6
 8007c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c92:	2304      	movs	r3, #4
 8007c94:	9306      	str	r3, [sp, #24]
 8007c96:	0023      	movs	r3, r4
 8007c98:	9a05      	ldr	r2, [sp, #20]
 8007c9a:	3315      	adds	r3, #21
 8007c9c:	9501      	str	r5, [sp, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d305      	bcc.n	8007cae <__multiply+0x8a>
 8007ca2:	1b13      	subs	r3, r2, r4
 8007ca4:	3b15      	subs	r3, #21
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	3301      	adds	r3, #1
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	9306      	str	r3, [sp, #24]
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d310      	bcc.n	8007cd8 <__multiply+0xb4>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dd05      	ble.n	8007cc8 <__multiply+0xa4>
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d056      	beq.n	8007d76 <__multiply+0x152>
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	9a03      	ldr	r2, [sp, #12]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	611a      	str	r2, [r3, #16]
 8007cd0:	b00b      	add	sp, #44	@ 0x2c
 8007cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd4:	c304      	stmia	r3!, {r2}
 8007cd6:	e7cf      	b.n	8007c78 <__multiply+0x54>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	b280      	uxth	r0, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d01e      	beq.n	8007d20 <__multiply+0xfc>
 8007ce2:	4667      	mov	r7, ip
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	9e08      	ldr	r6, [sp, #32]
 8007ce8:	ce02      	ldmia	r6!, {r1}
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	b28b      	uxth	r3, r1
 8007cf0:	4343      	muls	r3, r0
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	466b      	mov	r3, sp
 8007cf6:	0c09      	lsrs	r1, r1, #16
 8007cf8:	8b9b      	ldrh	r3, [r3, #28]
 8007cfa:	4341      	muls	r1, r0
 8007cfc:	18d3      	adds	r3, r2, r3
 8007cfe:	9a07      	ldr	r2, [sp, #28]
 8007d00:	195b      	adds	r3, r3, r5
 8007d02:	0c12      	lsrs	r2, r2, #16
 8007d04:	1889      	adds	r1, r1, r2
 8007d06:	0c1a      	lsrs	r2, r3, #16
 8007d08:	188a      	adds	r2, r1, r2
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	0c15      	lsrs	r5, r2, #16
 8007d0e:	0412      	lsls	r2, r2, #16
 8007d10:	431a      	orrs	r2, r3
 8007d12:	9b05      	ldr	r3, [sp, #20]
 8007d14:	c704      	stmia	r7!, {r2}
 8007d16:	42b3      	cmp	r3, r6
 8007d18:	d8e6      	bhi.n	8007ce8 <__multiply+0xc4>
 8007d1a:	4663      	mov	r3, ip
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	509d      	str	r5, [r3, r2]
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	0c00      	lsrs	r0, r0, #16
 8007d26:	d020      	beq.n	8007d6a <__multiply+0x146>
 8007d28:	4663      	mov	r3, ip
 8007d2a:	0025      	movs	r5, r4
 8007d2c:	4661      	mov	r1, ip
 8007d2e:	2700      	movs	r7, #0
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3514      	adds	r5, #20
 8007d34:	682a      	ldr	r2, [r5, #0]
 8007d36:	680e      	ldr	r6, [r1, #0]
 8007d38:	b292      	uxth	r2, r2
 8007d3a:	4342      	muls	r2, r0
 8007d3c:	0c36      	lsrs	r6, r6, #16
 8007d3e:	1992      	adds	r2, r2, r6
 8007d40:	19d2      	adds	r2, r2, r7
 8007d42:	0416      	lsls	r6, r2, #16
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	431e      	orrs	r6, r3
 8007d48:	600e      	str	r6, [r1, #0]
 8007d4a:	cd40      	ldmia	r5!, {r6}
 8007d4c:	684b      	ldr	r3, [r1, #4]
 8007d4e:	0c36      	lsrs	r6, r6, #16
 8007d50:	4346      	muls	r6, r0
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	0c12      	lsrs	r2, r2, #16
 8007d56:	18f3      	adds	r3, r6, r3
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	9a05      	ldr	r2, [sp, #20]
 8007d5c:	0c1f      	lsrs	r7, r3, #16
 8007d5e:	3104      	adds	r1, #4
 8007d60:	42aa      	cmp	r2, r5
 8007d62:	d8e7      	bhi.n	8007d34 <__multiply+0x110>
 8007d64:	4662      	mov	r2, ip
 8007d66:	9906      	ldr	r1, [sp, #24]
 8007d68:	5053      	str	r3, [r2, r1]
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	2304      	movs	r3, #4
 8007d72:	449c      	add	ip, r3
 8007d74:	e79b      	b.n	8007cae <__multiply+0x8a>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	e79b      	b.n	8007cb6 <__multiply+0x92>
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	08008b34 	.word	0x08008b34
 8007d84:	08008b45 	.word	0x08008b45

08007d88 <__pow5mult>:
 8007d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	0015      	movs	r5, r2
 8007d8e:	0007      	movs	r7, r0
 8007d90:	000e      	movs	r6, r1
 8007d92:	401a      	ands	r2, r3
 8007d94:	421d      	tst	r5, r3
 8007d96:	d008      	beq.n	8007daa <__pow5mult+0x22>
 8007d98:	4925      	ldr	r1, [pc, #148]	@ (8007e30 <__pow5mult+0xa8>)
 8007d9a:	3a01      	subs	r2, #1
 8007d9c:	0092      	lsls	r2, r2, #2
 8007d9e:	5852      	ldr	r2, [r2, r1]
 8007da0:	2300      	movs	r3, #0
 8007da2:	0031      	movs	r1, r6
 8007da4:	f7ff fe92 	bl	8007acc <__multadd>
 8007da8:	0006      	movs	r6, r0
 8007daa:	10ad      	asrs	r5, r5, #2
 8007dac:	d03d      	beq.n	8007e2a <__pow5mult+0xa2>
 8007dae:	69fc      	ldr	r4, [r7, #28]
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	d10f      	bne.n	8007dd4 <__pow5mult+0x4c>
 8007db4:	2010      	movs	r0, #16
 8007db6:	f7ff fd65 	bl	8007884 <malloc>
 8007dba:	1e02      	subs	r2, r0, #0
 8007dbc:	61f8      	str	r0, [r7, #28]
 8007dbe:	d105      	bne.n	8007dcc <__pow5mult+0x44>
 8007dc0:	21b4      	movs	r1, #180	@ 0xb4
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <__pow5mult+0xac>)
 8007dc4:	481c      	ldr	r0, [pc, #112]	@ (8007e38 <__pow5mult+0xb0>)
 8007dc6:	31ff      	adds	r1, #255	@ 0xff
 8007dc8:	f000 fa8a 	bl	80082e0 <__assert_func>
 8007dcc:	6044      	str	r4, [r0, #4]
 8007dce:	6084      	str	r4, [r0, #8]
 8007dd0:	6004      	str	r4, [r0, #0]
 8007dd2:	60c4      	str	r4, [r0, #12]
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	689c      	ldr	r4, [r3, #8]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d108      	bne.n	8007df0 <__pow5mult+0x68>
 8007dde:	0038      	movs	r0, r7
 8007de0:	4916      	ldr	r1, [pc, #88]	@ (8007e3c <__pow5mult+0xb4>)
 8007de2:	f7ff ff07 	bl	8007bf4 <__i2b>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	0004      	movs	r4, r0
 8007dea:	6098      	str	r0, [r3, #8]
 8007dec:	2300      	movs	r3, #0
 8007dee:	6003      	str	r3, [r0, #0]
 8007df0:	2301      	movs	r3, #1
 8007df2:	421d      	tst	r5, r3
 8007df4:	d00a      	beq.n	8007e0c <__pow5mult+0x84>
 8007df6:	0031      	movs	r1, r6
 8007df8:	0022      	movs	r2, r4
 8007dfa:	0038      	movs	r0, r7
 8007dfc:	f7ff ff12 	bl	8007c24 <__multiply>
 8007e00:	0031      	movs	r1, r6
 8007e02:	9001      	str	r0, [sp, #4]
 8007e04:	0038      	movs	r0, r7
 8007e06:	f7ff fe3d 	bl	8007a84 <_Bfree>
 8007e0a:	9e01      	ldr	r6, [sp, #4]
 8007e0c:	106d      	asrs	r5, r5, #1
 8007e0e:	d00c      	beq.n	8007e2a <__pow5mult+0xa2>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d107      	bne.n	8007e26 <__pow5mult+0x9e>
 8007e16:	0022      	movs	r2, r4
 8007e18:	0021      	movs	r1, r4
 8007e1a:	0038      	movs	r0, r7
 8007e1c:	f7ff ff02 	bl	8007c24 <__multiply>
 8007e20:	2300      	movs	r3, #0
 8007e22:	6020      	str	r0, [r4, #0]
 8007e24:	6003      	str	r3, [r0, #0]
 8007e26:	0004      	movs	r4, r0
 8007e28:	e7e2      	b.n	8007df0 <__pow5mult+0x68>
 8007e2a:	0030      	movs	r0, r6
 8007e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e2e:	46c0      	nop			@ (mov r8, r8)
 8007e30:	08008ba0 	.word	0x08008ba0
 8007e34:	08008ac5 	.word	0x08008ac5
 8007e38:	08008b45 	.word	0x08008b45
 8007e3c:	00000271 	.word	0x00000271

08007e40 <__lshift>:
 8007e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e42:	000c      	movs	r4, r1
 8007e44:	0016      	movs	r6, r2
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	1157      	asrs	r7, r2, #5
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	3301      	adds	r3, #1
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6849      	ldr	r1, [r1, #4]
 8007e56:	68a3      	ldr	r3, [r4, #8]
 8007e58:	9002      	str	r0, [sp, #8]
 8007e5a:	9a00      	ldr	r2, [sp, #0]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	db10      	blt.n	8007e82 <__lshift+0x42>
 8007e60:	9802      	ldr	r0, [sp, #8]
 8007e62:	f7ff fdcb 	bl	80079fc <_Balloc>
 8007e66:	2300      	movs	r3, #0
 8007e68:	0001      	movs	r1, r0
 8007e6a:	0005      	movs	r5, r0
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	3114      	adds	r1, #20
 8007e70:	4298      	cmp	r0, r3
 8007e72:	d10c      	bne.n	8007e8e <__lshift+0x4e>
 8007e74:	21ef      	movs	r1, #239	@ 0xef
 8007e76:	002a      	movs	r2, r5
 8007e78:	4b25      	ldr	r3, [pc, #148]	@ (8007f10 <__lshift+0xd0>)
 8007e7a:	4826      	ldr	r0, [pc, #152]	@ (8007f14 <__lshift+0xd4>)
 8007e7c:	0049      	lsls	r1, r1, #1
 8007e7e:	f000 fa2f 	bl	80082e0 <__assert_func>
 8007e82:	3101      	adds	r1, #1
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	e7e8      	b.n	8007e5a <__lshift+0x1a>
 8007e88:	0098      	lsls	r0, r3, #2
 8007e8a:	500a      	str	r2, [r1, r0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	42bb      	cmp	r3, r7
 8007e90:	dbfa      	blt.n	8007e88 <__lshift+0x48>
 8007e92:	43fb      	mvns	r3, r7
 8007e94:	17db      	asrs	r3, r3, #31
 8007e96:	401f      	ands	r7, r3
 8007e98:	00bf      	lsls	r7, r7, #2
 8007e9a:	0023      	movs	r3, r4
 8007e9c:	201f      	movs	r0, #31
 8007e9e:	19c9      	adds	r1, r1, r7
 8007ea0:	0037      	movs	r7, r6
 8007ea2:	6922      	ldr	r2, [r4, #16]
 8007ea4:	3314      	adds	r3, #20
 8007ea6:	0092      	lsls	r2, r2, #2
 8007ea8:	189a      	adds	r2, r3, r2
 8007eaa:	4007      	ands	r7, r0
 8007eac:	4206      	tst	r6, r0
 8007eae:	d029      	beq.n	8007f04 <__lshift+0xc4>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	1bc0      	subs	r0, r0, r7
 8007eb4:	9003      	str	r0, [sp, #12]
 8007eb6:	468c      	mov	ip, r1
 8007eb8:	2000      	movs	r0, #0
 8007eba:	681e      	ldr	r6, [r3, #0]
 8007ebc:	40be      	lsls	r6, r7
 8007ebe:	4306      	orrs	r6, r0
 8007ec0:	4660      	mov	r0, ip
 8007ec2:	c040      	stmia	r0!, {r6}
 8007ec4:	4684      	mov	ip, r0
 8007ec6:	9e03      	ldr	r6, [sp, #12]
 8007ec8:	cb01      	ldmia	r3!, {r0}
 8007eca:	40f0      	lsrs	r0, r6
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d8f4      	bhi.n	8007eba <__lshift+0x7a>
 8007ed0:	0026      	movs	r6, r4
 8007ed2:	3615      	adds	r6, #21
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	42b2      	cmp	r2, r6
 8007ed8:	d304      	bcc.n	8007ee4 <__lshift+0xa4>
 8007eda:	1b13      	subs	r3, r2, r4
 8007edc:	3b15      	subs	r3, #21
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	50c8      	str	r0, [r1, r3]
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d002      	beq.n	8007ef0 <__lshift+0xb0>
 8007eea:	9b01      	ldr	r3, [sp, #4]
 8007eec:	3302      	adds	r3, #2
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	9802      	ldr	r0, [sp, #8]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	0021      	movs	r1, r4
 8007ef8:	612b      	str	r3, [r5, #16]
 8007efa:	f7ff fdc3 	bl	8007a84 <_Bfree>
 8007efe:	0028      	movs	r0, r5
 8007f00:	b005      	add	sp, #20
 8007f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f04:	cb01      	ldmia	r3!, {r0}
 8007f06:	c101      	stmia	r1!, {r0}
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d8fb      	bhi.n	8007f04 <__lshift+0xc4>
 8007f0c:	e7f0      	b.n	8007ef0 <__lshift+0xb0>
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	08008b34 	.word	0x08008b34
 8007f14:	08008b45 	.word	0x08008b45

08007f18 <__mcmp>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	690b      	ldr	r3, [r1, #16]
 8007f1c:	6904      	ldr	r4, [r0, #16]
 8007f1e:	0002      	movs	r2, r0
 8007f20:	1ae0      	subs	r0, r4, r3
 8007f22:	429c      	cmp	r4, r3
 8007f24:	d10f      	bne.n	8007f46 <__mcmp+0x2e>
 8007f26:	3214      	adds	r2, #20
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	3114      	adds	r1, #20
 8007f2c:	0014      	movs	r4, r2
 8007f2e:	18c9      	adds	r1, r1, r3
 8007f30:	18d2      	adds	r2, r2, r3
 8007f32:	3a04      	subs	r2, #4
 8007f34:	3904      	subs	r1, #4
 8007f36:	6815      	ldr	r5, [r2, #0]
 8007f38:	680b      	ldr	r3, [r1, #0]
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	d004      	beq.n	8007f48 <__mcmp+0x30>
 8007f3e:	2001      	movs	r0, #1
 8007f40:	429d      	cmp	r5, r3
 8007f42:	d200      	bcs.n	8007f46 <__mcmp+0x2e>
 8007f44:	3802      	subs	r0, #2
 8007f46:	bd30      	pop	{r4, r5, pc}
 8007f48:	4294      	cmp	r4, r2
 8007f4a:	d3f2      	bcc.n	8007f32 <__mcmp+0x1a>
 8007f4c:	e7fb      	b.n	8007f46 <__mcmp+0x2e>
	...

08007f50 <__mdiff>:
 8007f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f52:	000c      	movs	r4, r1
 8007f54:	b087      	sub	sp, #28
 8007f56:	9000      	str	r0, [sp, #0]
 8007f58:	0011      	movs	r1, r2
 8007f5a:	0020      	movs	r0, r4
 8007f5c:	0017      	movs	r7, r2
 8007f5e:	f7ff ffdb 	bl	8007f18 <__mcmp>
 8007f62:	1e05      	subs	r5, r0, #0
 8007f64:	d110      	bne.n	8007f88 <__mdiff+0x38>
 8007f66:	0001      	movs	r1, r0
 8007f68:	9800      	ldr	r0, [sp, #0]
 8007f6a:	f7ff fd47 	bl	80079fc <_Balloc>
 8007f6e:	1e02      	subs	r2, r0, #0
 8007f70:	d104      	bne.n	8007f7c <__mdiff+0x2c>
 8007f72:	4b40      	ldr	r3, [pc, #256]	@ (8008074 <__mdiff+0x124>)
 8007f74:	4840      	ldr	r0, [pc, #256]	@ (8008078 <__mdiff+0x128>)
 8007f76:	4941      	ldr	r1, [pc, #260]	@ (800807c <__mdiff+0x12c>)
 8007f78:	f000 f9b2 	bl	80082e0 <__assert_func>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	6145      	str	r5, [r0, #20]
 8007f80:	6103      	str	r3, [r0, #16]
 8007f82:	0010      	movs	r0, r2
 8007f84:	b007      	add	sp, #28
 8007f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f88:	2600      	movs	r6, #0
 8007f8a:	42b0      	cmp	r0, r6
 8007f8c:	da03      	bge.n	8007f96 <__mdiff+0x46>
 8007f8e:	0023      	movs	r3, r4
 8007f90:	003c      	movs	r4, r7
 8007f92:	001f      	movs	r7, r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	9800      	ldr	r0, [sp, #0]
 8007f9a:	f7ff fd2f 	bl	80079fc <_Balloc>
 8007f9e:	1e02      	subs	r2, r0, #0
 8007fa0:	d103      	bne.n	8007faa <__mdiff+0x5a>
 8007fa2:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <__mdiff+0x124>)
 8007fa4:	4834      	ldr	r0, [pc, #208]	@ (8008078 <__mdiff+0x128>)
 8007fa6:	4936      	ldr	r1, [pc, #216]	@ (8008080 <__mdiff+0x130>)
 8007fa8:	e7e6      	b.n	8007f78 <__mdiff+0x28>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	3414      	adds	r4, #20
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	18e3      	adds	r3, r4, r3
 8007fb4:	0021      	movs	r1, r4
 8007fb6:	9401      	str	r4, [sp, #4]
 8007fb8:	003c      	movs	r4, r7
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	3414      	adds	r4, #20
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	18e3      	adds	r3, r4, r3
 8007fc4:	9303      	str	r3, [sp, #12]
 8007fc6:	0003      	movs	r3, r0
 8007fc8:	60c6      	str	r6, [r0, #12]
 8007fca:	468c      	mov	ip, r1
 8007fcc:	2000      	movs	r0, #0
 8007fce:	3314      	adds	r3, #20
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	4663      	mov	r3, ip
 8007fd6:	cb20      	ldmia	r3!, {r5}
 8007fd8:	b2a9      	uxth	r1, r5
 8007fda:	000e      	movs	r6, r1
 8007fdc:	469c      	mov	ip, r3
 8007fde:	cc08      	ldmia	r4!, {r3}
 8007fe0:	0c2d      	lsrs	r5, r5, #16
 8007fe2:	b299      	uxth	r1, r3
 8007fe4:	1a71      	subs	r1, r6, r1
 8007fe6:	1809      	adds	r1, r1, r0
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	1408      	asrs	r0, r1, #16
 8007fec:	1aeb      	subs	r3, r5, r3
 8007fee:	181b      	adds	r3, r3, r0
 8007ff0:	1418      	asrs	r0, r3, #16
 8007ff2:	b289      	uxth	r1, r1
 8007ff4:	041b      	lsls	r3, r3, #16
 8007ff6:	4319      	orrs	r1, r3
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	c302      	stmia	r3!, {r1}
 8007ffc:	9305      	str	r3, [sp, #20]
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	42a3      	cmp	r3, r4
 8008002:	d8e7      	bhi.n	8007fd4 <__mdiff+0x84>
 8008004:	0039      	movs	r1, r7
 8008006:	9c03      	ldr	r4, [sp, #12]
 8008008:	3115      	adds	r1, #21
 800800a:	2304      	movs	r3, #4
 800800c:	428c      	cmp	r4, r1
 800800e:	d304      	bcc.n	800801a <__mdiff+0xca>
 8008010:	1be3      	subs	r3, r4, r7
 8008012:	3b15      	subs	r3, #21
 8008014:	089b      	lsrs	r3, r3, #2
 8008016:	3301      	adds	r3, #1
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	9901      	ldr	r1, [sp, #4]
 800801c:	18cd      	adds	r5, r1, r3
 800801e:	9904      	ldr	r1, [sp, #16]
 8008020:	002e      	movs	r6, r5
 8008022:	18cb      	adds	r3, r1, r3
 8008024:	001f      	movs	r7, r3
 8008026:	9902      	ldr	r1, [sp, #8]
 8008028:	428e      	cmp	r6, r1
 800802a:	d311      	bcc.n	8008050 <__mdiff+0x100>
 800802c:	9c02      	ldr	r4, [sp, #8]
 800802e:	1ee9      	subs	r1, r5, #3
 8008030:	2000      	movs	r0, #0
 8008032:	428c      	cmp	r4, r1
 8008034:	d304      	bcc.n	8008040 <__mdiff+0xf0>
 8008036:	0021      	movs	r1, r4
 8008038:	3103      	adds	r1, #3
 800803a:	1b49      	subs	r1, r1, r5
 800803c:	0889      	lsrs	r1, r1, #2
 800803e:	0088      	lsls	r0, r1, #2
 8008040:	181b      	adds	r3, r3, r0
 8008042:	3b04      	subs	r3, #4
 8008044:	6819      	ldr	r1, [r3, #0]
 8008046:	2900      	cmp	r1, #0
 8008048:	d010      	beq.n	800806c <__mdiff+0x11c>
 800804a:	9b00      	ldr	r3, [sp, #0]
 800804c:	6113      	str	r3, [r2, #16]
 800804e:	e798      	b.n	8007f82 <__mdiff+0x32>
 8008050:	4684      	mov	ip, r0
 8008052:	ce02      	ldmia	r6!, {r1}
 8008054:	b288      	uxth	r0, r1
 8008056:	4460      	add	r0, ip
 8008058:	1400      	asrs	r0, r0, #16
 800805a:	0c0c      	lsrs	r4, r1, #16
 800805c:	1904      	adds	r4, r0, r4
 800805e:	4461      	add	r1, ip
 8008060:	1420      	asrs	r0, r4, #16
 8008062:	b289      	uxth	r1, r1
 8008064:	0424      	lsls	r4, r4, #16
 8008066:	4321      	orrs	r1, r4
 8008068:	c702      	stmia	r7!, {r1}
 800806a:	e7dc      	b.n	8008026 <__mdiff+0xd6>
 800806c:	9900      	ldr	r1, [sp, #0]
 800806e:	3901      	subs	r1, #1
 8008070:	9100      	str	r1, [sp, #0]
 8008072:	e7e6      	b.n	8008042 <__mdiff+0xf2>
 8008074:	08008b34 	.word	0x08008b34
 8008078:	08008b45 	.word	0x08008b45
 800807c:	00000237 	.word	0x00000237
 8008080:	00000245 	.word	0x00000245

08008084 <__d2b>:
 8008084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008086:	2101      	movs	r1, #1
 8008088:	0016      	movs	r6, r2
 800808a:	001f      	movs	r7, r3
 800808c:	f7ff fcb6 	bl	80079fc <_Balloc>
 8008090:	1e04      	subs	r4, r0, #0
 8008092:	d105      	bne.n	80080a0 <__d2b+0x1c>
 8008094:	0022      	movs	r2, r4
 8008096:	4b25      	ldr	r3, [pc, #148]	@ (800812c <__d2b+0xa8>)
 8008098:	4825      	ldr	r0, [pc, #148]	@ (8008130 <__d2b+0xac>)
 800809a:	4926      	ldr	r1, [pc, #152]	@ (8008134 <__d2b+0xb0>)
 800809c:	f000 f920 	bl	80082e0 <__assert_func>
 80080a0:	033b      	lsls	r3, r7, #12
 80080a2:	007d      	lsls	r5, r7, #1
 80080a4:	0b1b      	lsrs	r3, r3, #12
 80080a6:	0d6d      	lsrs	r5, r5, #21
 80080a8:	d002      	beq.n	80080b0 <__d2b+0x2c>
 80080aa:	2280      	movs	r2, #128	@ 0x80
 80080ac:	0352      	lsls	r2, r2, #13
 80080ae:	4313      	orrs	r3, r2
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	d025      	beq.n	8008102 <__d2b+0x7e>
 80080b6:	4668      	mov	r0, sp
 80080b8:	9600      	str	r6, [sp, #0]
 80080ba:	f7ff fd6c 	bl	8007b96 <__lo0bits>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	9900      	ldr	r1, [sp, #0]
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d01b      	beq.n	80080fe <__d2b+0x7a>
 80080c6:	2220      	movs	r2, #32
 80080c8:	001e      	movs	r6, r3
 80080ca:	1a12      	subs	r2, r2, r0
 80080cc:	4096      	lsls	r6, r2
 80080ce:	0032      	movs	r2, r6
 80080d0:	40c3      	lsrs	r3, r0
 80080d2:	430a      	orrs	r2, r1
 80080d4:	6162      	str	r2, [r4, #20]
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	9e01      	ldr	r6, [sp, #4]
 80080da:	61a6      	str	r6, [r4, #24]
 80080dc:	1e73      	subs	r3, r6, #1
 80080de:	419e      	sbcs	r6, r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	6126      	str	r6, [r4, #16]
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	d014      	beq.n	8008112 <__d2b+0x8e>
 80080e8:	2635      	movs	r6, #53	@ 0x35
 80080ea:	4b13      	ldr	r3, [pc, #76]	@ (8008138 <__d2b+0xb4>)
 80080ec:	18ed      	adds	r5, r5, r3
 80080ee:	9b08      	ldr	r3, [sp, #32]
 80080f0:	182d      	adds	r5, r5, r0
 80080f2:	601d      	str	r5, [r3, #0]
 80080f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f6:	1a36      	subs	r6, r6, r0
 80080f8:	601e      	str	r6, [r3, #0]
 80080fa:	0020      	movs	r0, r4
 80080fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080fe:	6161      	str	r1, [r4, #20]
 8008100:	e7ea      	b.n	80080d8 <__d2b+0x54>
 8008102:	a801      	add	r0, sp, #4
 8008104:	f7ff fd47 	bl	8007b96 <__lo0bits>
 8008108:	9b01      	ldr	r3, [sp, #4]
 800810a:	2601      	movs	r6, #1
 800810c:	6163      	str	r3, [r4, #20]
 800810e:	3020      	adds	r0, #32
 8008110:	e7e7      	b.n	80080e2 <__d2b+0x5e>
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <__d2b+0xb8>)
 8008114:	18c0      	adds	r0, r0, r3
 8008116:	9b08      	ldr	r3, [sp, #32]
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <__d2b+0xbc>)
 800811c:	18f3      	adds	r3, r6, r3
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	18e3      	adds	r3, r4, r3
 8008122:	6958      	ldr	r0, [r3, #20]
 8008124:	f7ff fd16 	bl	8007b54 <__hi0bits>
 8008128:	0176      	lsls	r6, r6, #5
 800812a:	e7e3      	b.n	80080f4 <__d2b+0x70>
 800812c:	08008b34 	.word	0x08008b34
 8008130:	08008b45 	.word	0x08008b45
 8008134:	0000030f 	.word	0x0000030f
 8008138:	fffffbcd 	.word	0xfffffbcd
 800813c:	fffffbce 	.word	0xfffffbce
 8008140:	3fffffff 	.word	0x3fffffff

08008144 <__sflush_r>:
 8008144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008146:	220c      	movs	r2, #12
 8008148:	5e8b      	ldrsh	r3, [r1, r2]
 800814a:	0005      	movs	r5, r0
 800814c:	000c      	movs	r4, r1
 800814e:	071a      	lsls	r2, r3, #28
 8008150:	d456      	bmi.n	8008200 <__sflush_r+0xbc>
 8008152:	684a      	ldr	r2, [r1, #4]
 8008154:	2a00      	cmp	r2, #0
 8008156:	dc02      	bgt.n	800815e <__sflush_r+0x1a>
 8008158:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800815a:	2a00      	cmp	r2, #0
 800815c:	dd4e      	ble.n	80081fc <__sflush_r+0xb8>
 800815e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008160:	2f00      	cmp	r7, #0
 8008162:	d04b      	beq.n	80081fc <__sflush_r+0xb8>
 8008164:	2200      	movs	r2, #0
 8008166:	2080      	movs	r0, #128	@ 0x80
 8008168:	682e      	ldr	r6, [r5, #0]
 800816a:	602a      	str	r2, [r5, #0]
 800816c:	001a      	movs	r2, r3
 800816e:	0140      	lsls	r0, r0, #5
 8008170:	6a21      	ldr	r1, [r4, #32]
 8008172:	4002      	ands	r2, r0
 8008174:	4203      	tst	r3, r0
 8008176:	d033      	beq.n	80081e0 <__sflush_r+0x9c>
 8008178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	075b      	lsls	r3, r3, #29
 800817e:	d506      	bpl.n	800818e <__sflush_r+0x4a>
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <__sflush_r+0x4a>
 800818a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800818c:	1ad2      	subs	r2, r2, r3
 800818e:	2300      	movs	r3, #0
 8008190:	0028      	movs	r0, r5
 8008192:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008194:	6a21      	ldr	r1, [r4, #32]
 8008196:	47b8      	blx	r7
 8008198:	89a2      	ldrh	r2, [r4, #12]
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d106      	bne.n	80081ac <__sflush_r+0x68>
 800819e:	6829      	ldr	r1, [r5, #0]
 80081a0:	291d      	cmp	r1, #29
 80081a2:	d846      	bhi.n	8008232 <__sflush_r+0xee>
 80081a4:	4b29      	ldr	r3, [pc, #164]	@ (800824c <__sflush_r+0x108>)
 80081a6:	410b      	asrs	r3, r1
 80081a8:	07db      	lsls	r3, r3, #31
 80081aa:	d442      	bmi.n	8008232 <__sflush_r+0xee>
 80081ac:	2300      	movs	r3, #0
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	04d2      	lsls	r2, r2, #19
 80081b6:	d505      	bpl.n	80081c4 <__sflush_r+0x80>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <__sflush_r+0x7e>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d100      	bne.n	80081c4 <__sflush_r+0x80>
 80081c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80081c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081c6:	602e      	str	r6, [r5, #0]
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d017      	beq.n	80081fc <__sflush_r+0xb8>
 80081cc:	0023      	movs	r3, r4
 80081ce:	3344      	adds	r3, #68	@ 0x44
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <__sflush_r+0x96>
 80081d4:	0028      	movs	r0, r5
 80081d6:	f7ff fb0b 	bl	80077f0 <_free_r>
 80081da:	2300      	movs	r3, #0
 80081dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80081de:	e00d      	b.n	80081fc <__sflush_r+0xb8>
 80081e0:	2301      	movs	r3, #1
 80081e2:	0028      	movs	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	0002      	movs	r2, r0
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d1c6      	bne.n	800817a <__sflush_r+0x36>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0c3      	beq.n	800817a <__sflush_r+0x36>
 80081f2:	2b1d      	cmp	r3, #29
 80081f4:	d001      	beq.n	80081fa <__sflush_r+0xb6>
 80081f6:	2b16      	cmp	r3, #22
 80081f8:	d11a      	bne.n	8008230 <__sflush_r+0xec>
 80081fa:	602e      	str	r6, [r5, #0]
 80081fc:	2000      	movs	r0, #0
 80081fe:	e01e      	b.n	800823e <__sflush_r+0xfa>
 8008200:	690e      	ldr	r6, [r1, #16]
 8008202:	2e00      	cmp	r6, #0
 8008204:	d0fa      	beq.n	80081fc <__sflush_r+0xb8>
 8008206:	680f      	ldr	r7, [r1, #0]
 8008208:	600e      	str	r6, [r1, #0]
 800820a:	1bba      	subs	r2, r7, r6
 800820c:	9201      	str	r2, [sp, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	079b      	lsls	r3, r3, #30
 8008212:	d100      	bne.n	8008216 <__sflush_r+0xd2>
 8008214:	694a      	ldr	r2, [r1, #20]
 8008216:	60a2      	str	r2, [r4, #8]
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	ddee      	ble.n	80081fc <__sflush_r+0xb8>
 800821e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008220:	0032      	movs	r2, r6
 8008222:	001f      	movs	r7, r3
 8008224:	0028      	movs	r0, r5
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	47b8      	blx	r7
 800822c:	2800      	cmp	r0, #0
 800822e:	dc07      	bgt.n	8008240 <__sflush_r+0xfc>
 8008230:	89a2      	ldrh	r2, [r4, #12]
 8008232:	2340      	movs	r3, #64	@ 0x40
 8008234:	2001      	movs	r0, #1
 8008236:	4313      	orrs	r3, r2
 8008238:	b21b      	sxth	r3, r3
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	4240      	negs	r0, r0
 800823e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	1836      	adds	r6, r6, r0
 8008244:	1a1b      	subs	r3, r3, r0
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	e7e6      	b.n	8008218 <__sflush_r+0xd4>
 800824a:	46c0      	nop			@ (mov r8, r8)
 800824c:	dfbffffe 	.word	0xdfbffffe

08008250 <_fflush_r>:
 8008250:	690b      	ldr	r3, [r1, #16]
 8008252:	b570      	push	{r4, r5, r6, lr}
 8008254:	0005      	movs	r5, r0
 8008256:	000c      	movs	r4, r1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <_fflush_r+0x12>
 800825c:	2500      	movs	r5, #0
 800825e:	0028      	movs	r0, r5
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	2800      	cmp	r0, #0
 8008264:	d004      	beq.n	8008270 <_fflush_r+0x20>
 8008266:	6a03      	ldr	r3, [r0, #32]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <_fflush_r+0x20>
 800826c:	f7fe fb2c 	bl	80068c8 <__sinit>
 8008270:	220c      	movs	r2, #12
 8008272:	5ea3      	ldrsh	r3, [r4, r2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f1      	beq.n	800825c <_fflush_r+0xc>
 8008278:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800827a:	07d2      	lsls	r2, r2, #31
 800827c:	d404      	bmi.n	8008288 <_fflush_r+0x38>
 800827e:	059b      	lsls	r3, r3, #22
 8008280:	d402      	bmi.n	8008288 <_fflush_r+0x38>
 8008282:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008284:	f7fe fc25 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 8008288:	0028      	movs	r0, r5
 800828a:	0021      	movs	r1, r4
 800828c:	f7ff ff5a 	bl	8008144 <__sflush_r>
 8008290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008292:	0005      	movs	r5, r0
 8008294:	07db      	lsls	r3, r3, #31
 8008296:	d4e2      	bmi.n	800825e <_fflush_r+0xe>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	059b      	lsls	r3, r3, #22
 800829c:	d4df      	bmi.n	800825e <_fflush_r+0xe>
 800829e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082a0:	f7fe fc18 	bl	8006ad4 <__retarget_lock_release_recursive>
 80082a4:	e7db      	b.n	800825e <_fflush_r+0xe>
	...

080082a8 <_sbrk_r>:
 80082a8:	2300      	movs	r3, #0
 80082aa:	b570      	push	{r4, r5, r6, lr}
 80082ac:	4d06      	ldr	r5, [pc, #24]	@ (80082c8 <_sbrk_r+0x20>)
 80082ae:	0004      	movs	r4, r0
 80082b0:	0008      	movs	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7fa fe1e 	bl	8002ef4 <_sbrk>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d103      	bne.n	80082c4 <_sbrk_r+0x1c>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d000      	beq.n	80082c4 <_sbrk_r+0x1c>
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	200004dc 	.word	0x200004dc

080082cc <memcpy>:
 80082cc:	2300      	movs	r3, #0
 80082ce:	b510      	push	{r4, lr}
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d100      	bne.n	80082d6 <memcpy+0xa>
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	5ccc      	ldrb	r4, [r1, r3]
 80082d8:	54c4      	strb	r4, [r0, r3]
 80082da:	3301      	adds	r3, #1
 80082dc:	e7f8      	b.n	80082d0 <memcpy+0x4>
	...

080082e0 <__assert_func>:
 80082e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80082e2:	0014      	movs	r4, r2
 80082e4:	001a      	movs	r2, r3
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <__assert_func+0x2c>)
 80082e8:	0005      	movs	r5, r0
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	000e      	movs	r6, r1
 80082ee:	68d8      	ldr	r0, [r3, #12]
 80082f0:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <__assert_func+0x30>)
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d101      	bne.n	80082fa <__assert_func+0x1a>
 80082f6:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <__assert_func+0x34>)
 80082f8:	001c      	movs	r4, r3
 80082fa:	4907      	ldr	r1, [pc, #28]	@ (8008318 <__assert_func+0x38>)
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	9402      	str	r4, [sp, #8]
 8008300:	002b      	movs	r3, r5
 8008302:	9600      	str	r6, [sp, #0]
 8008304:	f000 f856 	bl	80083b4 <fiprintf>
 8008308:	f000 f864 	bl	80083d4 <abort>
 800830c:	20000030 	.word	0x20000030
 8008310:	08008caa 	.word	0x08008caa
 8008314:	08008ce5 	.word	0x08008ce5
 8008318:	08008cb7 	.word	0x08008cb7

0800831c <_calloc_r>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	0c0b      	lsrs	r3, r1, #16
 8008320:	0c15      	lsrs	r5, r2, #16
 8008322:	2b00      	cmp	r3, #0
 8008324:	d11e      	bne.n	8008364 <_calloc_r+0x48>
 8008326:	2d00      	cmp	r5, #0
 8008328:	d10c      	bne.n	8008344 <_calloc_r+0x28>
 800832a:	b289      	uxth	r1, r1
 800832c:	b294      	uxth	r4, r2
 800832e:	434c      	muls	r4, r1
 8008330:	0021      	movs	r1, r4
 8008332:	f7ff fad3 	bl	80078dc <_malloc_r>
 8008336:	1e05      	subs	r5, r0, #0
 8008338:	d01a      	beq.n	8008370 <_calloc_r+0x54>
 800833a:	0022      	movs	r2, r4
 800833c:	2100      	movs	r1, #0
 800833e:	f7fe fb43 	bl	80069c8 <memset>
 8008342:	e016      	b.n	8008372 <_calloc_r+0x56>
 8008344:	1c2b      	adds	r3, r5, #0
 8008346:	1c0c      	adds	r4, r1, #0
 8008348:	b289      	uxth	r1, r1
 800834a:	b292      	uxth	r2, r2
 800834c:	434a      	muls	r2, r1
 800834e:	b29b      	uxth	r3, r3
 8008350:	b2a1      	uxth	r1, r4
 8008352:	4359      	muls	r1, r3
 8008354:	0c14      	lsrs	r4, r2, #16
 8008356:	190c      	adds	r4, r1, r4
 8008358:	0c23      	lsrs	r3, r4, #16
 800835a:	d107      	bne.n	800836c <_calloc_r+0x50>
 800835c:	0424      	lsls	r4, r4, #16
 800835e:	b292      	uxth	r2, r2
 8008360:	4314      	orrs	r4, r2
 8008362:	e7e5      	b.n	8008330 <_calloc_r+0x14>
 8008364:	2d00      	cmp	r5, #0
 8008366:	d101      	bne.n	800836c <_calloc_r+0x50>
 8008368:	1c14      	adds	r4, r2, #0
 800836a:	e7ed      	b.n	8008348 <_calloc_r+0x2c>
 800836c:	230c      	movs	r3, #12
 800836e:	6003      	str	r3, [r0, #0]
 8008370:	2500      	movs	r5, #0
 8008372:	0028      	movs	r0, r5
 8008374:	bd70      	pop	{r4, r5, r6, pc}

08008376 <__ascii_mbtowc>:
 8008376:	b082      	sub	sp, #8
 8008378:	2900      	cmp	r1, #0
 800837a:	d100      	bne.n	800837e <__ascii_mbtowc+0x8>
 800837c:	a901      	add	r1, sp, #4
 800837e:	1e10      	subs	r0, r2, #0
 8008380:	d006      	beq.n	8008390 <__ascii_mbtowc+0x1a>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d006      	beq.n	8008394 <__ascii_mbtowc+0x1e>
 8008386:	7813      	ldrb	r3, [r2, #0]
 8008388:	600b      	str	r3, [r1, #0]
 800838a:	7810      	ldrb	r0, [r2, #0]
 800838c:	1e43      	subs	r3, r0, #1
 800838e:	4198      	sbcs	r0, r3
 8008390:	b002      	add	sp, #8
 8008392:	4770      	bx	lr
 8008394:	2002      	movs	r0, #2
 8008396:	4240      	negs	r0, r0
 8008398:	e7fa      	b.n	8008390 <__ascii_mbtowc+0x1a>

0800839a <__ascii_wctomb>:
 800839a:	0003      	movs	r3, r0
 800839c:	1e08      	subs	r0, r1, #0
 800839e:	d005      	beq.n	80083ac <__ascii_wctomb+0x12>
 80083a0:	2aff      	cmp	r2, #255	@ 0xff
 80083a2:	d904      	bls.n	80083ae <__ascii_wctomb+0x14>
 80083a4:	228a      	movs	r2, #138	@ 0x8a
 80083a6:	2001      	movs	r0, #1
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	4240      	negs	r0, r0
 80083ac:	4770      	bx	lr
 80083ae:	2001      	movs	r0, #1
 80083b0:	700a      	strb	r2, [r1, #0]
 80083b2:	e7fb      	b.n	80083ac <__ascii_wctomb+0x12>

080083b4 <fiprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	b517      	push	{r0, r1, r2, r4, lr}
 80083b8:	4c05      	ldr	r4, [pc, #20]	@ (80083d0 <fiprintf+0x1c>)
 80083ba:	ab05      	add	r3, sp, #20
 80083bc:	cb04      	ldmia	r3!, {r2}
 80083be:	0001      	movs	r1, r0
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	f000 f834 	bl	8008430 <_vfiprintf_r>
 80083c8:	bc1e      	pop	{r1, r2, r3, r4}
 80083ca:	bc08      	pop	{r3}
 80083cc:	b003      	add	sp, #12
 80083ce:	4718      	bx	r3
 80083d0:	20000030 	.word	0x20000030

080083d4 <abort>:
 80083d4:	2006      	movs	r0, #6
 80083d6:	b510      	push	{r4, lr}
 80083d8:	f000 fa10 	bl	80087fc <raise>
 80083dc:	2001      	movs	r0, #1
 80083de:	f7fa fd17 	bl	8002e10 <_exit>

080083e2 <__sfputc_r>:
 80083e2:	6893      	ldr	r3, [r2, #8]
 80083e4:	b510      	push	{r4, lr}
 80083e6:	3b01      	subs	r3, #1
 80083e8:	6093      	str	r3, [r2, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da04      	bge.n	80083f8 <__sfputc_r+0x16>
 80083ee:	6994      	ldr	r4, [r2, #24]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	db07      	blt.n	8008404 <__sfputc_r+0x22>
 80083f4:	290a      	cmp	r1, #10
 80083f6:	d005      	beq.n	8008404 <__sfputc_r+0x22>
 80083f8:	6813      	ldr	r3, [r2, #0]
 80083fa:	1c58      	adds	r0, r3, #1
 80083fc:	6010      	str	r0, [r2, #0]
 80083fe:	7019      	strb	r1, [r3, #0]
 8008400:	0008      	movs	r0, r1
 8008402:	bd10      	pop	{r4, pc}
 8008404:	f000 f930 	bl	8008668 <__swbuf_r>
 8008408:	0001      	movs	r1, r0
 800840a:	e7f9      	b.n	8008400 <__sfputc_r+0x1e>

0800840c <__sfputs_r>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	0006      	movs	r6, r0
 8008410:	000f      	movs	r7, r1
 8008412:	0014      	movs	r4, r2
 8008414:	18d5      	adds	r5, r2, r3
 8008416:	42ac      	cmp	r4, r5
 8008418:	d101      	bne.n	800841e <__sfputs_r+0x12>
 800841a:	2000      	movs	r0, #0
 800841c:	e007      	b.n	800842e <__sfputs_r+0x22>
 800841e:	7821      	ldrb	r1, [r4, #0]
 8008420:	003a      	movs	r2, r7
 8008422:	0030      	movs	r0, r6
 8008424:	f7ff ffdd 	bl	80083e2 <__sfputc_r>
 8008428:	3401      	adds	r4, #1
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d1f3      	bne.n	8008416 <__sfputs_r+0xa>
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008430 <_vfiprintf_r>:
 8008430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008432:	b0a1      	sub	sp, #132	@ 0x84
 8008434:	000f      	movs	r7, r1
 8008436:	0015      	movs	r5, r2
 8008438:	001e      	movs	r6, r3
 800843a:	9003      	str	r0, [sp, #12]
 800843c:	2800      	cmp	r0, #0
 800843e:	d004      	beq.n	800844a <_vfiprintf_r+0x1a>
 8008440:	6a03      	ldr	r3, [r0, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <_vfiprintf_r+0x1a>
 8008446:	f7fe fa3f 	bl	80068c8 <__sinit>
 800844a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800844c:	07db      	lsls	r3, r3, #31
 800844e:	d405      	bmi.n	800845c <_vfiprintf_r+0x2c>
 8008450:	89bb      	ldrh	r3, [r7, #12]
 8008452:	059b      	lsls	r3, r3, #22
 8008454:	d402      	bmi.n	800845c <_vfiprintf_r+0x2c>
 8008456:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008458:	f7fe fb3b 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 800845c:	89bb      	ldrh	r3, [r7, #12]
 800845e:	071b      	lsls	r3, r3, #28
 8008460:	d502      	bpl.n	8008468 <_vfiprintf_r+0x38>
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d113      	bne.n	8008490 <_vfiprintf_r+0x60>
 8008468:	0039      	movs	r1, r7
 800846a:	9803      	ldr	r0, [sp, #12]
 800846c:	f000 f93e 	bl	80086ec <__swsetup_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d00d      	beq.n	8008490 <_vfiprintf_r+0x60>
 8008474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d503      	bpl.n	8008482 <_vfiprintf_r+0x52>
 800847a:	2001      	movs	r0, #1
 800847c:	4240      	negs	r0, r0
 800847e:	b021      	add	sp, #132	@ 0x84
 8008480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008482:	89bb      	ldrh	r3, [r7, #12]
 8008484:	059b      	lsls	r3, r3, #22
 8008486:	d4f8      	bmi.n	800847a <_vfiprintf_r+0x4a>
 8008488:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800848a:	f7fe fb23 	bl	8006ad4 <__retarget_lock_release_recursive>
 800848e:	e7f4      	b.n	800847a <_vfiprintf_r+0x4a>
 8008490:	2300      	movs	r3, #0
 8008492:	ac08      	add	r4, sp, #32
 8008494:	6163      	str	r3, [r4, #20]
 8008496:	3320      	adds	r3, #32
 8008498:	7663      	strb	r3, [r4, #25]
 800849a:	3310      	adds	r3, #16
 800849c:	76a3      	strb	r3, [r4, #26]
 800849e:	9607      	str	r6, [sp, #28]
 80084a0:	002e      	movs	r6, r5
 80084a2:	7833      	ldrb	r3, [r6, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <_vfiprintf_r+0x7c>
 80084a8:	2b25      	cmp	r3, #37	@ 0x25
 80084aa:	d148      	bne.n	800853e <_vfiprintf_r+0x10e>
 80084ac:	1b73      	subs	r3, r6, r5
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	42ae      	cmp	r6, r5
 80084b2:	d00b      	beq.n	80084cc <_vfiprintf_r+0x9c>
 80084b4:	002a      	movs	r2, r5
 80084b6:	0039      	movs	r1, r7
 80084b8:	9803      	ldr	r0, [sp, #12]
 80084ba:	f7ff ffa7 	bl	800840c <__sfputs_r>
 80084be:	3001      	adds	r0, #1
 80084c0:	d100      	bne.n	80084c4 <_vfiprintf_r+0x94>
 80084c2:	e0ae      	b.n	8008622 <_vfiprintf_r+0x1f2>
 80084c4:	6963      	ldr	r3, [r4, #20]
 80084c6:	9a05      	ldr	r2, [sp, #20]
 80084c8:	189b      	adds	r3, r3, r2
 80084ca:	6163      	str	r3, [r4, #20]
 80084cc:	7833      	ldrb	r3, [r6, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d100      	bne.n	80084d4 <_vfiprintf_r+0xa4>
 80084d2:	e0a6      	b.n	8008622 <_vfiprintf_r+0x1f2>
 80084d4:	2201      	movs	r2, #1
 80084d6:	2300      	movs	r3, #0
 80084d8:	4252      	negs	r2, r2
 80084da:	6062      	str	r2, [r4, #4]
 80084dc:	a904      	add	r1, sp, #16
 80084de:	3254      	adds	r2, #84	@ 0x54
 80084e0:	1852      	adds	r2, r2, r1
 80084e2:	1c75      	adds	r5, r6, #1
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	60e3      	str	r3, [r4, #12]
 80084e8:	60a3      	str	r3, [r4, #8]
 80084ea:	7013      	strb	r3, [r2, #0]
 80084ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80084ee:	4b59      	ldr	r3, [pc, #356]	@ (8008654 <_vfiprintf_r+0x224>)
 80084f0:	2205      	movs	r2, #5
 80084f2:	0018      	movs	r0, r3
 80084f4:	7829      	ldrb	r1, [r5, #0]
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	f7fe faed 	bl	8006ad6 <memchr>
 80084fc:	1c6e      	adds	r6, r5, #1
 80084fe:	2800      	cmp	r0, #0
 8008500:	d11f      	bne.n	8008542 <_vfiprintf_r+0x112>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	06d3      	lsls	r3, r2, #27
 8008506:	d504      	bpl.n	8008512 <_vfiprintf_r+0xe2>
 8008508:	2353      	movs	r3, #83	@ 0x53
 800850a:	a904      	add	r1, sp, #16
 800850c:	185b      	adds	r3, r3, r1
 800850e:	2120      	movs	r1, #32
 8008510:	7019      	strb	r1, [r3, #0]
 8008512:	0713      	lsls	r3, r2, #28
 8008514:	d504      	bpl.n	8008520 <_vfiprintf_r+0xf0>
 8008516:	2353      	movs	r3, #83	@ 0x53
 8008518:	a904      	add	r1, sp, #16
 800851a:	185b      	adds	r3, r3, r1
 800851c:	212b      	movs	r1, #43	@ 0x2b
 800851e:	7019      	strb	r1, [r3, #0]
 8008520:	782b      	ldrb	r3, [r5, #0]
 8008522:	2b2a      	cmp	r3, #42	@ 0x2a
 8008524:	d016      	beq.n	8008554 <_vfiprintf_r+0x124>
 8008526:	002e      	movs	r6, r5
 8008528:	2100      	movs	r1, #0
 800852a:	200a      	movs	r0, #10
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	7832      	ldrb	r2, [r6, #0]
 8008530:	1c75      	adds	r5, r6, #1
 8008532:	3a30      	subs	r2, #48	@ 0x30
 8008534:	2a09      	cmp	r2, #9
 8008536:	d950      	bls.n	80085da <_vfiprintf_r+0x1aa>
 8008538:	2900      	cmp	r1, #0
 800853a:	d111      	bne.n	8008560 <_vfiprintf_r+0x130>
 800853c:	e017      	b.n	800856e <_vfiprintf_r+0x13e>
 800853e:	3601      	adds	r6, #1
 8008540:	e7af      	b.n	80084a2 <_vfiprintf_r+0x72>
 8008542:	9b05      	ldr	r3, [sp, #20]
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	1ac0      	subs	r0, r0, r3
 8008548:	2301      	movs	r3, #1
 800854a:	4083      	lsls	r3, r0
 800854c:	4313      	orrs	r3, r2
 800854e:	0035      	movs	r5, r6
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	e7cc      	b.n	80084ee <_vfiprintf_r+0xbe>
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9107      	str	r1, [sp, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	db01      	blt.n	8008564 <_vfiprintf_r+0x134>
 8008560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008562:	e004      	b.n	800856e <_vfiprintf_r+0x13e>
 8008564:	425b      	negs	r3, r3
 8008566:	60e3      	str	r3, [r4, #12]
 8008568:	2302      	movs	r3, #2
 800856a:	4313      	orrs	r3, r2
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	7833      	ldrb	r3, [r6, #0]
 8008570:	2b2e      	cmp	r3, #46	@ 0x2e
 8008572:	d10c      	bne.n	800858e <_vfiprintf_r+0x15e>
 8008574:	7873      	ldrb	r3, [r6, #1]
 8008576:	2b2a      	cmp	r3, #42	@ 0x2a
 8008578:	d134      	bne.n	80085e4 <_vfiprintf_r+0x1b4>
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	3602      	adds	r6, #2
 800857e:	1d1a      	adds	r2, r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9207      	str	r2, [sp, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	da01      	bge.n	800858c <_vfiprintf_r+0x15c>
 8008588:	2301      	movs	r3, #1
 800858a:	425b      	negs	r3, r3
 800858c:	9309      	str	r3, [sp, #36]	@ 0x24
 800858e:	4d32      	ldr	r5, [pc, #200]	@ (8008658 <_vfiprintf_r+0x228>)
 8008590:	2203      	movs	r2, #3
 8008592:	0028      	movs	r0, r5
 8008594:	7831      	ldrb	r1, [r6, #0]
 8008596:	f7fe fa9e 	bl	8006ad6 <memchr>
 800859a:	2800      	cmp	r0, #0
 800859c:	d006      	beq.n	80085ac <_vfiprintf_r+0x17c>
 800859e:	2340      	movs	r3, #64	@ 0x40
 80085a0:	1b40      	subs	r0, r0, r5
 80085a2:	4083      	lsls	r3, r0
 80085a4:	6822      	ldr	r2, [r4, #0]
 80085a6:	3601      	adds	r6, #1
 80085a8:	4313      	orrs	r3, r2
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	7831      	ldrb	r1, [r6, #0]
 80085ae:	2206      	movs	r2, #6
 80085b0:	482a      	ldr	r0, [pc, #168]	@ (800865c <_vfiprintf_r+0x22c>)
 80085b2:	1c75      	adds	r5, r6, #1
 80085b4:	7621      	strb	r1, [r4, #24]
 80085b6:	f7fe fa8e 	bl	8006ad6 <memchr>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d040      	beq.n	8008640 <_vfiprintf_r+0x210>
 80085be:	4b28      	ldr	r3, [pc, #160]	@ (8008660 <_vfiprintf_r+0x230>)
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d122      	bne.n	800860a <_vfiprintf_r+0x1da>
 80085c4:	2207      	movs	r2, #7
 80085c6:	9b07      	ldr	r3, [sp, #28]
 80085c8:	3307      	adds	r3, #7
 80085ca:	4393      	bics	r3, r2
 80085cc:	3308      	adds	r3, #8
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	6963      	ldr	r3, [r4, #20]
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	189b      	adds	r3, r3, r2
 80085d6:	6163      	str	r3, [r4, #20]
 80085d8:	e762      	b.n	80084a0 <_vfiprintf_r+0x70>
 80085da:	4343      	muls	r3, r0
 80085dc:	002e      	movs	r6, r5
 80085de:	2101      	movs	r1, #1
 80085e0:	189b      	adds	r3, r3, r2
 80085e2:	e7a4      	b.n	800852e <_vfiprintf_r+0xfe>
 80085e4:	2300      	movs	r3, #0
 80085e6:	200a      	movs	r0, #10
 80085e8:	0019      	movs	r1, r3
 80085ea:	3601      	adds	r6, #1
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	7832      	ldrb	r2, [r6, #0]
 80085f0:	1c75      	adds	r5, r6, #1
 80085f2:	3a30      	subs	r2, #48	@ 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d903      	bls.n	8008600 <_vfiprintf_r+0x1d0>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c8      	beq.n	800858e <_vfiprintf_r+0x15e>
 80085fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80085fe:	e7c6      	b.n	800858e <_vfiprintf_r+0x15e>
 8008600:	4341      	muls	r1, r0
 8008602:	002e      	movs	r6, r5
 8008604:	2301      	movs	r3, #1
 8008606:	1889      	adds	r1, r1, r2
 8008608:	e7f1      	b.n	80085ee <_vfiprintf_r+0x1be>
 800860a:	aa07      	add	r2, sp, #28
 800860c:	9200      	str	r2, [sp, #0]
 800860e:	0021      	movs	r1, r4
 8008610:	003a      	movs	r2, r7
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <_vfiprintf_r+0x234>)
 8008614:	9803      	ldr	r0, [sp, #12]
 8008616:	f7fd fd0b 	bl	8006030 <_printf_float>
 800861a:	9004      	str	r0, [sp, #16]
 800861c:	9b04      	ldr	r3, [sp, #16]
 800861e:	3301      	adds	r3, #1
 8008620:	d1d6      	bne.n	80085d0 <_vfiprintf_r+0x1a0>
 8008622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008624:	07db      	lsls	r3, r3, #31
 8008626:	d405      	bmi.n	8008634 <_vfiprintf_r+0x204>
 8008628:	89bb      	ldrh	r3, [r7, #12]
 800862a:	059b      	lsls	r3, r3, #22
 800862c:	d402      	bmi.n	8008634 <_vfiprintf_r+0x204>
 800862e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008630:	f7fe fa50 	bl	8006ad4 <__retarget_lock_release_recursive>
 8008634:	89bb      	ldrh	r3, [r7, #12]
 8008636:	065b      	lsls	r3, r3, #25
 8008638:	d500      	bpl.n	800863c <_vfiprintf_r+0x20c>
 800863a:	e71e      	b.n	800847a <_vfiprintf_r+0x4a>
 800863c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800863e:	e71e      	b.n	800847e <_vfiprintf_r+0x4e>
 8008640:	aa07      	add	r2, sp, #28
 8008642:	9200      	str	r2, [sp, #0]
 8008644:	0021      	movs	r1, r4
 8008646:	003a      	movs	r2, r7
 8008648:	4b06      	ldr	r3, [pc, #24]	@ (8008664 <_vfiprintf_r+0x234>)
 800864a:	9803      	ldr	r0, [sp, #12]
 800864c:	f7fd ff9e 	bl	800658c <_printf_i>
 8008650:	e7e3      	b.n	800861a <_vfiprintf_r+0x1ea>
 8008652:	46c0      	nop			@ (mov r8, r8)
 8008654:	08008de7 	.word	0x08008de7
 8008658:	08008ded 	.word	0x08008ded
 800865c:	08008df1 	.word	0x08008df1
 8008660:	08006031 	.word	0x08006031
 8008664:	0800840d 	.word	0x0800840d

08008668 <__swbuf_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	0006      	movs	r6, r0
 800866c:	000d      	movs	r5, r1
 800866e:	0014      	movs	r4, r2
 8008670:	2800      	cmp	r0, #0
 8008672:	d004      	beq.n	800867e <__swbuf_r+0x16>
 8008674:	6a03      	ldr	r3, [r0, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <__swbuf_r+0x16>
 800867a:	f7fe f925 	bl	80068c8 <__sinit>
 800867e:	69a3      	ldr	r3, [r4, #24]
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	071b      	lsls	r3, r3, #28
 8008686:	d502      	bpl.n	800868e <__swbuf_r+0x26>
 8008688:	6923      	ldr	r3, [r4, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <__swbuf_r+0x3a>
 800868e:	0021      	movs	r1, r4
 8008690:	0030      	movs	r0, r6
 8008692:	f000 f82b 	bl	80086ec <__swsetup_r>
 8008696:	2800      	cmp	r0, #0
 8008698:	d003      	beq.n	80086a2 <__swbuf_r+0x3a>
 800869a:	2501      	movs	r5, #1
 800869c:	426d      	negs	r5, r5
 800869e:	0028      	movs	r0, r5
 80086a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	b2ef      	uxtb	r7, r5
 80086a8:	1ac0      	subs	r0, r0, r3
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	b2ed      	uxtb	r5, r5
 80086ae:	4283      	cmp	r3, r0
 80086b0:	dc05      	bgt.n	80086be <__swbuf_r+0x56>
 80086b2:	0021      	movs	r1, r4
 80086b4:	0030      	movs	r0, r6
 80086b6:	f7ff fdcb 	bl	8008250 <_fflush_r>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d1ed      	bne.n	800869a <__swbuf_r+0x32>
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	3001      	adds	r0, #1
 80086c2:	3b01      	subs	r3, #1
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	701f      	strb	r7, [r3, #0]
 80086ce:	6963      	ldr	r3, [r4, #20]
 80086d0:	4283      	cmp	r3, r0
 80086d2:	d004      	beq.n	80086de <__swbuf_r+0x76>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d5e1      	bpl.n	800869e <__swbuf_r+0x36>
 80086da:	2d0a      	cmp	r5, #10
 80086dc:	d1df      	bne.n	800869e <__swbuf_r+0x36>
 80086de:	0021      	movs	r1, r4
 80086e0:	0030      	movs	r0, r6
 80086e2:	f7ff fdb5 	bl	8008250 <_fflush_r>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0d9      	beq.n	800869e <__swbuf_r+0x36>
 80086ea:	e7d6      	b.n	800869a <__swbuf_r+0x32>

080086ec <__swsetup_r>:
 80086ec:	4b2d      	ldr	r3, [pc, #180]	@ (80087a4 <__swsetup_r+0xb8>)
 80086ee:	b570      	push	{r4, r5, r6, lr}
 80086f0:	0005      	movs	r5, r0
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	000c      	movs	r4, r1
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d004      	beq.n	8008704 <__swsetup_r+0x18>
 80086fa:	6a03      	ldr	r3, [r0, #32]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <__swsetup_r+0x18>
 8008700:	f7fe f8e2 	bl	80068c8 <__sinit>
 8008704:	230c      	movs	r3, #12
 8008706:	5ee2      	ldrsh	r2, [r4, r3]
 8008708:	0713      	lsls	r3, r2, #28
 800870a:	d423      	bmi.n	8008754 <__swsetup_r+0x68>
 800870c:	06d3      	lsls	r3, r2, #27
 800870e:	d407      	bmi.n	8008720 <__swsetup_r+0x34>
 8008710:	2309      	movs	r3, #9
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	2340      	movs	r3, #64	@ 0x40
 8008716:	2001      	movs	r0, #1
 8008718:	4313      	orrs	r3, r2
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	4240      	negs	r0, r0
 800871e:	e03a      	b.n	8008796 <__swsetup_r+0xaa>
 8008720:	0752      	lsls	r2, r2, #29
 8008722:	d513      	bpl.n	800874c <__swsetup_r+0x60>
 8008724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008726:	2900      	cmp	r1, #0
 8008728:	d008      	beq.n	800873c <__swsetup_r+0x50>
 800872a:	0023      	movs	r3, r4
 800872c:	3344      	adds	r3, #68	@ 0x44
 800872e:	4299      	cmp	r1, r3
 8008730:	d002      	beq.n	8008738 <__swsetup_r+0x4c>
 8008732:	0028      	movs	r0, r5
 8008734:	f7ff f85c 	bl	80077f0 <_free_r>
 8008738:	2300      	movs	r3, #0
 800873a:	6363      	str	r3, [r4, #52]	@ 0x34
 800873c:	2224      	movs	r2, #36	@ 0x24
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	4393      	bics	r3, r2
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	2300      	movs	r3, #0
 8008746:	6063      	str	r3, [r4, #4]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	2308      	movs	r3, #8
 800874e:	89a2      	ldrh	r2, [r4, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <__swsetup_r+0x86>
 800875a:	21a0      	movs	r1, #160	@ 0xa0
 800875c:	2280      	movs	r2, #128	@ 0x80
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	0089      	lsls	r1, r1, #2
 8008762:	0092      	lsls	r2, r2, #2
 8008764:	400b      	ands	r3, r1
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <__swsetup_r+0x86>
 800876a:	0021      	movs	r1, r4
 800876c:	0028      	movs	r0, r5
 800876e:	f000 f88f 	bl	8008890 <__smakebuf_r>
 8008772:	230c      	movs	r3, #12
 8008774:	5ee2      	ldrsh	r2, [r4, r3]
 8008776:	2101      	movs	r1, #1
 8008778:	0013      	movs	r3, r2
 800877a:	400b      	ands	r3, r1
 800877c:	420a      	tst	r2, r1
 800877e:	d00b      	beq.n	8008798 <__swsetup_r+0xac>
 8008780:	2300      	movs	r3, #0
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	6963      	ldr	r3, [r4, #20]
 8008786:	425b      	negs	r3, r3
 8008788:	61a3      	str	r3, [r4, #24]
 800878a:	2000      	movs	r0, #0
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	4283      	cmp	r3, r0
 8008790:	d101      	bne.n	8008796 <__swsetup_r+0xaa>
 8008792:	0613      	lsls	r3, r2, #24
 8008794:	d4be      	bmi.n	8008714 <__swsetup_r+0x28>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	0791      	lsls	r1, r2, #30
 800879a:	d400      	bmi.n	800879e <__swsetup_r+0xb2>
 800879c:	6963      	ldr	r3, [r4, #20]
 800879e:	60a3      	str	r3, [r4, #8]
 80087a0:	e7f3      	b.n	800878a <__swsetup_r+0x9e>
 80087a2:	46c0      	nop			@ (mov r8, r8)
 80087a4:	20000030 	.word	0x20000030

080087a8 <_raise_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	0004      	movs	r4, r0
 80087ac:	000d      	movs	r5, r1
 80087ae:	291f      	cmp	r1, #31
 80087b0:	d904      	bls.n	80087bc <_raise_r+0x14>
 80087b2:	2316      	movs	r3, #22
 80087b4:	6003      	str	r3, [r0, #0]
 80087b6:	2001      	movs	r0, #1
 80087b8:	4240      	negs	r0, r0
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <_raise_r+0x24>
 80087c2:	008a      	lsls	r2, r1, #2
 80087c4:	189b      	adds	r3, r3, r2
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	d108      	bne.n	80087de <_raise_r+0x36>
 80087cc:	0020      	movs	r0, r4
 80087ce:	f000 f831 	bl	8008834 <_getpid_r>
 80087d2:	002a      	movs	r2, r5
 80087d4:	0001      	movs	r1, r0
 80087d6:	0020      	movs	r0, r4
 80087d8:	f000 f81a 	bl	8008810 <_kill_r>
 80087dc:	e7ed      	b.n	80087ba <_raise_r+0x12>
 80087de:	2a01      	cmp	r2, #1
 80087e0:	d009      	beq.n	80087f6 <_raise_r+0x4e>
 80087e2:	1c51      	adds	r1, r2, #1
 80087e4:	d103      	bne.n	80087ee <_raise_r+0x46>
 80087e6:	2316      	movs	r3, #22
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	2001      	movs	r0, #1
 80087ec:	e7e5      	b.n	80087ba <_raise_r+0x12>
 80087ee:	2100      	movs	r1, #0
 80087f0:	0028      	movs	r0, r5
 80087f2:	6019      	str	r1, [r3, #0]
 80087f4:	4790      	blx	r2
 80087f6:	2000      	movs	r0, #0
 80087f8:	e7df      	b.n	80087ba <_raise_r+0x12>
	...

080087fc <raise>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	4b03      	ldr	r3, [pc, #12]	@ (800880c <raise+0x10>)
 8008800:	0001      	movs	r1, r0
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f7ff ffd0 	bl	80087a8 <_raise_r>
 8008808:	bd10      	pop	{r4, pc}
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	20000030 	.word	0x20000030

08008810 <_kill_r>:
 8008810:	2300      	movs	r3, #0
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	4d06      	ldr	r5, [pc, #24]	@ (8008830 <_kill_r+0x20>)
 8008816:	0004      	movs	r4, r0
 8008818:	0008      	movs	r0, r1
 800881a:	0011      	movs	r1, r2
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f7fa fae7 	bl	8002df0 <_kill>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d103      	bne.n	800882e <_kill_r+0x1e>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d000      	beq.n	800882e <_kill_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	200004dc 	.word	0x200004dc

08008834 <_getpid_r>:
 8008834:	b510      	push	{r4, lr}
 8008836:	f7fa fad5 	bl	8002de4 <_getpid>
 800883a:	bd10      	pop	{r4, pc}

0800883c <__swhatbuf_r>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	000e      	movs	r6, r1
 8008840:	001d      	movs	r5, r3
 8008842:	230e      	movs	r3, #14
 8008844:	5ec9      	ldrsh	r1, [r1, r3]
 8008846:	0014      	movs	r4, r2
 8008848:	b096      	sub	sp, #88	@ 0x58
 800884a:	2900      	cmp	r1, #0
 800884c:	da0c      	bge.n	8008868 <__swhatbuf_r+0x2c>
 800884e:	89b2      	ldrh	r2, [r6, #12]
 8008850:	2380      	movs	r3, #128	@ 0x80
 8008852:	0011      	movs	r1, r2
 8008854:	4019      	ands	r1, r3
 8008856:	421a      	tst	r2, r3
 8008858:	d114      	bne.n	8008884 <__swhatbuf_r+0x48>
 800885a:	2380      	movs	r3, #128	@ 0x80
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	2000      	movs	r0, #0
 8008860:	6029      	str	r1, [r5, #0]
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	b016      	add	sp, #88	@ 0x58
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	466a      	mov	r2, sp
 800886a:	f000 f853 	bl	8008914 <_fstat_r>
 800886e:	2800      	cmp	r0, #0
 8008870:	dbed      	blt.n	800884e <__swhatbuf_r+0x12>
 8008872:	23f0      	movs	r3, #240	@ 0xf0
 8008874:	9901      	ldr	r1, [sp, #4]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	4019      	ands	r1, r3
 800887a:	4b04      	ldr	r3, [pc, #16]	@ (800888c <__swhatbuf_r+0x50>)
 800887c:	18c9      	adds	r1, r1, r3
 800887e:	424b      	negs	r3, r1
 8008880:	4159      	adcs	r1, r3
 8008882:	e7ea      	b.n	800885a <__swhatbuf_r+0x1e>
 8008884:	2100      	movs	r1, #0
 8008886:	2340      	movs	r3, #64	@ 0x40
 8008888:	e7e9      	b.n	800885e <__swhatbuf_r+0x22>
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	ffffe000 	.word	0xffffe000

08008890 <__smakebuf_r>:
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008892:	2602      	movs	r6, #2
 8008894:	898b      	ldrh	r3, [r1, #12]
 8008896:	0005      	movs	r5, r0
 8008898:	000c      	movs	r4, r1
 800889a:	b085      	sub	sp, #20
 800889c:	4233      	tst	r3, r6
 800889e:	d007      	beq.n	80088b0 <__smakebuf_r+0x20>
 80088a0:	0023      	movs	r3, r4
 80088a2:	3347      	adds	r3, #71	@ 0x47
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	2301      	movs	r3, #1
 80088aa:	6163      	str	r3, [r4, #20]
 80088ac:	b005      	add	sp, #20
 80088ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b0:	ab03      	add	r3, sp, #12
 80088b2:	aa02      	add	r2, sp, #8
 80088b4:	f7ff ffc2 	bl	800883c <__swhatbuf_r>
 80088b8:	9f02      	ldr	r7, [sp, #8]
 80088ba:	9001      	str	r0, [sp, #4]
 80088bc:	0039      	movs	r1, r7
 80088be:	0028      	movs	r0, r5
 80088c0:	f7ff f80c 	bl	80078dc <_malloc_r>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d108      	bne.n	80088da <__smakebuf_r+0x4a>
 80088c8:	220c      	movs	r2, #12
 80088ca:	5ea3      	ldrsh	r3, [r4, r2]
 80088cc:	059a      	lsls	r2, r3, #22
 80088ce:	d4ed      	bmi.n	80088ac <__smakebuf_r+0x1c>
 80088d0:	2203      	movs	r2, #3
 80088d2:	4393      	bics	r3, r2
 80088d4:	431e      	orrs	r6, r3
 80088d6:	81a6      	strh	r6, [r4, #12]
 80088d8:	e7e2      	b.n	80088a0 <__smakebuf_r+0x10>
 80088da:	2380      	movs	r3, #128	@ 0x80
 80088dc:	89a2      	ldrh	r2, [r4, #12]
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	6120      	str	r0, [r4, #16]
 80088e8:	6167      	str	r7, [r4, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <__smakebuf_r+0x78>
 80088ee:	0028      	movs	r0, r5
 80088f0:	230e      	movs	r3, #14
 80088f2:	5ee1      	ldrsh	r1, [r4, r3]
 80088f4:	f000 f820 	bl	8008938 <_isatty_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d005      	beq.n	8008908 <__smakebuf_r+0x78>
 80088fc:	2303      	movs	r3, #3
 80088fe:	89a2      	ldrh	r2, [r4, #12]
 8008900:	439a      	bics	r2, r3
 8008902:	3b02      	subs	r3, #2
 8008904:	4313      	orrs	r3, r2
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	4313      	orrs	r3, r2
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	e7cc      	b.n	80088ac <__smakebuf_r+0x1c>
	...

08008914 <_fstat_r>:
 8008914:	2300      	movs	r3, #0
 8008916:	b570      	push	{r4, r5, r6, lr}
 8008918:	4d06      	ldr	r5, [pc, #24]	@ (8008934 <_fstat_r+0x20>)
 800891a:	0004      	movs	r4, r0
 800891c:	0008      	movs	r0, r1
 800891e:	0011      	movs	r1, r2
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	f7fa fac5 	bl	8002eb0 <_fstat>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d103      	bne.n	8008932 <_fstat_r+0x1e>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d000      	beq.n	8008932 <_fstat_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	200004dc 	.word	0x200004dc

08008938 <_isatty_r>:
 8008938:	2300      	movs	r3, #0
 800893a:	b570      	push	{r4, r5, r6, lr}
 800893c:	4d06      	ldr	r5, [pc, #24]	@ (8008958 <_isatty_r+0x20>)
 800893e:	0004      	movs	r4, r0
 8008940:	0008      	movs	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7fa fac2 	bl	8002ecc <_isatty>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d103      	bne.n	8008954 <_isatty_r+0x1c>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d000      	beq.n	8008954 <_isatty_r+0x1c>
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	200004dc 	.word	0x200004dc

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	46c0      	nop			@ (mov r8, r8)
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	46c0      	nop			@ (mov r8, r8)
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
